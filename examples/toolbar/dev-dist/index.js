 (() => new EventSource("/esbuild").onmessage = () => location.reload())();
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod2) => function __require() {
  return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
  mod2
));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e5) {
        reject(e5);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e5) {
        reject(e5);
      }
    };
    var step = (x6) => x6.done ? resolve(x6.value) : Promise.resolve(x6.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports2, module2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.2.0";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          // Used to reproduce behavior of `batchedUpdates` in legacy mode.
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function(publicInstance) {
            return false;
          },
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a5) {
          return isArrayImpl(a5);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e5) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x6) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i8 = 0; i8 < childrenLength; i8++) {
              childArray[i8] = arguments[i8 + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i8 = 0; i8 < childrenLength; i8++) {
              childArray[i8] = arguments[i8 + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c8) {
                return c8;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                  (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                    // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                    // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey("" + mappedChild.key) + "/"
                  ) : "") + childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i8 = 0; i8 < children.length; i8++) {
              child = children[i8];
              nextName = nextNamePrefix + getElementKey(child, i8);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n11 = 0;
          mapChildren(children, function() {
            n11++;
          });
          return n11;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType2 = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType2, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType2, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType2, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType2;
        }
        function forwardRef(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render.name && !render.displayName) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare2) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare2 === void 0 ? null : compare2
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState6(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect4(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x6) {
                var match = x6.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x6) {
                  control = x6;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x6) {
                  control = x6;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x6) {
                control = x6;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s7 = sampleLines.length - 1;
              var c8 = controlLines.length - 1;
              while (s7 >= 1 && c8 >= 0 && sampleLines[s7] !== controlLines[c8]) {
                c8--;
              }
              for (; s7 >= 1 && c8 >= 0; s7--, c8--) {
                if (sampleLines[s7] !== controlLines[c8]) {
                  if (s7 !== 1 || c8 !== 1) {
                    do {
                      s7--;
                      c8--;
                      if (c8 < 0 || sampleLines[s7] !== controlLines[c8]) {
                        var _frame = "\n" + sampleLines[s7].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s7 >= 1 && c8 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x6) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i8 = 0; i8 < node.length; i8++) {
              var child = node[i8];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i8 = 0; i8 < keys.length; i8++) {
              var key = keys[i8];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i8 = 2; i8 < arguments.length; i8++) {
              validateChildKeys(arguments[i8], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i8 = 2; i8 < arguments.length; i8++) {
            validateChildKeys(arguments[i8], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module2 && module2[requireString];
              enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i8 = 0;
              try {
                for (; i8 < queue.length; i8++) {
                  var callback = queue[i8];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i8 + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports2.Children = Children;
        exports2.Component = Component;
        exports2.Fragment = REACT_FRAGMENT_TYPE;
        exports2.Profiler = REACT_PROFILER_TYPE;
        exports2.PureComponent = PureComponent;
        exports2.StrictMode = REACT_STRICT_MODE_TYPE;
        exports2.Suspense = REACT_SUSPENSE_TYPE;
        exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports2.cloneElement = cloneElement$1;
        exports2.createContext = createContext;
        exports2.createElement = createElement$1;
        exports2.createFactory = createFactory;
        exports2.createRef = createRef;
        exports2.forwardRef = forwardRef;
        exports2.isValidElement = isValidElement;
        exports2.lazy = lazy;
        exports2.memo = memo;
        exports2.startTransition = startTransition;
        exports2.unstable_act = act;
        exports2.useCallback = useCallback;
        exports2.useContext = useContext;
        exports2.useDebugValue = useDebugValue;
        exports2.useDeferredValue = useDeferredValue;
        exports2.useEffect = useEffect4;
        exports2.useId = useId;
        exports2.useImperativeHandle = useImperativeHandle;
        exports2.useInsertionEffect = useInsertionEffect;
        exports2.useLayoutEffect = useLayoutEffect;
        exports2.useMemo = useMemo;
        exports2.useReducer = useReducer;
        exports2.useRef = useRef;
        exports2.useState = useState6;
        exports2.useSyncExternalStore = useSyncExternalStore;
        exports2.useTransition = useTransition;
        exports2.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports2, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_development();
    }
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first = heap[0];
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        }
        function siftUp(heap, node, i8) {
          var index = i8;
          while (index > 0) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare2(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i8) {
          var index = i8;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index < halfLength) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (compare2(left, node) < 0) {
              if (rightIndex < length && compare2(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (rightIndex < length && compare2(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare2(a5, b9) {
          var diff = a5.sortIndex - b9.sortIndex;
          return diff !== 0 ? diff : a5.id - b9.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports2.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports2.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports2.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports2.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports2.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports2.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports2.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports2.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports2.unstable_IdlePriority = IdlePriority;
        exports2.unstable_ImmediatePriority = ImmediatePriority;
        exports2.unstable_LowPriority = LowPriority;
        exports2.unstable_NormalPriority = NormalPriority;
        exports2.unstable_Profiling = unstable_Profiling;
        exports2.unstable_UserBlockingPriority = UserBlockingPriority;
        exports2.unstable_cancelCallback = unstable_cancelCallback;
        exports2.unstable_continueExecution = unstable_continueExecution;
        exports2.unstable_forceFrameRate = forceFrameRate;
        exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports2.unstable_next = unstable_next;
        exports2.unstable_pauseExecution = unstable_pauseExecution;
        exports2.unstable_requestPaint = unstable_requestPaint;
        exports2.unstable_runWithPriority = unstable_runWithPriority;
        exports2.unstable_scheduleCallback = unstable_scheduleCallback;
        exports2.unstable_shouldYield = shouldYieldToHost;
        exports2.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports2, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_scheduler_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React10 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React10.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = false;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i8 = 0; i8 < dependencies.length; i8++) {
            allNativeEvents.add(dependencies[i8]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e5) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          // TODO: This prevents the assignment of defaultValue to regular
          // elements (not just inputs). Now that ReactDOMInput assigns to the
          // defaultValue property -- do we need this?
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            RESERVED,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "allowFullScreen",
          "async",
          // Note: there is a special case that prevents it from being written to the DOM
          // on the client side because the browsers are inconsistent. Instead we call focus().
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          // Microdata
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "checked",
          // Note: `option.selected` is not updated if `select.multiple` is
          // disabled with `removeAttribute`. We have special logic for handling this.
          "multiple",
          "muted",
          "selected"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            true,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "capture",
          "download"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            OVERLOADED_BOOLEAN,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "cols",
          "rows",
          "size",
          "span"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            POSITIVE_NUMERIC,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            NUMERIC,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/1999/xlink",
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/XML/1998/namespace",
            false,
            // sanitizeURL
            false
          );
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord(
          "xlinkHref",
          STRING,
          false,
          // mustUseProperty
          "xlink:href",
          "http://www.w3.org/1999/xlink",
          true,
          // sanitizeURL
          false
        );
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            true,
            // sanitizeURL
            true
          );
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected, isCustomComponentTag) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value, name);
                }
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x6) {
                var match = x6.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x6) {
                  control = x6;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x6) {
                  control = x6;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x6) {
                control = x6;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s7 = sampleLines.length - 1;
              var c8 = controlLines.length - 1;
              while (s7 >= 1 && c8 >= 0 && sampleLines[s7] !== controlLines[c8]) {
                c8--;
              }
              for (; s7 >= 1 && c8 >= 0; s7--, c8--) {
                if (sampleLines[s7] !== controlLines[c8]) {
                  if (s7 !== 1 || c8 !== 1) {
                    do {
                      s7--;
                      c8--;
                      if (c8 < 0 || sampleLines[s7] !== controlLines[c8]) {
                        var _frame = "\n" + sampleLines[s7].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s7 >= 1 && c8 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x6) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x6) {
            return "\nError generating stack: " + x6.message + "\n" + x6.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x6) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider = type;
              return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef:
              return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment:
              return "Fragment";
            case HostComponent:
              return type;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode:
              if (type === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString2(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e5) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
              // eslint-disable-next-line
              node.value != value) {
                node.value = toString2(value);
              }
            } else if (node.value !== toString2(value)) {
              node.value = toString2(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString2(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name, "name");
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i8 = 0; i8 < group.length; i8++) {
              var otherNode = group[i8];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (
            // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
            type !== "number" || getActiveElement(node.ownerDocument) !== node
          ) {
            if (value == null) {
              node.defaultValue = toString2(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString2(value)) {
              node.defaultValue = toString2(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React10.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString2(getToStringValue(props.value)));
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a5) {
          return isArrayImpl(a5);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i8 = 0; i8 < valuePropNames.length; i8++) {
              var propName = valuePropNames[i8];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i8 = 0; i8 < selectedValues.length; i8++) {
              selectedValue["$" + selectedValues[i8]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString2(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$1(element, props) {
          return assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element, props) {
          var node = element;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
          var hostProps = assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString2(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (defaultValue != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray(children)) {
                  if (children.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString2(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString2(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          {
            checkCSSPropertyStringCoercion(value, name);
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_6, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern$1, "ms-"))
            );
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i8 = 0; i8 < longhands.length; i8++) {
              expanded[longhands[i8]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
          // NOTE: menuitem's close tag should be omitted, but that causes problems.
        };
        var voidElementTags = assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) {
              throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (props.style != null && typeof props.style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid2 = validateProperty(type, key);
              if (!isValid2) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid2) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== "function") {
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i8 = 0; i8 < queuedTargets.length; i8++) {
              restoreStateOfTarget(queuedTargets[i8]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var flushSyncImpl = function() {
        };
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, a5, b9) {
          if (isInsideEventHandler) {
            return fn(a5, b9);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, a5, b9);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e5) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context, a5, b9, c8, d8, e5, f6) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a5, b9, c8, d8, e5, f6) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a5, b9, c8, d8, e5, f6) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a5, b9, c8, d8, e5, f6) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = (
          /*                      */
          0
        );
        var PerformedWork = (
          /*                */
          1
        );
        var Placement = (
          /*                    */
          2
        );
        var Update = (
          /*                       */
          4
        );
        var ChildDeletion = (
          /*                */
          16
        );
        var ContentReset = (
          /*                 */
          32
        );
        var Callback = (
          /*                     */
          64
        );
        var DidCapture = (
          /*                   */
          128
        );
        var ForceClientRender = (
          /*            */
          256
        );
        var Ref = (
          /*                          */
          512
        );
        var Snapshot = (
          /*                     */
          1024
        );
        var Passive = (
          /*                      */
          2048
        );
        var Hydrating = (
          /*                    */
          4096
        );
        var Visibility = (
          /*                   */
          8192
        );
        var StoreConsistency = (
          /*             */
          16384
        );
        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = (
          /*               */
          32767
        );
        var Incomplete = (
          /*                   */
          32768
        );
        var ShouldCapture = (
          /*                */
          65536
        );
        var ForceUpdateForLegacySuspense = (
          /* */
          131072
        );
        var Forked = (
          /*                       */
          1048576
        );
        var RefStatic = (
          /*                    */
          2097152
        );
        var LayoutStatic = (
          /*                 */
          4194304
        );
        var PassiveStatic = (
          /*                */
          8388608
        );
        var MountLayoutDev = (
          /*               */
          16777216
        );
        var MountPassiveDev = (
          /*              */
          33554432
        );
        var BeforeMutationMask = (
          // TODO: Remove Update flag from before mutation phase by re-landing Visibility
          // flag logic (see #20043)
          Update | Snapshot | 0
        );
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a5 = fiber;
          var b9 = alternate;
          while (true) {
            var parentA = a5.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a5 = b9 = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a5) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b9) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a5.return !== b9.return) {
              a5 = parentA;
              b9 = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a5) {
                  didFindChild = true;
                  a5 = parentA;
                  b9 = parentB;
                  break;
                }
                if (_child === b9) {
                  didFindChild = true;
                  b9 = parentA;
                  a5 = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a5) {
                    didFindChild = true;
                    a5 = parentB;
                    b9 = parentA;
                    break;
                  }
                  if (_child === b9) {
                    didFindChild = true;
                    b9 = parentB;
                    a5 = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a5.alternate !== b9) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a5.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a5.stateNode.current === a5) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root3, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root3, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root3, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root3.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root3) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root3);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index2 = 0; index2 < TotalLanes; index2++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = (
          /*                         */
          0
        );
        var ConcurrentMode = (
          /*                 */
          1
        );
        var ProfileMode = (
          /*                    */
          2
        );
        var StrictLegacyMode = (
          /*               */
          8
        );
        var StrictEffectsMode = (
          /*              */
          16
        );
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log3 = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x6) {
          var asUint = x6 >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log3(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = (
          /*                        */
          0
        );
        var NoLane = (
          /*                          */
          0
        );
        var SyncLane = (
          /*                        */
          1
        );
        var InputContinuousHydrationLane = (
          /*    */
          2
        );
        var InputContinuousLane = (
          /*             */
          4
        );
        var DefaultHydrationLane = (
          /*            */
          8
        );
        var DefaultLane = (
          /*                     */
          16
        );
        var TransitionHydrationLane = (
          /*                */
          32
        );
        var TransitionLanes = (
          /*                       */
          4194240
        );
        var TransitionLane1 = (
          /*                        */
          64
        );
        var TransitionLane2 = (
          /*                        */
          128
        );
        var TransitionLane3 = (
          /*                        */
          256
        );
        var TransitionLane4 = (
          /*                        */
          512
        );
        var TransitionLane5 = (
          /*                        */
          1024
        );
        var TransitionLane6 = (
          /*                        */
          2048
        );
        var TransitionLane7 = (
          /*                        */
          4096
        );
        var TransitionLane8 = (
          /*                        */
          8192
        );
        var TransitionLane9 = (
          /*                        */
          16384
        );
        var TransitionLane10 = (
          /*                       */
          32768
        );
        var TransitionLane11 = (
          /*                       */
          65536
        );
        var TransitionLane12 = (
          /*                       */
          131072
        );
        var TransitionLane13 = (
          /*                       */
          262144
        );
        var TransitionLane14 = (
          /*                       */
          524288
        );
        var TransitionLane15 = (
          /*                       */
          1048576
        );
        var TransitionLane16 = (
          /*                       */
          2097152
        );
        var RetryLanes = (
          /*                            */
          130023424
        );
        var RetryLane1 = (
          /*                             */
          4194304
        );
        var RetryLane2 = (
          /*                             */
          8388608
        );
        var RetryLane3 = (
          /*                             */
          16777216
        );
        var RetryLane4 = (
          /*                             */
          33554432
        );
        var RetryLane5 = (
          /*                             */
          67108864
        );
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = (
          /*          */
          134217728
        );
        var NonIdleLanes = (
          /*                          */
          268435455
        );
        var IdleHydrationLane = (
          /*               */
          268435456
        );
        var IdleLane = (
          /*                        */
          536870912
        );
        var OffscreenLane = (
          /*                   */
          1073741824
        );
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root3, wipLanes) {
          var pendingLanes = root3.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root3.suspendedLanes;
          var pingedLanes = root3.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
          // bother waiting until the root is complete.
          (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (
              // Tests whether the next lane is equal or lower priority than the wip
              // one. This works because the bits decrease in priority as you go left.
              nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
              // only difference between default updates and transition updates is that
              // default updates do not support refresh transitions.
              nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
            ) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root3.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root3.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root3, lanes) {
          var eventTimes = root3.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root3, currentTime) {
          var pendingLanes = root3.pendingLanes;
          var suspendedLanes = root3.suspendedLanes;
          var pingedLanes = root3.pingedLanes;
          var expirationTimes = root3.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root3.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root3) {
          return getHighestPriorityLanes(root3.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root3) {
          var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root3, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root3, lanes) {
          return (lanes & root3.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a5, b9) {
          return (a5 & b9) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a5, b9) {
          return a5 | b9;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function intersectLanes(a5, b9) {
          return a5 & b9;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a5, b9) {
          return a5 !== NoLane && a5 < b9 ? a5 : b9;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i8 = 0; i8 < TotalLanes; i8++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root3, updateLane, eventTime) {
          root3.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
          }
          var eventTimes = root3.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root3, suspendedLanes) {
          root3.suspendedLanes |= suspendedLanes;
          root3.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root3.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root3, pingedLanes, eventTime) {
          root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root3, remainingLanes) {
          var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
          root3.pendingLanes = remainingLanes;
          root3.suspendedLanes = NoLanes;
          root3.pingedLanes = NoLanes;
          root3.expiredLanes &= remainingLanes;
          root3.mutableReadLanes &= remainingLanes;
          root3.entangledLanes &= remainingLanes;
          var entanglements = root3.entanglements;
          var eventTimes = root3.eventTimes;
          var expirationTimes = root3.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root3, entangledLanes) {
          var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
          var entanglements = root3.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            if (
              // Is this one of the newly entangled lanes?
              lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
              entanglements[index2] & entangledLanes
            ) {
              entanglements[index2] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root3, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root3, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root3, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
          var memoizedUpdaters = root3.memoizedUpdaters;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root3, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a5, b9) {
          return a5 !== 0 && a5 < b9 ? a5 : b9;
        }
        function lowerEventPriority(a5, b9) {
          return a5 === 0 || a5 > b9 ? a5 : b9;
        }
        function isHigherEventPriority(a5, b9) {
          return a5 !== 0 && a5 < b9;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root3) {
          var currentState = root3.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn) {
          _attemptSynchronousHydration = fn;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn) {
          getCurrentUpdatePriority$1 = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          // Intentionally camelCase
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (isRootDehydrated(root3)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority
          };
          var i8 = 0;
          for (; i8 < queuedExplicitHydrationTargets.length; i8++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i8].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i8, 0, queuedTarget);
          if (i8 === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i8 = 1; i8 < queuedDiscreteEvents.length; i8++) {
              var queuedEvent = queuedDiscreteEvents[i8];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (isRootDehydrated(root3)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive
          });
          return listener;
        }
        var root2 = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root2 = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root2 = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root2) {
            return root2.value;
          }
          return root2.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */
            persist: function() {
            },
            /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          // Legacy Interface
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : (
              // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
              "wheelDeltaX" in event ? -event.wheelDeltaX : 0
            );
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : (
              // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
              "wheelDeltaY" in event ? -event.wheelDeltaY : (
                // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                "wheelDelta" in event ? -event.wheelDelta : 0
              )
            );
          },
          deltaZ: 0,
          // Browsers without "deltaMode" is reporting in raw wheel delta where one
          // notch on the scroll is always +/- 120, roughly equivalent to pixels.
          // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
          // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
          !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        function is(x6, y6) {
          return x6 === y6 && (x6 !== 0 || 1 / x6 === 1 / y6) || x6 !== x6 && y6 !== y6;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i8 = 0; i8 < keysA.length; i8++) {
            var currentKey = keysA[i8];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root3, offset) {
          var node = getLeafNode(root3);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e5) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i8 = 0; i8 < ancestors.length; i8++) {
              var info = ancestors[i8];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i8 = 0; i8 < simpleEventPluginEvents.length; i8++) {
            var eventName = simpleEventPluginEvents[i8];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
            // nonDelegatedEvents list in DOMPluginEventSystem.
            // Then we can remove this special list.
            // This is a breaking change that can wait until React 18.
            domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i8 = dispatchListeners.length - 1; i8 >= 0; i8--) {
              var _dispatchListeners$i = dispatchListeners[i8], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i8 = 0; i8 < dispatchQueue.length; i8++) {
            var _dispatchQueue$i = dispatchQueue[i8], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop:
                while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            // There are working polyfills for <dialog>. Let people use it.
            dialog: true,
            // Electron ships a custom <webview> tag to display external web content in
            // an isolated frame and process.
            // This tag is not present in non Electron environments such as JSDom which
            // is often used for testing purposes.
            // @see https://electronjs.org/docs/api/webview-tag
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i8 = 0; i8 < updatePayload.length; i8 += 2) {
            var propKey = updatePayload[i8];
            var propValue = updatePayload[i8 + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i8 = 0; i8 < mediaEventTypes.length; i8++) {
                listenToNonDelegatedEvent(mediaEventTypes[i8], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i8 = 0; i8 < mediaEventTypes.length; i8++) {
                listenToNonDelegatedEvent(mediaEventTypes[i8], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
              // TODO: Only ignore them on controlled tags.
              propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
              ) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
            // TODO: Distinguish by namespace here -- for <title>, including it here
            // errs on the side of fewer warnings
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root3 = rootContainerInstance.documentElement;
              namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function() {
            throw error2;
          });
        }
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
          if (container.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container.parentNode, suspenseInstance);
          } else if (container.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container, suspenseInstance);
          }
          retryIfBlockedOn(container);
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) {
              container.removeChild(container.documentElement);
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance._reactRetry = callback;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "head" && parentType !== "body";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedText(parentNode, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i8 = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i8 < queue.length; i8++) {
                var callback = queue[i8];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i8 + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index2) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index2 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(
                  returnFiber.type,
                  returnFiber.memoizedProps,
                  returnFiber.stateNode,
                  instance,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null)
                  didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _type,
                      _props,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _text,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode
                    );
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null)
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(
                    parentContainer,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    _isConcurrentMode2
                  );
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
            instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          {
            {
              context._currentValue = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null)
                      ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value = context._currentValue;
          if (lastFullyObservedContext === context)
            ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i8 = 0; i8 < concurrentQueues.length; i8++) {
              var queue = concurrentQueues[i8];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root3 = node.stateNode;
            return root3;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
        }
        function entangleTransitions(root3, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root3, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null && // If the update was already committed, we should not queue its
                // callback again.
                update.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i8 = 0; i8 < effects.length; i8++) {
              var effect = effects[i8];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var emptyRefsObject = new React10.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(fiber, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitions(root3, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(fiber, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitions(root3, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(fiber, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitions(root3, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid2 = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
              );
              if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
          // both before and after `shouldComponentUpdate` has been called. Not ideal,
          // but I'm loath to refactor this function. This only happens for memoized
          // components so it's not that common.
          enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
              // because these cannot be automatically converted to an arrow function
              // using a codemod. Therefore, we don't have to warn about string refs again.
              !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = resolvedInst.refs;
                if (refs === emptyRefsObject) {
                  refs = resolvedInst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType2) {
          var payload = lazyType2._payload;
          var init = lazyType2._init;
          return init(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
            }
            if (current2 !== null) {
              if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
              // We need to do this after the Hot Reloading check above,
              // because hot reloading has different semantics than prod because
              // it doesn't resuspend. So we can't let the call below suspend.
              typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i8 = 0; i8 < newChildren.length; i8++) {
                var child = newChildren[i8];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
              newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                  isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                  // We need to do this after the Hot Reloading check above,
                  // because hot reloading has different semantics than prod because
                  // it doesn't resuspend. So we can't let the call below suspend.
                  typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element._source;
                      _existing._debugOwner = element._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c8) {
          if (c8 === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c8;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
            // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = (
          /*   */
          0
        );
        var HasEffect = (
          /* */
          1
        );
        var Insertion = (
          /*  */
          2
        );
        var Layout = (
          /*    */
          4
        );
        var Passive$1 = (
          /*   */
          8
        );
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i8 = 0; i8 < workInProgressSources.length; i8++) {
            var mutableSource = workInProgressSources[i8];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root3, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root3.mutableSourceEagerHydrationData == null) {
            root3.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root3.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i8 = 0; i8 <= hookTypesUpdateIndexDev; i8++) {
                  var oldHookName = hookTypesDev[i8];
                  var newHookName = i8 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i8 + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i8 = 0; i8 < prevDeps.length && i8 < nextDeps.length; i8++) {
            if (objectIs(nextDeps[i8], prevDeps[i8])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
            // and creates false positives. To make this work in legacy mode, we'd
            // need to mark fibers that commit in an incomplete state, somehow. For
            // now I'll disable the warning that most of the bugs that would trigger
            // it are either exclusive to concurrent mode or exist in both.
            (current2.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root3 = getWorkInProgressRoot();
            if (root3 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root3, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
          // checking whether we scheduled a subscription effect above.
          workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            var root3 = getWorkInProgressRoot();
            if (root3 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root3, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            // Circular
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
          }
        }
        function updateEffect(create, deps) {
          return updateEffectImpl(Passive, Passive$1, create, deps);
        }
        function mountInsertionEffect(create, deps) {
          return mountEffectImpl(Update, Insertion, create, deps);
        }
        function updateInsertionEffect(create, deps) {
          return updateEffectImpl(Update, Insertion, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start;
          return [isPending, start];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root3 = getWorkInProgressRoot();
          var identifierPrefix = root3.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            id += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitionUpdate(root3, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitionUpdate(root3, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root3, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root3, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root3 = parentFiber.stateNode;
                  root3.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root3 = parentFiber.stateNode;
                  if (root3 !== null) {
                    root3.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e5) {
            setTimeout(function() {
              throw e5;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root3, wakeable, lanes) {
          var pingCache = root3.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root3.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = /* @__PURE__ */ new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root3, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root3, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root3, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root3, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
            Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(type)
                );
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(
                _innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(_type)
              );
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare2 = Component.compare;
            compare2 = compare2 !== null ? compare2 : shallowEqual;
            if (compare2(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x6) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    nextProps,
                    // Resolved (SimpleMemoComponent has no defaultProps)
                    "prop",
                    getComponentNameFromType(outerMemoType)
                  );
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
            workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root3 = workInProgress2.stateNode;
          if (root3.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
          } else if (root3.context) {
            pushTopLevelContextObject(workInProgress2, root3.context, false);
          }
          pushHostContainer(workInProgress2, root3.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root3 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      resolvedProps,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(Component)
                    );
                  }
                }
              }
              child = updateMemoComponent(
                null,
                workInProgress2,
                Component,
                resolveDefaultProps(Component.type, resolvedProps),
                // The inner type can have defaults too
                renderLanes2
              );
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if (
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
            // already cloned. In legacy mode, the only case where this isn't true is
            // when DevTools forces us to display a fallback; we skip the first render
            // pass entirely and go straight to rendering the fallback. (In Concurrent
            // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
            // only codepath.)
            workInProgress2.child !== currentPrimaryChildFragment
          ) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2,
                // TODO: When we delete legacy mode, we should make this error argument
                // required — every concurrent mode path that causes hydration to
                // de-opt to client rendering should have an error message.
                null
              );
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root3 = getWorkInProgressRoot();
              if (root3 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current2.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (isArray(children)) {
                for (var i8 = 0; i8 < children.length; i8++) {
                  if (!validateSuspenseListNestedChild(children[i8], i8)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  tail,
                  lastContentRow,
                  tailMode
                );
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  true,
                  // isBackwards
                  _tail,
                  null,
                  // last
                  tailMode
                );
                break;
              }
              case "together": {
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  null,
                  // tail
                  null,
                  // last
                  void 0
                );
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root3 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
            workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
              if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
              // may not be work scheduled on `current`, so we check for this flag.
              (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      _resolvedProps3,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(_type2)
                    );
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current2, workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current2 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (
                      // Check if this is a client root
                      !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                      (workInProgress2.flags & ForceClientRender) !== NoFlags
                    ) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current2, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current2, workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (
                    // The time it took to render last row is greater than the remaining
                    // time we have to render. So rendering one more row would likely
                    // exceed it.
                    now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                  ) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current2 !== null) {
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root3 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root3 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (current2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout, current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root3, firstChild) {
          focusedInstanceHandle = prepareForCommit(root3.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root3 = finishedWork.stateNode;
                  clearContainer(root3.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create = effect.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect.destroy = create();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect.tag & Layout) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect.tag & Insertion) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root3 = parentFiber.stateNode;
                          root3.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current2 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                      var prevState = current2.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current2 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root3, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent:
              while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (
                // TODO: Remove this dead flag
                deletedFiber.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root3, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root3;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root3);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i8 = 0; i8 < deletions.length; i8++) {
              var childToDelete = deletions[i8];
              try {
                commitDeletionEffects(root3, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root3);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root3.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden = newState !== null;
                offscreenInstance.isHidden = isHidden;
                if (isHidden) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current2 !== null && current2.memoizedState !== null;
              if (
                // TODO: Remove this dead flag
                finishedWork.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root3, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root3, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root3, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root3;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root3, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                continue;
              } else {
                var current2 = fiber.alternate;
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(
                    child,
                    // New root; bubble back up to here and stop.
                    root3,
                    committedLanes
                  );
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current2 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i8 = 0; i8 < deletions.length; i8++) {
                  var fiberToDelete = deletions[i8];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (current2.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                recordPassiveEffectDuration(current2);
              } else {
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = (
          /*             */
          0
        );
        var BatchedContext = (
          /*               */
          1
        );
        var RenderContext = (
          /*                */
          2
        );
        var CommitContext = (
          /*                */
          4
        );
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition = ReactCurrentBatchConfig$3.transition;
              if (!transition._updatedFibers) {
                transition._updatedFibers = /* @__PURE__ */ new Set();
              }
              transition._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root3, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root3, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root3 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root3, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
          var current2 = root3.current;
          current2.lanes = lane;
          markRootUpdated(root3, lane, eventTime);
          ensureRootIsScheduled(root3, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (
            // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
            // decided not to enable it.
            (executionContext & RenderContext) !== NoContext
          );
        }
        function ensureRootIsScheduled(root3, currentTime) {
          var existingCallbackNode = root3.callbackNode;
          markStarvedLanesAsExpired(root3, currentTime);
          var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root3.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
          // Scheduler task, rather than an `act` task, cancel it and re-scheduled
          // on the `act` queue.
          !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root3.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
          }
          root3.callbackPriority = newCallbackPriority;
          root3.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root3, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root3.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root3.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root3, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root3, lanes);
              var finishedWork = root3.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root3, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root3, NoLanes);
                  markRootSuspended$1(root3, lanes);
                  ensureRootIsScheduled(root3, now());
                  throw _fatalError;
                }
              }
              root3.finishedWork = finishedWork;
              root3.finishedLanes = lanes;
              finishConcurrentRender(root3, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root3, now());
          if (root3.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root3);
          }
          return null;
        }
        function recoverFromConcurrentError(root3, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root3)) {
            var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root3.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root3, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root3, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            case RootErrored: {
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root3, lanes);
              if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
              !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root3, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root3.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root3, suspendedLanes);
                    break;
                  }
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root3, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i8 = 0; i8 < checks.length; i8++) {
                    var check = checks[i8];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root3, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root3, suspendedLanes);
        }
        function performSyncWorkOnRoot(root3) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root3, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root3, now());
            return null;
          }
          var exitStatus = renderRootSync(root3, lanes);
          if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root3.current.alternate;
          root3.finishedWork = finishedWork;
          root3.finishedLanes = lanes;
          commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root3, now());
          return null;
        }
        function flushRoot(root3, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root3, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root3, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn, a5) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a5);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn, a5, b9, c8, d8) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a5, b9, c8, d8);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync(fn) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root3, lanes) {
          root3.finishedWork = null;
          root3.finishedLanes = NoLanes;
          var timeoutHandle = root3.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root3.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current2 = interruptedWork.alternate;
              unwindInterruptedWork(current2, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root3;
          var rootWorkInProgress = createWorkInProgress(root3.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root3, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root3, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root3, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root3, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root3, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root3, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root3, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current2, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root3, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root3.finishedWork;
          var lanes = root3.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root3.finishedWork = null;
          root3.finishedLanes = NoLanes;
          if (finishedWork === root3.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root3.callbackNode = null;
          root3.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root3, remainingLanes);
          if (root3 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root3, finishedWork, lanes);
            resetAfterCommit(root3.containerInfo);
            root3.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root3, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root3.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root3;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root3.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root3.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root3.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root3, now());
          if (recoverableErrors !== null) {
            var onRecoverableError = root3.onRecoverableError;
            for (var i8 = 0; i8 < recoverableErrors.length; i8++) {
              var recoverableError = recoverableErrors[i8];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root3.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root3 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root3;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root3 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root3.current);
          commitPassiveMountEffects(root3, root3.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i8 = 0; i8 < profilerEffects.length; i8++) {
              var _fiber = profilerEffects[i8];
              commitPassiveEffectDurations(root3, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root3.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root3 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root3;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root3);
          {
            var stateNode = root3.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root3 = enqueueUpdate(rootFiber, update, SyncLane);
          var eventTime = requestEventTime();
          if (root3 !== null) {
            markRootUpdated(root3, SyncLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root3 = enqueueUpdate(fiber, update, SyncLane);
                var eventTime = requestEventTime();
                if (root3 !== null) {
                  markRootUpdated(root3, SyncLane, eventTime);
                  ensureRootIsScheduled(root3, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root3, wakeable, pingedLanes) {
          var pingCache = root3.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root3, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
          if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root3, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root3, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root3 !== null) {
            markRootUpdated(root3, retryLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current2 = firstChild;
            var subtreeRoot = null;
            while (current2 !== null) {
              var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
              if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                current2 = current2.child;
              } else {
                if ((current2.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current2);
                }
                if (current2.sibling !== null) {
                  current2 = current2.sibling;
                } else {
                  current2 = subtreeRoot = current2.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root3, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root3.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root3, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
          {
            if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root3, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root3, element) {
          {
            if (root3.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function() {
              updateContainer(element, root3, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root3, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e5) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                case REACT_SCOPE_TYPE:
                case REACT_CACHE_TYPE:
                case REACT_TRACING_MARKER_TYPE:
                case REACT_DEBUG_TRACING_MODE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root3.current = uninitializedFiber;
          uninitializedFiber.stateNode = root3;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: null,
              // not enabled yet
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root3;
        }
        var ReactVersion = "18.2.0";
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = true;
          var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root3.context = getContextForSubtree(null);
          var current2 = root3.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current2);
          var update = createUpdate(eventTime, lane);
          update.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current2, update, lane);
          scheduleInitialHydrationOnRoot(root3, lane, eventTime);
          return root3;
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          var root3 = enqueueUpdate(current$1, update, lane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
            entangleTransitions(root3, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root3 = fiber.stateNode;
              if (isRootDehydrated(root3)) {
                var lanes = getHighestPriorityPendingLanes(root3);
                flushRoot(root3, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync(function() {
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root3 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root3 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root3 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root3 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index2) {
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === path.length) {
              if (isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(
                // $FlowFixMe number or string is fine here
                obj[oldKey],
                oldPath,
                newPath,
                index2 + 1
              );
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i8 = 0; i8 < newPath.length - 1; i8++) {
                if (oldPath[i8] !== newPath[i8]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index2, value) {
            if (index2 >= path.length) {
              return value;
            }
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion
          });
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? (
          // In modern browsers, reportError will dispatch an error event,
          // emulating an uncaught JavaScript error.
          reportError
        ) : function(error2) {
          console["error"](error2);
        };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root3 = this._internalRoot;
          if (root3 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
            var container = root3.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root3.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root3, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root3 = this._internalRoot;
          if (root3 !== null) {
            this._internalRoot = null;
            var container = root3.containerInfo;
            {
              if (isAlreadyRendering()) {
                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync(function() {
              updateContainer(null, root3, null, null);
            });
            unmarkContainerAsRoot(container);
          }
        };
        function createRoot(container, options2) {
          if (!isValidContainer(container)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                  error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
            if (options2.transitionCallbacks !== void 0) {
              transitionCallbacks = options2.transitionCallbacks;
            }
          }
          var root3 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root3.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root3);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot(container, initialChildren, options2) {
          if (!isValidContainer(container)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          {
            if (initialChildren === void 0) {
              error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var mutableSources = options2 != null && options2.hydratedSources || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root3.current, container);
          listenToAllSupportedEvents(container);
          if (mutableSources) {
            for (var i8 = 0; i8 < mutableSources.length; i8++) {
              var mutableSource = mutableSources[i8];
              registerMutableSourceForHydration(root3, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root3);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container) {
          {
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
            }
            if (isContainerMarkedAsRoot(container)) {
              if (container._reactRootContainer) {
                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root3);
                originalCallback.call(instance);
              };
            }
            var root3 = createHydrationContainer(
              initialChildren,
              callback,
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = root3;
            markContainerAsRoot(root3.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root3;
          } else {
            var rootSibling;
            while (rootSibling = container.lastChild) {
              container.removeChild(rootSibling);
            }
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync(function() {
              updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var maybeRoot = container._reactRootContainer;
          var root3;
          if (!maybeRoot) {
            root3 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
          } else {
            root3 = maybeRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root3);
                originalCallback.call(instance);
              };
            }
            updateContainer(children, root3, parentComponent, callback);
          }
          return getPublicRootInstance(root3);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          {
            error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          {
            error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          {
            error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainerLegacy(container)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
          Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
          Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        var Internals = {
          usingClientEntryPoint: false,
          // Keep in sync with ReactTestUtils.js.
          // This is an array for better minification.
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
        };
        function createRoot$1(container, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot(container, options2);
        }
        function hydrateRoot$1(container, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot(container, initialChildren, options2);
        }
        function flushSync$1(fn) {
          {
            if (isAlreadyRendering()) {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync(fn);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports2.createPortal = createPortal$1;
        exports2.createRoot = createRoot$1;
        exports2.findDOMNode = findDOMNode;
        exports2.flushSync = flushSync$1;
        exports2.hydrate = hydrate;
        exports2.hydrateRoot = hydrateRoot$1;
        exports2.render = render;
        exports2.unmountComponentAtNode = unmountComponentAtNode;
        exports2.unstable_batchedUpdates = batchedUpdates$1;
        exports2.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports2.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports2, module2) {
    "use strict";
    if (false) {
      checkDCE();
      module2.exports = null;
    } else {
      module2.exports = require_react_dom_development();
    }
  }
});

// node_modules/react-dom/client.js
var require_client = __commonJS({
  "node_modules/react-dom/client.js"(exports2) {
    "use strict";
    var m10 = require_react_dom();
    if (false) {
      exports2.createRoot = m10.createRoot;
      exports2.hydrateRoot = m10.hydrateRoot;
    } else {
      i8 = m10.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      exports2.createRoot = function(c8, o9) {
        i8.usingClientEntryPoint = true;
        try {
          return m10.createRoot(c8, o9);
        } finally {
          i8.usingClientEntryPoint = false;
        }
      };
      exports2.hydrateRoot = function(c8, h8, o9) {
        i8.usingClientEntryPoint = true;
        try {
          return m10.hydrateRoot(c8, h8, o9);
        } finally {
          i8.usingClientEntryPoint = false;
        }
      };
    }
    var i8;
  }
});

// node_modules/base-64/base64.js
var require_base64 = __commonJS({
  "node_modules/base-64/base64.js"(exports2, module2) {
    (function(root2) {
      var freeExports = typeof exports2 == "object" && exports2;
      var freeModule = typeof module2 == "object" && module2 && module2.exports == freeExports && module2;
      var freeGlobal = typeof global == "object" && global;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
        root2 = freeGlobal;
      }
      var InvalidCharacterError = function(message) {
        this.message = message;
      };
      InvalidCharacterError.prototype = new Error();
      InvalidCharacterError.prototype.name = "InvalidCharacterError";
      var error = function(message) {
        throw new InvalidCharacterError(message);
      };
      var TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var REGEX_SPACE_CHARACTERS = /[\t\n\f\r ]/g;
      var decode = function(input) {
        input = String(input).replace(REGEX_SPACE_CHARACTERS, "");
        var length = input.length;
        if (length % 4 == 0) {
          input = input.replace(/==?$/, "");
          length = input.length;
        }
        if (length % 4 == 1 || // http://whatwg.org/C#alphanumeric-ascii-characters
        /[^+a-zA-Z0-9/]/.test(input)) {
          error(
            "Invalid character: the string to be decoded is not correctly encoded."
          );
        }
        var bitCounter = 0;
        var bitStorage;
        var buffer;
        var output = "";
        var position = -1;
        while (++position < length) {
          buffer = TABLE.indexOf(input.charAt(position));
          bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;
          if (bitCounter++ % 4) {
            output += String.fromCharCode(
              255 & bitStorage >> (-2 * bitCounter & 6)
            );
          }
        }
        return output;
      };
      var encode = function(input) {
        input = String(input);
        if (/[^\0-\xFF]/.test(input)) {
          error(
            "The string to be encoded contains characters outside of the Latin1 range."
          );
        }
        var padding = input.length % 3;
        var output = "";
        var position = -1;
        var a5;
        var b9;
        var c8;
        var buffer;
        var length = input.length - padding;
        while (++position < length) {
          a5 = input.charCodeAt(position) << 16;
          b9 = input.charCodeAt(++position) << 8;
          c8 = input.charCodeAt(++position);
          buffer = a5 + b9 + c8;
          output += TABLE.charAt(buffer >> 18 & 63) + TABLE.charAt(buffer >> 12 & 63) + TABLE.charAt(buffer >> 6 & 63) + TABLE.charAt(buffer & 63);
        }
        if (padding == 2) {
          a5 = input.charCodeAt(position) << 8;
          b9 = input.charCodeAt(++position);
          buffer = a5 + b9;
          output += TABLE.charAt(buffer >> 10) + TABLE.charAt(buffer >> 4 & 63) + TABLE.charAt(buffer << 2 & 63) + "=";
        } else if (padding == 1) {
          buffer = input.charCodeAt(position);
          output += TABLE.charAt(buffer >> 2) + TABLE.charAt(buffer << 4 & 63) + "==";
        }
        return output;
      };
      var base64 = {
        "encode": encode,
        "decode": decode,
        "version": "1.0.0"
      };
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        define(function() {
          return base64;
        });
      } else if (freeExports && !freeExports.nodeType) {
        if (freeModule) {
          freeModule.exports = base64;
        } else {
          for (var key in base64) {
            base64.hasOwnProperty(key) && (freeExports[key] = base64[key]);
          }
        }
      } else {
        root2.base64 = base64;
      }
    })(exports2);
  }
});

// node_modules/sqlite-parser/dist/sqlite-parser.js
var require_sqlite_parser = __commonJS({
  "node_modules/sqlite-parser/dist/sqlite-parser.js"(exports2, module2) {
    (function(f6) {
      if (typeof exports2 === "object" && typeof module2 !== "undefined") {
        module2.exports = f6();
      } else if (typeof define === "function" && define.amd) {
        define([], f6);
      } else {
        var g9;
        if (typeof window !== "undefined") {
          g9 = window;
        } else if (typeof global !== "undefined") {
          g9 = global;
        } else if (typeof self !== "undefined") {
          g9 = self;
        } else {
          g9 = this;
        }
        g9.sqliteParser = f6();
      }
    })(function() {
      var define2, module3, exports3;
      return function e5(t3, n11, r7) {
        function s7(o10, u8) {
          if (!n11[o10]) {
            if (!t3[o10]) {
              var a5 = typeof require == "function" && require;
              if (!u8 && a5)
                return a5(o10, true);
              if (i8)
                return i8(o10, true);
              var f6 = new Error("Cannot find module '" + o10 + "'");
              throw f6.code = "MODULE_NOT_FOUND", f6;
            }
            var l7 = n11[o10] = { exports: {} };
            t3[o10][0].call(l7.exports, function(e6) {
              var n12 = t3[o10][1][e6];
              return s7(n12 ? n12 : e6);
            }, l7, l7.exports, e5, t3, n11, r7);
          }
          return n11[o10].exports;
        }
        var i8 = typeof require == "function" && require;
        for (var o9 = 0; o9 < r7.length; o9++)
          s7(r7[o9]);
        return s7;
      }({ "./streaming": [function(require2, module4, exports4) {
        "use strict";
        Object.defineProperty(exports4, "__esModule", { value: true });
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        var SqliteParserTransform = exports4.SqliteParserTransform = function SqliteParserTransform2(options) {
          _classCallCheck(this, SqliteParserTransform2);
          throw new Error("SqliteParserTransform is not available in this environment");
        };
        var SingleNodeTransform = exports4.SingleNodeTransform = function SingleNodeTransform2(options) {
          _classCallCheck(this, SingleNodeTransform2);
          throw new Error("SingleNodeTransform is not available in this environment");
        };
      }, {}], 1: [function(require2, module4, exports4) {
        "use strict";
        Object.defineProperty(exports4, "__esModule", { value: true });
        exports4.default = sqliteParser;
        var _parser = require2("./parser");
        var _tracer = require2("./tracer");
        var _streaming = require2("./streaming");
        function sqliteParser(source, options, callback) {
          var t3 = (0, _tracer.Tracer)();
          if (arguments.length === 2) {
            if (typeof options === "function") {
              callback = options;
              options = {};
            }
          }
          var isAsync2 = typeof callback === "function";
          var opts = { "tracer": t3, "startRule": "start" };
          if (options && options.streaming) {
            opts["startRule"] = "start_streaming";
          }
          if (isAsync2) {
            setTimeout(function() {
              var result = void 0, err = void 0;
              try {
                result = (0, _parser.parse)(source, opts);
              } catch (e5) {
                err = e5 instanceof _parser.SyntaxError ? t3.smartError(e5) : e5;
              }
              callback(err, result);
            }, 0);
          } else {
            try {
              return (0, _parser.parse)(source, opts);
            } catch (e5) {
              throw e5 instanceof _parser.SyntaxError ? t3.smartError(e5) : e5;
            }
          }
        }
        ;
        sqliteParser["createParser"] = function() {
          return new _streaming.SqliteParserTransform();
        };
        sqliteParser["createStitcher"] = function() {
          return new _streaming.SingleNodeTransform();
        };
        sqliteParser["NAME"] = "sqlite-parser";
        sqliteParser["VERSION"] = "1.0.1";
        module4.exports = exports4["default"];
      }, { "./parser": 2, "./streaming": "./streaming", "./tracer": 3 }], 2: [function(require2, module4, exports4) {
        "use strict";
        var _slicedToArray = function() {
          function sliceIterator(arr, i8) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e2 = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i8 && _arr.length === i8)
                  break;
              }
            } catch (err) {
              _d = true;
              _e2 = err;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e2;
              }
            }
            return _arr;
          }
          return function(arr, i8) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i8);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }();
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
          return typeof obj;
        } : function(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        function peg$subclass(child, parent) {
          function ctor() {
            this.constructor = child;
          }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
        }
        function peg$SyntaxError(message, expected, found, location) {
          this.message = message;
          this.expected = expected;
          this.found = found;
          this.location = location;
          this.name = "SyntaxError";
          if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, peg$SyntaxError);
          }
        }
        peg$subclass(peg$SyntaxError, Error);
        peg$SyntaxError.buildMessage = function(expected, found) {
          var DESCRIBE_EXPECTATION_FNS = { literal: function literal(expectation) {
            return '"' + literalEscape(expectation.text) + '"';
          }, "class": function _class(expectation) {
            var escapedParts = expectation.parts.map(function(part) {
              return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
            });
            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          }, any: function any(expectation) {
            return "any character";
          }, end: function end(expectation) {
            return "end of input";
          }, other: function other(expectation) {
            return expectation.description;
          } };
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }
          function literalEscape(s7) {
            return s7.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function classEscape(s7) {
            return s7.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
              return "\\x0" + hex(ch);
            }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
              return "\\x" + hex(ch);
            });
          }
          function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
          }
          function describeExpected(expected2) {
            var descriptions = expected2.map(describeExpectation);
            var i8, j5;
            descriptions.sort();
            if (descriptions.length > 0) {
              for (i8 = 1, j5 = 1; i8 < descriptions.length; i8++) {
                if (descriptions[i8 - 1] !== descriptions[i8]) {
                  descriptions[j5] = descriptions[i8];
                  j5++;
                }
              }
              descriptions.length = j5;
            }
            switch (descriptions.length) {
              case 1:
                return descriptions[0];
              case 2:
                return descriptions[0] + " or " + descriptions[1];
              default:
                return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
            }
          }
          function describeFound(found2) {
            return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
          }
          return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };
        function peg$DefaultTracer() {
          this.indentLevel = 0;
        }
        peg$DefaultTracer.prototype.trace = function(event) {
          var that = this;
          function log3(event2) {
            function repeat(string, n11) {
              var result = "", i8;
              for (i8 = 0; i8 < n11; i8++) {
                result += string;
              }
              return result;
            }
            function pad(string, length) {
              return string + repeat(" ", length - string.length);
            }
            if ((typeof console === "undefined" ? "undefined" : _typeof(console)) === "object") {
              console.log(event2.location.start.line + ":" + event2.location.start.column + "-" + event2.location.end.line + ":" + event2.location.end.column + " " + pad(event2.type, 10) + " " + repeat("  ", that.indentLevel) + event2.rule);
            }
          }
          switch (event.type) {
            case "rule.enter":
              log3(event);
              this.indentLevel++;
              break;
            case "rule.match":
              this.indentLevel--;
              log3(event);
              break;
            case "rule.fail":
              this.indentLevel--;
              log3(event);
              break;
            default:
              throw new Error("Invalid event type: " + event.type + ".");
          }
        };
        function peg$parse(input, options) {
          options = options !== void 0 ? options : {};
          var peg$FAILED = {};
          var peg$startRuleIndices = { start: 0, start_streaming: 1 };
          var peg$startRuleIndex = 0;
          var peg$consts = [function(s7) {
            return s7;
          }, function(f6, b9) {
            return { "type": "statement", "variant": "list", "statement": flattenAll([f6, b9]) };
          }, function(s7) {
            return s7;
          }, peg$otherExpectation("Type Definition"), function(t3, a5) {
            return Object.assign(t3, a5);
          }, function(n11) {
            return { "type": "datatype", "variant": n11[0], "affinity": n11[1] };
          }, peg$otherExpectation("Custom Datatype Name"), function(t3, r7) {
            var variant = foldStringKey([t3, r7]);
            var affinity = "numeric";
            if (/int/i.test(variant)) {
              affinity = "integer";
            } else if (/char|clob|text/i.test(variant)) {
              affinity = "text";
            } else if (/blob/i.test(variant)) {
              affinity = "blob";
            } else if (/real|floa|doub/i.test(variant)) {
              affinity = "real";
            }
            return { "type": "datatype", "variant": variant, "affinity": affinity };
          }, /^[\t ]/, peg$classExpectation(["	", " "], false, false), function(w5) {
            return w5;
          }, peg$otherExpectation("Type Definition Arguments"), function(a1, a22) {
            return { "args": { "type": "expression", "variant": "list", "expression": flattenAll([a1, a22]) } };
          }, function(n11) {
            return n11;
          }, peg$otherExpectation("Null Literal"), function(n11) {
            return { "type": "literal", "variant": "null", "value": keyNode(n11) };
          }, peg$otherExpectation("Date Literal"), function(d8) {
            return { "type": "literal", "variant": "date", "value": keyNode(d8) };
          }, peg$otherExpectation("String Literal"), function(n11, s7) {
            return { "type": "literal", "variant": "text", "value": s7 };
          }, peg$otherExpectation("Single-quoted String Literal"), function(s7) {
            return unescape2(s7, "'");
          }, "''", peg$literalExpectation("''", false), /^[^']/, peg$classExpectation(["'"], true, false), peg$otherExpectation("Blob Literal"), /^[x]/i, peg$classExpectation(["x"], false, true), function(b9) {
            return { "type": "literal", "variant": "blob", "value": b9 };
          }, function(n11) {
            return { "type": "literal", "variant": "text", "value": n11 };
          }, peg$otherExpectation("Number Sign"), function(s7, n11) {
            if (isOkay(s7)) {
              n11["value"] = foldStringWord([s7, n11["value"]]);
            }
            return n11;
          }, function(d8, e5) {
            return { "type": "literal", "variant": "decimal", "value": foldStringWord([d8, e5]) };
          }, peg$otherExpectation("Decimal Literal"), function(f6, b9) {
            return foldStringWord([f6, b9]);
          }, function(t3, d8) {
            return foldStringWord([t3, d8]);
          }, peg$otherExpectation("Decimal Literal Exponent"), "e", peg$literalExpectation("E", true), /^[+\-]/, peg$classExpectation(["+", "-"], false, false), function(e5, s7, d8) {
            return foldStringWord([e5, s7, d8]);
          }, peg$otherExpectation("Hexidecimal Literal"), "0x", peg$literalExpectation("0x", true), function(f6, b9) {
            return { "type": "literal", "variant": "hexidecimal", "value": foldStringWord([f6, b9]) };
          }, /^[0-9a-f]/i, peg$classExpectation([["0", "9"], ["a", "f"]], false, true), /^[0-9]/, peg$classExpectation([["0", "9"]], false, false), peg$otherExpectation("Bind Parameter"), function(b9) {
            return Object.assign({ "type": "variable" }, b9);
          }, peg$otherExpectation("Numbered Bind Parameter"), function(q9, id) {
            return { "format": "numbered", "name": foldStringWord([q9, id]) };
          }, /^[1-9]/, peg$classExpectation([["1", "9"]], false, false), function(f6, r7) {
            return foldStringWord([f6, r7]);
          }, peg$otherExpectation("Named Bind Parameter"), /^[:@]/, peg$classExpectation([":", "@"], false, false), function(s7, name) {
            return { "format": "named", "name": foldStringWord([s7, name]) };
          }, peg$otherExpectation("TCL Bind Parameter"), "$", peg$literalExpectation("$", false), ":", peg$literalExpectation(":", false), function(d8, name, s7) {
            return Object.assign({ "format": "tcl", "name": foldStringWord([d8, name]) }, s7);
          }, function(sfx) {
            return { "suffix": sfx };
          }, peg$otherExpectation("EXISTS Expression"), function(n11, e5) {
            if (isOkay(n11)) {
              return { "type": "expression", "format": "unary", "variant": "exists", "expression": e5, "operator": keyNode(n11) };
            }
            return e5;
          }, peg$otherExpectation("EXISTS Keyword"), function(n11, x6) {
            return foldStringKey([n11, x6]);
          }, peg$otherExpectation("RAISE Expression"), function(s7, a5) {
            return Object.assign({ "type": "expression", "format": "unary", "variant": keyNode(s7), "expression": a5 }, a5);
          }, peg$otherExpectation("RAISE Expression Arguments"), function(a5) {
            return Object.assign({ "type": "error" }, a5);
          }, peg$otherExpectation("IGNORE Keyword"), function(f6) {
            return { "action": keyNode(f6) };
          }, function(f6, m10) {
            return { "action": keyNode(f6), "message": m10 };
          }, function(n11) {
            return n11;
          }, function(e5, c8) {
            return Object.assign(c8, { "expression": e5 });
          }, function(op, e5) {
            return { "type": "expression", "format": "unary", "variant": "operation", "expression": e5, "operator": keyNode(op) };
          }, peg$otherExpectation("COLLATE Expression"), function(c8) {
            return Object.assign({ "type": "expression", "format": "unary", "variant": "operation", "operator": "collate" }, c8);
          }, function(f6, rest) {
            return composeBinary(f6, rest);
          }, function(i8) {
            return [null, i8, null, { "type": "literal", "variant": "null", "value": "null" }];
          }, "not ", peg$literalExpectation("NOT ", true), "null", peg$literalExpectation("NULL", true), function() {
            return "not";
          }, function() {
            return "is";
          }, peg$otherExpectation("CAST Expression"), function(s7, e5, a5) {
            return { "type": "expression", "format": "unary", "variant": keyNode(s7), "expression": e5, "as": a5 };
          }, peg$otherExpectation("Type Alias"), function(d8) {
            return d8;
          }, peg$otherExpectation("CASE Expression"), function(t3, e5, w5, s7) {
            return Object.assign({ "type": "expression", "variant": keyNode(t3), "expression": flattenAll([w5, s7]) }, e5);
          }, function(e5) {
            return { "discriminant": e5 };
          }, peg$otherExpectation("WHEN Clause"), function(s7, w5, t3) {
            return { "type": "condition", "variant": keyNode(s7), "condition": w5, "consequent": t3 };
          }, peg$otherExpectation("ELSE Clause"), function(s7, e5) {
            return { "type": "condition", "variant": keyNode(s7), "consequent": e5 };
          }, function(v10, p10) {
            return Object.assign(p10, { "left": v10 });
          }, peg$otherExpectation("Comparison Expression"), function(n11, m10, e5, x6) {
            return Object.assign({ "type": "expression", "format": "binary", "variant": "operation", "operation": foldStringKey([n11, m10]), "right": e5 }, x6);
          }, peg$otherExpectation("ESCAPE Expression"), function(s7, e5) {
            return { "escape": e5 };
          }, peg$otherExpectation("BETWEEN Expression"), function(n11, b9, tail) {
            return { "type": "expression", "format": "binary", "variant": "operation", "operation": foldStringKey([n11, b9]), "right": tail };
          }, function(f6, rest) {
            return composeBinary(f6, [rest]);
          }, function(n11) {
            return keyNode(n11);
          }, peg$otherExpectation("IN Expression"), function(n11, i8, e5) {
            return { "type": "expression", "format": "binary", "variant": "operation", "operation": foldStringKey([n11, i8]), "right": e5 };
          }, function(e5) {
            return e5;
          }, peg$otherExpectation("Expression List"), function(l7) {
            return { "type": "expression", "variant": "list", "expression": isOkay(l7) ? l7 : [] };
          }, function(f6, rest) {
            return flattenAll([f6, rest]);
          }, peg$otherExpectation("Function Call"), function(n11, a5) {
            return Object.assign({ "type": "function", "name": n11 }, a5);
          }, peg$otherExpectation("Function Call Arguments"), function(s7) {
            return { "args": { "type": "identifier", "variant": "star", "name": s7 } };
          }, function(d8, e5) {
            return !isOkay(d8) || e5["expression"].length > 0;
          }, function(d8, e5) {
            return { "args": Object.assign(e5, d8) };
          }, function(s7) {
            return { "filter": keyNode(s7) };
          }, peg$otherExpectation("Error Message"), function(m10) {
            return m10;
          }, peg$otherExpectation("Statement"), function(m10, s7) {
            return Object.assign(s7, m10);
          }, peg$otherExpectation("QUERY PLAN"), function(e5, q9) {
            return { "explain": isOkay(e5) };
          }, peg$otherExpectation("QUERY PLAN Keyword"), function(q9, p10) {
            return foldStringKey([q9, p10]);
          }, peg$otherExpectation("END Transaction Statement"), function(s7, t3) {
            return { "type": "statement", "variant": "transaction", "action": "commit" };
          }, peg$otherExpectation("BEGIN Transaction Statement"), function(s7, m10, t3, n11) {
            return Object.assign({ "type": "statement", "variant": "transaction", "action": "begin" }, m10, n11);
          }, function(t3) {
            return t3;
          }, function(m10) {
            return { "defer": keyNode(m10) };
          }, peg$otherExpectation("ROLLBACK Statement"), function(s7, n11) {
            return Object.assign({ "type": "statement", "variant": "transaction", "action": "rollback" }, n11);
          }, peg$otherExpectation("TO Clause"), function(n11) {
            return { "savepoint": n11 };
          }, function(s7) {
            return keyNode(s7);
          }, peg$otherExpectation("SAVEPOINT Statement"), function(s7, n11) {
            return { "type": "statement", "variant": s7, "target": n11 };
          }, peg$otherExpectation("RELEASE Statement"), function(s7, a5, n11) {
            return { "type": "statement", "variant": keyNode(s7), "target": n11 };
          }, peg$otherExpectation("ALTER TABLE Statement"), function(s7, n11, e5) {
            return Object.assign({ "type": "statement", "variant": keyNode(s7), "target": n11 }, e5);
          }, peg$otherExpectation("ALTER TABLE Keyword"), function(a5, t3) {
            return foldStringKey([a5, t3]);
          }, peg$otherExpectation("RENAME TO Keyword"), function(s7, n11) {
            return { "action": keyNode(s7), "name": n11 };
          }, peg$otherExpectation("ADD COLUMN Keyword"), function(s7, d8) {
            return { "action": keyNode(s7), "definition": d8 };
          }, function(w5, s7) {
            return Object.assign(s7, w5);
          }, peg$otherExpectation("WITH Clause"), function(s7, v10, t3) {
            var recursive = { "variant": isOkay(v10) ? "recursive" : "common" };
            if (isArrayOkay(t3)) {
              t3 = t3.map(function(elem) {
                return Object.assign(elem, recursive);
              });
            }
            return { "with": t3 };
          }, function(f6, r7) {
            return flattenAll([f6, r7]);
          }, peg$otherExpectation("Common Table Expression"), function(t3, s7) {
            return Object.assign({ "type": "expression", "format": "table", "variant": "common", "target": t3 }, s7);
          }, function(s7) {
            return { "expression": s7 };
          }, function(w5, s7) {
            return Object.assign(s7, w5);
          }, peg$otherExpectation("ATTACH Statement"), function(a5, b9, e5, n11) {
            return { "type": "statement", "variant": keyNode(a5), "target": n11, "attach": e5 };
          }, peg$otherExpectation("DETACH Statement"), function(d8, b9, n11) {
            return { "type": "statement", "variant": keyNode(d8), "target": n11 };
          }, peg$otherExpectation("VACUUM Statement"), function(v10, t3) {
            return Object.assign({ "type": "statement", "variant": "vacuum" }, t3);
          }, function(t3) {
            return { "target": t3 };
          }, peg$otherExpectation("ANALYZE Statement"), function(s7, a5) {
            return Object.assign({ "type": "statement", "variant": keyNode(s7) }, a5);
          }, function(n11) {
            return { "target": n11["name"] };
          }, peg$otherExpectation("REINDEX Statement"), function(a5) {
            return { "target": a5["name"] };
          }, peg$otherExpectation("PRAGMA Statement"), function(s7, n11, v10) {
            return { "type": "statement", "variant": keyNode(s7), "target": n11, "args": { "type": "expression", "variant": "list", "expression": v10 } };
          }, function(v10) {
            return v10;
          }, function(v10) {
            return /^(yes|no|on|off|false|true|0|1)$/i.test(v10);
          }, function(v10) {
            return { "type": "literal", "variant": "boolean", "normalized": /^(yes|on|true|1)$/i.test(v10) ? "1" : "0", "value": v10 };
          }, function(n11) {
            return keyNode(n11);
          }, function(n11) {
            return { "type": "identifier", "variant": "name", "name": n11 };
          }, peg$otherExpectation("SELECT Statement"), function(s7, o9, l7) {
            return Object.assign(s7, o9, l7);
          }, peg$otherExpectation("ORDER BY Clause"), function(d8) {
            return { "order": d8["result"] };
          }, peg$otherExpectation("LIMIT Clause"), function(s7, e5, d8) {
            return { "limit": Object.assign({ "type": "expression", "variant": "limit", "start": e5 }, d8) };
          }, peg$otherExpectation("OFFSET Clause"), function(o9, e5) {
            return { "offset": e5 };
          }, function(s7, u8) {
            if (isArrayOkay(u8)) {
              return { "type": "statement", "variant": "compound", "statement": s7, "compound": u8 };
            } else {
              return s7;
            }
          }, peg$otherExpectation("Union Operation"), function(c8, s7) {
            return { "type": "compound", "variant": c8, "statement": s7 };
          }, function(s7, f6, w5, g9) {
            return Object.assign({ "type": "statement", "variant": "select" }, s7, f6, w5, g9);
          }, peg$otherExpectation("SELECT Results Clause"), function(d8, t3) {
            return Object.assign({ "result": t3 }, d8);
          }, peg$otherExpectation("SELECT Results Modifier"), function(s7) {
            return { "distinct": true };
          }, function(s7) {
            return {};
          }, peg$otherExpectation("FROM Clause"), function(f6, s7) {
            return { "from": s7 };
          }, peg$otherExpectation("WHERE Clause"), function(f6, e5) {
            return { "where": makeArray(e5) };
          }, peg$otherExpectation("GROUP BY Clause"), function(f6, e5, h8) {
            return Object.assign({ "group": e5 }, h8);
          }, peg$otherExpectation("HAVING Clause"), function(f6, e5) {
            return { "having": e5 };
          }, function(q9, s7) {
            return { "type": "identifier", "variant": "star", "name": foldStringWord([q9, s7]) };
          }, function(n11, s7) {
            return foldStringWord([n11, s7]);
          }, function(e5, a5) {
            return Object.assign(e5, a5);
          }, function(f6, t3) {
            if (isArrayOkay(t3)) {
              return { "type": "map", "variant": "join", "source": f6, "map": t3 };
            }
            return f6;
          }, function(cl, c8) {
            return Object.assign(cl, c8);
          }, peg$otherExpectation("CROSS JOIN Operation"), function(n11) {
            return { "type": "join", "variant": "cross join", "source": n11 };
          }, peg$otherExpectation("JOIN Operation"), function(o9, n11) {
            return { "type": "join", "variant": keyNode(o9), "source": n11 };
          }, function(n11, l7, a5) {
            return Object.assign({ "type": "function", "variant": "table", "name": n11, "args": l7 }, a5);
          }, peg$otherExpectation("Qualified Table"), function(d8, i8) {
            return Object.assign(d8, i8);
          }, peg$otherExpectation("Qualified Table Identifier"), function(n11, a5) {
            return Object.assign(n11, a5);
          }, peg$otherExpectation("Qualfied Table Index"), function(s7, n11) {
            return { "index": n11 };
          }, function(n11, i8) {
            return { "index": foldStringKey([n11, i8]) };
          }, peg$otherExpectation("SELECT Source"), function(l7, a5) {
            return Object.assign(l7, a5);
          }, peg$otherExpectation("Subquery"), function(s7, a5) {
            return Object.assign(s7, a5);
          }, peg$otherExpectation("Alias"), function(a5, n11) {
            return { "alias": n11 };
          }, peg$otherExpectation("JOIN Operator"), function(n11, t3, j5) {
            return foldStringKey([n11, t3, j5]);
          }, function(t3, o9) {
            return foldStringKey([t3, o9]);
          }, function(t3) {
            return keyNode(t3);
          }, peg$otherExpectation("JOIN Constraint"), function(c8) {
            return { "constraint": Object.assign({ "type": "constraint", "variant": "join" }, c8) };
          }, peg$otherExpectation("Join ON Clause"), function(s7, e5) {
            return { "format": keyNode(s7), "on": e5 };
          }, peg$otherExpectation("Join USING Clause"), function(s7, e5) {
            return { "format": keyNode(s7), "using": e5 };
          }, peg$otherExpectation("VALUES Clause"), function(s7, l7) {
            return { "type": "statement", "variant": "select", "result": l7 };
          }, function(f6, b9) {
            return { "result": flattenAll([f6, b9]) };
          }, function(i8) {
            return i8;
          }, peg$otherExpectation("Ordering Expression"), function(e5, d8) {
            if (isOkay(d8)) {
              return Object.assign({ "type": "expression", "variant": "order", "expression": e5 }, d8);
            }
            return e5;
          }, peg$otherExpectation("Star"), peg$otherExpectation("Fallback Type"), peg$otherExpectation("INSERT Statement"), function(k3, t3) {
            return Object.assign({ "type": "statement", "variant": "insert" }, k3, t3);
          }, peg$otherExpectation("INSERT Keyword"), function(a5, m10) {
            return Object.assign({ "action": keyNode(a5) }, m10);
          }, peg$otherExpectation("REPLACE Keyword"), function(a5) {
            return { "action": keyNode(a5) };
          }, peg$otherExpectation("INSERT OR Modifier"), function(s7, m10) {
            return { "or": keyNode(m10) };
          }, function(i8, r7) {
            return Object.assign({ "into": i8 }, r7);
          }, peg$otherExpectation("INTO Clause"), function(s7, t3) {
            return t3;
          }, peg$otherExpectation("INTO Keyword"), function(r7) {
            return { "result": r7 };
          }, peg$otherExpectation("Column List"), function(f6, b9) {
            return { "columns": flattenAll([f6, b9]) };
          }, function(c8) {
            return c8;
          }, peg$otherExpectation("Column Name"), function(n11) {
            return { "type": "identifier", "variant": "column", "name": n11 };
          }, function(s7, r7) {
            return r7;
          }, peg$otherExpectation("VALUES Keyword"), function(f6, b9) {
            return flattenAll([f6, b9]);
          }, peg$otherExpectation("Wrapped Expression List"), function(e5) {
            return e5;
          }, peg$otherExpectation("DEFAULT VALUES Clause"), function(d8, v10) {
            return { "type": "values", "variant": "default" };
          }, peg$otherExpectation("Compound Operator"), peg$otherExpectation("UNION Operator"), function(s7, a5) {
            return foldStringKey([s7, a5]);
          }, function(a5) {
            return a5;
          }, peg$otherExpectation("UPDATE Statement"), function(s7, f6, t3, u8, w5, o9, l7) {
            return Object.assign({ "type": "statement", "variant": s7, "into": t3 }, f6, u8, w5, o9, l7);
          }, peg$otherExpectation("UPDATE Keyword"), peg$otherExpectation("UPDATE OR Modifier"), function(t3) {
            return { "or": keyNode(t3) };
          }, peg$otherExpectation("SET Clause"), function(c8) {
            return { "set": c8 };
          }, peg$otherExpectation("Column Assignment"), function(f6, e5) {
            return { "type": "assignment", "target": f6, "value": e5 };
          }, peg$otherExpectation("DELETE Statement"), function(s7, t3, w5, o9, l7) {
            return Object.assign({ "type": "statement", "variant": s7, "from": t3 }, w5, o9, l7);
          }, peg$otherExpectation("DELETE Keyword"), peg$otherExpectation("CREATE Statement"), peg$otherExpectation("CREATE TABLE Statement"), function(s7, ne2, id, r7) {
            return Object.assign({ "type": "statement", "name": id }, s7, r7, ne2);
          }, function(s7, tmp, t3) {
            return Object.assign({ "variant": s7, "format": keyNode(t3) }, tmp);
          }, function(t3) {
            return { "temporary": isOkay(t3) };
          }, peg$otherExpectation("IF NOT EXISTS Modifier"), function(i8, n11, e5) {
            return { "condition": makeArray({ "type": "condition", "variant": keyNode(i8), "condition": { "type": "expression", "variant": keyNode(e5), "operator": foldStringKey([n11, e5]) } }) };
          }, peg$otherExpectation("Table Definition"), function(s7, t3, r7) {
            return Object.assign({ "definition": flattenAll([s7, t3]) }, r7);
          }, function(r7, w5) {
            return { "optimization": [{ "type": "optimization", "value": foldStringKey([r7, w5]) }] };
          }, function(f6) {
            return f6;
          }, peg$otherExpectation("Column Definition"), function(n11, t3, c8) {
            return Object.assign({ "type": "definition", "variant": "column", "name": n11, "definition": isOkay(c8) ? c8 : [] }, t3);
          }, peg$otherExpectation("Column Datatype"), function(t3) {
            return { "datatype": t3 };
          }, peg$otherExpectation("Column Constraint"), function(n11, c8, ln) {
            return Object.assign(c8, n11);
          }, function(cl) {
            return cl[cl.length - 1];
          }, peg$otherExpectation("CONSTRAINT Name"), function(n11) {
            return { "name": n11 };
          }, peg$otherExpectation("FOREIGN KEY Column Constraint"), function(f6) {
            return Object.assign({ "variant": "foreign key" }, f6);
          }, peg$otherExpectation("PRIMARY KEY Column Constraint"), function(p10, d8, c8, a5) {
            return Object.assign(p10, c8, d8, a5);
          }, peg$otherExpectation("PRIMARY KEY Keyword"), function(s7, k3) {
            return { "type": "constraint", "variant": foldStringKey([s7, k3]) };
          }, peg$otherExpectation("AUTOINCREMENT Keyword"), function(a5) {
            return { "autoIncrement": true };
          }, function(s7, c8) {
            return Object.assign({ "type": "constraint", "variant": s7 }, c8);
          }, peg$otherExpectation("UNIQUE Column Constraint"), peg$otherExpectation("NULL Column Constraint"), function(n11, l7) {
            return foldStringKey([n11, l7]);
          }, peg$otherExpectation("CHECK Column Constraint"), peg$otherExpectation("DEFAULT Column Constraint"), function(s7, v10) {
            return { "type": "constraint", "variant": keyNode(s7), "value": v10 };
          }, peg$otherExpectation("COLLATE Column Constraint"), function(c8) {
            return { "type": "constraint", "variant": "collate", "collate": c8 };
          }, peg$otherExpectation("Table Constraint"), function(n11, c8, nl) {
            return Object.assign({ "type": "definition", "variant": "constraint" }, c8, n11);
          }, peg$otherExpectation("CHECK Table Constraint"), function(c8) {
            return { "definition": makeArray(c8) };
          }, peg$otherExpectation("PRIMARY KEY Table Constraint"), function(k3, c8, t3) {
            return { "definition": makeArray(Object.assign(k3, t3, c8[1])), "columns": c8[0] };
          }, function(s7) {
            return { "type": "constraint", "variant": keyNode(s7) };
          }, function(p10, k3) {
            return foldStringKey([p10, k3]);
          }, peg$otherExpectation("UNIQUE Keyword"), function(u8) {
            return keyNode(u8);
          }, function(f6, b9) {
            return [f6].concat(b9);
          }, function(c8) {
            return c8.map(function(_ref) {
              var _ref2 = _slicedToArray(_ref, 1);
              var res = _ref2[0];
              return res;
            });
          }, function(c8) {
            var auto = c8.find(function(_ref3) {
              var _ref4 = _slicedToArray(_ref3, 2);
              var res = _ref4[0];
              var a5 = _ref4[1];
              return isOkay(a5);
            });
            return [c8.map(function(_ref5) {
              var _ref6 = _slicedToArray(_ref5, 2);
              var res = _ref6[0];
              var a5 = _ref6[1];
              return res;
            }), auto ? auto[1] : null];
          }, peg$otherExpectation("Indexed Column"), function(e5, d8, a5) {
            var res = e5;
            if (isOkay(d8)) {
              res = Object.assign({ "type": "expression", "variant": "order", "expression": e5 }, d8);
            }
            return [res, a5];
          }, peg$otherExpectation("Collation"), function(c8) {
            return { "collate": makeArray(c8) };
          }, peg$otherExpectation("Column Direction"), function(t3) {
            return { "direction": keyNode(t3) };
          }, function(s7, t3) {
            return { "conflict": keyNode(t3) };
          }, peg$otherExpectation("ON CONFLICT Keyword"), function(o9, c8) {
            return foldStringKey([o9, c8]);
          }, function(k3, c8) {
            return { "type": "constraint", "variant": keyNode(k3), "expression": c8 };
          }, peg$otherExpectation("FOREIGN KEY Table Constraint"), function(k3, l7, c8) {
            return Object.assign({ "definition": makeArray(Object.assign(k3, c8)) }, l7);
          }, peg$otherExpectation("FOREIGN KEY Keyword"), function(f6, k3) {
            return { "type": "constraint", "variant": foldStringKey([f6, k3]) };
          }, function(r7, a5, d8) {
            return Object.assign({ "type": "constraint" }, r7, a5, d8);
          }, peg$otherExpectation("REFERENCES Clause"), function(s7, t3) {
            return { "references": t3 };
          }, function(f6, b9) {
            return { "action": flattenAll([f6, b9]) };
          }, peg$otherExpectation("FOREIGN KEY Action Clause"), function(m10, a5, n11) {
            return { "type": "action", "variant": keyNode(m10), "action": keyNode(n11) };
          }, peg$otherExpectation("FOREIGN KEY Action"), function(s7, v10) {
            return foldStringKey([s7, v10]);
          }, function(c8) {
            return keyNode(c8);
          }, function(n11, a5) {
            return foldStringKey([n11, a5]);
          }, function(m10, n11) {
            return { "type": "action", "variant": keyNode(m10), "action": n11 };
          }, peg$otherExpectation("DEFERRABLE Clause"), function(n11, d8, i8) {
            return { "defer": foldStringKey([n11, d8, i8]) };
          }, function(i8, d8) {
            return foldStringKey([i8, d8]);
          }, function(s7) {
            return { "definition": makeArray(s7) };
          }, peg$otherExpectation("CREATE INDEX Statement"), function(s7, ne2, n11, o9, w5) {
            return Object.assign({ "type": "statement", "target": n11, "on": o9 }, s7, ne2, w5);
          }, function(s7, u8, i8) {
            return Object.assign({ "variant": keyNode(s7), "format": keyNode(i8) }, u8);
          }, function(u8) {
            return { "unique": true };
          }, peg$otherExpectation("ON Clause"), function(o9, t3, c8) {
            return { "type": "identifier", "variant": "expression", "format": "table", "name": t3["name"], "columns": c8 };
          }, peg$otherExpectation("CREATE TRIGGER Statement"), function(s7, ne2, n11, cd, o9, me2, wh, a5) {
            return Object.assign({ "type": "statement", "target": n11, "on": o9, "event": cd, "by": isOkay(me2) ? me2 : "row", "action": makeArray(a5) }, s7, ne2, wh);
          }, function(s7, tmp, t3) {
            return Object.assign({ "variant": keyNode(s7), "format": keyNode(t3) }, tmp);
          }, peg$otherExpectation("Conditional Clause"), function(m10, d8) {
            return Object.assign({ "type": "event" }, m10, d8);
          }, function(m10) {
            return { "occurs": keyNode(m10) };
          }, function(i8, o9) {
            return foldStringKey([i8, o9]);
          }, peg$otherExpectation("Conditional Action"), function(o9) {
            return { "event": keyNode(o9) };
          }, function(s7, f6) {
            return { "event": keyNode(s7), "of": f6 };
          }, function(s7, c8) {
            return c8;
          }, "statement", peg$literalExpectation("STATEMENT", true), function(f6, e5, r7) {
            return keyNode(r7);
          }, function(w5, e5) {
            return { "when": e5 };
          }, peg$otherExpectation("Actions Clause"), function(s7, a5, e5) {
            return a5;
          }, function(l7) {
            return l7;
          }, peg$otherExpectation("CREATE VIEW Statement"), function(s7, ne2, n11, r7) {
            return Object.assign({ "type": "statement", "target": n11, "result": r7 }, s7, ne2);
          }, function(n11, a5) {
            return Object.assign({ "type": "identifier", "variant": "expression", "format": "view", "name": n11["name"], "columns": [] }, a5);
          }, function(s7, tmp, v10) {
            return Object.assign({ "variant": keyNode(s7), "format": keyNode(v10) }, tmp);
          }, peg$otherExpectation("CREATE VIRTUAL TABLE Statement"), function(s7, ne2, n11, m10) {
            return Object.assign({ "type": "statement", "target": n11, "result": m10 }, s7, ne2);
          }, function(s7, v10, t3) {
            return { "variant": keyNode(s7), "format": keyNode(v10) };
          }, function(m10, a5) {
            return Object.assign({ "type": "module", "variant": "virtual", "name": m10 }, a5);
          }, peg$otherExpectation("Module Arguments"), function(l7) {
            return { "args": { "type": "expression", "variant": "list", "expression": isOkay(l7) ? l7 : [] } };
          }, function(f6, b9) {
            return flattenAll([f6, b9]).filter(function(arg) {
              return isOkay(arg);
            });
          }, function(a5) {
            return a5;
          }, peg$otherExpectation("DROP Statement"), function(s7, q9) {
            return Object.assign({ "type": "statement", "target": Object.assign(q9, { "variant": s7["format"] }) }, s7);
          }, peg$otherExpectation("DROP Keyword"), function(s7, t3, i8) {
            return Object.assign({ "variant": keyNode(s7), "format": t3, "condition": [] }, i8);
          }, peg$otherExpectation("DROP Type"), peg$otherExpectation("IF EXISTS Keyword"), function(i8, e5) {
            return { "condition": [{ "type": "condition", "variant": keyNode(i8), "condition": { "type": "expression", "variant": keyNode(e5), "operator": keyNode(e5) } }] };
          }, peg$otherExpectation("Or"), peg$otherExpectation("Add"), peg$otherExpectation("Subtract"), peg$otherExpectation("Multiply"), peg$otherExpectation("Divide"), peg$otherExpectation("Modulo"), peg$otherExpectation("Shift Left"), peg$otherExpectation("Shift Right"), peg$otherExpectation("Logical AND"), peg$otherExpectation("Logical OR"), peg$otherExpectation("Less Than"), peg$otherExpectation("Greater Than"), peg$otherExpectation("Less Than Or Equal"), peg$otherExpectation("Greater Than Or Equal"), peg$otherExpectation("Equal"), peg$otherExpectation("Not Equal"), peg$otherExpectation("IS"), function(i8, n11) {
            return foldStringKey([i8, n11]);
          }, peg$otherExpectation("Identifier"), peg$otherExpectation("Database Identifier"), function(n11) {
            return { "type": "identifier", "variant": "database", "name": n11 };
          }, peg$otherExpectation("Function Identifier"), function(d8, n11) {
            return { "type": "identifier", "variant": "function", "name": foldStringWord([d8, n11]) };
          }, peg$otherExpectation("Table Identifier"), function(d8, n11) {
            return { "type": "identifier", "variant": "table", "name": foldStringWord([d8, n11]) };
          }, function(n11, d8) {
            return foldStringWord([n11, d8]);
          }, peg$otherExpectation("Column Identifier"), function(q9, n11) {
            return { "type": "identifier", "variant": "column", "name": foldStringWord([q9, n11]) };
          }, function() {
            return "";
          }, function(d8, t3) {
            return foldStringWord([d8, t3]);
          }, peg$otherExpectation("Collation Identifier"), function(n11) {
            return { "type": "identifier", "variant": "collation", "name": n11 };
          }, peg$otherExpectation("Savepoint Identifier"), function(n11) {
            return { "type": "identifier", "variant": "savepoint", "name": n11 };
          }, peg$otherExpectation("Index Identifier"), function(d8, n11) {
            return { "type": "identifier", "variant": "index", "name": foldStringWord([d8, n11]) };
          }, peg$otherExpectation("Trigger Identifier"), function(d8, n11) {
            return { "type": "identifier", "variant": "trigger", "name": foldStringWord([d8, n11]) };
          }, peg$otherExpectation("View Identifier"), function(d8, n11) {
            return { "type": "identifier", "variant": "view", "name": foldStringWord([d8, n11]) };
          }, peg$otherExpectation("Pragma Identifier"), function(d8, n11) {
            return { "type": "identifier", "variant": "pragma", "name": foldStringWord([d8, n11]) };
          }, peg$otherExpectation("CTE Identifier"), function(d8) {
            return d8;
          }, function(n11, a5) {
            return Object.assign({ "type": "identifier", "variant": "expression", "format": "table", "name": n11["name"], "columns": [] }, a5);
          }, peg$otherExpectation("Table Constraint Identifier"), function(n11) {
            return { "type": "identifier", "variant": "constraint", "format": "table", "name": n11 };
          }, peg$otherExpectation("Column Constraint Identifier"), function(n11) {
            return { "type": "identifier", "variant": "constraint", "format": "column", "name": n11 };
          }, peg$otherExpectation("Datatype Name"), function(t3) {
            return [t3, "text"];
          }, function(t3) {
            return [t3, "real"];
          }, function(t3) {
            return [t3, "numeric"];
          }, function(t3) {
            return [t3, "integer"];
          }, function(t3) {
            return [t3, "none"];
          }, peg$otherExpectation("TEXT Datatype Name"), "n", peg$literalExpectation("N", true), "var", peg$literalExpectation("VAR", true), "char", peg$literalExpectation("CHAR", true), "tiny", peg$literalExpectation("TINY", true), "medium", peg$literalExpectation("MEDIUM", true), "long", peg$literalExpectation("LONG", true), "text", peg$literalExpectation("TEXT", true), "clob", peg$literalExpectation("CLOB", true), peg$otherExpectation("REAL Datatype Name"), "float", peg$literalExpectation("FLOAT", true), "real", peg$literalExpectation("REAL", true), peg$otherExpectation("DOUBLE Datatype Name"), "double", peg$literalExpectation("DOUBLE", true), "precision", peg$literalExpectation("PRECISION", true), function(d8, p10) {
            return foldStringWord([d8, p10]);
          }, peg$otherExpectation("NUMERIC Datatype Name"), "numeric", peg$literalExpectation("NUMERIC", true), "decimal", peg$literalExpectation("DECIMAL", true), "boolean", peg$literalExpectation("BOOLEAN", true), "date", peg$literalExpectation("DATE", true), "time", peg$literalExpectation("TIME", true), "stamp", peg$literalExpectation("STAMP", true), "string", peg$literalExpectation("STRING", true), peg$otherExpectation("INTEGER Datatype Name"), "int", peg$literalExpectation("INT", true), "2", peg$literalExpectation("2", false), "4", peg$literalExpectation("4", false), "8", peg$literalExpectation("8", false), "eger", peg$literalExpectation("EGER", true), "big", peg$literalExpectation("BIG", true), "small", peg$literalExpectation("SMALL", true), "floating", peg$literalExpectation("FLOATING", true), "point", peg$literalExpectation("POINT", true), function(f6, p10) {
            return foldStringWord([f6, p10]);
          }, peg$otherExpectation("BLOB Datatype Name"), "blob", peg$literalExpectation("BLOB", true), /^[a-z0-9$_]/i, peg$classExpectation([["a", "z"], ["0", "9"], "$", "_"], false, true), "\\u", peg$literalExpectation("\\u", false), /^[a-f0-9]/i, peg$classExpectation([["a", "f"], ["0", "9"]], false, true), function(u8, s7) {
            return foldStringWord([u8, s7]).toLowerCase();
          }, function(n11) {
            return keyNode(n11);
          }, peg$anyExpectation(), function(n11) {
            return textNode(n11);
          }, /^[ \t]/, peg$classExpectation([" ", "	"], false, false), '"', peg$literalExpectation('"', false), '""', peg$literalExpectation('""', false), /^[^"]/, peg$classExpectation(['"'], true, false), function(n11) {
            return unescape2(n11, '"');
          }, "'", peg$literalExpectation("'", false), function(n11) {
            return unescape2(n11, "'");
          }, "`", peg$literalExpectation("`", false), "``", peg$literalExpectation("``", false), /^[^`]/, peg$classExpectation(["`"], true, false), function(n11) {
            return unescape2(n11, "`");
          }, peg$otherExpectation("Open Bracket"), "[", peg$literalExpectation("[", false), peg$otherExpectation("Close Bracket"), "]", peg$literalExpectation("]", false), peg$otherExpectation("Open Parenthesis"), "(", peg$literalExpectation("(", false), peg$otherExpectation("Close Parenthesis"), ")", peg$literalExpectation(")", false), peg$otherExpectation("Comma"), ",", peg$literalExpectation(",", false), peg$otherExpectation("Period"), ".", peg$literalExpectation(".", false), peg$otherExpectation("Asterisk"), "*", peg$literalExpectation("*", false), peg$otherExpectation("Question Mark"), "?", peg$literalExpectation("?", false), peg$otherExpectation("Single Quote"), peg$otherExpectation("Double Quote"), peg$otherExpectation("Backtick"), peg$otherExpectation("Tilde"), "~", peg$literalExpectation("~", false), peg$otherExpectation("Plus"), "+", peg$literalExpectation("+", false), peg$otherExpectation("Minus"), "-", peg$literalExpectation("-", false), "=", peg$literalExpectation("=", false), peg$otherExpectation("Ampersand"), "&", peg$literalExpectation("&", false), peg$otherExpectation("Pipe"), "|", peg$literalExpectation("|", false), "%", peg$literalExpectation("%", false), "<", peg$literalExpectation("<", false), ">", peg$literalExpectation(">", false), peg$otherExpectation("Exclamation"), "!", peg$literalExpectation("!", false), peg$otherExpectation("Semicolon"), ";", peg$literalExpectation(";", false), peg$otherExpectation("Colon"), peg$otherExpectation("Forward Slash"), "/", peg$literalExpectation("/", false), peg$otherExpectation("Backslash"), "\\", peg$literalExpectation("\\", false), "abort", peg$literalExpectation("ABORT", true), "action", peg$literalExpectation("ACTION", true), "add", peg$literalExpectation("ADD", true), "after", peg$literalExpectation("AFTER", true), "all", peg$literalExpectation("ALL", true), "alter", peg$literalExpectation("ALTER", true), "analyze", peg$literalExpectation("ANALYZE", true), "and", peg$literalExpectation("AND", true), "as", peg$literalExpectation("AS", true), "asc", peg$literalExpectation("ASC", true), "attach", peg$literalExpectation("ATTACH", true), "autoincrement", peg$literalExpectation("AUTOINCREMENT", true), "before", peg$literalExpectation("BEFORE", true), "begin", peg$literalExpectation("BEGIN", true), "between", peg$literalExpectation("BETWEEN", true), "by", peg$literalExpectation("BY", true), "cascade", peg$literalExpectation("CASCADE", true), "case", peg$literalExpectation("CASE", true), "cast", peg$literalExpectation("CAST", true), "check", peg$literalExpectation("CHECK", true), "collate", peg$literalExpectation("COLLATE", true), "column", peg$literalExpectation("COLUMN", true), "commit", peg$literalExpectation("COMMIT", true), "conflict", peg$literalExpectation("CONFLICT", true), "constraint", peg$literalExpectation("CONSTRAINT", true), "create", peg$literalExpectation("CREATE", true), "cross", peg$literalExpectation("CROSS", true), "current_date", peg$literalExpectation("CURRENT_DATE", true), "current_time", peg$literalExpectation("CURRENT_TIME", true), "current_timestamp", peg$literalExpectation("CURRENT_TIMESTAMP", true), "database", peg$literalExpectation("DATABASE", true), "default", peg$literalExpectation("DEFAULT", true), "deferrable", peg$literalExpectation("DEFERRABLE", true), "deferred", peg$literalExpectation("DEFERRED", true), "delete", peg$literalExpectation("DELETE", true), "desc", peg$literalExpectation("DESC", true), "detach", peg$literalExpectation("DETACH", true), "distinct", peg$literalExpectation("DISTINCT", true), "drop", peg$literalExpectation("DROP", true), "each", peg$literalExpectation("EACH", true), "else", peg$literalExpectation("ELSE", true), "end", peg$literalExpectation("END", true), "escape", peg$literalExpectation("ESCAPE", true), "except", peg$literalExpectation("EXCEPT", true), "exclusive", peg$literalExpectation("EXCLUSIVE", true), "exists", peg$literalExpectation("EXISTS", true), "explain", peg$literalExpectation("EXPLAIN", true), "fail", peg$literalExpectation("FAIL", true), "for", peg$literalExpectation("FOR", true), "foreign", peg$literalExpectation("FOREIGN", true), "from", peg$literalExpectation("FROM", true), "full", peg$literalExpectation("FULL", true), "glob", peg$literalExpectation("GLOB", true), "group", peg$literalExpectation("GROUP", true), "having", peg$literalExpectation("HAVING", true), "if", peg$literalExpectation("IF", true), "ignore", peg$literalExpectation("IGNORE", true), "immediate", peg$literalExpectation("IMMEDIATE", true), "in", peg$literalExpectation("IN", true), "index", peg$literalExpectation("INDEX", true), "indexed", peg$literalExpectation("INDEXED", true), "initially", peg$literalExpectation("INITIALLY", true), "inner", peg$literalExpectation("INNER", true), "insert", peg$literalExpectation("INSERT", true), "instead", peg$literalExpectation("INSTEAD", true), "intersect", peg$literalExpectation("INTERSECT", true), "into", peg$literalExpectation("INTO", true), "is", peg$literalExpectation("IS", true), "isnull", peg$literalExpectation("ISNULL", true), "join", peg$literalExpectation("JOIN", true), "key", peg$literalExpectation("KEY", true), "left", peg$literalExpectation("LEFT", true), "like", peg$literalExpectation("LIKE", true), "limit", peg$literalExpectation("LIMIT", true), "match", peg$literalExpectation("MATCH", true), "natural", peg$literalExpectation("NATURAL", true), "no", peg$literalExpectation("NO", true), "not", peg$literalExpectation("NOT", true), "notnull", peg$literalExpectation("NOTNULL", true), "of", peg$literalExpectation("OF", true), "offset", peg$literalExpectation("OFFSET", true), "on", peg$literalExpectation("ON", true), "or", peg$literalExpectation("OR", true), "order", peg$literalExpectation("ORDER", true), "outer", peg$literalExpectation("OUTER", true), "plan", peg$literalExpectation("PLAN", true), "pragma", peg$literalExpectation("PRAGMA", true), "primary", peg$literalExpectation("PRIMARY", true), "query", peg$literalExpectation("QUERY", true), "raise", peg$literalExpectation("RAISE", true), "recursive", peg$literalExpectation("RECURSIVE", true), "references", peg$literalExpectation("REFERENCES", true), "regexp", peg$literalExpectation("REGEXP", true), "reindex", peg$literalExpectation("REINDEX", true), "release", peg$literalExpectation("RELEASE", true), "rename", peg$literalExpectation("RENAME", true), "replace", peg$literalExpectation("REPLACE", true), "restrict", peg$literalExpectation("RESTRICT", true), "right", peg$literalExpectation("RIGHT", true), "rollback", peg$literalExpectation("ROLLBACK", true), "row", peg$literalExpectation("ROW", true), "rowid", peg$literalExpectation("ROWID", true), "savepoint", peg$literalExpectation("SAVEPOINT", true), "select", peg$literalExpectation("SELECT", true), "set", peg$literalExpectation("SET", true), "table", peg$literalExpectation("TABLE", true), "temp", peg$literalExpectation("TEMP", true), "temporary", peg$literalExpectation("TEMPORARY", true), "then", peg$literalExpectation("THEN", true), "to", peg$literalExpectation("TO", true), "transaction", peg$literalExpectation("TRANSACTION", true), "trigger", peg$literalExpectation("TRIGGER", true), "union", peg$literalExpectation("UNION", true), "unique", peg$literalExpectation("UNIQUE", true), "update", peg$literalExpectation("UPDATE", true), "using", peg$literalExpectation("USING", true), "vacuum", peg$literalExpectation("VACUUM", true), "values", peg$literalExpectation("VALUES", true), "view", peg$literalExpectation("VIEW", true), "virtual", peg$literalExpectation("VIRTUAL", true), "when", peg$literalExpectation("WHEN", true), "where", peg$literalExpectation("WHERE", true), "with", peg$literalExpectation("WITH", true), "without", peg$literalExpectation("WITHOUT", true), function(r7) {
            return keyNode(r7);
          }, function() {
            return null;
          }, peg$otherExpectation("Line Comment"), "--", peg$literalExpectation("--", false), /^[\n\v\f\r]/, peg$classExpectation(["\n", "\v", "\f", "\r"], false, false), peg$otherExpectation("Block Comment"), "/*", peg$literalExpectation("/*", false), "*/", peg$literalExpectation("*/", false), /^[\n\v\f\r\t ]/, peg$classExpectation(["\n", "\v", "\f", "\r", "	", " "], false, false), peg$otherExpectation("Whitespace"), "__TODO__", peg$literalExpectation("__TODO__", false)];
          var peg$bytecode = [peg$decode(`%;\u023F/H#;#/?$;"." &"/1$;#/($8$: $!!)($'#(#'#("'#&'#`), peg$decode(`%;\u023F/C#;#/:$;x/1$;#/($8$: $!!)($'#(#'#("'#&'#`), peg$decode(`%;x/B#;\u023F/9$$;%0#*;%&/)$8#:!#"" )(#'#("'#&'#`), peg$decode("$;\u01B30#*;\u01B3&"), peg$decode("$;\u01B3/&#0#*;\u01B3&&&#"), peg$decode(`%;$/:#;x/1$;\u023F/($8#:"#!!)(#'#("'#&'#`), peg$decode(`<%;'.# &;(/@#;\u023F/7$;*." &"/)$8#:$#"" )(#'#("'#&'#=." 7#`), peg$decode("%;\u018B/' 8!:%!! )"), peg$decode(`<%;\u0195/9#$;)0#*;)&/)$8":'""! )("'#&'#=." 7&`), peg$decode(`%4(""5!7)/1#;\u0197/($8":*"! )("'#&'#`), peg$decode(`<%;\u01A0/R#;5/I$;\u023F/@$;+." &"/2$;\u01A1/)$8%:,%"#!)(%'#($'#(#'#("'#&'#=." 7+`), peg$decode(`%;\u01A2/C#;\u023F/:$;5/1$;\u023F/($8$:-$!!)($'#(#'#("'#&'#`), peg$decode(";5.; &;6.5 &;2./ &;-.) &;..# &;/"), peg$decode(`<%;\u0206/1#;\u023F/($8":/"!!)("'#&'#=." 7.`), peg$decode(`<%;\u01D2.) &;\u01D4.# &;\u01D3/1#;\u023F/($8":1"!!)("'#&'#=." 70`), peg$decode(`<%;4." &"/2#;0/)$8":3""! )("'#&'#=." 72`), peg$decode(`<%;\u01A6/A#$;10#*;1&/1$;\u01A6/($8#:5#!!)(#'#("'#&'#=." 74`), peg$decode('26""6677.) &48""5!79'), peg$decode(`<%4;""5!7</1#;0/($8":="! )("'#&'#=." 7:`), peg$decode("%;\u0197.# &;\u019B/' 8!:>!! )"), peg$decode(`<%;\u01AA.# &;\u01AB/' 8!:"!! )=." 7?`), peg$decode(`%;4." &"/2#;6/)$8":@""! )("'#&'#`), peg$decode(";<.# &;7"), peg$decode(`%;8/7#;;." &"/)$8":A""! )("'#&'#`), peg$decode('<;9.# &;:=." 7B'), peg$decode(`%$;>/&#0#*;>&&&#/7#;:." &"/)$8":C""! )("'#&'#`), peg$decode(`%;\u01A3/9#$;>0#*;>&/)$8":D""! )("'#&'#`), peg$decode(`<%3F""5!7G/T#4H""5!7I." &"/@$$;>/&#0#*;>&&&#/*$8#:J##"! )(#'#("'#&'#=." 7E`), peg$decode(`<%3L""5"7M/?#$;=/&#0#*;=&&&#/)$8":N""! )("'#&'#=." 7K`), peg$decode('4O""5!7P'), peg$decode('4Q""5!7R'), peg$decode(`<%;@.) &;B.# &;C/' 8!:T!! )=." 7S`), peg$decode(`<%;\u01A5/@#;A." &"/2$;\u023F/)$8#:V#""!)(#'#("'#&'#=." 7U`), peg$decode(`%4W""5!7X/9#$;>0#*;>&/)$8":Y""! )("'#&'#`), peg$decode(`<%4[""5!7\\/H#$;\u0193/&#0#*;\u0193&&&#/2$;\u023F/)$8#:]#""!)(#'#("'#&'#=." 7Z`), peg$decode(`<%2_""6_7\`/o#$;\u0193.) &2a""6a7b/2#0/*;\u0193.) &2a""6a7b&&&#/A$;\u023F/8$;D." &"/*$8$:c$##" )($'#(#'#("'#&'#=." 7^`), peg$decode(`%;\u019B/1#;\u023F/($8":d"!!)("'#&'#`), peg$decode(`<%;F." &"/;#;\u023F/2$;\x94/)$8#:f#"" )(#'#("'#&'#=." 7e`), peg$decode(`<%;k." &"/;#;\u01E4/2$;\u023F/)$8#:h#""!)(#'#("'#&'#=." 7g`), peg$decode(`<%;\u0211/_#;\u023F/V$;\u01A0/M$;\u023F/D$;H/;$;\u023F/2$;\u01A1/)$8':j'"&")(''#(&'#(%'#($'#(#'#("'#&'#=." 7i`), peg$decode(`<%;I.# &;J/' 8!:l!! )=." 7k`), peg$decode(`<%;\u01EF/' 8!:n!! )=." 7m`), peg$decode(`%;\u021B.) &;\u01B7.# &;\u01E6/M#;\u023F/D$;\u01A2/;$;\u023F/2$;w/)$8%:o%"$ )(%'#($'#(#'#("'#&'#`), peg$decode(";?./ &;t.) &;,.# &;\u017D"), peg$decode(`%;\u01A0/L#;\u023F/C$;p/:$;\u023F/1$;\u01A1/($8%:p%!")(%'#($'#(#'#("'#&'#`), peg$decode(";L.; &;E.5 &;_./ &;a.) &;G.# &;K"), peg$decode(`%;M/;#;\u023F/2$;Q/)$8#:q#"" )(#'#("'#&'#.# &;M`), peg$decode(`%;P/A#;\u023F/8$;N.# &;p/)$8#:r#"" )(#'#("'#&'#.# &;N`), peg$decode(`;\u01A9.U &;\u01AB.O &;\u01AA.I &%%;k/8#%<;\u01E4=.##&&!&'#/#$+")("'#&'#/"!&,)`), peg$decode(`<%;\u012D/' 8!:t!! )=." 7s`), peg$decode(`%;O/\x83#$%;\u023F/>#;\u0166/5$;\u023F/,$;O/#$+$)($'#(#'#("'#&'#0H*%;\u023F/>#;\u0166/5$;\u023F/,$;O/#$+$)($'#(#'#("'#&'#&/)$8":u""! )("'#&'#`), peg$decode(`%;R/\x83#$%;\u023F/>#;T/5$;\u023F/,$;R/#$+$)($'#(#'#("'#&'#0H*%;\u023F/>#;T/5$;\u023F/,$;R/#$+$)($'#(#'#("'#&'#&/)$8":u""! )("'#&'#`), peg$decode(";\u0169.) &;\u016A.# &;\u016B"), peg$decode(`%;S/\x83#$%;\u023F/>#;V/5$;\u023F/,$;S/#$+$)($'#(#'#("'#&'#0H*%;\u023F/>#;V/5$;\u023F/,$;S/#$+$)($'#(#'#("'#&'#&/)$8":u""! )("'#&'#`), peg$decode(";\u0167.# &;\u0168"), peg$decode(`%;U/\x83#$%;\u023F/>#;X/5$;\u023F/,$;U/#$+$)($'#(#'#("'#&'#0H*%;\u023F/>#;X/5$;\u023F/,$;U/#$+$)($'#(#'#("'#&'#&/)$8":u""! )("'#&'#`), peg$decode(`;\u016C.U &;\u016D.O &;\u016E.I &%%;\u016F/8#%<;\u016F=.##&&!&'#/#$+")("'#&'#/"!&,)`), peg$decode(`%;W/\x83#$%;\u023F/>#;Z/5$;\u023F/,$;W/#$+$)($'#(#'#("'#&'#0H*%;\u023F/>#;Z/5$;\u023F/,$;W/#$+$)($'#(#'#("'#&'#&/)$8":u""! )("'#&'#`), peg$decode(`;\u0172.{ &;\u0173.u &%%;\u0170/8#%<;X=.##&&!&'#/#$+")("'#&'#/"!&,).I &%%;\u0171/8#%<;X=.##&&!&'#/#$+")("'#&'#/"!&,)`), peg$decode(`%;Y/9#$;\\0#*;\\&/)$8":u""! )("'#&'#`), peg$decode(`%;\u023F/1#;]/($8":v"! )("'#&'#.H &%;\u023F/>#;^/5$;\u023F/,$;Y/#$+$)($'#(#'#("'#&'#`), peg$decode(`%3w""5$7x/?#;\u023F/6$3y""5$7z/'$8#:{# )(#'#("'#&'#.? &%;\u01FB/& 8!:|! ).. &%;\u0205/& 8!:{! )`), peg$decode(";\u0177./ &;\u0175.) &;\u0176.# &;\u0174"), peg$decode(`<%;\u01C9/i#;\u023F/\`$;\u01A0/W$;p/N$;\u023F/E$;\`/<$;\u023F/3$;\u01A1/*$8(:~(#'$")(('#(''#(&'#(%'#($'#(#'#("'#&'#=." 7}`), peg$decode(`<%;\u01BF/:#;\u023F/1$;&/($8#:\x80#! )(#'#("'#&'#=." 7\x7F`), peg$decode(`<%;\u01C8/\x93#;\u023F/\x8A$;b." &"/|$;\u023F/s$$;c/&#0#*;c&&&#/]$;\u023F/T$;d." &"/F$;\u023F/=$;\u01E0/4$;\u023F/+$8*:\x82*$)'%#)(*'#()'#(('#(''#(&'#(%'#($'#(#'#("'#&'#=." 7\x81`), peg$decode(`%%<;\u0230=.##&&!&'#/1#;p/($8":\x83"! )("'#&'#`), peg$decode(`<%;\u0230/i#;\u023F/\`$;p/W$;\u023F/N$;\u0224/E$;\u023F/<$;p/3$;\u023F/*$8(:\x85(#'%!)(('#(''#(&'#(%'#($'#(#'#("'#&'#=." 7\x84`), peg$decode(`<%;\u01DF/D#;\u023F/;$;p/2$;\u023F/)$8$:\x87$"#!)($'#(#'#("'#&'#=." 7\x86`), peg$decode(`%;[/;#;\u023F/2$;f/)$8#:\x88#"" )(#'#("'#&'#.# &;[`), peg$decode(";l.) &;i.# &;g"), peg$decode(`<%;k." &"/o#;\u01FF./ &;\u01EB.) &;\u0214.# &;\u0201/T$;\u023F/K$;p/B$;\u023F/9$;h." &"/+$8&:\x8A&$%$" )(&'#(%'#($'#(#'#("'#&'#=." 7\x89`), peg$decode(`<%;\u01E1/D#;\u023F/;$;p/2$;\u023F/)$8$:\x8C$"#!)($'#(#'#("'#&'#=." 7\x8B`), peg$decode(`<%;k." &"/E#;\u01C5/<$;\u023F/3$;j/*$8$:\x8E$##" )($'#(#'#("'#&'#=." 7\x8D`), peg$decode(`%;e/W#%;\u023F/>#;\u01BE/5$;\u023F/,$;e/#$+$)($'#(#'#("'#&'#/)$8":\x8F""! )("'#&'#`), peg$decode(`%;\u0204/1#;\u023F/($8":\x90"!!)("'#&'#`), peg$decode(`<%;k." &"/E#;\u01F1/<$;\u023F/3$;m/*$8$:\x92$##" )($'#(#'#("'#&'#=." 7\x91`), peg$decode(";n.# &;\u017B"), peg$decode(`%;\u01A0/I#;\x95.# &;q/:$;\u023F/1$;\u01A1/($8$:\x93$!")($'#(#'#("'#&'#`), peg$decode(`%;e/\x83#$%;\u023F/>#;\u01BE/5$;\u023F/,$;e/#$+$)($'#(#'#("'#&'#0H*%;\u023F/>#;\u01BE/5$;\u023F/,$;e/#$+$)($'#(#'#("'#&'#&/)$8":u""! )("'#&'#`), peg$decode(`%;o/\x83#$%;\u023F/>#;\u020A/5$;\u023F/,$;o/#$+$)($'#(#'#("'#&'#0H*%;\u023F/>#;\u020A/5$;\u023F/,$;o/#$+$)($'#(#'#("'#&'#&/)$8":u""! )("'#&'#`), peg$decode(`<%;r." &"/1#;\u023F/($8":\x95"!!)("'#&'#=." 7\x94`), peg$decode(`%;p/B#;\u023F/9$$;s0#*;s&/)$8#:\x96#"" )(#'#("'#&'#`), peg$decode(`%;\u01A2/:#;p/1$;\u023F/($8#:\x93#!!)(#'#("'#&'#`), peg$decode(`<%;\u017A/[#;\u023F/R$;\u01A0/I$;u." &"/;$;\u023F/2$;\u01A1/)$8&:\x98&"%")(&'#(%'#($'#(#'#("'#&'#=." 7\x97`), peg$decode(`<%;\xDB/' 8!:\x9A!! ).V &%;v." &"/G#;q/>$9:\x9B "! -""&!&#/)$8#:\x9C#""!)(#'#("'#&'#=." 7\x99`), peg$decode(`%;\u01DC.# &;\u01BB/1#;\u023F/($8":\x9D"!!)("'#&'#`), peg$decode(`<%;//' 8!:\x9F!! )=." 7\x9E`), peg$decode(`<%;y." &"/;#;{/2$;\u023F/)$8#:\xA1#""!)(#'#("'#&'#=." 7\xA0`), peg$decode(`<%;\u01E5/@#;\u023F/7$;z." &"/)$8#:\xA3#"" )(#'#("'#&'#=." 7\xA2`), peg$decode(`<%;\u0210/D#;\u023F/;$;\u020D/2$;\u023F/)$8$:\xA5$"#!)($'#(#'#("'#&'#=." 7\xA4`), peg$decode(";\x8C.S &;\xFB.M &;\u0162.G &;}.A &;|.; &;\x86.5 &;\x80./ &;\x84.) &;\x85.# &;\x96"), peg$decode(`<%;\u01CD.# &;\u01E0/@#;\u023F/7$;~." &"/)$8#:\xA7#"" )(#'#("'#&'#=." 7\xA6`), peg$decode(`<%;\u01C4/^#;\u023F/U$;\x7F." &"/G$;~." &"/9$;\x82." &"/+$8%:\xA9%$$"! )(%'#($'#(#'#("'#&'#=." 7\xA8`), peg$decode(`%;\u0226/1#;\u023F/($8":\xAA"!!)("'#&'#`), peg$decode(`%;\u01D8.) &;\u01F0.# &;\u01E3/1#;\u023F/($8":\xAB"!!)("'#&'#`), peg$decode(`<%;\u021B/N#;\u023F/E$;~." &"/7$;\x81." &"/)$8$:\xAD$"# )($'#(#'#("'#&'#=." 7\xAC`), peg$decode(`<%%;\u0225/,#;\u023F/#$+")("'#&'#." &"/?#;\x83." &"/1$;\x82/($8#:p#! )(#'#("'#&'#=." 7\xAE`), peg$decode(`%;\u0182/1#;\u023F/($8":\xAF"!!)("'#&'#`), peg$decode(`%;\u021E/1#;\u023F/($8":\xB0"!!)("'#&'#`), peg$decode(`<%;\x83/2#;\x82/)$8":\xB2""! )("'#&'#=." 7\xB1`), peg$decode(`<%;\u0216/J#;\u023F/A$;\x83." &"/3$;\x82/*$8$:\xB4$##! )($'#(#'#("'#&'#=." 7\xB3`), peg$decode(`<%;\x87/N#;\u017B/E$;\u023F/<$;\x88/3$;\u023F/*$8%:\xB6%#$#!)(%'#($'#(#'#("'#&'#=." 7\xB5`), peg$decode(`<%;\u01BC/D#;\u023F/;$;\u0221/2$;\u023F/)$8$:\xB8$"#!)($'#(#'#("'#&'#=." 7\xB7`), peg$decode(";\x89.# &;\x8A"), peg$decode(`<%;\u0217/M#;\u023F/D$;\u0225/;$;\u023F/2$;\u017B/)$8%:\xBA%"$ )(%'#($'#(#'#("'#&'#=." 7\xB9`), peg$decode(`<%;\u01B9/I#;\u023F/@$;\x8B." &"/2$;\u010C/)$8$:\xBC$"# )($'#(#'#("'#&'#=." 7\xBB`), peg$decode(`%;\u01CC/1#;\u023F/($8":\xB0"!!)("'#&'#`), peg$decode(`%;\x8D/2#;\xA7/)$8":\xBD""! )("'#&'#`), peg$decode(`<%;\x8E." &"/1#;\u023F/($8":*"!!)("'#&'#=." 7\xBE`), peg$decode(`%;\u0232/J#;\u023F/A$;\x8F." &"/3$;\x90/*$8$:\xBF$##! )($'#(#'#("'#&'#`), peg$decode(`%;\u0212/1#;\u023F/($8":\xB0"!!)("'#&'#`), peg$decode(`%;\x92/B#;\u023F/9$$;\x910#*;\x91&/)$8#:\xC0#"" )(#'#("'#&'#`), peg$decode(`%;\u01A2/:#;\x92/1$;\u023F/($8#:\x93#!!)(#'#("'#&'#`), peg$decode(`<%;\u0187/2#;\x93/)$8":\xC2""! )("'#&'#=." 7\xC1`), peg$decode(`%;\u01BF/:#;\u023F/1$;\x94/($8#:\xC3#! )(#'#("'#&'#`), peg$decode(`%;\u01A0/C#;\x95/:$;\u023F/1$;\u01A1/($8$: $!")($'#(#'#("'#&'#`), peg$decode(`%;\x8D/2#;\xA8/)$8":\xC4""! )("'#&'#`), peg$decode(";\x97.; &;\x99.5 &;\x9A./ &;\x9C.) &;\x9E.# &;\xA0"), peg$decode(`<%;\u01C1/\x8B#;\u023F/\x82$%;\u01D5/,#;\u023F/#$+")("'#&'#." &"/a$;p/X$;\u023F/O$;\u01BF/F$;\u023F/=$;\x98/4$;\u023F/+$8):\xC6)$(&%!)()'#(('#(''#(&'#(%'#($'#(#'#("'#&'#=." 7\xC5`), peg$decode(";\u0179.) &;-.# &;?"), peg$decode(`<%;\u01DB/f#;\u023F/]$%;\u01D5/,#;\u023F/#$+")("'#&'#." &"/<$;\x98/3$;\u023F/*$8%:\xC8%#$"!)(%'#($'#(#'#("'#&'#=." 7\xC7`), peg$decode(`<%;\u022C/@#;\u023F/7$;\x9B." &"/)$8#:\xCA#"" )(#'#("'#&'#=." 7\xC9`), peg$decode(`%;\u0179/1#;\u023F/($8":\xCB"!!)("'#&'#`), peg$decode(`<%;\u01BD/@#;\u023F/7$;\x9D." &"/)$8#:\xCD#"" )(#'#("'#&'#=." 7\xCC`), peg$decode(`%;\u017B.) &;\u0183.# &;\u0179/1#;\u023F/($8":\xCE"!!)("'#&'#`), peg$decode(`<%;\u0215/I#;\u023F/@$;\x9F." &"/2$;\u023F/)$8$:\xCD$"#!)($'#(#'#("'#&'#=." 7\xCF`), peg$decode(`%;\u017B.) &;\u0183.# &;\u0181/1#;\u023F/($8":\xD0"!!)("'#&'#`), peg$decode(`<%;\u020E/S#;\u023F/J$;\u0186/A$;\u023F/8$;\xA1." &"/*$8%:\xD2%#$" )(%'#($'#(#'#("'#&'#=." 7\xD1`), peg$decode(`%;\u01A0/C#;\xA2/:$;\u023F/1$;\u01A1/($8$:\xD3$!")($'#(#'#("'#&'#.D &%;\u01AC/:#;\xA2/1$;\u023F/($8#:\xD3#!!)(#'#("'#&'#`), peg$decode(";\xA4.) &;\xA3.# &;\xA6"), peg$decode(";5.) &;/.# &;3"), peg$decode(`%;\xA5/<#9:\xD4 ! -""&!&#/($8":\xD5"!!)("'#&'#`), peg$decode("%$;\u0193/&#0#*;\u0193&&&#/' 8!:\xD6!! )"), peg$decode("%;\xA5/' 8!:\xD7!! )"), peg$decode(";\xA8./ &;\xDD.) &;\xF2.# &;\xF9"), peg$decode(`<%;\xAE/X#;\u023F/O$;\xA9." &"/A$;\u023F/8$;\xAA." &"/*$8%:\xD9%#$" )(%'#($'#(#'#("'#&'#=." 7\xD8`), peg$decode(`<%;\u020B/L#;\u023F/C$;\u01C6/:$;\u023F/1$;\xD8/($8%:\xDB%! )(%'#($'#(#'#("'#&'#=." 7\xDA`), peg$decode(`<%;\u0200/S#;\u023F/J$;p/A$;\u023F/8$;\xAB." &"/*$8%:\xDD%#$" )(%'#($'#(#'#("'#&'#=." 7\xDC`), peg$decode(`<%;\xAC/2#;p/)$8":\xDF""! )("'#&'#=." 7\xDE`), peg$decode(";\xAD.# &;\u01A2"), peg$decode(`%;\u0208/1#;\u023F/($8":\xB0"!!)("'#&'#`), peg$decode(`%;\xB0/B#;\u023F/9$$;\xAF0#*;\xAF&/)$8#:\xE0#"" )(#'#("'#&'#`), peg$decode(`<%;\xEF/D#;\u023F/;$;\xB0/2$;\u023F/)$8$:\xE2$"#!)($'#(#'#("'#&'#=." 7\xE1`), peg$decode(";\xB1.# &;\xD7"), peg$decode(`%;\xB2/U#;\xB8." &"/G$;\xB9." &"/9$;\xBA." &"/+$8$:\xE3$$#"! )($'#(#'#("'#&'#`), peg$decode(`<%;\u021F/R#;\u023F/I$;\xB3." &"/;$;\u023F/2$;\xB6/)$8%:\xE5%"" )(%'#($'#(#'#("'#&'#=." 7\xE4`), peg$decode('<;\xB4.# &;\xB5=." 7\xE6'), peg$decode(`%;\u01DC/1#;\u023F/($8":\xE7"!!)("'#&'#`), peg$decode(`%;\u01BB/1#;\u023F/($8":\xE8"!!)("'#&'#`), peg$decode(`%;\xBC/B#;\u023F/9$$;\xB70#*;\xB7&/)$8#:\xC0#"" )(#'#("'#&'#`), peg$decode(`%;\u01A2/:#;\xBC/1$;\u023F/($8#:-#!!)(#'#("'#&'#`), peg$decode(`<%;\u01E9/D#;\u023F/;$;\xC0/2$;\u023F/)$8$:\xEA$"#!)($'#(#'#("'#&'#=." 7\xE9`), peg$decode(`<%;\u0231/D#;\u023F/;$;p/2$;\u023F/)$8$:\xEC$"#!)($'#(#'#("'#&'#=." 7\xEB`), peg$decode(`<%;\u01EC/e#;\u023F/\\$;\u01C6/S$;\u023F/J$;q/A$;\u023F/8$;\xBB." &"/*$8':\xEE'#&" )(''#(&'#(%'#($'#(#'#("'#&'#=." 7\xED`), peg$decode(`<%;\u01ED/D#;\u023F/;$;p/2$;\u023F/)$8$:\xF0$"#!)($'#(#'#("'#&'#=." 7\xEF`), peg$decode(";\xBD.# &;\xBF"), peg$decode(`%;\xBE." &"/2#;\xDB/)$8":\xF1""! )("'#&'#`), peg$decode(`%;\u0195/2#;\u01A3/)$8":\xF2""! )("'#&'#`), peg$decode(`%;p/@#;\u023F/7$;\xCD." &"/)$8#:\xF3#"" )(#'#("'#&'#`), peg$decode(`%;\xC4/B#;\u023F/9$$;\xC10#*;\xC1&/)$8#:\xF4#"" )(#'#("'#&'#`), peg$decode(`%;\xC2.# &;\xC3/7#;\xD4." &"/)$8":\xF5""! )("'#&'#`), peg$decode(`<%;\u01A2/:#;\xC4/1$;\u023F/($8#:\xF7#!!)(#'#("'#&'#=." 7\xF6`), peg$decode(`<%;\xCE/D#;\u023F/;$;\xC4/2$;\u023F/)$8$:\xF9$"#!)($'#(#'#("'#&'#=." 7\xF8`), peg$decode(";\xCB.5 &;?./ &;\xC5.) &;\xC6.# &;\xCC"), peg$decode(`%;\u017A/S#;\u023F/J$;\xED/A$;\u023F/8$;\xCD." &"/*$8%:\xFA%#$" )(%'#($'#(#'#("'#&'#`), peg$decode(`<%;\xC7/@#;\u023F/7$;\xC8." &"/)$8#:\xFC#"" )(#'#("'#&'#=." 7\xFB`), peg$decode(`<%;\u017B/@#;\u023F/7$;\xCD." &"/)$8#:\xFE#"" )(#'#("'#&'#=." 7\xFD`), peg$decode('<;\xC9.# &;\xCA=." 7\xFF'), peg$decode(`%;\u01F3/V#;\u023F/M$;\u01C6/D$;\u023F/;$;\u0183/2$;\u023F/)$8&:\u0100&"%!)(&'#(%'#($'#(#'#("'#&'#`), peg$decode(`%;k/;#;\u01F3/2$;\u023F/)$8#:\u0101#""!)(#'#("'#&'#`), peg$decode(`<%;\u01A0/R#;\xC0/I$;\u023F/@$;\u01A1/7$;\xCD." &"/)$8%:\u0103%"# )(%'#($'#(#'#("'#&'#=." 7\u0102`), peg$decode(`<%;\x94/7#;\xCD." &"/)$8":\u0105""! )("'#&'#=." 7\u0104`), peg$decode(`<%%;\u01BF/Q#%%<;\u0193.# &;\u0236=.##&&!&'#/,#;\u023F/#$+")("'#&'#/#$+")("'#&'#." &"/;#;\u0195/2$;\u023F/)$8#:\u0107#""!)(#'#("'#&'#=." 7\u0106`), peg$decode(`<%;\xCF." &"/J#;\u023F/A$;\xD0." &"/3$;\u01FC/*$8$:\u0109$##! )($'#(#'#("'#&'#=." 7\u0108`), peg$decode(`%;\u0202/1#;\u023F/($8":\x90"!!)("'#&'#`), peg$decode(";\xD1.# &;\xD3"), peg$decode(`%;\u01FE.) &;\u021A.# &;\u01EA/@#;\u023F/7$;\xD2." &"/)$8#:\u010A#"" )(#'#("'#&'#`), peg$decode(`%;\u020C/1#;\u023F/($8":\u010B"!!)("'#&'#`), peg$decode(`%;\u01F5.# &;\u01D1/1#;\u023F/($8":\u010B"!!)("'#&'#`), peg$decode(`<%;\xD5.# &;\xD6/1#;\u023F/($8":\u010D"!!)("'#&'#=." 7\u010C`), peg$decode(`<%;\u0209/;#;\u023F/2$;p/)$8#:\u010F#"" )(#'#("'#&'#=." 7\u010E`), peg$decode(`<%;\u022B/;#;\u023F/2$;\xE6/)$8#:\u0111#"" )(#'#("'#&'#=." 7\u0110`), peg$decode(`<%;\u022D/;#;\u023F/2$;\xEB/)$8#:\u0113#"" )(#'#("'#&'#=." 7\u0112`), peg$decode(`%;\xDA/B#;\u023F/9$$;\xD90#*;\xD9&/)$8#:\u0114#"" )(#'#("'#&'#`), peg$decode(`%;\u01A2/:#;\xDA/1$;\u023F/($8#:\u0115#!!)(#'#("'#&'#`), peg$decode(`<%;p/@#;\u023F/7$;\u012F." &"/)$8#:\u0117#"" )(#'#("'#&'#=." 7\u0116`), peg$decode('<;\u01A4=." 7\u0118'), peg$decode('<;\u0218.5 &;\u021B./ &;\u01B7.) &;\u01E6.# &;\u01EF=." 7\u0119'), peg$decode(`<%;\xDE/;#;\u023F/2$;\xE2/)$8#:\u011B#"" )(#'#("'#&'#=." 7\u011A`), peg$decode(";\xDF.# &;\xE0"), peg$decode(`<%;\u01F6/@#;\u023F/7$;\xE1." &"/)$8#:\u011D#"" )(#'#("'#&'#=." 7\u011C`), peg$decode(`<%;\u0218/1#;\u023F/($8":\u011F"!!)("'#&'#=." 7\u011E`), peg$decode(`<%;\u020A/;#;\u023F/2$;\xDC/)$8#:\u0121#"" )(#'#("'#&'#=." 7\u0120`), peg$decode(`%;\xE3/2#;\xE5/)$8":\u0122""! )("'#&'#`), peg$decode(`<%;\xE4/2#;\u0187/)$8":\u0124""! )("'#&'#=." 7\u0123`), peg$decode(`<%;\u01F9/,#;\u023F/#$+")("'#&'#=." 7\u0125`), peg$decode(`<%;\xE9.) &;\x95.# &;\xEE/1#;\u023F/($8":\u0126"!!)("'#&'#=." 7\u0112`), peg$decode(`<%;\u01A0/T#;\xE8/K$;\u023F/B$$;\xE70#*;\xE7&/2$;\u01A1/)$8%:\u0128%"#!)(%'#($'#(#'#("'#&'#=." 7\u0127`), peg$decode(`%;\u01A2/:#;\xE8/1$;\u023F/($8#:\u0129#!!)(#'#("'#&'#`), peg$decode(`<%;\u0178/' 8!:\u012B!! )=." 7\u012A`), peg$decode(`<%;\xEA/2#;\xEB/)$8":\u012C""! )("'#&'#=." 7\u0112`), peg$decode(`<%;\u022D/1#;\u023F/($8":\xB0"!!)("'#&'#=." 7\u012D`), peg$decode(`%;\xED/B#;\u023F/9$$;\xEC0#*;\xEC&/)$8#:\u012E#"" )(#'#("'#&'#`), peg$decode(`%;\u01A2/:#;\xED/1$;\u023F/($8#:\x93#!!)(#'#("'#&'#`), peg$decode(`<%;\u01A0/C#;q/:$;\u023F/1$;\u01A1/($8$:\u0130$!")($'#(#'#("'#&'#=." 7\u012F`), peg$decode(`<%;\u01D6/;#;\u023F/2$;\u022D/)$8#:\u0132#"" )(#'#("'#&'#=." 7\u0131`), peg$decode(`<%;\xF0.) &;\u01F8.# &;\u01E2/' 8!:\xB0!! )=." 7\u0133`), peg$decode(`<%;\u0228/@#;\u023F/7$;\xF1." &"/)$8#:\u0135#"" )(#'#("'#&'#=." 7\u0134`), peg$decode(`%;\u01BB/1#;\u023F/($8":\u0136"!!)("'#&'#`), peg$decode(`<%;\xF3/\x8A#;\xF4." &"/|$;\xC6/s$;\u023F/j$;\xF5/a$;\xB9." &"/S$;\xA9." &"/E$;\u023F/<$;\xAA." &"/.$8):\u0138)'('&$#" )()'#(('#(''#(&'#(%'#($'#(#'#("'#&'#=." 7\u0137`), peg$decode(`<%;\u022A/1#;\u023F/($8":\xB0"!!)("'#&'#=." 7\u0139`), peg$decode(`<%;\u020A/C#;\u023F/:$;\xDC/1$;\u023F/($8$:\u013B$!!)($'#(#'#("'#&'#=." 7\u013A`), peg$decode(`<%;\u0220/C#;\u023F/:$;\xF6/1$;\u023F/($8$:\u013D$!!)($'#(#'#("'#&'#=." 7\u013C`), peg$decode(`%;\xF8/9#$;\xF70#*;\xF7&/)$8":\u012E""! )("'#&'#`), peg$decode(`%;\u023F/:#;\u01A2/1$;\xF8/($8#:\u0129#! )(#'#("'#&'#`), peg$decode(`<%;\u017D/M#;\u023F/D$;\u01AC/;$;p/2$;\u023F/)$8%:\u013F%"$!)(%'#($'#(#'#("'#&'#=." 7\u013E`), peg$decode(`<%;\xFA/h#;\xC6/_$;\u023F/V$;\xB9." &"/H$;\xA9." &"/:$;\xAA." &"/,$8&:\u0141&%%$"! )(&'#(%'#($'#(#'#("'#&'#=." 7\u0140`), peg$decode(`<%;\u01D9/C#;\u023F/:$;\u01E9/1$;\u023F/($8$:\xB0$!#)($'#(#'#("'#&'#=." 7\u0142`), peg$decode('<;\xFD.5 &;\xFE./ &;\xFF.) &;\u0100.# &;\u0101=." 7\u0143'), peg$decode(`%;\u01D0/1#;\u023F/($8":\xB0"!!)("'#&'#`), peg$decode(`%%<%;\xFC/>#;\u01F2./ &;\u0227.) &;\u022E.# &;\u022F/#$+")("'#&'#=.##&&!&'#/1#;\u0102/($8":\u0129"! )("'#&'#`), peg$decode(`%%<%;\xFC/>#;\u0221./ &;\u0227.) &;\u022E.# &;\u022F/#$+")("'#&'#=.##&&!&'#/1#;\u0143/($8":\u0129"! )("'#&'#`), peg$decode(`%%<%;\xFC/>#;\u0221./ &;\u01F2.) &;\u022E.# &;\u022F/#$+")("'#&'#=.##&&!&'#/1#;\u0147/($8":\u0129"! )("'#&'#`), peg$decode(`%%<%;\xFC/>#;\u0221./ &;\u01F2.) &;\u0227.# &;\u022F/#$+")("'#&'#=.##&&!&'#/1#;\u0156/($8":\u0129"! )("'#&'#`), peg$decode(`%%<%;\xFC/>#;\u0221./ &;\u01F2.) &;\u0227.# &;\u022E/#$+")("'#&'#=.##&&!&'#/1#;\u015A/($8":\u0129"! )("'#&'#`), peg$decode(`<%;\u0103/T#;\u0105." &"/F$;\u017B/=$;\u023F/4$;\u0106/+$8%:\u0145%$$#" )(%'#($'#(#'#("'#&'#=." 7\u0144`), peg$decode(`%;\xFC/J#;\u0104." &"/<$;\u0221/3$;\u023F/*$8$:\u0146$##"!)($'#(#'#("'#&'#`), peg$decode(`%;\u0223.# &;\u0222/1#;\u023F/($8":\u0147"!!)("'#&'#`), peg$decode(`<%;\u01EE/N#;\u023F/E$;k/<$;\u01E4/3$;\u023F/*$8%:\u0149%#$"!)(%'#($'#(#'#("'#&'#=." 7\u0148`), peg$decode(";\u0107.# &;\u0142"), peg$decode(`<%;\u01A0/Z#;\u0109/Q$$;\u010B0#*;\u010B&/A$;\u01A1/8$;\u0108." &"/*$8%:\u014B%##" )(%'#($'#(#'#("'#&'#=." 7\u014A`), peg$decode(`%;\u0233/D#;\u023F/;$;\u021D/2$;\u023F/)$8$:\u014C$"#!)($'#(#'#("'#&'#`), peg$decode(`%;\u010C/B#;\u023F/9$$;\u010A0#*;\u010A&/)$8#:\u012E#"" )(#'#("'#&'#`), peg$decode(`%;\u01A2/:#;\u010C/1$;\u023F/($8#:\xAA#!!)(#'#("'#&'#`), peg$decode(`%;\u01A2." &"/1#;\u0120/($8":\u014D"! )("'#&'#`), peg$decode(`<%;\u010D/O#;\u023F/F$;\u010E." &"/8$;\u010F." &"/*$8$:\u014F$##! )($'#(#'#("'#&'#=." 7\u014E`), peg$decode(`%;\u0195/=#%<;\u023F=/##&'!&&#/($8":p"!!)("'#&'#.\\ &%%<;\u010E.) &;\u0111.# &;\u0120=.##&&!&'#/:#;\u023F/1$;\u0198/($8#:p#! )(#'#("'#&'#`), peg$decode(`<%;&/1#;\u023F/($8":\u0151"!!)("'#&'#=." 7\u0150`), peg$decode(`%;\u0111/B#$;\u01100#*;\u0110&/2$;\u023F/)$8#:\u012E#""!)(#'#("'#&'#`), peg$decode(`%;\u023F/1#;\u0111/($8":\u0129"! )("'#&'#`), peg$decode(`<%;\u0112." &"/A#;\u0114/8$;\u0112." &"/*$8#:\u0153##"! )(#'#("'#&'#=." 7\u0152`), peg$decode("%$;\u0113/&#0#*;\u0113&&&#/' 8!:\u0154!! )"), peg$decode(`<%;\u01CF/C#;\u023F/:$;\u0195/1$;\u023F/($8$:\u0156$!!)($'#(#'#("'#&'#=." 7\u0155`), peg$decode(";\u0116.; &;\u0119.5 &;\u011C./ &;\u011D.) &;\u011F.# &;\u0115"), peg$decode(`<%;\u0135/' 8!:\u0158!! )=." 7\u0157`), peg$decode(`<%;\u0117/U#;\u012F." &"/G$;\u0130." &"/9$;\u0118." &"/+$8$:\u015A$$#"! )($'#(#'#("'#&'#=." 7\u0159`), peg$decode(`<%;\u020F.# &;\u020E/D#;\u023F/;$;\u01FD/2$;\u023F/)$8$:\u015C$"#!)($'#(#'#("'#&'#=." 7\u015B`), peg$decode(`<%;\u01C2/1#;\u023F/($8":\u015E"!!)("'#&'#=." 7\u015D`), peg$decode(`%;\u011A/@#;\u0130." &"/2$;\u023F/)$8#:\u015F#""!)(#'#("'#&'#`), peg$decode(`<%;\u011B.# &;\u0229/1#;\u023F/($8":\u010B"!!)("'#&'#=." 7\u0160`), peg$decode(`<%;k." &"/2#;\u0206/)$8":\u0162""! )("'#&'#=." 7\u0161`), peg$decode('<;\u0132=." 7\u0163'), peg$decode(`<%;\u01D6/D#;\u023F/;$;\u011E/2$;\u023F/)$8$:\u0165$"#!)($'#(#'#("'#&'#=." 7\u0164`), peg$decode(";L./ &;5.) &;,.# &;3"), peg$decode(`<%;\u012D/' 8!:\u0167!! )=." 7\u0166`), peg$decode(`<%;\u0112." &"/J#;\u0121/A$;\u023F/8$;\u0112." &"/*$8$:\u0169$##" )($'#(#'#("'#&'#=." 7\u0168`), peg$decode(";\u0133.) &;\u0123.# &;\u0122"), peg$decode(`<%;\u0132/' 8!:\u016B!! )=." 7\u016A`), peg$decode(`<%;\u0124/J#;\u023F/A$;\u0129/8$;\u0130." &"/*$8$:\u016D$##! )($'#(#'#("'#&'#=." 7\u016C`), peg$decode(`%;\u0125.# &;\u0126/1#;\u023F/($8":\u016E"!!)("'#&'#`), peg$decode(`<%;\u020F/;#;\u023F/2$;\u01FD/)$8#:\u016F#"" )(#'#("'#&'#=." 7\u015B`), peg$decode(`<%;\u0229/' 8!:\u0171!! )=." 7\u0170`), peg$decode(`%;\u01A0/T#;\u012B/K$;\u023F/B$$;\u012A0#*;\u012A&/2$;\u01A1/)$8%:\u0172%"#!)(%'#($'#(#'#("'#&'#`), peg$decode("%;\u0127/' 8!:\u0173!! )"), peg$decode("%;\u0127/' 8!:\u0174!! )"), peg$decode(`%;\u01A2/:#;\u012B/1$;\u023F/($8#:\u0129#!!)(#'#("'#&'#`), peg$decode(`<%;\u012C/O#;\u023F/F$;\u012F." &"/8$;\u0118." &"/*$8$:\u0176$##! )($'#(#'#("'#&'#=." 7\u0175`), peg$decode(`%;\xE8/\\#%<%;\u023F/8#;\u01B3.) &;\u01A1.# &;\u012F/#$+")("'#&'#=/##&'!&&#/($8":p"!!)("'#&'#.# &;p`), peg$decode(`<%$;\u012E/&#0#*;\u012E&&&#/' 8!:\u0178!! )=." 7\u0177`), peg$decode(`%;\u01CB/C#;\u023F/:$;\u0181/1$;\u023F/($8$:p$!!)($'#(#'#("'#&'#`), peg$decode(`<%;\u01C0.# &;\u01DA/1#;\u023F/($8":\u017A"!!)("'#&'#=." 7\u0179`), peg$decode(`%;\u0131/;#;\xDC/2$;\u023F/)$8#:\u017B#""!)(#'#("'#&'#`), peg$decode(`<%;\u0209/D#;\u023F/;$;\u01CE/2$;\u023F/)$8$:\u017D$"#!)($'#(#'#("'#&'#=." 7\u017C`), peg$decode(`%;\u01CA/;#;\u023F/2$;L/)$8#:\u017E#"" )(#'#("'#&'#`), peg$decode(`<%;\u0134/E#;\xE6/<$;\u0135/3$;\u023F/*$8$:\u0180$##"!)($'#(#'#("'#&'#=." 7\u017F`), peg$decode(`<%;\u01E8/D#;\u023F/;$;\u01FD/2$;\u023F/)$8$:\u0182$"#!)($'#(#'#("'#&'#=." 7\u0181`), peg$decode(`%;\u0136/F#;\u0137." &"/8$;\u0140." &"/*$8#:\u0183##"! )(#'#("'#&'#`), peg$decode(`<%;\u0213/D#;\u023F/;$;\u0187/2$;\u023F/)$8$:\u0185$"#!)($'#(#'#("'#&'#=." 7\u0184`), peg$decode(`%;\u0139/B#;\u023F/9$$;\u01380#*;\u0138&/)$8#:\u0186#"" )(#'#("'#&'#`), peg$decode(`%;\u0139/1#;\u023F/($8":\u0136"!!)("'#&'#`), peg$decode('<;\u013A.# &;\u013F=." 7\u0187'), peg$decode(`%;\u0209/T#;\u023F/K$;\u01D9.# &;\u022A/<$;\u023F/3$;\u013B/*$8%:\u0188%#$" )(%'#($'#(#'#("'#&'#`), peg$decode('<;\u013C.) &;\u013D.# &;\u013E=." 7\u0189'), peg$decode(`%;\u0220/J#;\u023F/A$;\u0206.# &;\u01D6/2$;\u023F/)$8$:\u018A$"#!)($'#(#'#("'#&'#`), peg$decode(`%;\u01C7.# &;\u0219/1#;\u023F/($8":\u018B"!!)("'#&'#`), peg$decode(`%;\u0203/D#;\u023F/;$;\u01B8/2$;\u023F/)$8$:\u018C$"#!)($'#(#'#("'#&'#`), peg$decode(`%;\u0201/D#;\u023F/;$;\u0195/2$;\u023F/)$8$:\u018D$"#!)($'#(#'#("'#&'#`), peg$decode(`<%;k." &"/J#;\u01D7/A$;\u023F/8$;\u0141." &"/*$8$:\u018F$##" )($'#(#'#("'#&'#=." 7\u018E`), peg$decode(`%;\u01F4/J#;\u023F/A$;\u01D8.# &;\u01F0/2$;\u023F/)$8$:\u0190$"#!)($'#(#'#("'#&'#`), peg$decode("%;\u0159/' 8!:\u0191!! )"), peg$decode(`<%;\u0144/c#;\u0105." &"/U$;\u0183/L$;\u023F/C$;\u0146/:$;\xB9." &"/,$8&:\u0193&%%$#! )(&'#(%'#($'#(#'#("'#&'#=." 7\u0192`), peg$decode(`%;\xFC/J#;\u0145." &"/<$;\u01F2/3$;\u023F/*$8$:\u0194$##"!)($'#(#'#("'#&'#`), peg$decode(`%;\u0229/1#;\u023F/($8":\u0195"!!)("'#&'#`), peg$decode(`<%;\u0209/N#;\u023F/E$;\u017B/<$;\u023F/3$;\u0128/*$8%:\u0197%#$" )(%'#($'#(#'#("'#&'#=." 7\u0196`), peg$decode(`<%;\u0148/\xA6#;\u0105." &"/\x98$;\u0184." &"/\x8A$;\u023F/\x81$;\u0149/x$;\u0209/o$;\u023F/f$;\u017B/]$;\u023F/T$;\u0151." &"/F$;\u0152." &"/8$;\u0153//$8,:\u0199,(+*)'$"! )(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#("'#&'#=." 7\u0198`), peg$decode(`%;\xFC/J#;\u0104." &"/<$;\u0227/3$;\u023F/*$8$:\u019A$##"!)($'#(#'#("'#&'#`), peg$decode(`<%;\u014A." &"/2#;\u014C/)$8":\u019C""! )("'#&'#=." 7\u019B`), peg$decode(`%;\u01C3.) &;\u01BA.# &;\u014B/1#;\u023F/($8":\u019D"!!)("'#&'#`), peg$decode(`%;\u01F7/;#;\u023F/2$;\u0207/)$8#:\u019E#"" )(#'#("'#&'#`), peg$decode('<;\u014D.# &;\u014E=." 7\u019F'), peg$decode(`%;\u01D9.# &;\u01F6/1#;\u023F/($8":\u01A0"!!)("'#&'#`), peg$decode(`%;\u022A/@#;\u023F/7$;\u014F." &"/)$8#:\u01A1#"" )(#'#("'#&'#`), peg$decode(`%;\u0207/;#;\u023F/2$;\u0150/)$8#:\u01A2#"" )(#'#("'#&'#`), peg$decode(`%;\xE8/B#;\u023F/9$$;\xE70#*;\xE7&/)$8#:\u012E#"" )(#'#("'#&'#`), peg$decode(`%;\u01E7/c#;\u023F/Z$;\u01DE/Q$;\u023F/H$;\u021C.) &3\u01A3""5)7\u01A4/3$;\u023F/*$8&:\u01A5&#%#!)(&'#(%'#($'#(#'#("'#&'#`), peg$decode(`<%;\u0230/D#;\u023F/;$;p/2$;\u023F/)$8$:\u01A6$"#!)($'#(#'#("'#&'#=." 7\x84`), peg$decode(`<%;\u01C4/W#;\u023F/N$;\u0154/E$;\u023F/<$;\u01E0/3$;\u023F/*$8&:\u01A8&#%#!)(&'#(%'#($'#(#'#("'#&'#=." 7\u01A7`), peg$decode("%$;\u0155/&#0#*;\u0155&&&#/' 8!:\u01A9!! )"), peg$decode(`%;\x8C/:#;\u023F/1$;$/($8#:"#!")(#'#("'#&'#`), peg$decode(`<%;\u0158/T#;\u0105." &"/F$;\u0157/=$;\u023F/4$;\u0159/+$8%:\u01AB%$$#" )(%'#($'#(#'#("'#&'#=." 7\u01AA`), peg$decode(`%;\u0185/;#;\u023F/2$;\xE6/)$8#:\u01AC#"" )(#'#("'#&'#.# &;\u0185`), peg$decode(`%;\xFC/J#;\u0104." &"/<$;\u022E/3$;\u023F/*$8$:\u01AD$##"!)($'#(#'#("'#&'#`), peg$decode(`%;\u01BF/D#;\u023F/;$;\xA8/2$;\u023F/)$8$:\u012C$"#!)($'#(#'#("'#&'#`), peg$decode(`<%;\u015B/f#;\u0105." &"/X$;\u017B/O$;\u023F/F$;\u022B/=$;\u023F/4$;\u015C/+$8':\u01AF'$&%$ )(''#(&'#(%'#($'#(#'#("'#&'#=." 7\u01AE`), peg$decode(`%;\xFC/N#;\u022F/E$;\u023F/<$;\u0221/3$;\u023F/*$8%:\u01B0%#$#!)(%'#($'#(#'#("'#&'#`), peg$decode(`%;\u0197/@#;\u023F/7$;\u015D." &"/)$8#:\u01B1#"" )(#'#("'#&'#`), peg$decode(`<%;\u01A0/Z#;\u023F/Q$;\u015E." &"/C$;\u023F/:$;\u01A1/1$;\u023F/($8&:\u01B3&!#)(&'#(%'#($'#(#'#("'#&'#=." 7\u01B2`), peg$decode(`%;\u0160/9#$;\u015F0#*;\u015F&/)$8":\u01B4""! )("'#&'#`), peg$decode(`%;\u023F/H#;\u01A2/?$;\u023F/6$;\u0160." &"/($8$:\u01B5$! )($'#(#'#("'#&'#`), peg$decode(`%%<%;\u0195/;#;\u023F/2$;&.# &;\u0111/#$+#)(#'#("'#&'#=.##&&!&'#/:#;p/1$;\u023F/($8#:\u0130#!!)(#'#("'#&'#.x &%;\u0161/n#%%<;\u0193=.##&&!&'#/,#;\u023F/#$+")("'#&'#/F$;\u010E." &"/8$;\u010F." &"/*$8$:\u014F$##! )($'#(#'#("'#&'#`), peg$decode(";\u0195.# &;\u0198"), peg$decode(`<%;\u0163/;#;\u017B/2$;\u023F/)$8#:\u01B7#""!)(#'#("'#&'#=." 7\u01B6`), peg$decode(`<%;\u01DD/J#;\u023F/A$;\u0164/8$;\u0165." &"/*$8$:\u01B9$##! )($'#(#'#("'#&'#=." 7\u01B8`), peg$decode(`<%;\u0221./ &;\u01F2.) &;\u0227.# &;\u022E/1#;\u023F/($8":\u010B"!!)("'#&'#=." 7\u01BA`), peg$decode(`<%;\u01EE/D#;\u023F/;$;\u01E4/2$;\u023F/)$8$:\u01BC$"#!)($'#(#'#("'#&'#=." 7\u01BB`), peg$decode(`<%;\u01AE/,#;\u01AE/#$+")("'#&'#=." 7\u01BD`), peg$decode('<;\u01AA=." 7\u01BE'), peg$decode('<;\u01AB=." 7\u01BF'), peg$decode('<;\u01A4=." 7\u01C0'), peg$decode('<;\u01B5=." 7\u01C1'), peg$decode('<;\u01AF=." 7\u01C2'), peg$decode(`<%;\u01B0/,#;\u01B0/#$+")("'#&'#=." 7\u01C3`), peg$decode(`<%;\u01B1/,#;\u01B1/#$+")("'#&'#=." 7\u01C4`), peg$decode('<;\u01AD=." 7\u01C5'), peg$decode('<;\u01AE=." 7\u01C6'), peg$decode('<;\u01B0=." 7\u01C7'), peg$decode('<;\u01B1=." 7\u01C8'), peg$decode(`<%;\u01B0/,#;\u01AC/#$+")("'#&'#=." 7\u01C9`), peg$decode(`<%;\u01B1/,#;\u01AC/#$+")("'#&'#=." 7\u01CA`), peg$decode(`<%;\u01AC/1#;\u01AC." &"/#$+")("'#&'#=." 7\u01CB`), peg$decode(`<%;\u01B2/,#;\u01AC/#$+")("'#&'#=." 7\u01CC`), peg$decode(`<%;\u01B0/,#;\u01B1/#$+")("'#&'#=." 7\u01CC`), peg$decode(`<%;\u01FA/@#;\u023F/7$;k." &"/)$8#:\u01CE#"" )(#'#("'#&'#=." 7\u01CD`), peg$decode('<;\u0195.# &;\u0198=." 7\u01CF'), peg$decode(`<%;\u0178/' 8!:\u01D1!! )=." 7\u01D0`), peg$decode(`<%;\u017C." &"/2#;\u0178/)$8":\u01D3""! )("'#&'#=." 7\u01D2`), peg$decode(`<%;\u017C." &"/2#;\u0178/)$8":\u01D5""! )("'#&'#=." 7\u01D4`), peg$decode(`%;\u0178/2#;\u01A3/)$8":\u01D6""! )("'#&'#`), peg$decode(`<%;\u017F.) &;\u0180.# &;\u017E/2#;\u0178/)$8":\u01D8""! )("'#&'#=." 7\u01D7`), peg$decode("%;\u023F/& 8!:\u01D9! )"), peg$decode(`%;\u017C/2#;\u0180/)$8":\u01DA""! )("'#&'#`), peg$decode(`%;\u0178/2#;\u01A3/)$8":D""! )("'#&'#`), peg$decode(`<%;\u0178/' 8!:\u01DC!! )=." 7\u01DB`), peg$decode(`<%;\u0178/' 8!:\u01DE!! )=." 7\u01DD`), peg$decode(`<%;\u017C." &"/2#;\u0178/)$8":\u01E0""! )("'#&'#=." 7\u01DF`), peg$decode(`<%;\u017C." &"/2#;\u0178/)$8":\u01E2""! )("'#&'#=." 7\u01E1`), peg$decode(`<%;\u017C." &"/2#;\u0178/)$8":\u01E4""! )("'#&'#=." 7\u01E3`), peg$decode(`<%;\u017C." &"/2#;\u0178/)$8":\u01E6""! )("'#&'#=." 7\u01E5`), peg$decode(`<%;\u0188.# &;\u017B/1#;\u023F/($8":\u01E8"!!)("'#&'#=." 7\u01E7`), peg$decode(`%;\u017B/;#;\u023F/2$;\xE6/)$8#:\u01E9#"" )(#'#("'#&'#`), peg$decode(`<%;\u0178/' 8!:\u01EB!! )=." 7\u01EA`), peg$decode(`<%;\u0178/' 8!:\u01ED!! )=." 7\u01EC`), peg$decode(`<%;\u018C/=#%<;\u0193=.##&&!&'#/($8":\u01EF"!!)("'#&'#.\xC5 &%;\u018D/=#%<;\u0193=.##&&!&'#/($8":\u01F0"!!)("'#&'#.\x9B &%;\u018F/=#%<;\u0193=.##&&!&'#/($8":\u01F1"!!)("'#&'#.q &%;\u0190/=#%<;\u0193=.##&&!&'#/($8":\u01F2"!!)("'#&'#.G &%;\u0192/=#%<;\u0193=.##&&!&'#/($8":\u01F3"!!)("'#&'#=." 7\u01EE`), peg$decode(`<%%3\u01F5""5!7\u01F6." &"/F#3\u01F7""5#7\u01F8." &"/2$3\u01F9""5$7\u01FA/#$+#)(#'#("'#&'#.k &%3\u01FB""5$7\u01FC.5 &3\u01FD""5&7\u01FE.) &3\u01FF""5$7\u0200." &"/2#3\u0201""5$7\u0202/#$+")("'#&'#.) &3\u0203""5$7\u0204/' 8!:\u010B!! )=." 7\u01F4`), peg$decode(`<%;\u018E.5 &3\u0206""5%7\u0207.) &3\u0208""5$7\u0209/' 8!:\u010B!! )=." 7\u0205`), peg$decode(`<%3\u020B""5&7\u020C/i#%$4(""5!7)/,#0)*4(""5!7)&&&#/2#3\u020D""5)7\u020E/#$+")("'#&'#." &"/)$8":\u020F""! )("'#&'#=." 7\u020A`), peg$decode(`<%3\u0211""5'7\u0212.\x95 &3\u0213""5'7\u0214.\x89 &3\u0215""5'7\u0216.} &%3\u0217""5$7\u0218/7#3\u0219""5$7\u021A." &"/#$+")("'#&'#.S &%3\u0219""5$7\u021A/7#3\u021B""5%7\u021C." &"/#$+")("'#&'#.) &3\u021D""5&7\u021E/' 8!:\u010B!! )=." 7\u0210`), peg$decode(`<%%3\u0220""5#7\u0221/V#2\u0222""6\u02227\u0223.A &2\u0224""6\u02247\u0225.5 &2\u0226""6\u02267\u0227.) &3\u0228""5$7\u0229/#$+")("'#&'#.q &%3\u022A""5#7\u022B.A &3\u01FD""5&7\u01FE.5 &3\u022C""5%7\u022D.) &3\u01FB""5$7\u01FC." &"/2#3\u0220""5#7\u0221/#$+")("'#&'#.# &;\u0191/' 8!:\u010B!! )=." 7\u021F`), peg$decode(`%3\u022E""5(7\u022F/d#%$4(""5!7)/,#0)*4(""5!7)&&&#/2#3\u0230""5%7\u0231/#$+")("'#&'#/)$8":\u0232""! )("'#&'#`), peg$decode(`<%3\u0234""5$7\u0235/' 8!:\u010B!! )=." 7\u0233`), peg$decode('4\u0236""5!7\u0237'), peg$decode(`%2\u0238""6\u02387\u0239/K#$4\u023A""5!7\u023B/,#0)*4\u023A""5!7\u023B&&&#/)$8":\u023C""! )("'#&'#`), peg$decode(";\u0196.# &;\u0197"), peg$decode(";\u0199./ &;\u019D.) &;\u019B.# &;\u019C"), peg$decode(`%%<;\u0234.# &;>=.##&&!&'#/J#$;\u0194.# &;\u0193/,#0)*;\u0194.# &;\u0193&&&#/($8":\xD6"! )("'#&'#`), peg$decode(`%%<;\u0236.# &;>=.##&&!&'#/J#$;\u0194.# &;\u0193/,#0)*;\u0194.# &;\u0193&&&#/($8":\u023D"! )("'#&'#`), peg$decode(`%;\u019E/\x99#;\u023F/\x90$%$%%<;\u019A=.##&&!&'#/1#1""5!7\u023E/#$+")("'#&'#0G*%%<;\u019A=.##&&!&'#/1#1""5!7\u023E/#$+")("'#&'#&/"!&,)/1$;\u019A/($8$:\u023F$!!)($'#(#'#("'#&'#`), peg$decode(`%$4\u0240""5!7\u02410)*4\u0240""5!7\u0241&/5#;\u019F/,$;\u023F/#$+#)(#'#("'#&'#`), peg$decode(`%2\u0242""6\u02427\u0243/k#$2\u0244""6\u02447\u0245.) &4\u0246""5!7\u024705*2\u0244""6\u02447\u0245.) &4\u0246""5!7\u0247&/7$2\u0242""6\u02427\u0243/($8#:\u0248#!!)(#'#("'#&'#`), peg$decode(`%2\u0249""6\u02497\u024A/k#$26""6677.) &48""5!7905*26""6677.) &48""5!79&/7$2\u0249""6\u02497\u024A/($8#:\u024B#!!)(#'#("'#&'#`), peg$decode(`%2\u024C""6\u024C7\u024D/k#$2\u024E""6\u024E7\u024F.) &4\u0250""5!7\u025105*2\u024E""6\u024E7\u024F.) &4\u0250""5!7\u0251&/7$2\u024C""6\u024C7\u024D/($8#:\u0252#!!)(#'#("'#&'#`), peg$decode(`<%2\u0254""6\u02547\u0255/1#;\u023F/($8":""!!)("'#&'#=." 7\u0253`), peg$decode(`<%2\u0257""6\u02577\u0258/1#;\u023F/($8":""!!)("'#&'#=." 7\u0256`), peg$decode(`<%2\u025A""6\u025A7\u025B/1#;\u023F/($8":""!!)("'#&'#=." 7\u0259`), peg$decode(`<%2\u025D""6\u025D7\u025E/1#;\u023F/($8":""!!)("'#&'#=." 7\u025C`), peg$decode(`<%2\u0260""6\u02607\u0261/1#;\u023F/($8":""!!)("'#&'#=." 7\u025F`), peg$decode(`<%2\u0263""6\u02637\u0264/1#;\u023F/($8":""!!)("'#&'#=." 7\u0262`), peg$decode(`<%2\u0266""6\u02667\u0267/1#;\u023F/($8":""!!)("'#&'#=." 7\u0265`), peg$decode(`<%2\u0269""6\u02697\u026A/1#;\u023F/($8":""!!)("'#&'#=." 7\u0268`), peg$decode(`<%2\u0249""6\u02497\u024A/1#;\u023F/($8":""!!)("'#&'#=." 7\u026B`), peg$decode(`<%2\u0242""6\u02427\u0243/1#;\u023F/($8":""!!)("'#&'#=." 7\u026C`), peg$decode(`<%2\u024C""6\u024C7\u024D/1#;\u023F/($8":""!!)("'#&'#=." 7\u026D`), peg$decode(`<%2\u026F""6\u026F7\u0270/1#;\u023F/($8":""!!)("'#&'#=." 7\u026E`), peg$decode(`<%2\u0272""6\u02727\u0273/1#;\u023F/($8":""!!)("'#&'#=." 7\u0271`), peg$decode(`<%2\u0275""6\u02757\u0276/1#;\u023F/($8":""!!)("'#&'#=." 7\u0274`), peg$decode(`<%2\u0277""6\u02777\u0278/1#;\u023F/($8":""!!)("'#&'#=." 7\u01CB`), peg$decode(`<%2\u027A""6\u027A7\u027B/1#;\u023F/($8":""!!)("'#&'#=." 7\u0279`), peg$decode(`<%2\u027D""6\u027D7\u027E/1#;\u023F/($8":""!!)("'#&'#=." 7\u027C`), peg$decode(`<%2\u027F""6\u027F7\u0280/1#;\u023F/($8":""!!)("'#&'#=." 7\u01C2`), peg$decode(`<%2\u0281""6\u02817\u0282/1#;\u023F/($8":""!!)("'#&'#=." 7\u01C7`), peg$decode(`<%2\u0283""6\u02837\u0284/1#;\u023F/($8":""!!)("'#&'#=." 7\u01C8`), peg$decode(`<%2\u0286""6\u02867\u0287/1#;\u023F/($8":""!!)("'#&'#=." 7\u0285`), peg$decode(`<%2\u0289""6\u02897\u028A/1#;\u023F/($8":""!!)("'#&'#=." 7\u0288`), peg$decode(`<%2a""6a7b/1#;\u023F/($8":""!!)("'#&'#=." 7\u028B`), peg$decode(`<%2\u028D""6\u028D7\u028E/1#;\u023F/($8":""!!)("'#&'#=." 7\u028C`), peg$decode(`<%2\u0290""6\u02907\u0291/1#;\u023F/($8":""!!)("'#&'#=." 7\u028F`), peg$decode(`%3\u0292""5%7\u0293/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0294""5&7\u0295/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0296""5#7\u0297/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0298""5%7\u0299/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u029A""5#7\u029B/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u029C""5%7\u029D/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u029E""5'7\u029F/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02A0""5#7\u02A1/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02A2""5"7\u02A3/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02A4""5#7\u02A5/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02A6""5&7\u02A7/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02A8""5-7\u02A9/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02AA""5&7\u02AB/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02AC""5%7\u02AD/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02AE""5'7\u02AF/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02B0""5"7\u02B1/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02B2""5'7\u02B3/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02B4""5$7\u02B5/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02B6""5$7\u02B7/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02B8""5%7\u02B9/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02BA""5'7\u02BB/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02BC""5&7\u02BD/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02BE""5&7\u02BF/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02C0""5(7\u02C1/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02C2""5*7\u02C3/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02C4""5&7\u02C5/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02C6""5%7\u02C7/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02C8""5,7\u02C9/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02CA""5,7\u02CB/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02CC""517\u02CD/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02CE""5(7\u02CF/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02D0""5'7\u02D1/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02D2""5*7\u02D3/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02D4""5(7\u02D5/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02D6""5&7\u02D7/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02D8""5$7\u02D9/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02DA""5&7\u02DB/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02DC""5(7\u02DD/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02DE""5$7\u02DF/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02E0""5$7\u02E1/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02E2""5$7\u02E3/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02E4""5#7\u02E5/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02E6""5&7\u02E7/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02E8""5&7\u02E9/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02EA""5)7\u02EB/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02EC""5&7\u02ED/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02EE""5'7\u02EF/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02F0""5$7\u02F1/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02F2""5#7\u02F3/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02F4""5'7\u02F5/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02F6""5$7\u02F7/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02F8""5$7\u02F9/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02FA""5$7\u02FB/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02FC""5%7\u02FD/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u02FE""5&7\u02FF/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0300""5"7\u0301/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0302""5&7\u0303/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0304""5)7\u0305/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0306""5"7\u0307/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0308""5%7\u0309/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u030A""5'7\u030B/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u030C""5)7\u030D/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u030E""5%7\u030F/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0310""5&7\u0311/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0312""5'7\u0313/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0314""5)7\u0315/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0316""5$7\u0317/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0318""5"7\u0319/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u031A""5&7\u031B/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u031C""5$7\u031D/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u031E""5#7\u031F/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0320""5$7\u0321/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0322""5$7\u0323/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0324""5%7\u0325/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0326""5%7\u0327/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0328""5'7\u0329/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u032A""5"7\u032B/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u032C""5#7\u032D/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u032E""5'7\u032F/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3y""5$7z/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0330""5"7\u0331/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0332""5&7\u0333/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0334""5"7\u0335/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0336""5"7\u0337/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0338""5%7\u0339/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u033A""5%7\u033B/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u033C""5$7\u033D/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u033E""5&7\u033F/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0340""5'7\u0341/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0342""5%7\u0343/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0344""5%7\u0345/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0346""5)7\u0347/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0348""5*7\u0349/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u034A""5&7\u034B/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u034C""5'7\u034D/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u034E""5'7\u034F/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0350""5&7\u0351/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0352""5'7\u0353/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0354""5(7\u0355/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0356""5%7\u0357/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0358""5(7\u0359/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u035A""5#7\u035B/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u035C""5%7\u035D/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u035E""5)7\u035F/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0360""5&7\u0361/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0362""5#7\u0363/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0364""5%7\u0365/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0366""5$7\u0367/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0368""5)7\u0369/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u036A""5$7\u036B/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u036C""5"7\u036D/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u036E""5+7\u036F/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0370""5'7\u0371/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0372""5%7\u0373/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0374""5&7\u0375/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0376""5&7\u0377/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0378""5%7\u0379/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u037A""5&7\u037B/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u037C""5&7\u037D/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u037E""5$7\u037F/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0380""5'7\u0381/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0382""5$7\u0383/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0384""5%7\u0385/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0386""5$7\u0387/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode(`%3\u0388""5'7\u0389/8#%<;\u0193=.##&&!&'#/#$+")("'#&'#`), peg$decode("%;\u0235/' 8!:\u038A!! )"), peg$decode(";\u01B7.\u02F9 &;\u01B8.\u02F3 &;\u01B9.\u02ED &;\u01BA.\u02E7 &;\u01BB.\u02E1 &;\u01BC.\u02DB &;\u01BD.\u02D5 &;\u01BE.\u02CF &;\u01BF.\u02C9 &;\u01C0.\u02C3 &;\u01C1.\u02BD &;\u01C2.\u02B7 &;\u01C3.\u02B1 &;\u01C4.\u02AB &;\u01C5.\u02A5 &;\u01C6.\u029F &;\u01C7.\u0299 &;\u01C8.\u0293 &;\u01C9.\u028D &;\u01CA.\u0287 &;\u01CB.\u0281 &;\u01CC.\u027B &;\u01CD.\u0275 &;\u01CE.\u026F &;\u01CF.\u0269 &;\u01D0.\u0263 &;\u01D1.\u025D &;\u01D2.\u0257 &;\u01D3.\u0251 &;\u01D4.\u024B &;\u01D5.\u0245 &;\u01D6.\u023F &;\u01D7.\u0239 &;\u01D8.\u0233 &;\u01D9.\u022D &;\u01DA.\u0227 &;\u01DB.\u0221 &;\u01DC.\u021B &;\u01DD.\u0215 &;\u01DE.\u020F &;\u01DF.\u0209 &;\u01E0.\u0203 &;\u01E1.\u01FD &;\u01E2.\u01F7 &;\u01E3.\u01F1 &;\u01E4.\u01EB &;\u01E5.\u01E5 &;\u01E6.\u01DF &;\u01E7.\u01D9 &;\u01E8.\u01D3 &;\u01E9.\u01CD &;\u01EA.\u01C7 &;\u01EB.\u01C1 &;\u01EC.\u01BB &;\u01ED.\u01B5 &;\u01EE.\u01AF &;\u01EF.\u01A9 &;\u01F0.\u01A3 &;\u01F1.\u019D &;\u01F2.\u0197 &;\u01F3.\u0191 &;\u01F4.\u018B &;\u01F5.\u0185 &;\u01F6.\u017F &;\u01F7.\u0179 &;\u01F8.\u0173 &;\u01F9.\u016D &;\u01FA.\u0167 &;\u01FB.\u0161 &;\u01FC.\u015B &;\u01FD.\u0155 &;\u01FE.\u014F &;\u01FF.\u0149 &;\u0200.\u0143 &;\u0201.\u013D &;\u0202.\u0137 &;\u0203.\u0131 &;\u0204.\u012B &;\u0205.\u0125 &;\u0206.\u011F &;\u0207.\u0119 &;\u0208.\u0113 &;\u0209.\u010D &;\u020A.\u0107 &;\u020B.\u0101 &;\u020C.\xFB &;\u020D.\xF5 &;\u020E.\xEF &;\u020F.\xE9 &;\u0210.\xE3 &;\u0211.\xDD &;\u0212.\xD7 &;\u0213.\xD1 &;\u0214.\xCB &;\u0215.\xC5 &;\u0216.\xBF &;\u0217.\xB9 &;\u0218.\xB3 &;\u0219.\xAD &;\u021A.\xA7 &;\u021B.\xA1 &;\u021C.\x9B &;\u021E.\x95 &;\u021F.\x8F &;\u0220.\x89 &;\u0221.\x83 &;\u0223.} &;\u0224.w &;\u0225.q &;\u0226.k &;\u0227.e &;\u0228._ &;\u0229.Y &;\u022A.S &;\u022B.M &;\u022C.G &;\u022D.A &;\u022E.; &;\u022F.5 &;\u0230./ &;\u0231.) &;\u0232.# &;\u0233"), peg$decode(";\u01B9.\u0167 &;\u01BB.\u0161 &;\u01BC.\u015B &;\u01BE.\u0155 &;\u01BF.\u014F &;\u01C2.\u0149 &;\u01C5.\u0143 &;\u01C8.\u013D &;\u01CA.\u0137 &;\u01CB.\u0131 &;\u01CD.\u012B &;\u01CF.\u0125 &;\u01D0.\u011F &;\u01D6.\u0119 &;\u01D7.\u0113 &;\u01D9.\u010D &;\u01DC.\u0107 &;\u01DD.\u0101 &;\u01DF.\xFB &;\u01E1.\xF5 &;\u01E2.\xEF &;\u01E4.\xE9 &;\u01E8.\xE3 &;\u01E9.\xDD &;\u01EC.\xD7 &;\u01ED.\xD1 &;\u01F1.\xCB &;\u01F2.\xC5 &;\u01F6.\xBF &;\u01F8.\xB9 &;\u01F9.\xB3 &;\u01FA.\xAD &;\u01FB.\xA7 &;\u01FC.\xA1 &;\u0200.\x9B &;\u0204.\x95 &;\u0205.\x8F &;\u0206.\x89 &;\u0209.\x83 &;\u020A.} &;\u020B.w &;\u020F.q &;\u0213.k &;\u021F.e &;\u0220._ &;\u0221.Y &;\u0224.S &;\u0225.M &;\u0226.G &;\u0228.A &;\u0229.; &;\u022A.5 &;\u022B./ &;\u022D.) &;\u0230.# &;\u0231"), peg$decode(";\u0238.. &%;\u0239/& 8!:\u038B! )"), peg$decode(`<%2\u038D""6\u038D7\u038E/\x87#$%%<4\u038F""5!7\u0390=.##&&!&'#/1#1""5!7\u023E/#$+")("'#&'#0M*%%<4\u038F""5!7\u0390=.##&&!&'#/1#1""5!7\u023E/#$+")("'#&'#&/#$+")("'#&'#=." 7\u038C`), peg$decode(`<%;\u023A/5#;\u023E/,$;\u023B/#$+#)(#'#("'#&'#=." 7\u0391`), peg$decode('2\u0392""6\u03927\u0393'), peg$decode('2\u0394""6\u03947\u0395'), peg$decode(`$%%<;\u023B.# &;\u023A=.##&&!&'#/1#1""5!7\u023E/#$+")("'#&'#/P#0M*%%<;\u023B.# &;\u023A=.##&&!&'#/1#1""5!7\u023E/#$+")("'#&'#&&&#`), peg$decode(";\u023C.# &;\u0239"), peg$decode(`%;\u023D/K#$4\u0396""5!7\u0397.# &;\u023D0/*4\u0396""5!7\u0397.# &;\u023D&/#$+")("'#&'#`), peg$decode(`<%$4\u0396""5!7\u0397.# &;\u02370/*4\u0396""5!7\u0397.# &;\u0237&/' 8!:-!! )=." 7\u0398`), peg$decode('2\u0399""6\u03997\u039A')];
          var peg$currPos = 0;
          var peg$savedPos = 0;
          var peg$posDetailsCache = [{ line: 1, column: 1 }];
          var peg$maxFailPos = 0;
          var peg$maxFailExpected = [];
          var peg$silentFails = 0;
          var peg$resultsCache = {};
          var peg$ruleNames = ["start", "start_streaming", "stmt_list", "semi_optional", "semi_required", "stmt_list_tail", "type_definition", "type_definition_types", "datatype_custom", "datatype_word_tail", "type_definition_args", "definition_args_loop", "literal_value", "literal_null", "literal_date", "literal_string", "literal_string_single", "literal_string_schar", "literal_blob", "literal_text", "number_sign", "literal_number_signed", "literal_number", "literal_number_decimal", "number_decimal_node", "number_decimal_full", "number_decimal_fraction", "number_decimal_exponent", "literal_number_hex", "number_hex", "number_digit", "bind_parameter", "bind_parameter_numbered", "bind_number_id", "bind_parameter_named", "bind_parameter_tcl", "tcl_suffix", "expression_exists", "expression_exists_ne", "expression_raise", "expression_raise_args", "raise_args_ignore", "raise_args_message", "expression_root", "expression_wrapped", "expression_recur", "expression_unary_collate", "expression_unary", "expression_unary_op", "expression_collate", "expression_concat", "expression_multiply", "expression_multiply_op", "expression_add", "expression_add_op", "expression_shift", "expression_shift_op", "expression_compare", "expression_compare_op", "expression_equiv", "expression_equiv_tails", "expression_equiv_null_op", "expression_equiv_op", "expression_cast", "type_alias", "expression_case", "case_expression", "expression_case_when", "expression_case_else", "expression_postfix", "expression_postfix_tail", "expression_like", "expression_escape", "expression_between", "expression_between_tail", "expression_is_not", "expression_in", "expression_in_target", "expression_list_or_select", "expression_and", "expression", "expression_list", "expression_list_loop", "expression_list_rest", "function_call", "function_call_args", "args_list_distinct", "error_message", "stmt", "stmt_modifier", "modifier_query", "stmt_nodes", "stmt_commit", "stmt_begin", "commit_transaction", "stmt_begin_modifier", "stmt_rollback", "rollback_savepoint", "savepoint_name", "savepoint_alt", "stmt_savepoint", "stmt_release", "stmt_alter", "alter_start", "alter_action", "alter_action_rename", "alter_action_add", "action_add_modifier", "stmt_crud", "stmt_core_with", "clause_with", "clause_with_recursive", "clause_with_tables", "clause_with_loop", "expression_cte", "select_alias", "select_wrapped", "stmt_select_full", "stmt_sqlite", "stmt_attach", "attach_arg", "stmt_detach", "stmt_vacuum", "vacuum_target", "stmt_analyze", "analyze_arg", "stmt_reindex", "reindex_arg", "stmt_pragma", "pragma_expression", "pragma_value", "pragma_value_literal", "pragma_value_bool", "pragma_bool_id", "pragma_value_name", "stmt_crud_types", "stmt_select", "stmt_core_order", "stmt_core_limit", "stmt_core_limit_offset", "limit_offset_variant", "limit_offset_variant_name", "select_loop", "select_loop_union", "select_parts", "select_parts_core", "select_core_select", "select_modifier", "select_modifier_distinct", "select_modifier_all", "select_target", "select_target_loop", "select_core_from", "stmt_core_where", "select_core_group", "select_core_having", "select_node", "select_node_star", "select_node_star_qualified", "select_node_aliased", "select_source", "source_loop_tail", "select_cross_clause", "select_join_clause", "table_or_sub", "table_or_sub_func", "table_qualified", "table_qualified_id", "table_or_sub_index_node", "index_node_indexed", "index_node_none", "table_or_sub_sub", "table_or_sub_select", "alias", "join_operator", "join_operator_natural", "join_operator_types", "operator_types_hand", "types_hand_outer", "operator_types_misc", "join_condition", "join_condition_on", "join_condition_using", "select_parts_values", "stmt_core_order_list", "stmt_core_order_list_loop", "stmt_core_order_list_item", "select_star", "stmt_fallback_types", "stmt_insert", "insert_keyword", "insert_keyword_ins", "insert_keyword_repl", "insert_keyword_mod", "insert_target", "insert_into", "insert_into_start", "insert_results", "loop_columns", "loop_column_tail", "loop_name", "insert_value", "insert_value_start", "insert_values_list", "insert_values_loop", "expression_list_wrapped", "insert_default", "operator_compound", "compound_union", "compound_union_all", "stmt_update", "update_start", "update_fallback", "update_set", "update_columns", "update_columns_tail", "update_column", "stmt_delete", "delete_start", "stmt_create", "create_start", "create_table_only", "create_index_only", "create_trigger_only", "create_view_only", "create_virtual_only", "create_table", "create_table_start", "create_core_tmp", "create_core_ine", "create_table_source", "table_source_def", "source_def_rowid", "source_def_loop", "source_def_tail", "source_tbl_loop", "source_def_column", "source_def_name", "column_type", "column_constraints", "column_constraint_tail", "column_constraint", "constraint_name", "constraint_name_loop", "column_constraint_types", "column_constraint_foreign", "column_constraint_primary", "col_primary_start", "col_primary_auto", "column_constraint_null", "constraint_null_types", "constraint_null_value", "column_constraint_check", "column_constraint_default", "column_default_values", "column_constraint_collate", "table_constraint", "table_constraint_types", "table_constraint_check", "table_constraint_primary", "primary_start", "primary_start_normal", "primary_start_unique", "primary_columns", "primary_columns_index", "primary_columns_table", "primary_column_tail", "primary_column", "primary_column_types", "column_collate", "column_collate_loop", "primary_column_dir", "primary_conflict", "primary_conflict_start", "constraint_check", "table_constraint_foreign", "foreign_start", "foreign_clause", "foreign_references", "foreign_actions", "foreign_actions_tail", "foreign_action", "foreign_action_on", "action_on_action", "on_action_set", "on_action_cascade", "on_action_none", "foreign_action_match", "foreign_deferrable", "deferrable_initially", "table_source_select", "create_index", "create_index_start", "index_unique", "index_on", "create_trigger", "create_trigger_start", "trigger_conditions", "trigger_apply_mods", "trigger_apply_instead", "trigger_do", "trigger_do_on", "trigger_do_update", "do_update_of", "do_update_columns", "trigger_foreach", "trigger_when", "trigger_action", "action_loop", "action_loop_stmt", "create_view", "id_view_expression", "create_view_start", "create_as_select", "create_virtual", "create_virtual_start", "virtual_module", "virtual_args", "virtual_args_loop", "virtual_args_tail", "virtual_arg_types", "virtual_column_name", "stmt_drop", "drop_start", "drop_types", "drop_ie", "binary_concat", "binary_plus", "binary_minus", "binary_multiply", "binary_divide", "binary_mod", "binary_left", "binary_right", "binary_and", "binary_or", "binary_lt", "binary_gt", "binary_lte", "binary_gte", "binary_equal", "binary_notequal_a", "binary_notequal_b", "binary_lang_isnt", "id_name", "id_database", "id_function", "id_table", "id_table_qualified", "id_column", "column_unqualified", "column_qualifiers", "id_column_qualified", "id_collation", "id_savepoint", "id_index", "id_trigger", "id_view", "id_pragma", "id_cte", "id_table_expression", "id_constraint_table", "id_constraint_column", "datatype_types", "datatype_text", "datatype_real", "datatype_real_double", "datatype_numeric", "datatype_integer", "datatype_integer_fp", "datatype_none", "name_char", "unicode_char", "name", "name_quoted", "name_unquoted", "name_reserved", "name_bracketed", "bracket_terminator", "name_dblquoted", "name_sglquoted", "name_backticked", "sym_bopen", "sym_bclose", "sym_popen", "sym_pclose", "sym_comma", "sym_dot", "sym_star", "sym_quest", "sym_sglquote", "sym_dblquote", "sym_backtick", "sym_tilde", "sym_plus", "sym_minus", "sym_equal", "sym_amp", "sym_pipe", "sym_mod", "sym_lt", "sym_gt", "sym_excl", "sym_semi", "sym_colon", "sym_fslash", "sym_bslash", "ABORT", "ACTION", "ADD", "AFTER", "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "ATTACH", "AUTOINCREMENT", "BEFORE", "BEGIN", "BETWEEN", "BY", "CASCADE", "CASE", "CAST", "CHECK", "COLLATE", "COLUMN", "COMMIT", "CONFLICT", "CONSTRAINT", "CREATE", "CROSS", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "DATABASE", "DEFAULT", "DEFERRABLE", "DEFERRED", "DELETE", "DESC", "DETACH", "DISTINCT", "DROP", "EACH", "ELSE", "END", "ESCAPE", "EXCEPT", "EXCLUSIVE", "EXISTS", "EXPLAIN", "FAIL", "FOR", "FOREIGN", "FROM", "FULL", "GLOB", "GROUP", "HAVING", "IF", "IGNORE", "IMMEDIATE", "IN", "INDEX", "INDEXED", "INITIALLY", "INNER", "INSERT", "INSTEAD", "INTERSECT", "INTO", "IS", "ISNULL", "JOIN", "KEY", "LEFT", "LIKE", "LIMIT", "MATCH", "NATURAL", "NO", "NOT", "NOTNULL", "NULL", "OF", "OFFSET", "ON", "OR", "ORDER", "OUTER", "PLAN", "PRAGMA", "PRIMARY", "QUERY", "RAISE", "RECURSIVE", "REFERENCES", "REGEXP", "REINDEX", "RELEASE", "RENAME", "REPLACE", "RESTRICT", "RIGHT", "ROLLBACK", "ROW", "ROWID", "SAVEPOINT", "SELECT", "SET", "TABLE", "TEMP", "TEMPORARY", "THEN", "TO", "TRANSACTION", "TRIGGER", "UNION", "UNIQUE", "UPDATE", "USING", "VACUUM", "VALUES", "VIEW", "VIRTUAL", "WHEN", "WHERE", "WITH", "WITHOUT", "reserved_words", "reserved_word_list", "reserved_critical_list", "comment", "comment_line", "comment_block", "comment_block_start", "comment_block_end", "comment_block_body", "block_body_nodes", "comment_block_feed", "o", "_TODO_"];
          var peg$descNames = [null, null, null, null, null, null, "Type Definition", null, "Custom Datatype Name", null, "Type Definition Arguments", null, null, "Null Literal", "Date Literal", "String Literal", "Single-quoted String Literal", null, "Blob Literal", null, "Number Sign", null, null, null, "Decimal Literal", null, null, "Decimal Literal Exponent", "Hexidecimal Literal", null, null, "Bind Parameter", "Numbered Bind Parameter", null, "Named Bind Parameter", "TCL Bind Parameter", null, "EXISTS Expression", "EXISTS Keyword", "RAISE Expression", "RAISE Expression Arguments", "IGNORE Keyword", null, null, null, null, null, null, null, "COLLATE Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, "CAST Expression", "Type Alias", "CASE Expression", null, "WHEN Clause", "ELSE Clause", null, null, "Comparison Expression", "ESCAPE Expression", "BETWEEN Expression", null, null, "IN Expression", null, null, null, null, "Expression List", null, null, "Function Call", "Function Call Arguments", null, "Error Message", "Statement", "QUERY PLAN", "QUERY PLAN Keyword", null, "END Transaction Statement", "BEGIN Transaction Statement", null, null, "ROLLBACK Statement", "TO Clause", null, null, "SAVEPOINT Statement", "RELEASE Statement", "ALTER TABLE Statement", "ALTER TABLE Keyword", null, "RENAME TO Keyword", "ADD COLUMN Keyword", null, null, "WITH Clause", null, null, null, null, "Common Table Expression", null, null, null, null, "ATTACH Statement", null, "DETACH Statement", "VACUUM Statement", null, "ANALYZE Statement", null, "REINDEX Statement", null, "PRAGMA Statement", null, null, null, null, null, null, null, "SELECT Statement", "ORDER BY Clause", "LIMIT Clause", "OFFSET Clause", null, null, null, "Union Operation", null, null, "SELECT Results Clause", "SELECT Results Modifier", null, null, null, null, "FROM Clause", "WHERE Clause", "GROUP BY Clause", "HAVING Clause", null, null, null, null, null, null, "CROSS JOIN Operation", "JOIN Operation", null, null, "Qualified Table", "Qualified Table Identifier", "Qualfied Table Index", null, null, "SELECT Source", "Subquery", "Alias", "JOIN Operator", null, null, null, null, null, "JOIN Constraint", "Join ON Clause", "Join USING Clause", "VALUES Clause", null, null, "Ordering Expression", "Star", "Fallback Type", "INSERT Statement", null, "INSERT Keyword", "REPLACE Keyword", "INSERT OR Modifier", null, "INTO Clause", "INTO Keyword", "VALUES Clause", "Column List", null, "Column Name", "VALUES Clause", "VALUES Keyword", null, null, "Wrapped Expression List", "DEFAULT VALUES Clause", "Compound Operator", "UNION Operator", null, "UPDATE Statement", "UPDATE Keyword", "UPDATE OR Modifier", "SET Clause", null, null, "Column Assignment", "DELETE Statement", "DELETE Keyword", "CREATE Statement", null, null, null, null, null, null, "CREATE TABLE Statement", null, null, "IF NOT EXISTS Modifier", null, "Table Definition", null, null, null, null, "Column Definition", null, "Column Datatype", null, null, "Column Constraint", null, "CONSTRAINT Name", null, "FOREIGN KEY Column Constraint", "PRIMARY KEY Column Constraint", "PRIMARY KEY Keyword", "AUTOINCREMENT Keyword", null, "UNIQUE Column Constraint", "NULL Column Constraint", "CHECK Column Constraint", "DEFAULT Column Constraint", null, "COLLATE Column Constraint", "Table Constraint", null, "CHECK Table Constraint", "PRIMARY KEY Table Constraint", null, "PRIMARY KEY Keyword", "UNIQUE Keyword", null, null, null, null, "Indexed Column", null, "Collation", null, "Column Direction", null, "ON CONFLICT Keyword", null, "FOREIGN KEY Table Constraint", "FOREIGN KEY Keyword", null, "REFERENCES Clause", null, null, "FOREIGN KEY Action Clause", null, "FOREIGN KEY Action", null, null, null, null, "DEFERRABLE Clause", null, null, "CREATE INDEX Statement", null, null, "ON Clause", "CREATE TRIGGER Statement", null, "Conditional Clause", null, null, "Conditional Action", null, null, null, null, null, "WHEN Clause", "Actions Clause", null, null, "CREATE VIEW Statement", null, null, null, "CREATE VIRTUAL TABLE Statement", null, null, "Module Arguments", null, null, null, null, "DROP Statement", "DROP Keyword", "DROP Type", "IF EXISTS Keyword", "Or", "Add", "Subtract", "Multiply", "Divide", "Modulo", "Shift Left", "Shift Right", "Logical AND", "Logical OR", "Less Than", "Greater Than", "Less Than Or Equal", "Greater Than Or Equal", "Equal", "Not Equal", "Not Equal", "IS", "Identifier", "Database Identifier", "Function Identifier", "Table Identifier", null, "Column Identifier", null, null, null, "Collation Identifier", "Savepoint Identifier", "Index Identifier", "Trigger Identifier", "View Identifier", "Pragma Identifier", "CTE Identifier", null, "Table Constraint Identifier", "Column Constraint Identifier", "Datatype Name", "TEXT Datatype Name", "REAL Datatype Name", "DOUBLE Datatype Name", "NUMERIC Datatype Name", "INTEGER Datatype Name", null, "BLOB Datatype Name", null, null, null, null, null, null, null, null, null, null, null, "Open Bracket", "Close Bracket", "Open Parenthesis", "Close Parenthesis", "Comma", "Period", "Asterisk", "Question Mark", "Single Quote", "Double Quote", "Backtick", "Tilde", "Plus", "Minus", "Equal", "Ampersand", "Pipe", "Modulo", "Less Than", "Greater Than", "Exclamation", "Semicolon", "Colon", "Forward Slash", "Backslash", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Line Comment", "Block Comment", null, null, null, null, null, "Whitespace", null];
          var peg$tracer = "tracer" in options ? options.tracer : new peg$DefaultTracer();
          var peg$result;
          if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleIndices)) {
              throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
            }
            peg$startRuleIndex = peg$startRuleIndices[options.startRule];
          }
          function text() {
            return input.substring(peg$savedPos, peg$currPos);
          }
          function location() {
            return peg$computeLocation(peg$savedPos, peg$currPos);
          }
          function expected(description, location2) {
            location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
            throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);
          }
          function error(message, location2) {
            location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
            throw peg$buildSimpleError(message, location2);
          }
          function peg$literalExpectation(text2, ignoreCase) {
            return { type: "literal", text: text2, ignoreCase };
          }
          function peg$classExpectation(parts, inverted, ignoreCase) {
            return { type: "class", parts, inverted, ignoreCase };
          }
          function peg$anyExpectation() {
            return { type: "any" };
          }
          function peg$endExpectation() {
            return { type: "end" };
          }
          function peg$otherExpectation(description) {
            return { type: "other", description };
          }
          function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos];
            var p10;
            if (details) {
              return details;
            } else {
              p10 = pos - 1;
              while (!peg$posDetailsCache[p10]) {
                p10--;
              }
              details = peg$posDetailsCache[p10];
              details = { line: details.line, column: details.column };
              while (p10 < pos) {
                if (input.charCodeAt(p10) === 10) {
                  details.line++;
                  details.column = 1;
                } else {
                  details.column++;
                }
                p10++;
              }
              peg$posDetailsCache[pos] = details;
              return details;
            }
          }
          function peg$computeLocation(startPos, endPos) {
            var startPosDetails = peg$computePosDetails(startPos);
            var endPosDetails = peg$computePosDetails(endPos);
            return { start: { offset: startPos, line: startPosDetails.line, column: startPosDetails.column }, end: { offset: endPos, line: endPosDetails.line, column: endPosDetails.column } };
          }
          function peg$fail(expected2) {
            if (peg$currPos < peg$maxFailPos) {
              return;
            }
            if (peg$currPos > peg$maxFailPos) {
              peg$maxFailPos = peg$currPos;
              peg$maxFailExpected = [];
            }
            peg$maxFailExpected.push(expected2);
          }
          function peg$buildSimpleError(message, location2) {
            return new peg$SyntaxError(message, null, null, location2);
          }
          function peg$buildStructuredError(expected2, found, location2) {
            return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found), expected2, found, location2);
          }
          function peg$decode(s7) {
            return s7.split("").map(function(ch) {
              return ch.charCodeAt(0) - 32;
            });
          }
          function peg$parseRule(index) {
            var bc = peg$bytecode[index];
            var ip = 0;
            var ips = [];
            var end = bc.length;
            var ends = [];
            var stack = [];
            var startPos = peg$currPos;
            var params;
            peg$tracer.trace({ type: "rule.enter", rule: peg$ruleNames[index], description: peg$descNames[index], location: peg$computeLocation(startPos, startPos) });
            var key = peg$currPos * 545 + index;
            var cached = peg$resultsCache[key];
            if (cached) {
              peg$currPos = cached.nextPos;
              if (cached.result !== peg$FAILED) {
                peg$tracer.trace({ type: "rule.match", rule: peg$ruleNames[index], description: peg$descNames[index], result: cached.result, location: peg$computeLocation(startPos, peg$currPos) });
              } else {
                peg$tracer.trace({ type: "rule.fail", rule: peg$ruleNames[index], description: peg$descNames[index], location: peg$computeLocation(startPos, startPos) });
              }
              return cached.result;
            }
            while (true) {
              while (ip < end) {
                switch (bc[ip]) {
                  case 0:
                    stack.push(peg$consts[bc[ip + 1]]);
                    ip += 2;
                    break;
                  case 1:
                    stack.push(void 0);
                    ip++;
                    break;
                  case 2:
                    stack.push(null);
                    ip++;
                    break;
                  case 3:
                    stack.push(peg$FAILED);
                    ip++;
                    break;
                  case 4:
                    stack.push([]);
                    ip++;
                    break;
                  case 5:
                    stack.push(peg$currPos);
                    ip++;
                    break;
                  case 6:
                    stack.pop();
                    ip++;
                    break;
                  case 7:
                    peg$currPos = stack.pop();
                    ip++;
                    break;
                  case 8:
                    stack.length -= bc[ip + 1];
                    ip += 2;
                    break;
                  case 9:
                    stack.splice(-2, 1);
                    ip++;
                    break;
                  case 10:
                    stack[stack.length - 2].push(stack.pop());
                    ip++;
                    break;
                  case 11:
                    stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
                    ip += 2;
                    break;
                  case 12:
                    stack.push(input.substring(stack.pop(), peg$currPos));
                    ip++;
                    break;
                  case 13:
                    ends.push(end);
                    ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);
                    if (stack[stack.length - 1]) {
                      end = ip + 3 + bc[ip + 1];
                      ip += 3;
                    } else {
                      end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                      ip += 3 + bc[ip + 1];
                    }
                    break;
                  case 14:
                    ends.push(end);
                    ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);
                    if (stack[stack.length - 1] === peg$FAILED) {
                      end = ip + 3 + bc[ip + 1];
                      ip += 3;
                    } else {
                      end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                      ip += 3 + bc[ip + 1];
                    }
                    break;
                  case 15:
                    ends.push(end);
                    ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);
                    if (stack[stack.length - 1] !== peg$FAILED) {
                      end = ip + 3 + bc[ip + 1];
                      ip += 3;
                    } else {
                      end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                      ip += 3 + bc[ip + 1];
                    }
                    break;
                  case 16:
                    if (stack[stack.length - 1] !== peg$FAILED) {
                      ends.push(end);
                      ips.push(ip);
                      end = ip + 2 + bc[ip + 1];
                      ip += 2;
                    } else {
                      ip += 2 + bc[ip + 1];
                    }
                    break;
                  case 17:
                    ends.push(end);
                    ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);
                    if (input.length > peg$currPos) {
                      end = ip + 3 + bc[ip + 1];
                      ip += 3;
                    } else {
                      end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                      ip += 3 + bc[ip + 1];
                    }
                    break;
                  case 18:
                    ends.push(end);
                    ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);
                    if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                      end = ip + 4 + bc[ip + 2];
                      ip += 4;
                    } else {
                      end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                      ip += 4 + bc[ip + 2];
                    }
                    break;
                  case 19:
                    ends.push(end);
                    ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);
                    if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                      end = ip + 4 + bc[ip + 2];
                      ip += 4;
                    } else {
                      end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                      ip += 4 + bc[ip + 2];
                    }
                    break;
                  case 20:
                    ends.push(end);
                    ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);
                    if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                      end = ip + 4 + bc[ip + 2];
                      ip += 4;
                    } else {
                      end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                      ip += 4 + bc[ip + 2];
                    }
                    break;
                  case 21:
                    stack.push(input.substr(peg$currPos, bc[ip + 1]));
                    peg$currPos += bc[ip + 1];
                    ip += 2;
                    break;
                  case 22:
                    stack.push(peg$consts[bc[ip + 1]]);
                    peg$currPos += peg$consts[bc[ip + 1]].length;
                    ip += 2;
                    break;
                  case 23:
                    stack.push(peg$FAILED);
                    if (peg$silentFails === 0) {
                      peg$fail(peg$consts[bc[ip + 1]]);
                    }
                    ip += 2;
                    break;
                  case 24:
                    peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
                    ip += 2;
                    break;
                  case 25:
                    peg$savedPos = peg$currPos;
                    ip++;
                    break;
                  case 26:
                    params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]).map(function(p10) {
                      return stack[stack.length - 1 - p10];
                    });
                    stack.splice(stack.length - bc[ip + 2], bc[ip + 2], peg$consts[bc[ip + 1]].apply(null, params));
                    ip += 4 + bc[ip + 3];
                    break;
                  case 27:
                    stack.push(peg$parseRule(bc[ip + 1]));
                    ip += 2;
                    break;
                  case 28:
                    peg$silentFails++;
                    ip++;
                    break;
                  case 29:
                    peg$silentFails--;
                    ip++;
                    break;
                  default:
                    throw new Error("Invalid opcode: " + bc[ip] + ".");
                }
              }
              if (ends.length > 0) {
                end = ends.pop();
                ip = ips.pop();
              } else {
                break;
              }
            }
            peg$resultsCache[key] = { nextPos: peg$currPos, result: stack[0] };
            if (stack[0] !== peg$FAILED) {
              peg$tracer.trace({ type: "rule.match", rule: peg$ruleNames[index], description: peg$descNames[index], result: stack[0], location: peg$computeLocation(startPos, peg$currPos) });
            } else {
              peg$tracer.trace({ type: "rule.fail", rule: peg$ruleNames[index], description: peg$descNames[index], location: peg$computeLocation(startPos, startPos) });
            }
            return stack[0];
          }
          function makeArray(arr) {
            if (!isOkay(arr)) {
              return [];
            }
            return !Array.isArray(arr) ? [arr] : arr;
          }
          function isOkay(obj) {
            return obj != null;
          }
          function foldString(parts) {
            var glue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : " ";
            var folded = parts.filter(function(part) {
              return isOkay(part);
            }).reduce(function(prev, cur) {
              return "" + prev + nodeToString(cur) + glue;
            }, "");
            return folded.trim();
          }
          function foldStringWord(parts) {
            return foldString(parts, "");
          }
          function foldStringKey(parts) {
            return foldString(parts).toLowerCase();
          }
          function flattenAll(arr) {
            return arr.filter(function(part) {
              return isOkay(part);
            }).reduce(function(prev, cur) {
              return prev.concat(cur);
            }, []);
          }
          function unescape2(str) {
            var quoteChar = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "'";
            var re2 = new RegExp(quoteChar + "{2}", "g");
            return nodeToString(str).replace(re2, quoteChar);
          }
          function nodeToString() {
            var node = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
            return makeArray(node).join("");
          }
          function textNode(node) {
            return nodeToString(node).trim();
          }
          function keyNode(node) {
            return textNode(node).toLowerCase();
          }
          function isArrayOkay(arr) {
            return Array.isArray(arr) && arr.length > 0 && isOkay(arr[0]);
          }
          function composeBinary(first, rest) {
            return rest.reduce(function(left, _ref7) {
              var _ref8 = _slicedToArray(_ref7, 4);
              var x6 = _ref8[0];
              var operation = _ref8[1];
              var y6 = _ref8[2];
              var right = _ref8[3];
              return { "type": "expression", "format": "binary", "variant": "operation", "operation": keyNode(operation), "left": left, "right": right };
            }, first);
          }
          peg$result = peg$parseRule(peg$startRuleIndex);
          if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
          } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
              peg$fail(peg$endExpectation());
            }
            throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
          }
        }
        module4.exports = { SyntaxError: peg$SyntaxError, DefaultTracer: peg$DefaultTracer, parse: peg$parse };
      }, {}], 3: [function(require2, module4, exports4) {
        "use strict";
        Object.defineProperty(exports4, "__esModule", { value: true });
        function findLastIndex(arr, func) {
          for (var i8 = arr.length - 1; i8 >= 0; i8 -= 1) {
            if (func(arr[i8])) {
              return i8;
            }
          }
          return -1;
        }
        function takeWhile(arr, func) {
          var len = arr.length;
          var i8 = 0;
          for (; i8 < len; i8 += 1) {
            if (!func(arr[i8])) {
              return arr.slice(0, i8);
            }
          }
          return arr;
        }
        var Tracer = exports4.Tracer = function() {
          function Tracer2() {
            if (!(this instanceof Tracer2)) {
              return new Tracer2();
            }
            this.events = [];
            this.indentation = 0;
            this.whitespaceRule = /(^whitespace)|(char$)|(^[oe]$)|(^sym\_)/i;
            this.statementRule = /Statement$/i;
            this.firstNodeRule = /(Statement|Clause)$/i;
          }
          ;
          Tracer2.prototype.trace = function trace(event) {
            var that = this, lastIndex, lastWsIndex;
            event.indentation = this.indentation;
            switch (event.type) {
              case "rule.enter":
                this.events.push(event);
                this.indentation += 1;
                break;
              case "rule.match":
                this.indentation -= 1;
                break;
              case "rule.fail":
                lastIndex = findLastIndex(this.events, function(_ref) {
                  var rule = _ref.rule;
                  return rule === event.rule;
                });
                lastWsIndex = findLastIndex(this.events, function(e5) {
                  return !that.whitespaceRule.test(e5.rule);
                });
                if (that.whitespaceRule.test(event.rule) || lastIndex === lastWsIndex) {
                  this.events.splice(lastIndex, 1);
                }
                this.indentation -= 1;
                break;
            }
          };
          Tracer2.prototype.smartError = function smartError(err) {
            var that = this, message, location, chain, chainDetail, firstNode, bestNode = { indentation: -1 }, deep = false, stmts = 0, namedEvents = this.events.filter(function(e5) {
              return e5.description != null && !that.whitespaceRule.test(e5.rule);
            }).reverse();
            chain = takeWhile(namedEvents, function(elem) {
              if (/^(sym\_semi)$/i.test(elem.rule)) {
                stmts += 1;
              }
              if (stmts > 1) {
                return false;
              }
              if (!deep) {
                if (elem.indentation > bestNode.indentation) {
                  bestNode = elem;
                } else {
                  deep = true;
                }
              } else if (/^(stmt)$/i.test(elem.rule)) {
                deep = true;
                return true;
              }
              return true;
            });
            if (chain.length) {
              location = bestNode.location;
              firstNode = chain.find(function(elem) {
                return that.firstNodeRule.test(elem.description) && elem.description !== bestNode.description && elem.indentation !== bestNode.indentation;
              });
              if (firstNode != null) {
                if (this.statementRule.test(bestNode.description) && this.statementRule.test(firstNode.description)) {
                  chainDetail = firstNode.description;
                } else {
                  chainDetail = bestNode.description + " (" + firstNode.description + ")";
                }
              } else {
                chainDetail = bestNode.description;
              }
              message = "Syntax error found near " + chainDetail;
              Object.assign(err, { "message": message, "location": location });
            }
            return err;
          };
          return Tracer2;
        }();
      }, {}] }, {}, [1])(1);
    });
  }
});

// node_modules/walkjs/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/walkjs/lib/defaults.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2._buildContext = void 0;
    function executionOrderSort(a5, b9) {
      const _a = a5.executionOrder || 0;
      const _b = b9.executionOrder || 0;
      return _a < _b ? -1 : _a > _b ? 1 : 0;
    }
    function buildDefaultContext(config) {
      return {
        seenObjects: /* @__PURE__ */ new Set(),
        callbacksByPosition: {
          "preWalk": [],
          "postWalk": []
        },
        config: {
          traversalMode: typeof config.traversalMode !== "undefined" ? config.traversalMode : "depth",
          rootObjectCallbacks: typeof config.rootObjectCallbacks !== "undefined" ? config.rootObjectCallbacks : true,
          runCallbacks: typeof config.runCallbacks !== "undefined" ? config.runCallbacks : true,
          graphMode: typeof config.graphMode !== "undefined" ? config.graphMode : "finiteTree",
          parallelizeAsyncCallbacks: typeof config.parallelizeAsyncCallbacks !== "undefined" ? config.parallelizeAsyncCallbacks : false,
          callbacks: typeof config.callbacks !== "undefined" ? config.callbacks.filter((cb) => typeof cb.callback !== "undefined").map((cb) => ({
            callback: cb.callback,
            keyFilters: typeof cb.keyFilters === "undefined" ? [] : Array.isArray(cb.keyFilters) ? cb.keyFilters : [cb.keyFilters],
            nodeTypeFilters: typeof cb.nodeTypeFilters === "undefined" ? [] : Array.isArray(cb.nodeTypeFilters) ? cb.nodeTypeFilters : [cb.nodeTypeFilters],
            executionOrder: typeof cb.executionOrder === "undefined" ? 0 : cb.executionOrder,
            filters: typeof cb.filters === "undefined" ? [] : Array.isArray(cb.filters) ? cb.filters : [cb.filters],
            positionFilter: typeof cb.positionFilter === "undefined" ? "preWalk" : cb.positionFilter
          })) : []
        }
      };
    }
    function _buildContext(config) {
      const ctx = buildDefaultContext(config);
      ctx.config.callbacks.forEach((cb) => {
        if (cb.positionFilter === "both") {
          ctx.callbacksByPosition["preWalk"].push(cb);
          ctx.callbacksByPosition["postWalk"].push(cb);
        } else
          ctx.callbacksByPosition[cb.positionFilter].push(cb);
      });
      for (const key in ctx.callbacksByPosition)
        ctx.callbacksByPosition[key] = ctx.callbacksByPosition[key].sort(executionOrderSort);
      return ctx;
    }
    exports2._buildContext = _buildContext;
  }
});

// node_modules/walkjs/lib/node.js
var require_node = __commonJS({
  "node_modules/walkjs/lib/node.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WalkNode = void 0;
    var getNormalizedType = (val) => {
      return Array.isArray(val) ? "array" : typeof val === "object" ? "object" : "value";
    };
    function defaultPathFormatter(node) {
      return node.isArrayMember ? `[${node.key}]` : `["${node.key}"]`;
    }
    var WalkNode = class {
      constructor(val, isRoot = false, isArrayMember = false, nodeType = "value", rawType = "undefined", executedCallbacks = [], key, parent) {
        this.val = val;
        this.isRoot = isRoot;
        this.isArrayMember = isArrayMember;
        this.nodeType = nodeType;
        this.rawType = rawType;
        this.executedCallbacks = executedCallbacks;
        this.key = key;
        this.parent = parent;
        this._children = void 0;
        this.id = WalkNode._idx++;
      }
      static fromRoot(obj) {
        return new WalkNode(obj, true, false, getNormalizedType(obj), typeof obj, [], void 0, void 0);
      }
      static fromObjectKey(parent, key) {
        return new WalkNode(parent.val[key], false, false, getNormalizedType(parent.val[key]), typeof parent.val[key], [], key, parent);
      }
      static fromArrayIndex(parent, index) {
        return new WalkNode(parent.val[index], false, true, getNormalizedType(parent.val[index]), typeof parent.val[index], [], index, parent);
      }
      canBeCompared() {
        return this.nodeType !== "value" && this.val !== null && !Object.is(NaN, this.val);
      }
      sameAs(other) {
        if (!this.canBeCompared() || this.nodeType !== other.nodeType)
          return false;
        if (this.val === null || Object.is(NaN, this.val))
          return false;
        return Object.is(this.val, other.val);
      }
      getPath(pathFormat) {
        if (this.isRoot)
          return "";
        pathFormat = pathFormat || defaultPathFormatter;
        return this.parent.getPath(pathFormat) + pathFormat(this);
      }
      get children() {
        if (typeof this._children === "undefined")
          this._children = [...this.getChildren()];
        return this._children;
      }
      *getChildren() {
        if (this.nodeType === "array") {
          for (let i8 = 0; i8 < this.val.length; i8++)
            yield WalkNode.fromArrayIndex(this, i8);
        } else if (this.nodeType === "object") {
          if (this.val === null)
            return;
          for (let key of Object.keys(this.val))
            yield WalkNode.fromObjectKey(this, key);
        }
      }
      get siblings() {
        return [...this.getSiblings()];
      }
      *getSiblings() {
        if (!this.parent)
          return;
        for (let child of this.parent.children)
          if (this.key !== child.key)
            yield child;
      }
      get ancestors() {
        return [...this.getAncestors()];
      }
      *getAncestors() {
        let next = this.parent;
        while (next) {
          yield next;
          next = next.parent;
        }
      }
      get descendants() {
        return [...this.getDescendants()];
      }
      *getDescendants() {
        for (const child of this.getChildren()) {
          yield child;
          yield* child.getDescendants();
        }
      }
    };
    exports2.WalkNode = WalkNode;
    WalkNode._idx = 0;
  }
});

// node_modules/walkjs/lib/callback.js
var require_callback = __commonJS({
  "node_modules/walkjs/lib/callback.js"(exports2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e5) {
            reject(e5);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e5) {
            reject(e5);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2._CallbackStacker = void 0;
    function filterByFilters(cb, node) {
      return cb.filters.every((f6) => f6(node));
    }
    function filterByNodeType(cb, node) {
      return !cb.nodeTypeFilters.length || cb.nodeTypeFilters.indexOf(node.nodeType) !== -1;
    }
    function filterByKey(cb, node) {
      return cb.keyFilters.length === 0 || typeof node.key === "string" && cb.keyFilters.indexOf(node.key) !== -1;
    }
    function execCallbacks(callbacks, node) {
      for (let cb of callbacks) {
        cb.callback(node);
        node.executedCallbacks.push(cb);
      }
    }
    function execCallbacksAsync(callbacks, node) {
      return __awaiter(this, void 0, void 0, function* () {
        for (let cb of callbacks) {
          yield cb.callback(node);
          node.executedCallbacks.push(cb);
        }
      });
    }
    var execCallbacksAsyncInParallel = (callbacks, node) => __awaiter(void 0, void 0, void 0, function* () {
      yield Promise.all(callbacks.map((cb) => Promise.resolve(cb.callback(node)).then(() => {
        node.executedCallbacks.push(cb);
      })));
    });
    var _CallbackStacker = class {
      constructor(ctx, executor) {
        this.ctx = ctx;
        this.executor = executor;
        this.lookup = {};
      }
      static forSync(ctx) {
        return new _CallbackStacker(ctx, execCallbacks);
      }
      static forAsync(ctx) {
        return new _CallbackStacker(ctx, ctx.config.parallelizeAsyncCallbacks ? execCallbacksAsyncInParallel : execCallbacksAsync);
      }
      _matchCallbacks(node, position) {
        if (!this.ctx.config.runCallbacks)
          return [];
        if (node.isRoot && !this.ctx.config.rootObjectCallbacks)
          return [];
        let callbacks = this.ctx.callbacksByPosition[position];
        return (callbacks || []).map((cb) => cb).filter((cb) => filterByFilters(cb, node)).filter((cb) => filterByNodeType(cb, node)).filter((cb) => filterByKey(cb, node));
      }
      pushToStack(node, position) {
        const lastChild = node.children[node.children.length - 1];
        const callbacks = this._matchCallbacks(node, position);
        this.lookup[lastChild.id] = {
          trigger: node.id,
          fn: () => this.executor(callbacks, node)
        };
      }
      executeOne(node, position) {
        const callbacks = this._matchCallbacks(node, position);
        return this.executor(callbacks, node);
      }
      *execute(nodeId) {
        let next = this.lookup[nodeId];
        delete this.lookup[nodeId];
        while (next) {
          yield next.fn();
          const trigger = next.trigger;
          next = this.lookup[trigger];
          delete this.lookup[trigger];
        }
      }
    };
    exports2._CallbackStacker = _CallbackStacker;
  }
});

// node_modules/walkjs/lib/break.js
var require_break = __commonJS({
  "node_modules/walkjs/lib/break.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Break = void 0;
    var Break = class extends Error {
      constructor(message = "") {
        super(message);
        this.name = "Break";
      }
    };
    exports2.Break = Break;
  }
});

// node_modules/walkjs/lib/walk.js
var require_walk = __commonJS({
  "node_modules/walkjs/lib/walk.js"(exports2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e5) {
            reject(e5);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e5) {
            reject(e5);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __await = exports2 && exports2.__await || function(v10) {
      return this instanceof __await ? (this.v = v10, this) : new __await(v10);
    };
    var __asyncValues = exports2 && exports2.__asyncValues || function(o9) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m10 = o9[Symbol.asyncIterator], i8;
      return m10 ? m10.call(o9) : (o9 = typeof __values === "function" ? __values(o9) : o9[Symbol.iterator](), i8 = {}, verb("next"), verb("throw"), verb("return"), i8[Symbol.asyncIterator] = function() {
        return this;
      }, i8);
      function verb(n11) {
        i8[n11] = o9[n11] && function(v10) {
          return new Promise(function(resolve, reject) {
            v10 = o9[n11](v10), settle(resolve, reject, v10.done, v10.value);
          });
        };
      }
      function settle(resolve, reject, d8, v10) {
        Promise.resolve(v10).then(function(v11) {
          resolve({ value: v11, done: d8 });
        }, reject);
      }
    };
    var __asyncGenerator = exports2 && exports2.__asyncGenerator || function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g9 = generator.apply(thisArg, _arguments || []), i8, q9 = [];
      return i8 = {}, verb("next"), verb("throw"), verb("return"), i8[Symbol.asyncIterator] = function() {
        return this;
      }, i8;
      function verb(n11) {
        if (g9[n11])
          i8[n11] = function(v10) {
            return new Promise(function(a5, b9) {
              q9.push([n11, v10, a5, b9]) > 1 || resume(n11, v10);
            });
          };
      }
      function resume(n11, v10) {
        try {
          step(g9[n11](v10));
        } catch (e5) {
          settle(q9[0][3], e5);
        }
      }
      function step(r7) {
        r7.value instanceof __await ? Promise.resolve(r7.value.v).then(fulfill, reject) : settle(q9[0][2], r7);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f6, v10) {
        if (f6(v10), q9.shift(), q9.length)
          resume(q9[0][0], q9[0][1]);
      }
    };
    var __asyncDelegator = exports2 && exports2.__asyncDelegator || function(o9) {
      var i8, p10;
      return i8 = {}, verb("next"), verb("throw", function(e5) {
        throw e5;
      }), verb("return"), i8[Symbol.iterator] = function() {
        return this;
      }, i8;
      function verb(n11, f6) {
        i8[n11] = o9[n11] ? function(v10) {
          return (p10 = !p10) ? { value: __await(o9[n11](v10)), done: n11 === "return" } : f6 ? f6(v10) : v10;
        } : f6;
      }
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.walkAsync = exports2.walk = exports2.walkAsyncStep = exports2.walkStep = void 0;
    var defaults_1 = require_defaults();
    var node_1 = require_node();
    var callback_1 = require_callback();
    var break_1 = require_break();
    var NodeQueue = class {
      constructor(depthFirst) {
        this.depthFirst = depthFirst;
        this.queue = [];
        this.add = depthFirst ? (nodes) => this.queue.unshift(...nodes) : (nodes) => this.queue.push(...nodes);
      }
      shift() {
        return this.queue.shift();
      }
      get more() {
        return this.queue.length > 0;
      }
    };
    var Walker = class {
      constructor(ctx) {
        this.ctx = ctx;
        this.depthFirst = ctx.config.traversalMode === "depth";
      }
      shouldSkipVisitation(node) {
        if (!node.canBeCompared())
          return false;
        if (!this.ctx.seenObjects.has(node.val))
          this.ctx.seenObjects.add(node.val);
        else if (this.ctx.config.graphMode === "graph")
          return true;
        else if (this.ctx.config.graphMode === "finiteTree")
          throw "The object violates the defined structure. Override 'graphMode' in the config to allow parsing different object structures.";
        return false;
      }
      *walk(target) {
        const queue = new NodeQueue(this.depthFirst);
        const stacker = callback_1._CallbackStacker.forSync(this.ctx);
        try {
          queue.add([node_1.WalkNode.fromRoot(target)]);
          do {
            const node = queue.shift();
            if (this.shouldSkipVisitation(node))
              continue;
            const children = node.children;
            queue.add(children);
            stacker.executeOne(node, "preWalk");
            yield node;
            if (this.depthFirst && children.length)
              stacker.pushToStack(node, "postWalk");
            else {
              stacker.executeOne(node, "postWalk");
              for (let _6 of stacker.execute(node.id)) {
              }
            }
          } while (queue.more);
        } catch (err) {
          if (!(err instanceof break_1.Break))
            throw err;
        }
      }
      walkAsync(target) {
        return __asyncGenerator(this, arguments, function* walkAsync_1() {
          var e_1, _a;
          const queue = new NodeQueue(this.depthFirst);
          const stacker = callback_1._CallbackStacker.forAsync(this.ctx);
          try {
            queue.add([node_1.WalkNode.fromRoot(target)]);
            do {
              const node = queue.shift();
              if (this.shouldSkipVisitation(node))
                continue;
              const children = node.children;
              queue.add(children);
              yield __await(stacker.executeOne(node, "preWalk"));
              yield yield __await(node);
              if (this.depthFirst && children.length)
                stacker.pushToStack(node, "postWalk");
              else {
                yield __await(stacker.executeOne(node, "postWalk"));
                try {
                  for (var _b = (e_1 = void 0, __asyncValues(stacker.execute(node.id))), _c; _c = yield __await(_b.next()), !_c.done; ) {
                    const _6 = _c.value;
                  }
                } catch (e_1_1) {
                  e_1 = { error: e_1_1 };
                } finally {
                  try {
                    if (_c && !_c.done && (_a = _b.return))
                      yield __await(_a.call(_b));
                  } finally {
                    if (e_1)
                      throw e_1.error;
                  }
                }
              }
            } while (queue.more);
          } catch (err) {
            if (!(err instanceof break_1.Break))
              throw err;
          }
        });
      }
    };
    function* walkStep(target, config = {}) {
      const ctx = defaults_1._buildContext(config);
      const walker = new Walker(ctx);
      yield* walker.walk(target);
    }
    exports2.walkStep = walkStep;
    function walkAsyncStep(target, config = {}) {
      return __asyncGenerator(this, arguments, function* walkAsyncStep_1() {
        const ctx = defaults_1._buildContext(config);
        const walker = new Walker(ctx);
        yield __await(yield* __asyncDelegator(__asyncValues(walker.walkAsync(target))));
      });
    }
    exports2.walkAsyncStep = walkAsyncStep;
    function walk(target, config = {}) {
      for (let _6 of walkStep(target, config)) {
      }
    }
    exports2.walk = walk;
    function walkAsync(target, config = {}) {
      var e_2, _a;
      return __awaiter(this, void 0, void 0, function* () {
        try {
          for (var _b = __asyncValues(walkAsyncStep(target, config)), _c; _c = yield _b.next(), !_c.done; ) {
            let _6 = _c.value;
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              yield _a.call(_b);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      });
    }
    exports2.walkAsync = walkAsync;
  }
});

// node_modules/walkjs/lib/builders.js
var require_builders = __commonJS({
  "node_modules/walkjs/lib/builders.js"(exports2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e5) {
            reject(e5);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e5) {
            reject(e5);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __await = exports2 && exports2.__await || function(v10) {
      return this instanceof __await ? (this.v = v10, this) : new __await(v10);
    };
    var __asyncGenerator = exports2 && exports2.__asyncGenerator || function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g9 = generator.apply(thisArg, _arguments || []), i8, q9 = [];
      return i8 = {}, verb("next"), verb("throw"), verb("return"), i8[Symbol.asyncIterator] = function() {
        return this;
      }, i8;
      function verb(n11) {
        if (g9[n11])
          i8[n11] = function(v10) {
            return new Promise(function(a5, b9) {
              q9.push([n11, v10, a5, b9]) > 1 || resume(n11, v10);
            });
          };
      }
      function resume(n11, v10) {
        try {
          step(g9[n11](v10));
        } catch (e5) {
          settle(q9[0][3], e5);
        }
      }
      function step(r7) {
        r7.value instanceof __await ? Promise.resolve(r7.value.v).then(fulfill, reject) : settle(q9[0][2], r7);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f6, v10) {
        if (f6(v10), q9.shift(), q9.length)
          resume(q9[0][0], q9[0][1]);
      }
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AsyncWalkBuilder = exports2.WalkBuilder = void 0;
    var walk_1 = require_walk();
    var CallbacksBuilder = class {
      constructor(cbs, source) {
        this.cbs = cbs;
        this.source = source;
        this.callback = {
          callback: () => {
          }
        };
      }
      withExecutionOrder(order) {
        this.callback.executionOrder = order;
        return this;
      }
      withFilter(fn) {
        return this.withFilters(fn);
      }
      withFilters(...fn) {
        this.callback.filters = fn;
        return this;
      }
      filteredByNodeTypes(...types) {
        this.callback.nodeTypeFilters = types;
        return this;
      }
      filteredByKeys(...keys) {
        this.callback.keyFilters = keys;
        return this;
      }
      filteredByPosition(position) {
        this.callback.positionFilter = position;
        return this;
      }
      done() {
        return this.source.withCallbacks(...this.cbs.map((cb) => Object.assign(Object.assign({}, this.callback), { callback: cb })));
      }
    };
    var BaseWalkBuilder = class {
      constructor() {
        this._config = {};
        this.globalFilters = [];
      }
      resetConfig() {
        this._config = {};
        return this;
      }
      withConfig(config) {
        this._config = Object.assign(Object.assign({}, this._config), config);
        return this;
      }
      withTraversalMode(traversalMode) {
        this._config.traversalMode = traversalMode;
        return this;
      }
      withGraphMode(graphMode) {
        this._config.graphMode = graphMode;
        return this;
      }
      withRootObjectCallbacks(val) {
        this._config.rootObjectCallbacks = val;
        return this;
      }
      withRunningCallbacks(val) {
        this._config.runCallbacks = val;
        return this;
      }
      withConfiguredCallbacks(...callbacks) {
        return new CallbacksBuilder(callbacks, this);
      }
      withConfiguredCallback(callback) {
        return this.withConfiguredCallbacks(callback);
      }
      withCallback(callback) {
        return this.withCallbacks(callback);
      }
      withGlobalFilter(fn) {
        this.globalFilters.push(fn);
        return this;
      }
      withCallbacks(...callbacks) {
        if (!this._config.callbacks)
          this._config.callbacks = [];
        this._config.callbacks.push(...callbacks);
        return this;
      }
      getCurrentConfig() {
        var _a;
        return Object.assign(Object.assign({}, this._config), { callbacks: (_a = this._config.callbacks) === null || _a === void 0 ? void 0 : _a.map((cb) => Object.assign(Object.assign({}, cb), { filters: [
          ...!cb.filters ? [] : Array.isArray(cb.filters) ? cb.filters : [cb.filters],
          ...this.globalFilters
        ] })) });
      }
    };
    var WalkBuilder = class extends BaseWalkBuilder {
      walk(target) {
        walk_1.walk(target, this.getCurrentConfig());
      }
      *walkStep(target) {
        return walk_1.walkStep(target, this.getCurrentConfig());
      }
      withSimpleCallback(callback) {
        return this.withSimpleCallbacks(callback);
      }
      withSimpleCallbacks(...callbacks) {
        return this.withCallbacks(...callbacks.map((c8) => ({ callback: c8 })));
      }
    };
    exports2.WalkBuilder = WalkBuilder;
    var AsyncWalkBuilder = class extends BaseWalkBuilder {
      walk(target) {
        return __awaiter(this, void 0, void 0, function* () {
          return walk_1.walkAsync(target, this.getCurrentConfig());
        });
      }
      walkStep(target) {
        return __asyncGenerator(this, arguments, function* walkStep_1() {
          return yield __await(walk_1.walkAsyncStep(target, this.getCurrentConfig()));
        });
      }
      withParallelizeAsyncCallbacks(val) {
        this._config.parallelizeAsyncCallbacks = val;
        return this;
      }
      withSimpleCallback(callback) {
        return this.withSimpleCallbacks(callback);
      }
      withSimpleCallbacks(...callbacks) {
        return this.withCallbacks(...callbacks.map((c8) => ({ callback: c8 })));
      }
    };
    exports2.AsyncWalkBuilder = AsyncWalkBuilder;
  }
});

// node_modules/walkjs/lib/types.js
var require_types = __commonJS({
  "node_modules/walkjs/lib/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/walkjs/lib/utils/apply.js
var require_apply = __commonJS({
  "node_modules/walkjs/lib/utils/apply.js"(exports2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e5) {
            reject(e5);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e5) {
            reject(e5);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.applyAsync = exports2.apply = void 0;
    var walk_1 = require_walk();
    function apply(target, ...callbacks) {
      walk_1.walk(target, { callbacks: callbacks.map((c8) => ({ callback: c8 })) });
    }
    exports2.apply = apply;
    function applyAsync(target, ...callbacks) {
      return __awaiter(this, void 0, void 0, function* () {
        yield walk_1.walkAsync(target, { callbacks: callbacks.map((c8) => ({ callback: c8 })) });
      });
    }
    exports2.applyAsync = applyAsync;
  }
});

// node_modules/walkjs/lib/utils/deepCopy.js
var require_deepCopy = __commonJS({
  "node_modules/walkjs/lib/utils/deepCopy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deepCopy = void 0;
    var walk_1 = require_walk();
    function updateObjectViaPathString(obj, path, delimiter, val) {
      const block = path.split(delimiter).slice(1);
      while (block.length > 1)
        obj = obj[block.shift()];
      obj[block.shift()] = val;
    }
    function deepCopy(target, delimiter = "$walk:dc$") {
      if (target === null)
        return null;
      const newObj = Array.isArray(target) ? [] : {};
      const format = ({ key }) => delimiter + key;
      walk_1.walk(target, {
        rootObjectCallbacks: false,
        callbacks: [{
          positionFilter: "preWalk",
          callback: (node) => updateObjectViaPathString(newObj, node.getPath(format), delimiter, node.nodeType === "array" ? [] : node.nodeType === "value" ? node.val : node.val === null ? null : {})
        }]
      });
      return newObj;
    }
    exports2.deepCopy = deepCopy;
  }
});

// node_modules/walkjs/lib/utils/compare.js
var require_compare = __commonJS({
  "node_modules/walkjs/lib/utils/compare.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.compare = void 0;
    var apply_1 = require_apply();
    var defaultFormatter = ({ key, isArrayMember: isArr }) => isArr ? `[${key}]` : `.${key}`;
    function compare2(a5, b9, leavesOnly = false, formatter = defaultFormatter) {
      const aNodes = {};
      const bNodes = {};
      apply_1.apply(a5, (n11) => aNodes[n11.getPath(formatter)] = n11);
      apply_1.apply(b9, (n11) => bNodes[n11.getPath(formatter)] = n11);
      return [.../* @__PURE__ */ new Set([
        ...Object.keys(aNodes),
        ...Object.keys(bNodes)
      ])].filter((key) => !leavesOnly || (aNodes[key] || bNodes[key]).nodeType === "value").map((key) => {
        const aNode = aNodes[key];
        const bNode = bNodes[key];
        const removed = aNode && !bNode;
        const added = bNode && !aNode;
        const changed = aNode && bNode && !Object.is(aNode.val, bNode.val);
        let delta = {
          path: key,
          hasDifference: removed || added || changed
        };
        if (added) {
          delta.difference = "added";
          delta.b = bNode === null || bNode === void 0 ? void 0 : bNode.val;
        } else if (removed) {
          delta.difference = "removed";
          delta.a = aNode === null || aNode === void 0 ? void 0 : aNode.val;
        } else if (changed) {
          delta.difference = {
            before: aNode === null || aNode === void 0 ? void 0 : aNode.val,
            after: bNode === null || bNode === void 0 ? void 0 : bNode.val
          };
          delta.a = aNode === null || aNode === void 0 ? void 0 : aNode.val;
          delta.b = bNode === null || bNode === void 0 ? void 0 : bNode.val;
        }
        return delta;
      });
    }
    exports2.compare = compare2;
  }
});

// node_modules/walkjs/lib/utils/reduce.js
var require_reduce = __commonJS({
  "node_modules/walkjs/lib/utils/reduce.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.reduce = void 0;
    var walk_1 = require_walk();
    function reduce(source, initialValue, fn) {
      let val = initialValue;
      for (let node of walk_1.walkStep(source))
        val = fn(val, node);
      return val;
    }
    exports2.reduce = reduce;
  }
});

// node_modules/walkjs/lib/index.js
var require_lib = __commonJS({
  "node_modules/walkjs/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o9, m10, k3, k22) {
      if (k22 === void 0)
        k22 = k3;
      Object.defineProperty(o9, k22, { enumerable: true, get: function() {
        return m10[k3];
      } });
    } : function(o9, m10, k3, k22) {
      if (k22 === void 0)
        k22 = k3;
      o9[k22] = m10[k3];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m10, exports3) {
      for (var p10 in m10)
        if (p10 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p10))
          __createBinding(exports3, m10, p10);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_builders(), exports2);
    __exportStar(require_callback(), exports2);
    __exportStar(require_defaults(), exports2);
    __exportStar(require_node(), exports2);
    __exportStar(require_types(), exports2);
    __exportStar(require_walk(), exports2);
    __exportStar(require_break(), exports2);
    __exportStar(require_apply(), exports2);
    __exportStar(require_deepCopy(), exports2);
    __exportStar(require_compare(), exports2);
    __exportStar(require_reduce(), exports2);
  }
});

// node_modules/@protobufjs/aspromise/index.js
var require_aspromise = __commonJS({
  "node_modules/@protobufjs/aspromise/index.js"(exports2, module2) {
    "use strict";
    module2.exports = asPromise;
    function asPromise(fn, ctx) {
      var params = new Array(arguments.length - 1), offset = 0, index = 2, pending = true;
      while (index < arguments.length)
        params[offset++] = arguments[index++];
      return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err) {
          if (pending) {
            pending = false;
            if (err)
              reject(err);
            else {
              var params2 = new Array(arguments.length - 1), offset2 = 0;
              while (offset2 < params2.length)
                params2[offset2++] = arguments[offset2];
              resolve.apply(null, params2);
            }
          }
        };
        try {
          fn.apply(ctx || null, params);
        } catch (err) {
          if (pending) {
            pending = false;
            reject(err);
          }
        }
      });
    }
  }
});

// node_modules/@protobufjs/base64/index.js
var require_base642 = __commonJS({
  "node_modules/@protobufjs/base64/index.js"(exports2) {
    "use strict";
    var base64 = exports2;
    base64.length = function length(string) {
      var p10 = string.length;
      if (!p10)
        return 0;
      var n11 = 0;
      while (--p10 % 4 > 1 && string.charAt(p10) === "=")
        ++n11;
      return Math.ceil(string.length * 3) / 4 - n11;
    };
    var b64 = new Array(64);
    var s64 = new Array(123);
    for (i8 = 0; i8 < 64; )
      s64[b64[i8] = i8 < 26 ? i8 + 65 : i8 < 52 ? i8 + 71 : i8 < 62 ? i8 - 4 : i8 - 59 | 43] = i8++;
    var i8;
    base64.encode = function encode(buffer, start, end) {
      var parts = null, chunk = [];
      var i9 = 0, j5 = 0, t3;
      while (start < end) {
        var b9 = buffer[start++];
        switch (j5) {
          case 0:
            chunk[i9++] = b64[b9 >> 2];
            t3 = (b9 & 3) << 4;
            j5 = 1;
            break;
          case 1:
            chunk[i9++] = b64[t3 | b9 >> 4];
            t3 = (b9 & 15) << 2;
            j5 = 2;
            break;
          case 2:
            chunk[i9++] = b64[t3 | b9 >> 6];
            chunk[i9++] = b64[b9 & 63];
            j5 = 0;
            break;
        }
        if (i9 > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i9 = 0;
        }
      }
      if (j5) {
        chunk[i9++] = b64[t3];
        chunk[i9++] = 61;
        if (j5 === 1)
          chunk[i9++] = 61;
      }
      if (parts) {
        if (i9)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i9)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i9));
    };
    var invalidEncoding = "invalid encoding";
    base64.decode = function decode(string, buffer, offset) {
      var start = offset;
      var j5 = 0, t3;
      for (var i9 = 0; i9 < string.length; ) {
        var c8 = string.charCodeAt(i9++);
        if (c8 === 61 && j5 > 1)
          break;
        if ((c8 = s64[c8]) === void 0)
          throw Error(invalidEncoding);
        switch (j5) {
          case 0:
            t3 = c8;
            j5 = 1;
            break;
          case 1:
            buffer[offset++] = t3 << 2 | (c8 & 48) >> 4;
            t3 = c8;
            j5 = 2;
            break;
          case 2:
            buffer[offset++] = (t3 & 15) << 4 | (c8 & 60) >> 2;
            t3 = c8;
            j5 = 3;
            break;
          case 3:
            buffer[offset++] = (t3 & 3) << 6 | c8;
            j5 = 0;
            break;
        }
      }
      if (j5 === 1)
        throw Error(invalidEncoding);
      return offset - start;
    };
    base64.test = function test(string) {
      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
    };
  }
});

// node_modules/@protobufjs/eventemitter/index.js
var require_eventemitter = __commonJS({
  "node_modules/@protobufjs/eventemitter/index.js"(exports2, module2) {
    "use strict";
    module2.exports = EventEmitter;
    function EventEmitter() {
      this._listeners = {};
    }
    EventEmitter.prototype.on = function on(evt, fn, ctx) {
      (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn,
        ctx: ctx || this
      });
      return this;
    };
    EventEmitter.prototype.off = function off(evt, fn) {
      if (evt === void 0)
        this._listeners = {};
      else {
        if (fn === void 0)
          this._listeners[evt] = [];
        else {
          var listeners = this._listeners[evt];
          for (var i8 = 0; i8 < listeners.length; )
            if (listeners[i8].fn === fn)
              listeners.splice(i8, 1);
            else
              ++i8;
        }
      }
      return this;
    };
    EventEmitter.prototype.emit = function emit(evt) {
      var listeners = this._listeners[evt];
      if (listeners) {
        var args = [], i8 = 1;
        for (; i8 < arguments.length; )
          args.push(arguments[i8++]);
        for (i8 = 0; i8 < listeners.length; )
          listeners[i8].fn.apply(listeners[i8++].ctx, args);
      }
      return this;
    };
  }
});

// node_modules/@protobufjs/float/index.js
var require_float = __commonJS({
  "node_modules/@protobufjs/float/index.js"(exports2, module2) {
    "use strict";
    module2.exports = factory(factory);
    function factory(exports3) {
      if (typeof Float32Array !== "undefined")
        (function() {
          var f32 = new Float32Array([-0]), f8b = new Uint8Array(f32.buffer), le2 = f8b[3] === 128;
          function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
          }
          function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
          }
          exports3.writeFloatLE = le2 ? writeFloat_f32_cpy : writeFloat_f32_rev;
          exports3.writeFloatBE = le2 ? writeFloat_f32_rev : writeFloat_f32_cpy;
          function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
          }
          function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
          }
          exports3.readFloatLE = le2 ? readFloat_f32_cpy : readFloat_f32_rev;
          exports3.readFloatBE = le2 ? readFloat_f32_rev : readFloat_f32_cpy;
        })();
      else
        (function() {
          function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0)
              writeUint(1 / val > 0 ? (
                /* positive */
                0
              ) : (
                /* negative 0 */
                2147483648
              ), buf, pos);
            else if (isNaN(val))
              writeUint(2143289344, buf, pos);
            else if (val > 34028234663852886e22)
              writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 11754943508222875e-54)
              writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf, pos);
            else {
              var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
              writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
          }
          exports3.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
          exports3.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
          function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 1401298464324817e-60 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
          }
          exports3.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
          exports3.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
        })();
      if (typeof Float64Array !== "undefined")
        (function() {
          var f64 = new Float64Array([-0]), f8b = new Uint8Array(f64.buffer), le2 = f8b[7] === 128;
          function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
          }
          function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
          }
          exports3.writeDoubleLE = le2 ? writeDouble_f64_cpy : writeDouble_f64_rev;
          exports3.writeDoubleBE = le2 ? writeDouble_f64_rev : writeDouble_f64_cpy;
          function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
          }
          function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
          }
          exports3.readDoubleLE = le2 ? readDouble_f64_cpy : readDouble_f64_rev;
          exports3.readDoubleBE = le2 ? readDouble_f64_rev : readDouble_f64_cpy;
        })();
      else
        (function() {
          function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0) {
              writeUint(0, buf, pos + off0);
              writeUint(1 / val > 0 ? (
                /* positive */
                0
              ) : (
                /* negative 0 */
                2147483648
              ), buf, pos + off1);
            } else if (isNaN(val)) {
              writeUint(0, buf, pos + off0);
              writeUint(2146959360, buf, pos + off1);
            } else if (val > 17976931348623157e292) {
              writeUint(0, buf, pos + off0);
              writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
              var mantissa;
              if (val < 22250738585072014e-324) {
                mantissa = val / 5e-324;
                writeUint(mantissa >>> 0, buf, pos + off0);
                writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
              } else {
                var exponent = Math.floor(Math.log(val) / Math.LN2);
                if (exponent === 1024)
                  exponent = 1023;
                mantissa = val * Math.pow(2, -exponent);
                writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
              }
            }
          }
          exports3.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
          exports3.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
          function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
          }
          exports3.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
          exports3.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
        })();
      return exports3;
    }
    function writeUintLE(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    function writeUintBE(val, buf, pos) {
      buf[pos] = val >>> 24;
      buf[pos + 1] = val >>> 16 & 255;
      buf[pos + 2] = val >>> 8 & 255;
      buf[pos + 3] = val & 255;
    }
    function readUintLE(buf, pos) {
      return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
    }
    function readUintBE(buf, pos) {
      return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
    }
  }
});

// node_modules/@protobufjs/inquire/index.js
var require_inquire = __commonJS({
  "node_modules/@protobufjs/inquire/index.js"(exports, module) {
    "use strict";
    module.exports = inquire;
    function inquire(moduleName) {
      try {
        var mod = eval("quire".replace(/^/, "re"))(moduleName);
        if (mod && (mod.length || Object.keys(mod).length))
          return mod;
      } catch (e5) {
      }
      return null;
    }
  }
});

// node_modules/@protobufjs/utf8/index.js
var require_utf8 = __commonJS({
  "node_modules/@protobufjs/utf8/index.js"(exports2) {
    "use strict";
    var utf8 = exports2;
    utf8.length = function utf8_length(string) {
      var len = 0, c8 = 0;
      for (var i8 = 0; i8 < string.length; ++i8) {
        c8 = string.charCodeAt(i8);
        if (c8 < 128)
          len += 1;
        else if (c8 < 2048)
          len += 2;
        else if ((c8 & 64512) === 55296 && (string.charCodeAt(i8 + 1) & 64512) === 56320) {
          ++i8;
          len += 4;
        } else
          len += 3;
      }
      return len;
    };
    utf8.read = function utf8_read(buffer, start, end) {
      var len = end - start;
      if (len < 1)
        return "";
      var parts = null, chunk = [], i8 = 0, t3;
      while (start < end) {
        t3 = buffer[start++];
        if (t3 < 128)
          chunk[i8++] = t3;
        else if (t3 > 191 && t3 < 224)
          chunk[i8++] = (t3 & 31) << 6 | buffer[start++] & 63;
        else if (t3 > 239 && t3 < 365) {
          t3 = ((t3 & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 65536;
          chunk[i8++] = 55296 + (t3 >> 10);
          chunk[i8++] = 56320 + (t3 & 1023);
        } else
          chunk[i8++] = (t3 & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i8 > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i8 = 0;
        }
      }
      if (parts) {
        if (i8)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i8)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i8));
    };
    utf8.write = function utf8_write(string, buffer, offset) {
      var start = offset, c1, c22;
      for (var i8 = 0; i8 < string.length; ++i8) {
        c1 = string.charCodeAt(i8);
        if (c1 < 128) {
          buffer[offset++] = c1;
        } else if (c1 < 2048) {
          buffer[offset++] = c1 >> 6 | 192;
          buffer[offset++] = c1 & 63 | 128;
        } else if ((c1 & 64512) === 55296 && ((c22 = string.charCodeAt(i8 + 1)) & 64512) === 56320) {
          c1 = 65536 + ((c1 & 1023) << 10) + (c22 & 1023);
          ++i8;
          buffer[offset++] = c1 >> 18 | 240;
          buffer[offset++] = c1 >> 12 & 63 | 128;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        } else {
          buffer[offset++] = c1 >> 12 | 224;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        }
      }
      return offset - start;
    };
  }
});

// node_modules/@protobufjs/pool/index.js
var require_pool = __commonJS({
  "node_modules/@protobufjs/pool/index.js"(exports2, module2) {
    "use strict";
    module2.exports = pool;
    function pool(alloc, slice, size) {
      var SIZE = size || 8192;
      var MAX = SIZE >>> 1;
      var slab = null;
      var offset = SIZE;
      return function pool_alloc(size2) {
        if (size2 < 1 || size2 > MAX)
          return alloc(size2);
        if (offset + size2 > SIZE) {
          slab = alloc(SIZE);
          offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size2);
        if (offset & 7)
          offset = (offset | 7) + 1;
        return buf;
      };
    }
  }
});

// node_modules/protobufjs/src/util/longbits.js
var require_longbits = __commonJS({
  "node_modules/protobufjs/src/util/longbits.js"(exports2, module2) {
    "use strict";
    module2.exports = LongBits;
    var util2 = require_minimal();
    function LongBits(lo, hi) {
      this.lo = lo >>> 0;
      this.hi = hi >>> 0;
    }
    var zero = LongBits.zero = new LongBits(0, 0);
    zero.toNumber = function() {
      return 0;
    };
    zero.zzEncode = zero.zzDecode = function() {
      return this;
    };
    zero.length = function() {
      return 1;
    };
    var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
    LongBits.fromNumber = function fromNumber2(value) {
      if (value === 0)
        return zero;
      var sign = value < 0;
      if (sign)
        value = -value;
      var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
      if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
          lo = 0;
          if (++hi > 4294967295)
            hi = 0;
        }
      }
      return new LongBits(lo, hi);
    };
    LongBits.from = function from(value) {
      if (typeof value === "number")
        return LongBits.fromNumber(value);
      if (util2.isString(value)) {
        if (util2.Long)
          value = util2.Long.fromString(value);
        else
          return LongBits.fromNumber(parseInt(value, 10));
      }
      return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
    };
    LongBits.prototype.toNumber = function toNumber2(unsigned) {
      if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
        if (!lo)
          hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
      }
      return this.lo + this.hi * 4294967296;
    };
    LongBits.prototype.toLong = function toLong(unsigned) {
      return util2.Long ? new util2.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
    };
    var charCodeAt = String.prototype.charCodeAt;
    LongBits.fromHash = function fromHash(hash2) {
      if (hash2 === zeroHash)
        return zero;
      return new LongBits(
        (charCodeAt.call(hash2, 0) | charCodeAt.call(hash2, 1) << 8 | charCodeAt.call(hash2, 2) << 16 | charCodeAt.call(hash2, 3) << 24) >>> 0,
        (charCodeAt.call(hash2, 4) | charCodeAt.call(hash2, 5) << 8 | charCodeAt.call(hash2, 6) << 16 | charCodeAt.call(hash2, 7) << 24) >>> 0
      );
    };
    LongBits.prototype.toHash = function toHash() {
      return String.fromCharCode(
        this.lo & 255,
        this.lo >>> 8 & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24,
        this.hi & 255,
        this.hi >>> 8 & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
      );
    };
    LongBits.prototype.zzEncode = function zzEncode() {
      var mask = this.hi >> 31;
      this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
      this.lo = (this.lo << 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.zzDecode = function zzDecode() {
      var mask = -(this.lo & 1);
      this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
      this.hi = (this.hi >>> 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.length = function length() {
      var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
      return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
    };
  }
});

// node_modules/protobufjs/src/util/minimal.js
var require_minimal = __commonJS({
  "node_modules/protobufjs/src/util/minimal.js"(exports2) {
    "use strict";
    var util2 = exports2;
    util2.asPromise = require_aspromise();
    util2.base64 = require_base642();
    util2.EventEmitter = require_eventemitter();
    util2.float = require_float();
    util2.inquire = require_inquire();
    util2.utf8 = require_utf8();
    util2.pool = require_pool();
    util2.LongBits = require_longbits();
    util2.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
    util2.global = util2.isNode && global || typeof window !== "undefined" && window || typeof self !== "undefined" && self || exports2;
    util2.emptyArray = Object.freeze ? Object.freeze([]) : (
      /* istanbul ignore next */
      []
    );
    util2.emptyObject = Object.freeze ? Object.freeze({}) : (
      /* istanbul ignore next */
      {}
    );
    util2.isInteger = Number.isInteger || /* istanbul ignore next */
    function isInteger(value) {
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
    util2.isString = function isString(value) {
      return typeof value === "string" || value instanceof String;
    };
    util2.isObject = function isObject(value) {
      return value && typeof value === "object";
    };
    util2.isset = /**
     * Checks if a property on a message is considered to be present.
     * @param {Object} obj Plain object or message instance
     * @param {string} prop Property name
     * @returns {boolean} `true` if considered to be present, otherwise `false`
     */
    util2.isSet = function isSet(obj, prop) {
      var value = obj[prop];
      if (value != null && obj.hasOwnProperty(prop))
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
      return false;
    };
    util2.Buffer = function() {
      try {
        var Buffer2 = util2.inquire("buffer").Buffer;
        return Buffer2.prototype.utf8Write ? Buffer2 : (
          /* istanbul ignore next */
          null
        );
      } catch (e5) {
        return null;
      }
    }();
    util2._Buffer_from = null;
    util2._Buffer_allocUnsafe = null;
    util2.newBuffer = function newBuffer(sizeOrArray) {
      return typeof sizeOrArray === "number" ? util2.Buffer ? util2._Buffer_allocUnsafe(sizeOrArray) : new util2.Array(sizeOrArray) : util2.Buffer ? util2._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
    };
    util2.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    util2.Long = /* istanbul ignore next */
    util2.global.dcodeIO && /* istanbul ignore next */
    util2.global.dcodeIO.Long || /* istanbul ignore next */
    util2.global.Long || util2.inquire("long");
    util2.key2Re = /^true|false|0|1$/;
    util2.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
    util2.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
    util2.longToHash = function longToHash(value) {
      return value ? util2.LongBits.from(value).toHash() : util2.LongBits.zeroHash;
    };
    util2.longFromHash = function longFromHash(hash2, unsigned) {
      var bits = util2.LongBits.fromHash(hash2);
      if (util2.Long)
        return util2.Long.fromBits(bits.lo, bits.hi, unsigned);
      return bits.toNumber(Boolean(unsigned));
    };
    function merge(dst, src, ifNotSet) {
      for (var keys = Object.keys(src), i8 = 0; i8 < keys.length; ++i8)
        if (dst[keys[i8]] === void 0 || !ifNotSet)
          dst[keys[i8]] = src[keys[i8]];
      return dst;
    }
    util2.merge = merge;
    util2.lcFirst = function lcFirst(str) {
      return str.charAt(0).toLowerCase() + str.substring(1);
    };
    function newError(name) {
      function CustomError(message, properties) {
        if (!(this instanceof CustomError))
          return new CustomError(message, properties);
        Object.defineProperty(this, "message", { get: function() {
          return message;
        } });
        if (Error.captureStackTrace)
          Error.captureStackTrace(this, CustomError);
        else
          Object.defineProperty(this, "stack", { value: new Error().stack || "" });
        if (properties)
          merge(this, properties);
      }
      CustomError.prototype = Object.create(Error.prototype, {
        constructor: {
          value: CustomError,
          writable: true,
          enumerable: false,
          configurable: true
        },
        name: {
          get: function get() {
            return name;
          },
          set: void 0,
          enumerable: false,
          // configurable: false would accurately preserve the behavior of
          // the original, but I'm guessing that was not intentional.
          // For an actual error subclass, this property would
          // be configurable.
          configurable: true
        },
        toString: {
          value: function value() {
            return this.name + ": " + this.message;
          },
          writable: true,
          enumerable: false,
          configurable: true
        }
      });
      return CustomError;
    }
    util2.newError = newError;
    util2.ProtocolError = newError("ProtocolError");
    util2.oneOfGetter = function getOneOf(fieldNames) {
      var fieldMap = {};
      for (var i8 = 0; i8 < fieldNames.length; ++i8)
        fieldMap[fieldNames[i8]] = 1;
      return function() {
        for (var keys = Object.keys(this), i9 = keys.length - 1; i9 > -1; --i9)
          if (fieldMap[keys[i9]] === 1 && this[keys[i9]] !== void 0 && this[keys[i9]] !== null)
            return keys[i9];
      };
    };
    util2.oneOfSetter = function setOneOf(fieldNames) {
      return function(name) {
        for (var i8 = 0; i8 < fieldNames.length; ++i8)
          if (fieldNames[i8] !== name)
            delete this[fieldNames[i8]];
      };
    };
    util2.toJSONOptions = {
      longs: String,
      enums: String,
      bytes: String,
      json: true
    };
    util2._configure = function() {
      var Buffer2 = util2.Buffer;
      if (!Buffer2) {
        util2._Buffer_from = util2._Buffer_allocUnsafe = null;
        return;
      }
      util2._Buffer_from = Buffer2.from !== Uint8Array.from && Buffer2.from || /* istanbul ignore next */
      function Buffer_from(value, encoding) {
        return new Buffer2(value, encoding);
      };
      util2._Buffer_allocUnsafe = Buffer2.allocUnsafe || /* istanbul ignore next */
      function Buffer_allocUnsafe(size) {
        return new Buffer2(size);
      };
    };
  }
});

// node_modules/protobufjs/src/writer.js
var require_writer = __commonJS({
  "node_modules/protobufjs/src/writer.js"(exports2, module2) {
    "use strict";
    module2.exports = Writer;
    var util2 = require_minimal();
    var BufferWriter;
    var LongBits = util2.LongBits;
    var base64 = util2.base64;
    var utf8 = util2.utf8;
    function Op(fn, len, val) {
      this.fn = fn;
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    function noop() {
    }
    function State(writer) {
      this.head = writer.head;
      this.tail = writer.tail;
      this.len = writer.len;
      this.next = writer.states;
    }
    function Writer() {
      this.len = 0;
      this.head = new Op(noop, 0, 0);
      this.tail = this.head;
      this.states = null;
    }
    var create = function create2() {
      return util2.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
          return new BufferWriter();
        })();
      } : function create_array() {
        return new Writer();
      };
    };
    Writer.create = create();
    Writer.alloc = function alloc(size) {
      return new util2.Array(size);
    };
    if (util2.Array !== Array)
      Writer.alloc = util2.pool(Writer.alloc, util2.Array.prototype.subarray);
    Writer.prototype._push = function push(fn, len, val) {
      this.tail = this.tail.next = new Op(fn, len, val);
      this.len += len;
      return this;
    };
    function writeByte(val, buf, pos) {
      buf[pos] = val & 255;
    }
    function writeVarint32(val, buf, pos) {
      while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
      }
      buf[pos] = val;
    }
    function VarintOp(len, val) {
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    VarintOp.prototype = Object.create(Op.prototype);
    VarintOp.prototype.fn = writeVarint32;
    Writer.prototype.uint32 = function write_uint32(value) {
      this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5,
        value
      )).len;
      return this;
    };
    Writer.prototype.int32 = function write_int32(value) {
      return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
    };
    Writer.prototype.sint32 = function write_sint32(value) {
      return this.uint32((value << 1 ^ value >> 31) >>> 0);
    };
    function writeVarint64(val, buf, pos) {
      while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
      }
      while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
      }
      buf[pos++] = val.lo;
    }
    Writer.prototype.uint64 = function write_uint64(value) {
      var bits = LongBits.from(value);
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.int64 = Writer.prototype.uint64;
    Writer.prototype.sint64 = function write_sint64(value) {
      var bits = LongBits.from(value).zzEncode();
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.bool = function write_bool(value) {
      return this._push(writeByte, 1, value ? 1 : 0);
    };
    function writeFixed32(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    Writer.prototype.fixed32 = function write_fixed32(value) {
      return this._push(writeFixed32, 4, value >>> 0);
    };
    Writer.prototype.sfixed32 = Writer.prototype.fixed32;
    Writer.prototype.fixed64 = function write_fixed64(value) {
      var bits = LongBits.from(value);
      return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
    };
    Writer.prototype.sfixed64 = Writer.prototype.fixed64;
    Writer.prototype.float = function write_float(value) {
      return this._push(util2.float.writeFloatLE, 4, value);
    };
    Writer.prototype.double = function write_double(value) {
      return this._push(util2.float.writeDoubleLE, 8, value);
    };
    var writeBytes = util2.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
      buf.set(val, pos);
    } : function writeBytes_for(val, buf, pos) {
      for (var i8 = 0; i8 < val.length; ++i8)
        buf[pos + i8] = val[i8];
    };
    Writer.prototype.bytes = function write_bytes(value) {
      var len = value.length >>> 0;
      if (!len)
        return this._push(writeByte, 1, 0);
      if (util2.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
      }
      return this.uint32(len)._push(writeBytes, len, value);
    };
    Writer.prototype.string = function write_string(value) {
      var len = utf8.length(value);
      return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
    };
    Writer.prototype.fork = function fork() {
      this.states = new State(this);
      this.head = this.tail = new Op(noop, 0, 0);
      this.len = 0;
      return this;
    };
    Writer.prototype.reset = function reset() {
      if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
      } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
      }
      return this;
    };
    Writer.prototype.ldelim = function ldelim() {
      var head = this.head, tail = this.tail, len = this.len;
      this.reset().uint32(len);
      if (len) {
        this.tail.next = head.next;
        this.tail = tail;
        this.len += len;
      }
      return this;
    };
    Writer.prototype.finish = function finish() {
      var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
      while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
      }
      return buf;
    };
    Writer._configure = function(BufferWriter_) {
      BufferWriter = BufferWriter_;
      Writer.create = create();
      BufferWriter._configure();
    };
  }
});

// node_modules/protobufjs/src/writer_buffer.js
var require_writer_buffer = __commonJS({
  "node_modules/protobufjs/src/writer_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferWriter;
    var Writer = require_writer();
    (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
    var util2 = require_minimal();
    function BufferWriter() {
      Writer.call(this);
    }
    BufferWriter._configure = function() {
      BufferWriter.alloc = util2._Buffer_allocUnsafe;
      BufferWriter.writeBytesBuffer = util2.Buffer && util2.Buffer.prototype instanceof Uint8Array && util2.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos);
      } : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy)
          val.copy(buf, pos, 0, val.length);
        else
          for (var i8 = 0; i8 < val.length; )
            buf[pos++] = val[i8++];
      };
    };
    BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
      if (util2.isString(value))
        value = util2._Buffer_from(value, "base64");
      var len = value.length >>> 0;
      this.uint32(len);
      if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
      return this;
    };
    function writeStringBuffer(val, buf, pos) {
      if (val.length < 40)
        util2.utf8.write(val, buf, pos);
      else if (buf.utf8Write)
        buf.utf8Write(val, pos);
      else
        buf.write(val, pos);
    }
    BufferWriter.prototype.string = function write_string_buffer(value) {
      var len = util2.Buffer.byteLength(value);
      this.uint32(len);
      if (len)
        this._push(writeStringBuffer, len, value);
      return this;
    };
    BufferWriter._configure();
  }
});

// node_modules/protobufjs/src/reader.js
var require_reader = __commonJS({
  "node_modules/protobufjs/src/reader.js"(exports2, module2) {
    "use strict";
    module2.exports = Reader;
    var util2 = require_minimal();
    var BufferReader;
    var LongBits = util2.LongBits;
    var utf8 = util2.utf8;
    function indexOutOfRange(reader, writeLength) {
      return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
    }
    function Reader(buffer) {
      this.buf = buffer;
      this.pos = 0;
      this.len = buffer.length;
    }
    var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
      if (buffer instanceof Uint8Array || Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    } : function create_array2(buffer) {
      if (Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    };
    var create = function create2() {
      return util2.Buffer ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer2) {
          return util2.Buffer.isBuffer(buffer2) ? new BufferReader(buffer2) : create_array(buffer2);
        })(buffer);
      } : create_array;
    };
    Reader.create = create();
    Reader.prototype._slice = util2.Array.prototype.subarray || /* istanbul ignore next */
    util2.Array.prototype.slice;
    Reader.prototype.uint32 = function read_uint32_setup() {
      var value = 4294967295;
      return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        if ((this.pos += 5) > this.len) {
          this.pos = this.len;
          throw indexOutOfRange(this, 10);
        }
        return value;
      };
    }();
    Reader.prototype.int32 = function read_int32() {
      return this.uint32() | 0;
    };
    Reader.prototype.sint32 = function read_sint32() {
      var value = this.uint32();
      return value >>> 1 ^ -(value & 1) | 0;
    };
    function readLongVarint() {
      var bits = new LongBits(0, 0);
      var i8 = 0;
      if (this.len - this.pos > 4) {
        for (; i8 < 4; ++i8) {
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i8 * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128)
          return bits;
        i8 = 0;
      } else {
        for (; i8 < 3; ++i8) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i8 * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i8 * 7) >>> 0;
        return bits;
      }
      if (this.len - this.pos > 4) {
        for (; i8 < 5; ++i8) {
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i8 * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      } else {
        for (; i8 < 5; ++i8) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i8 * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      }
      throw Error("invalid varint encoding");
    }
    Reader.prototype.bool = function read_bool() {
      return this.uint32() !== 0;
    };
    function readFixed32_end(buf, end) {
      return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
    }
    Reader.prototype.fixed32 = function read_fixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4);
    };
    Reader.prototype.sfixed32 = function read_sfixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4) | 0;
    };
    function readFixed64() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);
      return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
    }
    Reader.prototype.float = function read_float() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util2.float.readFloatLE(this.buf, this.pos);
      this.pos += 4;
      return value;
    };
    Reader.prototype.double = function read_double() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util2.float.readDoubleLE(this.buf, this.pos);
      this.pos += 8;
      return value;
    };
    Reader.prototype.bytes = function read_bytes() {
      var length = this.uint32(), start = this.pos, end = this.pos + length;
      if (end > this.len)
        throw indexOutOfRange(this, length);
      this.pos += length;
      if (Array.isArray(this.buf))
        return this.buf.slice(start, end);
      if (start === end) {
        var nativeBuffer = util2.Buffer;
        return nativeBuffer ? nativeBuffer.alloc(0) : new this.buf.constructor(0);
      }
      return this._slice.call(this.buf, start, end);
    };
    Reader.prototype.string = function read_string() {
      var bytes = this.bytes();
      return utf8.read(bytes, 0, bytes.length);
    };
    Reader.prototype.skip = function skip(length) {
      if (typeof length === "number") {
        if (this.pos + length > this.len)
          throw indexOutOfRange(this, length);
        this.pos += length;
      } else {
        do {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
      }
      return this;
    };
    Reader.prototype.skipType = function(wireType) {
      switch (wireType) {
        case 0:
          this.skip();
          break;
        case 1:
          this.skip(8);
          break;
        case 2:
          this.skip(this.uint32());
          break;
        case 3:
          while ((wireType = this.uint32() & 7) !== 4) {
            this.skipType(wireType);
          }
          break;
        case 5:
          this.skip(4);
          break;
        default:
          throw Error("invalid wire type " + wireType + " at offset " + this.pos);
      }
      return this;
    };
    Reader._configure = function(BufferReader_) {
      BufferReader = BufferReader_;
      Reader.create = create();
      BufferReader._configure();
      var fn = util2.Long ? "toLong" : (
        /* istanbul ignore next */
        "toNumber"
      );
      util2.merge(Reader.prototype, {
        int64: function read_int64() {
          return readLongVarint.call(this)[fn](false);
        },
        uint64: function read_uint64() {
          return readLongVarint.call(this)[fn](true);
        },
        sint64: function read_sint64() {
          return readLongVarint.call(this).zzDecode()[fn](false);
        },
        fixed64: function read_fixed64() {
          return readFixed64.call(this)[fn](true);
        },
        sfixed64: function read_sfixed64() {
          return readFixed64.call(this)[fn](false);
        }
      });
    };
  }
});

// node_modules/protobufjs/src/reader_buffer.js
var require_reader_buffer = __commonJS({
  "node_modules/protobufjs/src/reader_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferReader;
    var Reader = require_reader();
    (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
    var util2 = require_minimal();
    function BufferReader(buffer) {
      Reader.call(this, buffer);
    }
    BufferReader._configure = function() {
      if (util2.Buffer)
        BufferReader.prototype._slice = util2.Buffer.prototype.slice;
    };
    BufferReader.prototype.string = function read_string_buffer() {
      var len = this.uint32();
      return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
    };
    BufferReader._configure();
  }
});

// node_modules/protobufjs/src/rpc/service.js
var require_service = __commonJS({
  "node_modules/protobufjs/src/rpc/service.js"(exports2, module2) {
    "use strict";
    module2.exports = Service;
    var util2 = require_minimal();
    (Service.prototype = Object.create(util2.EventEmitter.prototype)).constructor = Service;
    function Service(rpcImpl, requestDelimited, responseDelimited) {
      if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");
      util2.EventEmitter.call(this);
      this.rpcImpl = rpcImpl;
      this.requestDelimited = Boolean(requestDelimited);
      this.responseDelimited = Boolean(responseDelimited);
    }
    Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
      if (!request)
        throw TypeError("request must be specified");
      var self2 = this;
      if (!callback)
        return util2.asPromise(rpcCall, self2, method, requestCtor, responseCtor, request);
      if (!self2.rpcImpl) {
        setTimeout(function() {
          callback(Error("already ended"));
        }, 0);
        return void 0;
      }
      try {
        return self2.rpcImpl(
          method,
          requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
          function rpcCallback(err, response) {
            if (err) {
              self2.emit("error", err, method);
              return callback(err);
            }
            if (response === null) {
              self2.end(
                /* endedByRPC */
                true
              );
              return void 0;
            }
            if (!(response instanceof responseCtor)) {
              try {
                response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
              } catch (err2) {
                self2.emit("error", err2, method);
                return callback(err2);
              }
            }
            self2.emit("data", response, method);
            return callback(null, response);
          }
        );
      } catch (err) {
        self2.emit("error", err, method);
        setTimeout(function() {
          callback(err);
        }, 0);
        return void 0;
      }
    };
    Service.prototype.end = function end(endedByRPC) {
      if (this.rpcImpl) {
        if (!endedByRPC)
          this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
      }
      return this;
    };
  }
});

// node_modules/protobufjs/src/rpc.js
var require_rpc = __commonJS({
  "node_modules/protobufjs/src/rpc.js"(exports2) {
    "use strict";
    var rpc = exports2;
    rpc.Service = require_service();
  }
});

// node_modules/protobufjs/src/roots.js
var require_roots = __commonJS({
  "node_modules/protobufjs/src/roots.js"(exports2, module2) {
    "use strict";
    module2.exports = {};
  }
});

// node_modules/protobufjs/src/index-minimal.js
var require_index_minimal = __commonJS({
  "node_modules/protobufjs/src/index-minimal.js"(exports2) {
    "use strict";
    var protobuf = exports2;
    protobuf.build = "minimal";
    protobuf.Writer = require_writer();
    protobuf.BufferWriter = require_writer_buffer();
    protobuf.Reader = require_reader();
    protobuf.BufferReader = require_reader_buffer();
    protobuf.util = require_minimal();
    protobuf.rpc = require_rpc();
    protobuf.roots = require_roots();
    protobuf.configure = configure;
    function configure() {
      protobuf.util._configure();
      protobuf.Writer._configure(protobuf.BufferWriter);
      protobuf.Reader._configure(protobuf.BufferReader);
    }
    configure();
  }
});

// node_modules/protobufjs/minimal.js
var require_minimal2 = __commonJS({
  "node_modules/protobufjs/minimal.js"(exports2, module2) {
    "use strict";
    module2.exports = require_index_minimal();
  }
});

// node_modules/loglevel/lib/loglevel.js
var require_loglevel = __commonJS({
  "node_modules/loglevel/lib/loglevel.js"(exports2, module2) {
    (function(root2, definition) {
      "use strict";
      if (typeof define === "function" && define.amd) {
        define(definition);
      } else if (typeof module2 === "object" && module2.exports) {
        module2.exports = definition();
      } else {
        root2.log = definition();
      }
    })(exports2, function() {
      "use strict";
      var noop = function() {
      };
      var undefinedType2 = "undefined";
      var isIE = typeof window !== undefinedType2 && typeof window.navigator !== undefinedType2 && /Trident\/|MSIE /.test(window.navigator.userAgent);
      var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
      ];
      function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === "function") {
          return method.bind(obj);
        } else {
          try {
            return Function.prototype.bind.call(method, obj);
          } catch (e5) {
            return function() {
              return Function.prototype.apply.apply(method, [obj, arguments]);
            };
          }
        }
      }
      function traceForIE() {
        if (console.log) {
          if (console.log.apply) {
            console.log.apply(console, arguments);
          } else {
            Function.prototype.apply.apply(console.log, [console, arguments]);
          }
        }
        if (console.trace)
          console.trace();
      }
      function realMethod(methodName) {
        if (methodName === "debug") {
          methodName = "log";
        }
        if (typeof console === undefinedType2) {
          return false;
        } else if (methodName === "trace" && isIE) {
          return traceForIE;
        } else if (console[methodName] !== void 0) {
          return bindMethod(console, methodName);
        } else if (console.log !== void 0) {
          return bindMethod(console, "log");
        } else {
          return noop;
        }
      }
      function replaceLoggingMethods(level, loggerName) {
        for (var i8 = 0; i8 < logMethods.length; i8++) {
          var methodName = logMethods[i8];
          this[methodName] = i8 < level ? noop : this.methodFactory(methodName, level, loggerName);
        }
        this.log = this.debug;
      }
      function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
        return function() {
          if (typeof console !== undefinedType2) {
            replaceLoggingMethods.call(this, level, loggerName);
            this[methodName].apply(this, arguments);
          }
        };
      }
      function defaultMethodFactory(methodName, level, loggerName) {
        return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);
      }
      function Logger(name, defaultLevel, factory) {
        var self2 = this;
        var currentLevel;
        defaultLevel = defaultLevel == null ? "WARN" : defaultLevel;
        var storageKey = "loglevel";
        if (typeof name === "string") {
          storageKey += ":" + name;
        } else if (typeof name === "symbol") {
          storageKey = void 0;
        }
        function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || "silent").toUpperCase();
          if (typeof window === undefinedType2 || !storageKey)
            return;
          try {
            window.localStorage[storageKey] = levelName;
            return;
          } catch (ignore) {
          }
          try {
            window.document.cookie = encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {
          }
        }
        function getPersistedLevel() {
          var storedLevel;
          if (typeof window === undefinedType2 || !storageKey)
            return;
          try {
            storedLevel = window.localStorage[storageKey];
          } catch (ignore) {
          }
          if (typeof storedLevel === undefinedType2) {
            try {
              var cookie = window.document.cookie;
              var location = cookie.indexOf(
                encodeURIComponent(storageKey) + "="
              );
              if (location !== -1) {
                storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
              }
            } catch (ignore) {
            }
          }
          if (self2.levels[storedLevel] === void 0) {
            storedLevel = void 0;
          }
          return storedLevel;
        }
        function clearPersistedLevel() {
          if (typeof window === undefinedType2 || !storageKey)
            return;
          try {
            window.localStorage.removeItem(storageKey);
            return;
          } catch (ignore) {
          }
          try {
            window.document.cookie = encodeURIComponent(storageKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
          } catch (ignore) {
          }
        }
        self2.name = name;
        self2.levels = {
          "TRACE": 0,
          "DEBUG": 1,
          "INFO": 2,
          "WARN": 3,
          "ERROR": 4,
          "SILENT": 5
        };
        self2.methodFactory = factory || defaultMethodFactory;
        self2.getLevel = function() {
          return currentLevel;
        };
        self2.setLevel = function(level, persist) {
          if (typeof level === "string" && self2.levels[level.toUpperCase()] !== void 0) {
            level = self2.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self2.levels.SILENT) {
            currentLevel = level;
            if (persist !== false) {
              persistLevelIfPossible(level);
            }
            replaceLoggingMethods.call(self2, level, name);
            if (typeof console === undefinedType2 && level < self2.levels.SILENT) {
              return "No console available for logging";
            }
          } else {
            throw "log.setLevel() called with invalid level: " + level;
          }
        };
        self2.setDefaultLevel = function(level) {
          defaultLevel = level;
          if (!getPersistedLevel()) {
            self2.setLevel(level, false);
          }
        };
        self2.resetLevel = function() {
          self2.setLevel(defaultLevel, false);
          clearPersistedLevel();
        };
        self2.enableAll = function(persist) {
          self2.setLevel(self2.levels.TRACE, persist);
        };
        self2.disableAll = function(persist) {
          self2.setLevel(self2.levels.SILENT, persist);
        };
        var initialLevel = getPersistedLevel();
        if (initialLevel == null) {
          initialLevel = defaultLevel;
        }
        self2.setLevel(initialLevel, false);
      }
      var defaultLogger = new Logger();
      var _loggersByName = {};
      defaultLogger.getLogger = function getLogger(name) {
        if (typeof name !== "symbol" && typeof name !== "string" || name === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }
        var logger = _loggersByName[name];
        if (!logger) {
          logger = _loggersByName[name] = new Logger(
            name,
            defaultLogger.getLevel(),
            defaultLogger.methodFactory
          );
        }
        return logger;
      };
      var _log = typeof window !== undefinedType2 ? window.log : void 0;
      defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType2 && window.log === defaultLogger) {
          window.log = _log;
        }
        return defaultLogger;
      };
      defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
      };
      defaultLogger["default"] = defaultLogger;
      return defaultLogger;
    });
  }
});

// node_modules/lodash.throttle/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.throttle/index.js"(exports2, module2) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root2.Date.now();
    };
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber2(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber2(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function throttle(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber2(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module2.exports = throttle;
  }
});

// node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/events/events.js"(exports2, module2) {
    "use strict";
    var R6 = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R6 && typeof R6.apply === "function" ? R6.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R6 && typeof R6.ownKeys === "function") {
      ReflectOwnKeys = R6.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn)
        console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module2.exports = EventEmitter;
    module2.exports.once = once;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n11) {
      if (typeof n11 !== "number" || n11 < 0 || NumberIsNaN(n11)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n11 + ".");
      }
      this._maxListeners = n11;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i8 = 1; i8 < arguments.length; i8++)
        args.push(arguments[i8]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          throw er;
        }
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i8 = 0; i8 < len; ++i8)
          ReflectApply(listeners[i8], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m10;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events = target._events;
        }
        existing = events[type];
      }
      if (existing === void 0) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m10 = _getMaxListeners(target);
        if (m10 > 0 && existing.length > m10 && !existing.warned) {
          existing.warned = true;
          var w5 = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w5.name = "MaxListenersExceededWarning";
          w5.emitter = target;
          w5.type = type;
          w5.count = existing.length;
          ProcessEmitWarning(w5);
        }
      }
      return target;
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i8, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i8 = list.length - 1; i8 >= 0; i8--) {
          if (list[i8] === listener || list[i8].listener === listener) {
            originalListener = list[i8].listener;
            position = i8;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i8;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i8 = 0; i8 < keys.length; ++i8) {
          key = keys[i8];
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i8 = listeners.length - 1; i8 >= 0; i8--) {
          this.removeListener(type, listeners[i8]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n11) {
      var copy = new Array(n11);
      for (var i8 = 0; i8 < n11; ++i8)
        copy[i8] = arr[i8];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i8 = 0; i8 < ret.length; ++i8) {
        ret[i8] = arr[i8].listener || arr[i8];
      }
      return ret;
    }
    function once(emitter, name) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// node_modules/exponential-backoff/dist/options.js
var require_options = __commonJS({
  "node_modules/exponential-backoff/dist/options.js"(exports2) {
    "use strict";
    var __assign = exports2 && exports2.__assign || function() {
      __assign = Object.assign || function(t3) {
        for (var s7, i8 = 1, n11 = arguments.length; i8 < n11; i8++) {
          s7 = arguments[i8];
          for (var p10 in s7)
            if (Object.prototype.hasOwnProperty.call(s7, p10))
              t3[p10] = s7[p10];
        }
        return t3;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var defaultOptions = {
      delayFirstAttempt: false,
      jitter: "none",
      maxDelay: Infinity,
      numOfAttempts: 10,
      retry: function() {
        return true;
      },
      startingDelay: 100,
      timeMultiple: 2
    };
    function getSanitizedOptions(options) {
      var sanitized = __assign(__assign({}, defaultOptions), options);
      if (sanitized.numOfAttempts < 1) {
        sanitized.numOfAttempts = 1;
      }
      return sanitized;
    }
    exports2.getSanitizedOptions = getSanitizedOptions;
  }
});

// node_modules/exponential-backoff/dist/jitter/full/full.jitter.js
var require_full_jitter = __commonJS({
  "node_modules/exponential-backoff/dist/jitter/full/full.jitter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function fullJitter(delay) {
      var jitteredDelay = Math.random() * delay;
      return Math.round(jitteredDelay);
    }
    exports2.fullJitter = fullJitter;
  }
});

// node_modules/exponential-backoff/dist/jitter/no/no.jitter.js
var require_no_jitter = __commonJS({
  "node_modules/exponential-backoff/dist/jitter/no/no.jitter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function noJitter(delay) {
      return delay;
    }
    exports2.noJitter = noJitter;
  }
});

// node_modules/exponential-backoff/dist/jitter/jitter.factory.js
var require_jitter_factory = __commonJS({
  "node_modules/exponential-backoff/dist/jitter/jitter.factory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var full_jitter_1 = require_full_jitter();
    var no_jitter_1 = require_no_jitter();
    function JitterFactory(options) {
      switch (options.jitter) {
        case "full":
          return full_jitter_1.fullJitter;
        case "none":
        default:
          return no_jitter_1.noJitter;
      }
    }
    exports2.JitterFactory = JitterFactory;
  }
});

// node_modules/exponential-backoff/dist/delay/delay.base.js
var require_delay_base = __commonJS({
  "node_modules/exponential-backoff/dist/delay/delay.base.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var jitter_factory_1 = require_jitter_factory();
    var Delay = (
      /** @class */
      function() {
        function Delay2(options) {
          this.options = options;
          this.attempt = 0;
        }
        Delay2.prototype.apply = function() {
          var _this = this;
          return new Promise(function(resolve) {
            return setTimeout(resolve, _this.jitteredDelay);
          });
        };
        Delay2.prototype.setAttemptNumber = function(attempt) {
          this.attempt = attempt;
        };
        Object.defineProperty(Delay2.prototype, "jitteredDelay", {
          get: function() {
            var jitter = jitter_factory_1.JitterFactory(this.options);
            return jitter(this.delay);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Delay2.prototype, "delay", {
          get: function() {
            var constant = this.options.startingDelay;
            var base = this.options.timeMultiple;
            var power = this.numOfDelayedAttempts;
            var delay = constant * Math.pow(base, power);
            return Math.min(delay, this.options.maxDelay);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Delay2.prototype, "numOfDelayedAttempts", {
          get: function() {
            return this.attempt;
          },
          enumerable: true,
          configurable: true
        });
        return Delay2;
      }()
    );
    exports2.Delay = Delay;
  }
});

// node_modules/exponential-backoff/dist/delay/skip-first/skip-first.delay.js
var require_skip_first_delay = __commonJS({
  "node_modules/exponential-backoff/dist/delay/skip-first/skip-first.delay.js"(exports2) {
    "use strict";
    var __extends = exports2 && exports2.__extends || function() {
      var extendStatics = function(d8, b9) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d9, b10) {
          d9.__proto__ = b10;
        } || function(d9, b10) {
          for (var p10 in b10)
            if (b10.hasOwnProperty(p10))
              d9[p10] = b10[p10];
        };
        return extendStatics(d8, b9);
      };
      return function(d8, b9) {
        extendStatics(d8, b9);
        function __() {
          this.constructor = d8;
        }
        d8.prototype = b9 === null ? Object.create(b9) : (__.prototype = b9.prototype, new __());
      };
    }();
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e5) {
            reject(e5);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e5) {
            reject(e5);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports2 && exports2.__generator || function(thisArg, body) {
      var _6 = { label: 0, sent: function() {
        if (t3[0] & 1)
          throw t3[1];
        return t3[1];
      }, trys: [], ops: [] }, f6, y6, t3, g9;
      return g9 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g9[Symbol.iterator] = function() {
        return this;
      }), g9;
      function verb(n11) {
        return function(v10) {
          return step([n11, v10]);
        };
      }
      function step(op) {
        if (f6)
          throw new TypeError("Generator is already executing.");
        while (_6)
          try {
            if (f6 = 1, y6 && (t3 = op[0] & 2 ? y6["return"] : op[0] ? y6["throw"] || ((t3 = y6["return"]) && t3.call(y6), 0) : y6.next) && !(t3 = t3.call(y6, op[1])).done)
              return t3;
            if (y6 = 0, t3)
              op = [op[0] & 2, t3.value];
            switch (op[0]) {
              case 0:
              case 1:
                t3 = op;
                break;
              case 4:
                _6.label++;
                return { value: op[1], done: false };
              case 5:
                _6.label++;
                y6 = op[1];
                op = [0];
                continue;
              case 7:
                op = _6.ops.pop();
                _6.trys.pop();
                continue;
              default:
                if (!(t3 = _6.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _6 = 0;
                  continue;
                }
                if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                  _6.label = op[1];
                  break;
                }
                if (op[0] === 6 && _6.label < t3[1]) {
                  _6.label = t3[1];
                  t3 = op;
                  break;
                }
                if (t3 && _6.label < t3[2]) {
                  _6.label = t3[2];
                  _6.ops.push(op);
                  break;
                }
                if (t3[2])
                  _6.ops.pop();
                _6.trys.pop();
                continue;
            }
            op = body.call(thisArg, _6);
          } catch (e5) {
            op = [6, e5];
            y6 = 0;
          } finally {
            f6 = t3 = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var delay_base_1 = require_delay_base();
    var SkipFirstDelay = (
      /** @class */
      function(_super) {
        __extends(SkipFirstDelay2, _super);
        function SkipFirstDelay2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        SkipFirstDelay2.prototype.apply = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, this.isFirstAttempt ? true : _super.prototype.apply.call(this)];
            });
          });
        };
        Object.defineProperty(SkipFirstDelay2.prototype, "isFirstAttempt", {
          get: function() {
            return this.attempt === 0;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(SkipFirstDelay2.prototype, "numOfDelayedAttempts", {
          get: function() {
            return this.attempt - 1;
          },
          enumerable: true,
          configurable: true
        });
        return SkipFirstDelay2;
      }(delay_base_1.Delay)
    );
    exports2.SkipFirstDelay = SkipFirstDelay;
  }
});

// node_modules/exponential-backoff/dist/delay/always/always.delay.js
var require_always_delay = __commonJS({
  "node_modules/exponential-backoff/dist/delay/always/always.delay.js"(exports2) {
    "use strict";
    var __extends = exports2 && exports2.__extends || function() {
      var extendStatics = function(d8, b9) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d9, b10) {
          d9.__proto__ = b10;
        } || function(d9, b10) {
          for (var p10 in b10)
            if (b10.hasOwnProperty(p10))
              d9[p10] = b10[p10];
        };
        return extendStatics(d8, b9);
      };
      return function(d8, b9) {
        extendStatics(d8, b9);
        function __() {
          this.constructor = d8;
        }
        d8.prototype = b9 === null ? Object.create(b9) : (__.prototype = b9.prototype, new __());
      };
    }();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var delay_base_1 = require_delay_base();
    var AlwaysDelay = (
      /** @class */
      function(_super) {
        __extends(AlwaysDelay2, _super);
        function AlwaysDelay2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return AlwaysDelay2;
      }(delay_base_1.Delay)
    );
    exports2.AlwaysDelay = AlwaysDelay;
  }
});

// node_modules/exponential-backoff/dist/delay/delay.factory.js
var require_delay_factory = __commonJS({
  "node_modules/exponential-backoff/dist/delay/delay.factory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var skip_first_delay_1 = require_skip_first_delay();
    var always_delay_1 = require_always_delay();
    function DelayFactory(options, attempt) {
      var delay = initDelayClass(options);
      delay.setAttemptNumber(attempt);
      return delay;
    }
    exports2.DelayFactory = DelayFactory;
    function initDelayClass(options) {
      if (!options.delayFirstAttempt) {
        return new skip_first_delay_1.SkipFirstDelay(options);
      }
      return new always_delay_1.AlwaysDelay(options);
    }
  }
});

// node_modules/exponential-backoff/dist/backoff.js
var require_backoff = __commonJS({
  "node_modules/exponential-backoff/dist/backoff.js"(exports2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P4, generator) {
      function adopt(value) {
        return value instanceof P4 ? value : new P4(function(resolve) {
          resolve(value);
        });
      }
      return new (P4 || (P4 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e5) {
            reject(e5);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e5) {
            reject(e5);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports2 && exports2.__generator || function(thisArg, body) {
      var _6 = { label: 0, sent: function() {
        if (t3[0] & 1)
          throw t3[1];
        return t3[1];
      }, trys: [], ops: [] }, f6, y6, t3, g9;
      return g9 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g9[Symbol.iterator] = function() {
        return this;
      }), g9;
      function verb(n11) {
        return function(v10) {
          return step([n11, v10]);
        };
      }
      function step(op) {
        if (f6)
          throw new TypeError("Generator is already executing.");
        while (_6)
          try {
            if (f6 = 1, y6 && (t3 = op[0] & 2 ? y6["return"] : op[0] ? y6["throw"] || ((t3 = y6["return"]) && t3.call(y6), 0) : y6.next) && !(t3 = t3.call(y6, op[1])).done)
              return t3;
            if (y6 = 0, t3)
              op = [op[0] & 2, t3.value];
            switch (op[0]) {
              case 0:
              case 1:
                t3 = op;
                break;
              case 4:
                _6.label++;
                return { value: op[1], done: false };
              case 5:
                _6.label++;
                y6 = op[1];
                op = [0];
                continue;
              case 7:
                op = _6.ops.pop();
                _6.trys.pop();
                continue;
              default:
                if (!(t3 = _6.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _6 = 0;
                  continue;
                }
                if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                  _6.label = op[1];
                  break;
                }
                if (op[0] === 6 && _6.label < t3[1]) {
                  _6.label = t3[1];
                  t3 = op;
                  break;
                }
                if (t3 && _6.label < t3[2]) {
                  _6.label = t3[2];
                  _6.ops.push(op);
                  break;
                }
                if (t3[2])
                  _6.ops.pop();
                _6.trys.pop();
                continue;
            }
            op = body.call(thisArg, _6);
          } catch (e5) {
            op = [6, e5];
            y6 = 0;
          } finally {
            f6 = t3 = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var options_1 = require_options();
    var delay_factory_1 = require_delay_factory();
    function backOff(request, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var sanitizedOptions, backOff2;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              sanitizedOptions = options_1.getSanitizedOptions(options);
              backOff2 = new BackOff(request, sanitizedOptions);
              return [4, backOff2.execute()];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    }
    exports2.backOff = backOff;
    var BackOff = (
      /** @class */
      function() {
        function BackOff2(request, options) {
          this.request = request;
          this.options = options;
          this.attemptNumber = 0;
        }
        BackOff2.prototype.execute = function() {
          return __awaiter(this, void 0, void 0, function() {
            var e_1, shouldRetry;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!!this.attemptLimitReached)
                    return [3, 7];
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 4, , 6]);
                  return [4, this.applyDelay()];
                case 2:
                  _a.sent();
                  return [4, this.request()];
                case 3:
                  return [2, _a.sent()];
                case 4:
                  e_1 = _a.sent();
                  this.attemptNumber++;
                  return [4, this.options.retry(e_1, this.attemptNumber)];
                case 5:
                  shouldRetry = _a.sent();
                  if (!shouldRetry || this.attemptLimitReached) {
                    throw e_1;
                  }
                  return [3, 6];
                case 6:
                  return [3, 0];
                case 7:
                  throw new Error("Something went wrong.");
              }
            });
          });
        };
        Object.defineProperty(BackOff2.prototype, "attemptLimitReached", {
          get: function() {
            return this.attemptNumber >= this.options.numOfAttempts;
          },
          enumerable: true,
          configurable: true
        });
        BackOff2.prototype.applyDelay = function() {
          return __awaiter(this, void 0, void 0, function() {
            var delay;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  delay = delay_factory_1.DelayFactory(this.options, this.attemptNumber);
                  return [4, delay.apply()];
                case 1:
                  _a.sent();
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        return BackOff2;
      }()
    );
  }
});

// node_modules/lodash.isequal/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.isequal/index.js"(exports2, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e5) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    function baseTimes(n11, iteratee) {
      var index = -1, result = Array(n11);
      while (++index < n11) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root2["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer2 = moduleExports ? root2.Buffer : void 0;
    var Symbol2 = root2.Symbol;
    var Uint8Array2 = root2.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView2 = getNative(root2, "DataView");
    var Map2 = getNative(root2, "Map");
    var Promise2 = getNative(root2, "Promise");
    var Set2 = getNative(root2, "Set");
    var WeakMap2 = getNative(root2, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e5) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e5) {
        }
        try {
          return func + "";
        } catch (e5) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function stubArray() {
      return [];
    }
    function stubFalse() {
      return false;
    }
    module2.exports = isEqual;
  }
});

// node_modules/squel/dist/squel.js
var require_squel = __commonJS({
  "node_modules/squel/dist/squel.js"(exports2, module2) {
    (function(root2, factory) {
      if (typeof define === "function" && define.amd) {
        define([], factory);
      } else if (typeof exports2 === "object") {
        module2.exports = factory();
      } else {
        root2.squel = factory();
      }
    })(exports2, function() {
      "use strict";
      var _get = function get(object, property, receiver) {
        if (object === null)
          object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === void 0) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) {
            return void 0;
          } else {
            return get(parent, property, receiver);
          }
        } else if ("value" in desc) {
          return desc.value;
        } else {
          var getter = desc.get;
          if (getter === void 0) {
            return void 0;
          }
          return getter.call(receiver);
        }
      };
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i8 = 0; i8 < props.length; i8++) {
            var descriptor = props[i8];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _pad(str, pad) {
        return str.length ? str + pad : str;
      }
      function _extend(dst) {
        for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          sources[_key - 1] = arguments[_key];
        }
        if (dst && sources) {
          var _loop = function _loop2(src2) {
            if ((typeof src2 === "undefined" ? "undefined" : _typeof(src2)) === "object") {
              Object.getOwnPropertyNames(src2).forEach(function(key) {
                dst[key] = src2[key];
              });
            }
          };
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = sources[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var src = _step.value;
              _loop(src);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
        return dst;
      }
      ;
      function _isPlainObject(obj) {
        return obj && obj.constructor.prototype === Object.prototype;
      }
      ;
      function _isArray(obj) {
        return obj && obj.constructor.prototype === Array.prototype;
      }
      ;
      function _clone(src) {
        if (!src) {
          return src;
        }
        if (typeof src.clone === "function") {
          return src.clone();
        } else if (_isPlainObject(src) || _isArray(src)) {
          var ret = new src.constructor();
          Object.getOwnPropertyNames(src).forEach(function(key) {
            if (typeof src[key] !== "function") {
              ret[key] = _clone(src[key]);
            }
          });
          return ret;
        } else {
          return JSON.parse(JSON.stringify(src));
        }
      }
      ;
      function _registerValueHandler(handlers, type, handler) {
        var typeofType = typeof type === "undefined" ? "undefined" : _typeof(type);
        if (typeofType !== "function" && typeofType !== "string") {
          throw new Error("type must be a class constructor or string");
        }
        if (typeof handler !== "function") {
          throw new Error("handler must be a function");
        }
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = void 0;
        try {
          for (var _iterator2 = handlers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var typeHandler = _step2.value;
            if (typeHandler.type === type) {
              typeHandler.handler = handler;
              return;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
        handlers.push({
          type,
          handler
        });
      }
      ;
      function getValueHandler(value, localHandlers, globalHandlers) {
        return _getValueHandler(value, localHandlers) || _getValueHandler(value, globalHandlers);
      }
      ;
      function _getValueHandler(value, handlers) {
        for (var i8 = 0; i8 < handlers.length; i8++) {
          var typeHandler = handlers[i8];
          if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === typeHandler.type || typeof typeHandler.type !== "string" && value instanceof typeHandler.type) {
            return typeHandler.handler;
          }
        }
      }
      ;
      function _buildSquel() {
        var flavour = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        var cls = {
          // Get whether obj is a query builder
          isSquelBuilder: function isSquelBuilder(obj) {
            return obj && !!obj._toParamString;
          }
        };
        var _shouldApplyNesting = function _shouldApplyNesting2(obj) {
          return !cls.isSquelBuilder(obj) || !obj.options.rawNesting;
        };
        cls.DefaultQueryBuilderOptions = {
          // If true then table names will be rendered inside quotes. The quote character used is configurable via the nameQuoteCharacter option.
          autoQuoteTableNames: false,
          // If true then field names will rendered inside quotes. The quote character used is configurable via the nameQuoteCharacter option.
          autoQuoteFieldNames: false,
          // If true then alias names will rendered inside quotes. The quote character used is configurable via the `tableAliasQuoteCharacter` and `fieldAliasQuoteCharacter` options.
          autoQuoteAliasNames: true,
          // If true then table alias names will rendered after AS keyword.
          useAsForTableAliasNames: false,
          // The quote character used for when quoting table and field names
          nameQuoteCharacter: "`",
          // The quote character used for when quoting table alias names
          tableAliasQuoteCharacter: "`",
          // The quote character used for when quoting table alias names
          fieldAliasQuoteCharacter: '"',
          // Custom value handlers where key is the value type and the value is the handler function
          valueHandlers: [],
          // Character used to represent a parameter value
          parameterCharacter: "?",
          // Numbered parameters returned from toParam() as $1, $2, etc.
          numberedParameters: false,
          // Numbered parameters prefix character(s)
          numberedParametersPrefix: "$",
          // Numbered parameters start at this number.
          numberedParametersStartAt: 1,
          // If true then replaces all single quotes within strings. The replacement string used is configurable via the `singleQuoteReplacement` option.
          replaceSingleQuotes: false,
          // The string to replace single quotes with in query strings
          singleQuoteReplacement: "''",
          // String used to join individual blocks in a query when it's stringified
          separator: " ",
          // Function for formatting string values prior to insertion into query string
          stringFormatter: null,
          // Whether to prevent the addition of brackets () when nesting this query builder's output
          rawNesting: false
        };
        cls.globalValueHandlers = [];
        cls.registerValueHandler = function(type, handler) {
          _registerValueHandler(cls.globalValueHandlers, type, handler);
        };
        cls.Cloneable = function() {
          function _class() {
            _classCallCheck(this, _class);
          }
          _createClass(_class, [{
            key: "clone",
            /**
             * Clone this builder
             */
            value: function clone() {
              var newInstance = new this.constructor();
              return _extend(newInstance, _clone(_extend({}, this)));
            }
          }]);
          return _class;
        }();
        cls.BaseBuilder = function(_cls$Cloneable) {
          _inherits(_class2, _cls$Cloneable);
          function _class2(options) {
            _classCallCheck(this, _class2);
            var _this = _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).call(this));
            var defaults2 = JSON.parse(JSON.stringify(cls.DefaultQueryBuilderOptions));
            ["stringFormatter"].forEach(function(p10) {
              defaults2[p10] = cls.DefaultQueryBuilderOptions[p10];
            });
            _this.options = _extend({}, defaults2, options);
            return _this;
          }
          _createClass(_class2, [{
            key: "registerValueHandler",
            value: function registerValueHandler(type, handler) {
              _registerValueHandler(this.options.valueHandlers, type, handler);
              return this;
            }
            /**
             * Sanitize given expression.
             */
          }, {
            key: "_sanitizeExpression",
            value: function _sanitizeExpression(expr) {
              if (!cls.isSquelBuilder(expr)) {
                if (typeof expr !== "string") {
                  throw new Error("expression must be a string\xA0or builder instance");
                }
              }
              return expr;
            }
            /**
             * Sanitize the given name.
             *
             * The 'type' parameter is used to construct a meaningful error message in case validation fails.
             */
          }, {
            key: "_sanitizeName",
            value: function _sanitizeName(value, type) {
              if (typeof value !== "string") {
                throw new Error(type + " must be a string");
              }
              return value;
            }
          }, {
            key: "_sanitizeField",
            value: function _sanitizeField(item) {
              if (!cls.isSquelBuilder(item)) {
                item = this._sanitizeName(item, "field name");
              }
              return item;
            }
          }, {
            key: "_sanitizeBaseBuilder",
            value: function _sanitizeBaseBuilder(item) {
              if (cls.isSquelBuilder(item)) {
                return item;
              }
              throw new Error("must be a builder instance");
            }
          }, {
            key: "_sanitizeTable",
            value: function _sanitizeTable(item) {
              if (typeof item !== "string") {
                try {
                  item = this._sanitizeBaseBuilder(item);
                } catch (e5) {
                  throw new Error("table name must be a string or a builder");
                }
              } else {
                item = this._sanitizeName(item, "table");
              }
              return item;
            }
          }, {
            key: "_sanitizeTableAlias",
            value: function _sanitizeTableAlias(item) {
              return this._sanitizeName(item, "table alias");
            }
          }, {
            key: "_sanitizeFieldAlias",
            value: function _sanitizeFieldAlias(item) {
              return this._sanitizeName(item, "field alias");
            }
            // Sanitize the given limit/offset value.
          }, {
            key: "_sanitizeLimitOffset",
            value: function _sanitizeLimitOffset(value) {
              value = parseInt(value);
              if (0 > value || isNaN(value)) {
                throw new Error("limit/offset must be >= 0");
              }
              return value;
            }
            // Santize the given field value
          }, {
            key: "_sanitizeValue",
            value: function _sanitizeValue(item) {
              var itemType = typeof item === "undefined" ? "undefined" : _typeof(item);
              if (null === item) {
              } else if ("string" === itemType || "number" === itemType || "boolean" === itemType) {
              } else if (cls.isSquelBuilder(item)) {
              } else {
                var typeIsValid = !!getValueHandler(item, this.options.valueHandlers, cls.globalValueHandlers);
                if (!typeIsValid) {
                  throw new Error("field value must be a string, number, boolean, null or one of the registered custom value types");
                }
              }
              return item;
            }
            // Escape a string value, e.g. escape quotes and other characters within it.
          }, {
            key: "_escapeValue",
            value: function _escapeValue(value) {
              return this.options.replaceSingleQuotes && value ? value.replace(/\'/g, this.options.singleQuoteReplacement) : value;
            }
          }, {
            key: "_formatTableName",
            value: function _formatTableName(item) {
              if (this.options.autoQuoteTableNames) {
                var quoteChar = this.options.nameQuoteCharacter;
                item = "" + quoteChar + item + quoteChar;
              }
              return item;
            }
          }, {
            key: "_formatFieldAlias",
            value: function _formatFieldAlias(item) {
              if (this.options.autoQuoteAliasNames) {
                var quoteChar = this.options.fieldAliasQuoteCharacter;
                item = "" + quoteChar + item + quoteChar;
              }
              return item;
            }
          }, {
            key: "_formatTableAlias",
            value: function _formatTableAlias(item) {
              if (this.options.autoQuoteAliasNames) {
                var quoteChar = this.options.tableAliasQuoteCharacter;
                item = "" + quoteChar + item + quoteChar;
              }
              return this.options.useAsForTableAliasNames ? "AS " + item : item;
            }
          }, {
            key: "_formatFieldName",
            value: function _formatFieldName(item) {
              var formattingOptions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              if (this.options.autoQuoteFieldNames) {
                var quoteChar = this.options.nameQuoteCharacter;
                if (formattingOptions.ignorePeriodsForFieldNameQuotes) {
                  item = "" + quoteChar + item + quoteChar;
                } else {
                  item = item.split(".").map(function(v10) {
                    return "*" === v10 ? v10 : "" + quoteChar + v10 + quoteChar;
                  }).join(".");
                }
              }
              return item;
            }
            // Format the given custom value
          }, {
            key: "_formatCustomValue",
            value: function _formatCustomValue(value, asParam, formattingOptions) {
              var customHandler = getValueHandler(value, this.options.valueHandlers, cls.globalValueHandlers);
              if (customHandler) {
                value = customHandler(value, asParam, formattingOptions);
                if (value && value.rawNesting) {
                  return {
                    formatted: true,
                    rawNesting: true,
                    value: value.value
                  };
                }
              }
              return {
                formatted: !!customHandler,
                value
              };
            }
            /**
             * Format given value for inclusion into parameter values array.
             */
          }, {
            key: "_formatValueForParamArray",
            value: function _formatValueForParamArray(value) {
              var _this2 = this;
              var formattingOptions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              if (_isArray(value)) {
                return value.map(function(v10) {
                  return _this2._formatValueForParamArray(v10, formattingOptions);
                });
              } else {
                return this._formatCustomValue(value, true, formattingOptions).value;
              }
            }
            /**
             * Format the given field value for inclusion into the query string
             */
          }, {
            key: "_formatValueForQueryString",
            value: function _formatValueForQueryString(initialValue) {
              var _this3 = this;
              var formattingOptions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              var _formatCustomValue2 = this._formatCustomValue(initialValue, false, formattingOptions), rawNesting = _formatCustomValue2.rawNesting, formatted = _formatCustomValue2.formatted, value = _formatCustomValue2.value;
              if (formatted) {
                if (rawNesting) {
                  return value;
                } else {
                  return this._applyNestingFormatting(value, _shouldApplyNesting(initialValue));
                }
              }
              if (_isArray(value)) {
                value = value.map(function(v10) {
                  return _this3._formatValueForQueryString(v10);
                });
                value = this._applyNestingFormatting(value.join(", "), _shouldApplyNesting(value));
              } else {
                var typeofValue = typeof value === "undefined" ? "undefined" : _typeof(value);
                if (null === value) {
                  value = "NULL";
                } else if (typeofValue === "boolean") {
                  value = value ? "TRUE" : "FALSE";
                } else if (cls.isSquelBuilder(value)) {
                  value = this._applyNestingFormatting(value.toString(), _shouldApplyNesting(value));
                } else if (typeofValue !== "number") {
                  if ("string" === typeofValue && this.options.stringFormatter) {
                    return this.options.stringFormatter(value);
                  }
                  if (formattingOptions.dontQuote) {
                    value = "" + value;
                  } else {
                    var escapedValue = this._escapeValue(value);
                    value = "'" + escapedValue + "'";
                  }
                }
              }
              return value;
            }
          }, {
            key: "_applyNestingFormatting",
            value: function _applyNestingFormatting(str) {
              var nesting = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
              if (str && typeof str === "string" && nesting && !this.options.rawNesting) {
                var alreadyHasBrackets = "(" === str.charAt(0) && ")" === str.charAt(str.length - 1);
                if (alreadyHasBrackets) {
                  var idx = 0, open = 1;
                  while (str.length - 1 > ++idx) {
                    var c8 = str.charAt(idx);
                    if ("(" === c8) {
                      open++;
                    } else if (")" === c8) {
                      open--;
                      if (1 > open) {
                        alreadyHasBrackets = false;
                        break;
                      }
                    }
                  }
                }
                if (!alreadyHasBrackets) {
                  str = "(" + str + ")";
                }
              }
              return str;
            }
            /**
             * Build given string and its corresponding parameter values into
             * output.
             *
             * @param {String} str
             * @param {Array}  values
             * @param {Object} [options] Additional options.
             * @param {Boolean} [options.buildParameterized] Whether to build paramterized string. Default is false.
             * @param {Boolean} [options.nested] Whether this expression is nested within another.
             * @param {Boolean} [options.formattingOptions] Formatting options for values in query string.
             * @return {Object}
             */
          }, {
            key: "_buildString",
            value: function _buildString(str, values) {
              var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
              var nested = options.nested, buildParameterized = options.buildParameterized, formattingOptions = options.formattingOptions;
              values = values || [];
              str = str || "";
              var formattedStr = "", curValue = -1, formattedValues = [];
              var paramChar = this.options.parameterCharacter;
              var idx = 0;
              while (str.length > idx) {
                if (str.substr(idx, paramChar.length) === paramChar) {
                  var value = values[++curValue];
                  if (buildParameterized) {
                    if (cls.isSquelBuilder(value)) {
                      var ret = value._toParamString({
                        buildParameterized,
                        nested: true
                      });
                      formattedStr += ret.text;
                      ret.values.forEach(function(value2) {
                        return formattedValues.push(value2);
                      });
                    } else {
                      value = this._formatValueForParamArray(value, formattingOptions);
                      if (_isArray(value)) {
                        var tmpStr = value.map(function() {
                          return paramChar;
                        }).join(", ");
                        formattedStr += "(" + tmpStr + ")";
                        value.forEach(function(val) {
                          return formattedValues.push(val);
                        });
                      } else {
                        formattedStr += paramChar;
                        formattedValues.push(value);
                      }
                    }
                  } else {
                    formattedStr += this._formatValueForQueryString(value, formattingOptions);
                  }
                  idx += paramChar.length;
                } else {
                  formattedStr += str.charAt(idx);
                  idx++;
                }
              }
              return {
                text: this._applyNestingFormatting(formattedStr, !!nested),
                values: formattedValues
              };
            }
            /**
             * Build all given strings and their corresponding parameter values into
             * output.
             *
             * @param {Array} strings
             * @param {Array}  strValues array of value arrays corresponding to each string.
             * @param {Object} [options] Additional options.
             * @param {Boolean} [options.buildParameterized] Whether to build paramterized string. Default is false.
             * @param {Boolean} [options.nested] Whether this expression is nested within another.
             * @return {Object}
             */
          }, {
            key: "_buildManyStrings",
            value: function _buildManyStrings(strings, strValues) {
              var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
              var totalStr = [], totalValues = [];
              for (var idx = 0; strings.length > idx; ++idx) {
                var inputString = strings[idx], inputValues = strValues[idx];
                var _buildString2 = this._buildString(inputString, inputValues, {
                  buildParameterized: options.buildParameterized,
                  nested: false
                }), text = _buildString2.text, values = _buildString2.values;
                totalStr.push(text);
                values.forEach(function(value) {
                  return totalValues.push(value);
                });
              }
              totalStr = totalStr.join(this.options.separator);
              return {
                text: totalStr.length ? this._applyNestingFormatting(totalStr, !!options.nested) : "",
                values: totalValues
              };
            }
            /**
             * Get parameterized representation of this instance.
             *
             * @param {Object} [options] Options.
             * @param {Boolean} [options.buildParameterized] Whether to build paramterized string. Default is false.
             * @param {Boolean} [options.nested] Whether this expression is nested within another.
             * @return {Object}
             */
          }, {
            key: "_toParamString",
            value: function _toParamString(options) {
              throw new Error("Not yet implemented");
            }
            /**
             * Get the expression string.
             * @return {String}
             */
          }, {
            key: "toString",
            value: function toString2() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              return this._toParamString(options).text;
            }
            /**
             * Get the parameterized expression string.
             * @return {Object}
             */
          }, {
            key: "toParam",
            value: function toParam() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              return this._toParamString(_extend({}, options, {
                buildParameterized: true
              }));
            }
          }]);
          return _class2;
        }(cls.Cloneable);
        cls.Expression = function(_cls$BaseBuilder) {
          _inherits(_class3, _cls$BaseBuilder);
          function _class3(options) {
            _classCallCheck(this, _class3);
            var _this4 = _possibleConstructorReturn(this, (_class3.__proto__ || Object.getPrototypeOf(_class3)).call(this, options));
            _this4._nodes = [];
            return _this4;
          }
          _createClass(_class3, [{
            key: "and",
            value: function and2(expr) {
              for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                params[_key2 - 1] = arguments[_key2];
              }
              expr = this._sanitizeExpression(expr);
              this._nodes.push({
                type: "AND",
                expr,
                para: params
              });
              return this;
            }
            // Combine the current expression with the given expression using the union operator (OR).
          }, {
            key: "or",
            value: function or2(expr) {
              for (var _len3 = arguments.length, params = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                params[_key3 - 1] = arguments[_key3];
              }
              expr = this._sanitizeExpression(expr);
              this._nodes.push({
                type: "OR",
                expr,
                para: params
              });
              return this;
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var totalStr = [], totalValues = [];
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = void 0;
              try {
                for (var _iterator3 = this._nodes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var node = _step3.value;
                  var type = node.type, expr = node.expr, para = node.para;
                  var _ref = cls.isSquelBuilder(expr) ? expr._toParamString({
                    buildParameterized: options.buildParameterized,
                    nested: true
                  }) : this._buildString(expr, para, {
                    buildParameterized: options.buildParameterized
                  }), text = _ref.text, values = _ref.values;
                  if (totalStr.length) {
                    totalStr.push(type);
                  }
                  totalStr.push(text);
                  values.forEach(function(value) {
                    return totalValues.push(value);
                  });
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }
              totalStr = totalStr.join(" ");
              return {
                text: this._applyNestingFormatting(totalStr, !!options.nested),
                values: totalValues
              };
            }
          }]);
          return _class3;
        }(cls.BaseBuilder);
        cls.Case = function(_cls$BaseBuilder2) {
          _inherits(_class4, _cls$BaseBuilder2);
          function _class4(fieldName) {
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            _classCallCheck(this, _class4);
            var _this5 = _possibleConstructorReturn(this, (_class4.__proto__ || Object.getPrototypeOf(_class4)).call(this, options));
            if (_isPlainObject(fieldName)) {
              options = fieldName;
              fieldName = null;
            }
            if (fieldName) {
              _this5._fieldName = _this5._sanitizeField(fieldName);
            }
            _this5.options = _extend({}, cls.DefaultQueryBuilderOptions, options);
            _this5._cases = [];
            _this5._elseValue = null;
            return _this5;
          }
          _createClass(_class4, [{
            key: "when",
            value: function when(expression) {
              for (var _len4 = arguments.length, values = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                values[_key4 - 1] = arguments[_key4];
              }
              this._cases.unshift({
                expression,
                values: values || []
              });
              return this;
            }
          }, {
            key: "then",
            value: function then(result) {
              if (this._cases.length == 0) {
                throw new Error("when() needs to be called first");
              }
              this._cases[0].result = result;
              return this;
            }
          }, {
            key: "else",
            value: function _else(elseValue) {
              this._elseValue = elseValue;
              return this;
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var totalStr = "", totalValues = [];
              var _iteratorNormalCompletion4 = true;
              var _didIteratorError4 = false;
              var _iteratorError4 = void 0;
              try {
                for (var _iterator4 = this._cases[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                  var _ref2 = _step4.value;
                  var expression = _ref2.expression;
                  var _values = _ref2.values;
                  var result = _ref2.result;
                  totalStr = _pad(totalStr, " ");
                  var ret = this._buildString(expression, _values, {
                    buildParameterized: options.buildParameterized,
                    nested: true
                  });
                  totalStr += "WHEN " + ret.text + " THEN " + this._formatValueForQueryString(result);
                  ret.values.forEach(function(value) {
                    return totalValues.push(value);
                  });
                }
              } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion4 && _iterator4.return) {
                    _iterator4.return();
                  }
                } finally {
                  if (_didIteratorError4) {
                    throw _iteratorError4;
                  }
                }
              }
              if (totalStr.length) {
                totalStr += " ELSE " + this._formatValueForQueryString(this._elseValue) + " END";
                if (this._fieldName) {
                  totalStr = this._fieldName + " " + totalStr;
                }
                totalStr = "CASE " + totalStr;
              } else {
                totalStr = this._formatValueForQueryString(this._elseValue);
              }
              return {
                text: totalStr,
                values: totalValues
              };
            }
          }]);
          return _class4;
        }(cls.BaseBuilder);
        cls.Block = function(_cls$BaseBuilder3) {
          _inherits(_class5, _cls$BaseBuilder3);
          function _class5(options) {
            _classCallCheck(this, _class5);
            return _possibleConstructorReturn(this, (_class5.__proto__ || Object.getPrototypeOf(_class5)).call(this, options));
          }
          _createClass(_class5, [{
            key: "exposedMethods",
            value: function exposedMethods() {
              var ret = {};
              var obj = this;
              while (obj) {
                Object.getOwnPropertyNames(obj).forEach(function(prop) {
                  if ("constructor" !== prop && typeof obj[prop] === "function" && prop.charAt(0) !== "_" && !cls.Block.prototype[prop]) {
                    ret[prop] = obj[prop];
                  }
                });
                obj = Object.getPrototypeOf(obj);
              }
              ;
              return ret;
            }
          }]);
          return _class5;
        }(cls.BaseBuilder);
        cls.StringBlock = function(_cls$Block) {
          _inherits(_class6, _cls$Block);
          function _class6(options, str) {
            _classCallCheck(this, _class6);
            var _this7 = _possibleConstructorReturn(this, (_class6.__proto__ || Object.getPrototypeOf(_class6)).call(this, options));
            _this7._str = str;
            return _this7;
          }
          _createClass(_class6, [{
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              return {
                text: this._str,
                values: []
              };
            }
          }]);
          return _class6;
        }(cls.Block);
        cls.FunctionBlock = function(_cls$Block2) {
          _inherits(_class7, _cls$Block2);
          function _class7(options) {
            _classCallCheck(this, _class7);
            var _this8 = _possibleConstructorReturn(this, (_class7.__proto__ || Object.getPrototypeOf(_class7)).call(this, options));
            _this8._strings = [];
            _this8._values = [];
            return _this8;
          }
          _createClass(_class7, [{
            key: "function",
            value: function _function(str) {
              this._strings.push(str);
              for (var _len5 = arguments.length, values = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
                values[_key5 - 1] = arguments[_key5];
              }
              this._values.push(values);
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              return this._buildManyStrings(this._strings, this._values, options);
            }
          }]);
          return _class7;
        }(cls.Block);
        cls.registerValueHandler(cls.FunctionBlock, function(value) {
          var asParam = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          return asParam ? value.toParam() : value.toString();
        });
        cls.AbstractTableBlock = function(_cls$Block3) {
          _inherits(_class8, _cls$Block3);
          function _class8(options, prefix) {
            _classCallCheck(this, _class8);
            var _this9 = _possibleConstructorReturn(this, (_class8.__proto__ || Object.getPrototypeOf(_class8)).call(this, options));
            _this9._tables = [];
            return _this9;
          }
          _createClass(_class8, [{
            key: "_table",
            value: function _table(table) {
              var alias = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              alias = alias ? this._sanitizeTableAlias(alias) : alias;
              table = this._sanitizeTable(table);
              if (this.options.singleTable) {
                this._tables = [];
              }
              this._tables.push({
                table,
                alias
              });
            }
            // get whether a table has been set
          }, {
            key: "_hasTable",
            value: function _hasTable() {
              return 0 < this._tables.length;
            }
            /**
             * @override
             */
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var totalStr = "", totalValues = [];
              if (this._hasTable()) {
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = void 0;
                try {
                  for (var _iterator5 = this._tables[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var _ref3 = _step5.value;
                    var table = _ref3.table;
                    var alias = _ref3.alias;
                    totalStr = _pad(totalStr, ", ");
                    var tableStr = void 0;
                    if (cls.isSquelBuilder(table)) {
                      var _table$_toParamString = table._toParamString({
                        buildParameterized: options.buildParameterized,
                        nested: true
                      }), text = _table$_toParamString.text, values = _table$_toParamString.values;
                      tableStr = text;
                      values.forEach(function(value) {
                        return totalValues.push(value);
                      });
                    } else {
                      tableStr = this._formatTableName(table);
                    }
                    if (alias) {
                      tableStr += " " + this._formatTableAlias(alias);
                    }
                    totalStr += tableStr;
                  }
                } catch (err) {
                  _didIteratorError5 = true;
                  _iteratorError5 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                      _iterator5.return();
                    }
                  } finally {
                    if (_didIteratorError5) {
                      throw _iteratorError5;
                    }
                  }
                }
                if (this.options.prefix) {
                  totalStr = this.options.prefix + " " + totalStr;
                }
              }
              return {
                text: totalStr,
                values: totalValues
              };
            }
          }]);
          return _class8;
        }(cls.Block);
        cls.TargetTableBlock = function(_cls$AbstractTableBlo) {
          _inherits(_class9, _cls$AbstractTableBlo);
          function _class9() {
            _classCallCheck(this, _class9);
            return _possibleConstructorReturn(this, (_class9.__proto__ || Object.getPrototypeOf(_class9)).apply(this, arguments));
          }
          _createClass(_class9, [{
            key: "target",
            value: function target(table) {
              this._table(table);
            }
          }]);
          return _class9;
        }(cls.AbstractTableBlock);
        cls.UpdateTableBlock = function(_cls$AbstractTableBlo2) {
          _inherits(_class10, _cls$AbstractTableBlo2);
          function _class10() {
            _classCallCheck(this, _class10);
            return _possibleConstructorReturn(this, (_class10.__proto__ || Object.getPrototypeOf(_class10)).apply(this, arguments));
          }
          _createClass(_class10, [{
            key: "table",
            value: function table(_table2) {
              var alias = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              this._table(_table2, alias);
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              if (!this._hasTable()) {
                throw new Error("table() needs to be called");
              }
              return _get(_class10.prototype.__proto__ || Object.getPrototypeOf(_class10.prototype), "_toParamString", this).call(this, options);
            }
          }]);
          return _class10;
        }(cls.AbstractTableBlock);
        cls.FromTableBlock = function(_cls$AbstractTableBlo3) {
          _inherits(_class11, _cls$AbstractTableBlo3);
          function _class11(options) {
            _classCallCheck(this, _class11);
            return _possibleConstructorReturn(this, (_class11.__proto__ || Object.getPrototypeOf(_class11)).call(this, _extend({}, options, {
              prefix: "FROM"
            })));
          }
          _createClass(_class11, [{
            key: "from",
            value: function from(table) {
              var alias = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              this._table(table, alias);
            }
          }]);
          return _class11;
        }(cls.AbstractTableBlock);
        cls.IntoTableBlock = function(_cls$AbstractTableBlo4) {
          _inherits(_class12, _cls$AbstractTableBlo4);
          function _class12(options) {
            _classCallCheck(this, _class12);
            return _possibleConstructorReturn(this, (_class12.__proto__ || Object.getPrototypeOf(_class12)).call(this, _extend({}, options, {
              prefix: "INTO",
              singleTable: true
            })));
          }
          _createClass(_class12, [{
            key: "into",
            value: function into(table) {
              this._table(table);
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              if (!this._hasTable()) {
                throw new Error("into() needs to be called");
              }
              return _get(_class12.prototype.__proto__ || Object.getPrototypeOf(_class12.prototype), "_toParamString", this).call(this, options);
            }
          }]);
          return _class12;
        }(cls.AbstractTableBlock);
        cls.GetFieldBlock = function(_cls$Block4) {
          _inherits(_class13, _cls$Block4);
          function _class13(options) {
            _classCallCheck(this, _class13);
            var _this14 = _possibleConstructorReturn(this, (_class13.__proto__ || Object.getPrototypeOf(_class13)).call(this, options));
            _this14._fields = [];
            return _this14;
          }
          _createClass(_class13, [{
            key: "fields",
            value: function fields(_fields) {
              var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              if (_isArray(_fields)) {
                var _iteratorNormalCompletion6 = true;
                var _didIteratorError6 = false;
                var _iteratorError6 = void 0;
                try {
                  for (var _iterator6 = _fields[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var field = _step6.value;
                    this.field(field, null, options);
                  }
                } catch (err) {
                  _didIteratorError6 = true;
                  _iteratorError6 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                      _iterator6.return();
                    }
                  } finally {
                    if (_didIteratorError6) {
                      throw _iteratorError6;
                    }
                  }
                }
              } else {
                for (var _field2 in _fields) {
                  var alias = _fields[_field2];
                  this.field(_field2, alias, options);
                }
              }
            }
            /**
            # Add the given field to the final result set.
            #
            # The 'field' parameter does not necessarily have to be a fieldname. It can use database functions too,
            # e.g. DATE_FORMAT(a.started, "%H")
            #
            # An alias may also be specified for this field.
            #
            # options.ignorePeriodsForFieldNameQuotes - whether to ignore period (.) when automatically quoting the field name
            */
          }, {
            key: "field",
            value: function field(_field) {
              var alias = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
              alias = alias ? this._sanitizeFieldAlias(alias) : alias;
              _field = this._sanitizeField(_field);
              var existingField = this._fields.filter(function(f6) {
                return f6.name === _field && f6.alias === alias;
              });
              if (existingField.length) {
                return this;
              }
              this._fields.push({
                name: _field,
                alias,
                options
              });
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var queryBuilder = options.queryBuilder, buildParameterized = options.buildParameterized;
              var totalStr = "", totalValues = [];
              var _iteratorNormalCompletion7 = true;
              var _didIteratorError7 = false;
              var _iteratorError7 = void 0;
              try {
                for (var _iterator7 = this._fields[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                  var field = _step7.value;
                  totalStr = _pad(totalStr, ", ");
                  var name = field.name, alias = field.alias, _options = field.options;
                  if (typeof name === "string") {
                    totalStr += this._formatFieldName(name, _options);
                  } else {
                    var ret = name._toParamString({
                      nested: true,
                      buildParameterized
                    });
                    totalStr += ret.text;
                    ret.values.forEach(function(value) {
                      return totalValues.push(value);
                    });
                  }
                  if (alias) {
                    totalStr += " AS " + this._formatFieldAlias(alias);
                  }
                }
              } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion7 && _iterator7.return) {
                    _iterator7.return();
                  }
                } finally {
                  if (_didIteratorError7) {
                    throw _iteratorError7;
                  }
                }
              }
              if (!totalStr.length) {
                var fromTableBlock = queryBuilder && queryBuilder.getBlock(cls.FromTableBlock);
                if (fromTableBlock && fromTableBlock._hasTable()) {
                  totalStr = "*";
                }
              }
              return {
                text: totalStr,
                values: totalValues
              };
            }
          }]);
          return _class13;
        }(cls.Block);
        cls.AbstractSetFieldBlock = function(_cls$Block5) {
          _inherits(_class14, _cls$Block5);
          function _class14(options) {
            _classCallCheck(this, _class14);
            var _this15 = _possibleConstructorReturn(this, (_class14.__proto__ || Object.getPrototypeOf(_class14)).call(this, options));
            _this15._reset();
            return _this15;
          }
          _createClass(_class14, [{
            key: "_reset",
            value: function _reset() {
              this._fields = [];
              this._values = [[]];
              this._valueOptions = [[]];
            }
            // Update the given field with the given value.
            // This will override any previously set value for the given field.
          }, {
            key: "_set",
            value: function _set(field, value) {
              var valueOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
              if (this._values.length > 1) {
                throw new Error("Cannot set multiple rows of fields this way.");
              }
              if (typeof value !== "undefined") {
                value = this._sanitizeValue(value);
              }
              field = this._sanitizeField(field);
              var index = this._fields.indexOf(field);
              if (-1 === index) {
                this._fields.push(field);
                index = this._fields.length - 1;
              }
              this._values[0][index] = value;
              this._valueOptions[0][index] = valueOptions;
            }
            // Insert fields based on the key/value pairs in the given object
          }, {
            key: "_setFields",
            value: function _setFields(fields) {
              var valueOptions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              if ((typeof fields === "undefined" ? "undefined" : _typeof(fields)) !== "object") {
                throw new Error("Expected an object but got " + (typeof fields === "undefined" ? "undefined" : _typeof(fields)));
              }
              for (var field in fields) {
                this._set(field, fields[field], valueOptions);
              }
            }
            // Insert multiple rows for the given fields. Accepts an array of objects.
            // This will override all previously set values for every field.
          }, {
            key: "_setFieldsRows",
            value: function _setFieldsRows(fieldsRows) {
              var valueOptions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              if (!_isArray(fieldsRows)) {
                throw new Error("Expected an array of objects but got " + (typeof fieldsRows === "undefined" ? "undefined" : _typeof(fieldsRows)));
              }
              this._reset();
              for (var i8 = 0; fieldsRows.length > i8; ++i8) {
                var fieldRow = fieldsRows[i8];
                for (var field in fieldRow) {
                  var value = fieldRow[field];
                  field = this._sanitizeField(field);
                  value = this._sanitizeValue(value);
                  var index = this._fields.indexOf(field);
                  if (0 < i8 && -1 === index) {
                    throw new Error("All fields in subsequent rows must match the fields in the first row");
                  }
                  if (-1 === index) {
                    this._fields.push(field);
                    index = this._fields.length - 1;
                  }
                  if (!_isArray(this._values[i8])) {
                    this._values[i8] = [];
                    this._valueOptions[i8] = [];
                  }
                  this._values[i8][index] = value;
                  this._valueOptions[i8][index] = valueOptions;
                }
              }
            }
          }]);
          return _class14;
        }(cls.Block);
        cls.SetFieldBlock = function(_cls$AbstractSetField) {
          _inherits(_class15, _cls$AbstractSetField);
          function _class15() {
            _classCallCheck(this, _class15);
            return _possibleConstructorReturn(this, (_class15.__proto__ || Object.getPrototypeOf(_class15)).apply(this, arguments));
          }
          _createClass(_class15, [{
            key: "set",
            value: function set(field, value, options) {
              this._set(field, value, options);
            }
          }, {
            key: "setFields",
            value: function setFields(fields, valueOptions) {
              this._setFields(fields, valueOptions);
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var buildParameterized = options.buildParameterized;
              if (0 >= this._fields.length) {
                throw new Error("set() needs to be called");
              }
              var totalStr = "", totalValues = [];
              for (var i8 = 0; i8 < this._fields.length; ++i8) {
                totalStr = _pad(totalStr, ", ");
                var field = this._formatFieldName(this._fields[i8]);
                var value = this._values[0][i8];
                if (0 > field.indexOf("=")) {
                  field = field + " = " + this.options.parameterCharacter;
                }
                var ret = this._buildString(field, [value], {
                  buildParameterized,
                  formattingOptions: this._valueOptions[0][i8]
                });
                totalStr += ret.text;
                ret.values.forEach(function(value2) {
                  return totalValues.push(value2);
                });
              }
              return {
                text: "SET " + totalStr,
                values: totalValues
              };
            }
          }]);
          return _class15;
        }(cls.AbstractSetFieldBlock);
        cls.InsertFieldValueBlock = function(_cls$AbstractSetField2) {
          _inherits(_class16, _cls$AbstractSetField2);
          function _class16() {
            _classCallCheck(this, _class16);
            return _possibleConstructorReturn(this, (_class16.__proto__ || Object.getPrototypeOf(_class16)).apply(this, arguments));
          }
          _createClass(_class16, [{
            key: "set",
            value: function set(field, value) {
              var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
              this._set(field, value, options);
            }
          }, {
            key: "setFields",
            value: function setFields(fields, valueOptions) {
              this._setFields(fields, valueOptions);
            }
          }, {
            key: "setFieldsRows",
            value: function setFieldsRows(fieldsRows, valueOptions) {
              this._setFieldsRows(fieldsRows, valueOptions);
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var _this18 = this;
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var buildParameterized = options.buildParameterized;
              var fieldString = this._fields.map(function(f6) {
                return _this18._formatFieldName(f6);
              }).join(", ");
              var valueStrings = [], totalValues = [];
              for (var i8 = 0; i8 < this._values.length; ++i8) {
                valueStrings[i8] = "";
                for (var j5 = 0; j5 < this._values[i8].length; ++j5) {
                  var ret = this._buildString(this.options.parameterCharacter, [this._values[i8][j5]], {
                    buildParameterized,
                    formattingOptions: this._valueOptions[i8][j5]
                  });
                  ret.values.forEach(function(value) {
                    return totalValues.push(value);
                  });
                  valueStrings[i8] = _pad(valueStrings[i8], ", ");
                  valueStrings[i8] += ret.text;
                }
              }
              return {
                text: fieldString.length ? "(" + fieldString + ") VALUES (" + valueStrings.join("), (") + ")" : "",
                values: totalValues
              };
            }
          }]);
          return _class16;
        }(cls.AbstractSetFieldBlock);
        cls.InsertFieldsFromQueryBlock = function(_cls$Block6) {
          _inherits(_class17, _cls$Block6);
          function _class17(options) {
            _classCallCheck(this, _class17);
            var _this19 = _possibleConstructorReturn(this, (_class17.__proto__ || Object.getPrototypeOf(_class17)).call(this, options));
            _this19._fields = [];
            _this19._query = null;
            return _this19;
          }
          _createClass(_class17, [{
            key: "fromQuery",
            value: function fromQuery(fields, selectQuery) {
              var _this20 = this;
              this._fields = fields.map(function(v10) {
                return _this20._sanitizeField(v10);
              });
              this._query = this._sanitizeBaseBuilder(selectQuery);
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var totalStr = "", totalValues = [];
              if (this._fields.length && this._query) {
                var _query$_toParamString = this._query._toParamString({
                  buildParameterized: options.buildParameterized,
                  nested: true
                }), text = _query$_toParamString.text, values = _query$_toParamString.values;
                totalStr = "(" + this._fields.join(", ") + ") " + this._applyNestingFormatting(text);
                totalValues = values;
              }
              return {
                text: totalStr,
                values: totalValues
              };
            }
          }]);
          return _class17;
        }(cls.Block);
        cls.DistinctBlock = function(_cls$Block7) {
          _inherits(_class18, _cls$Block7);
          function _class18() {
            _classCallCheck(this, _class18);
            return _possibleConstructorReturn(this, (_class18.__proto__ || Object.getPrototypeOf(_class18)).apply(this, arguments));
          }
          _createClass(_class18, [{
            key: "distinct",
            // Add the DISTINCT keyword to the query.
            value: function distinct() {
              this._useDistinct = true;
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              return {
                text: this._useDistinct ? "DISTINCT" : "",
                values: []
              };
            }
          }]);
          return _class18;
        }(cls.Block);
        cls.GroupByBlock = function(_cls$Block8) {
          _inherits(_class19, _cls$Block8);
          function _class19(options) {
            _classCallCheck(this, _class19);
            var _this22 = _possibleConstructorReturn(this, (_class19.__proto__ || Object.getPrototypeOf(_class19)).call(this, options));
            _this22._groups = [];
            return _this22;
          }
          _createClass(_class19, [{
            key: "group",
            value: function group(field) {
              this._groups.push(this._sanitizeField(field));
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              return {
                text: this._groups.length ? "GROUP BY " + this._groups.join(", ") : "",
                values: []
              };
            }
          }]);
          return _class19;
        }(cls.Block);
        cls.AbstractVerbSingleValueBlock = function(_cls$Block9) {
          _inherits(_class20, _cls$Block9);
          function _class20(options) {
            _classCallCheck(this, _class20);
            var _this23 = _possibleConstructorReturn(this, (_class20.__proto__ || Object.getPrototypeOf(_class20)).call(this, options));
            _this23._value = null;
            return _this23;
          }
          _createClass(_class20, [{
            key: "_setValue",
            value: function _setValue(value) {
              this._value = null !== value ? this._sanitizeLimitOffset(value) : value;
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var expr = null !== this._value ? this.options.verb + " " + this.options.parameterCharacter : "";
              var values = null !== this._value ? [this._value] : [];
              return this._buildString(expr, values, options);
            }
          }]);
          return _class20;
        }(cls.Block);
        cls.OffsetBlock = function(_cls$AbstractVerbSing) {
          _inherits(_class21, _cls$AbstractVerbSing);
          function _class21(options) {
            _classCallCheck(this, _class21);
            return _possibleConstructorReturn(this, (_class21.__proto__ || Object.getPrototypeOf(_class21)).call(this, _extend({}, options, {
              verb: "OFFSET"
            })));
          }
          _createClass(_class21, [{
            key: "offset",
            value: function offset(start) {
              this._setValue(start);
            }
          }]);
          return _class21;
        }(cls.AbstractVerbSingleValueBlock);
        cls.LimitBlock = function(_cls$AbstractVerbSing2) {
          _inherits(_class22, _cls$AbstractVerbSing2);
          function _class22(options) {
            _classCallCheck(this, _class22);
            return _possibleConstructorReturn(this, (_class22.__proto__ || Object.getPrototypeOf(_class22)).call(this, _extend({}, options, {
              verb: "LIMIT"
            })));
          }
          _createClass(_class22, [{
            key: "limit",
            value: function limit(_limit2) {
              this._setValue(_limit2);
            }
          }]);
          return _class22;
        }(cls.AbstractVerbSingleValueBlock);
        cls.AbstractConditionBlock = function(_cls$Block10) {
          _inherits(_class23, _cls$Block10);
          function _class23(options) {
            _classCallCheck(this, _class23);
            var _this26 = _possibleConstructorReturn(this, (_class23.__proto__ || Object.getPrototypeOf(_class23)).call(this, options));
            _this26._conditions = [];
            return _this26;
          }
          _createClass(_class23, [{
            key: "_condition",
            value: function _condition(condition) {
              condition = this._sanitizeExpression(condition);
              for (var _len6 = arguments.length, values = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
                values[_key6 - 1] = arguments[_key6];
              }
              this._conditions.push({
                expr: condition,
                values: values || []
              });
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var totalStr = [], totalValues = [];
              var _iteratorNormalCompletion8 = true;
              var _didIteratorError8 = false;
              var _iteratorError8 = void 0;
              try {
                for (var _iterator8 = this._conditions[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                  var _ref4 = _step8.value;
                  var expr = _ref4.expr;
                  var _values2 = _ref4.values;
                  var ret = cls.isSquelBuilder(expr) ? expr._toParamString({
                    buildParameterized: options.buildParameterized
                  }) : this._buildString(expr, _values2, {
                    buildParameterized: options.buildParameterized
                  });
                  if (ret.text.length) {
                    totalStr.push(ret.text);
                  }
                  ret.values.forEach(function(value) {
                    return totalValues.push(value);
                  });
                }
              } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion8 && _iterator8.return) {
                    _iterator8.return();
                  }
                } finally {
                  if (_didIteratorError8) {
                    throw _iteratorError8;
                  }
                }
              }
              if (totalStr.length) {
                totalStr = totalStr.join(") AND (");
              }
              return {
                text: totalStr.length ? this.options.verb + " (" + totalStr + ")" : "",
                values: totalValues
              };
            }
          }]);
          return _class23;
        }(cls.Block);
        cls.WhereBlock = function(_cls$AbstractConditio) {
          _inherits(_class24, _cls$AbstractConditio);
          function _class24(options) {
            _classCallCheck(this, _class24);
            return _possibleConstructorReturn(this, (_class24.__proto__ || Object.getPrototypeOf(_class24)).call(this, _extend({}, options, {
              verb: "WHERE"
            })));
          }
          _createClass(_class24, [{
            key: "where",
            value: function where(condition) {
              for (var _len7 = arguments.length, values = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
                values[_key7 - 1] = arguments[_key7];
              }
              this._condition.apply(this, [condition].concat(values));
            }
          }]);
          return _class24;
        }(cls.AbstractConditionBlock);
        cls.HavingBlock = function(_cls$AbstractConditio2) {
          _inherits(_class25, _cls$AbstractConditio2);
          function _class25(options) {
            _classCallCheck(this, _class25);
            return _possibleConstructorReturn(this, (_class25.__proto__ || Object.getPrototypeOf(_class25)).call(this, _extend({}, options, {
              verb: "HAVING"
            })));
          }
          _createClass(_class25, [{
            key: "having",
            value: function having(condition) {
              for (var _len8 = arguments.length, values = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
                values[_key8 - 1] = arguments[_key8];
              }
              this._condition.apply(this, [condition].concat(values));
            }
          }]);
          return _class25;
        }(cls.AbstractConditionBlock);
        cls.OrderByBlock = function(_cls$Block11) {
          _inherits(_class26, _cls$Block11);
          function _class26(options) {
            _classCallCheck(this, _class26);
            var _this29 = _possibleConstructorReturn(this, (_class26.__proto__ || Object.getPrototypeOf(_class26)).call(this, options));
            _this29._orders = [];
            return _this29;
          }
          _createClass(_class26, [{
            key: "order",
            value: function order(field, dir) {
              field = this._sanitizeField(field);
              if (!(typeof dir === "string")) {
                if (dir === void 0) {
                  dir = "ASC";
                } else if (dir !== null) {
                  dir = dir ? "ASC" : "DESC";
                }
              }
              for (var _len9 = arguments.length, values = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {
                values[_key9 - 2] = arguments[_key9];
              }
              this._orders.push({
                field,
                dir,
                values: values || []
              });
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var totalStr = "", totalValues = [];
              var _iteratorNormalCompletion9 = true;
              var _didIteratorError9 = false;
              var _iteratorError9 = void 0;
              try {
                for (var _iterator9 = this._orders[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                  var _ref5 = _step9.value;
                  var field = _ref5.field;
                  var dir = _ref5.dir;
                  var _values3 = _ref5.values;
                  totalStr = _pad(totalStr, ", ");
                  var ret = this._buildString(field, _values3, {
                    buildParameterized: options.buildParameterized
                  });
                  totalStr += ret.text, _isArray(ret.values) && ret.values.forEach(function(value) {
                    return totalValues.push(value);
                  });
                  if (dir !== null) {
                    totalStr += " " + dir;
                  }
                }
              } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion9 && _iterator9.return) {
                    _iterator9.return();
                  }
                } finally {
                  if (_didIteratorError9) {
                    throw _iteratorError9;
                  }
                }
              }
              return {
                text: totalStr.length ? "ORDER BY " + totalStr : "",
                values: totalValues
              };
            }
          }]);
          return _class26;
        }(cls.Block);
        cls.JoinBlock = function(_cls$Block12) {
          _inherits(_class27, _cls$Block12);
          function _class27(options) {
            _classCallCheck(this, _class27);
            var _this30 = _possibleConstructorReturn(this, (_class27.__proto__ || Object.getPrototypeOf(_class27)).call(this, options));
            _this30._joins = [];
            return _this30;
          }
          _createClass(_class27, [{
            key: "join",
            value: function join(table) {
              var alias = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              var condition = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
              var type = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "INNER";
              table = this._sanitizeTable(table, true);
              alias = alias ? this._sanitizeTableAlias(alias) : alias;
              condition = condition ? this._sanitizeExpression(condition) : condition;
              this._joins.push({
                type,
                table,
                alias,
                condition
              });
            }
          }, {
            key: "left_join",
            value: function left_join(table) {
              var alias = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              var condition = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
              this.join(table, alias, condition, "LEFT");
            }
          }, {
            key: "right_join",
            value: function right_join(table) {
              var alias = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              var condition = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
              this.join(table, alias, condition, "RIGHT");
            }
          }, {
            key: "outer_join",
            value: function outer_join(table) {
              var alias = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              var condition = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
              this.join(table, alias, condition, "OUTER");
            }
          }, {
            key: "left_outer_join",
            value: function left_outer_join(table) {
              var alias = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              var condition = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
              this.join(table, alias, condition, "LEFT OUTER");
            }
          }, {
            key: "full_join",
            value: function full_join(table) {
              var alias = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              var condition = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
              this.join(table, alias, condition, "FULL");
            }
          }, {
            key: "cross_join",
            value: function cross_join(table) {
              var alias = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              var condition = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
              this.join(table, alias, condition, "CROSS");
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var totalStr = "", totalValues = [];
              var _iteratorNormalCompletion10 = true;
              var _didIteratorError10 = false;
              var _iteratorError10 = void 0;
              try {
                for (var _iterator10 = this._joins[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                  var _ref6 = _step10.value;
                  var type = _ref6.type;
                  var table = _ref6.table;
                  var alias = _ref6.alias;
                  var condition = _ref6.condition;
                  totalStr = _pad(totalStr, this.options.separator);
                  var tableStr = void 0;
                  if (cls.isSquelBuilder(table)) {
                    var ret = table._toParamString({
                      buildParameterized: options.buildParameterized,
                      nested: true
                    });
                    ret.values.forEach(function(value) {
                      return totalValues.push(value);
                    });
                    tableStr = ret.text;
                  } else {
                    tableStr = this._formatTableName(table);
                  }
                  totalStr += type + " JOIN " + tableStr;
                  if (alias) {
                    totalStr += " " + this._formatTableAlias(alias);
                  }
                  if (condition) {
                    totalStr += " ON ";
                    var _ret2 = void 0;
                    if (cls.isSquelBuilder(condition)) {
                      _ret2 = condition._toParamString({
                        buildParameterized: options.buildParameterized
                      });
                    } else {
                      _ret2 = this._buildString(condition, [], {
                        buildParameterized: options.buildParameterized
                      });
                    }
                    totalStr += this._applyNestingFormatting(_ret2.text);
                    _ret2.values.forEach(function(value) {
                      return totalValues.push(value);
                    });
                  }
                }
              } catch (err) {
                _didIteratorError10 = true;
                _iteratorError10 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion10 && _iterator10.return) {
                    _iterator10.return();
                  }
                } finally {
                  if (_didIteratorError10) {
                    throw _iteratorError10;
                  }
                }
              }
              return {
                text: totalStr,
                values: totalValues
              };
            }
          }]);
          return _class27;
        }(cls.Block);
        cls.UnionBlock = function(_cls$Block13) {
          _inherits(_class28, _cls$Block13);
          function _class28(options) {
            _classCallCheck(this, _class28);
            var _this31 = _possibleConstructorReturn(this, (_class28.__proto__ || Object.getPrototypeOf(_class28)).call(this, options));
            _this31._unions = [];
            return _this31;
          }
          _createClass(_class28, [{
            key: "union",
            value: function union(table) {
              var type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "UNION";
              table = this._sanitizeTable(table);
              this._unions.push({
                type,
                table
              });
            }
            // Add a UNION ALL with the given table/query.
          }, {
            key: "union_all",
            value: function union_all(table) {
              this.union(table, "UNION ALL");
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var totalStr = "", totalValues = [];
              var _iteratorNormalCompletion11 = true;
              var _didIteratorError11 = false;
              var _iteratorError11 = void 0;
              try {
                for (var _iterator11 = this._unions[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                  var _ref7 = _step11.value;
                  var type = _ref7.type;
                  var table = _ref7.table;
                  totalStr = _pad(totalStr, this.options.separator);
                  var tableStr = void 0;
                  if (table instanceof cls.BaseBuilder) {
                    var ret = table._toParamString({
                      buildParameterized: options.buildParameterized,
                      nested: true
                    });
                    tableStr = ret.text;
                    ret.values.forEach(function(value) {
                      return totalValues.push(value);
                    });
                  } else {
                    totalStr = this._formatTableName(table);
                  }
                  totalStr += type + " " + tableStr;
                }
              } catch (err) {
                _didIteratorError11 = true;
                _iteratorError11 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion11 && _iterator11.return) {
                    _iterator11.return();
                  }
                } finally {
                  if (_didIteratorError11) {
                    throw _iteratorError11;
                  }
                }
              }
              return {
                text: totalStr,
                values: totalValues
              };
            }
          }]);
          return _class28;
        }(cls.Block);
        cls.QueryBuilder = function(_cls$BaseBuilder4) {
          _inherits(_class29, _cls$BaseBuilder4);
          function _class29(options, blocks) {
            _classCallCheck(this, _class29);
            var _this32 = _possibleConstructorReturn(this, (_class29.__proto__ || Object.getPrototypeOf(_class29)).call(this, options));
            _this32.blocks = blocks || [];
            var _iteratorNormalCompletion12 = true;
            var _didIteratorError12 = false;
            var _iteratorError12 = void 0;
            try {
              for (var _iterator12 = _this32.blocks[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                var block = _step12.value;
                var exposedMethods = block.exposedMethods();
                for (var methodName in exposedMethods) {
                  var methodBody = exposedMethods[methodName];
                  if (void 0 !== _this32[methodName]) {
                    throw new Error("Builder already has a builder method called: " + methodName);
                  }
                  (function(block2, name, body) {
                    _this32[name] = function() {
                      for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
                        args[_key10] = arguments[_key10];
                      }
                      body.call.apply(body, [block2].concat(args));
                      return _this32;
                    };
                  })(block, methodName, methodBody);
                }
              }
            } catch (err) {
              _didIteratorError12 = true;
              _iteratorError12 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion12 && _iterator12.return) {
                  _iterator12.return();
                }
              } finally {
                if (_didIteratorError12) {
                  throw _iteratorError12;
                }
              }
            }
            return _this32;
          }
          _createClass(_class29, [{
            key: "registerValueHandler",
            value: function registerValueHandler(type, handler) {
              var _iteratorNormalCompletion13 = true;
              var _didIteratorError13 = false;
              var _iteratorError13 = void 0;
              try {
                for (var _iterator13 = this.blocks[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                  var block = _step13.value;
                  block.registerValueHandler(type, handler);
                }
              } catch (err) {
                _didIteratorError13 = true;
                _iteratorError13 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion13 && _iterator13.return) {
                    _iterator13.return();
                  }
                } finally {
                  if (_didIteratorError13) {
                    throw _iteratorError13;
                  }
                }
              }
              _get(_class29.prototype.__proto__ || Object.getPrototypeOf(_class29.prototype), "registerValueHandler", this).call(this, type, handler);
              return this;
            }
            /**
            # Update query builder options
            #
            # This will update the options for all blocks too. Use this method with caution as it allows you to change the
            # behaviour of your query builder mid-build.
            */
          }, {
            key: "updateOptions",
            value: function updateOptions(options) {
              this.options = _extend({}, this.options, options);
              var _iteratorNormalCompletion14 = true;
              var _didIteratorError14 = false;
              var _iteratorError14 = void 0;
              try {
                for (var _iterator14 = this.blocks[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                  var block = _step14.value;
                  block.options = _extend({}, block.options, options);
                }
              } catch (err) {
                _didIteratorError14 = true;
                _iteratorError14 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion14 && _iterator14.return) {
                    _iterator14.return();
                  }
                } finally {
                  if (_didIteratorError14) {
                    throw _iteratorError14;
                  }
                }
              }
            }
            // Get the final fully constructed query param obj.
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var _this33 = this;
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              options = _extend({}, this.options, options);
              var blockResults = this.blocks.map(function(b9) {
                return b9._toParamString({
                  buildParameterized: options.buildParameterized,
                  queryBuilder: _this33
                });
              });
              var blockTexts = blockResults.map(function(b9) {
                return b9.text;
              });
              var blockValues = blockResults.map(function(b9) {
                return b9.values;
              });
              var totalStr = blockTexts.filter(function(v10) {
                return 0 < v10.length;
              }).join(options.separator);
              var totalValues = [];
              blockValues.forEach(function(block) {
                return block.forEach(function(value) {
                  return totalValues.push(value);
                });
              });
              if (!options.nested) {
                if (options.numberedParameters) {
                  var i8 = void 0 !== options.numberedParametersStartAt ? options.numberedParametersStartAt : 1;
                  var regex = options.parameterCharacter.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
                  totalStr = totalStr.replace(new RegExp(regex, "g"), function() {
                    return "" + options.numberedParametersPrefix + i8++;
                  });
                }
              }
              return {
                text: this._applyNestingFormatting(totalStr, !!options.nested),
                values: totalValues
              };
            }
            // Deep clone
          }, {
            key: "clone",
            value: function clone() {
              var blockClones = this.blocks.map(function(v10) {
                return v10.clone();
              });
              return new this.constructor(this.options, blockClones);
            }
            // Get a specific block
          }, {
            key: "getBlock",
            value: function getBlock(blockType) {
              var filtered = this.blocks.filter(function(b9) {
                return b9 instanceof blockType;
              });
              return filtered[0];
            }
          }]);
          return _class29;
        }(cls.BaseBuilder);
        cls.Select = function(_cls$QueryBuilder) {
          _inherits(_class30, _cls$QueryBuilder);
          function _class30(options) {
            var blocks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            _classCallCheck(this, _class30);
            blocks = blocks || [new cls.StringBlock(options, "SELECT"), new cls.FunctionBlock(options), new cls.DistinctBlock(options), new cls.GetFieldBlock(options), new cls.FromTableBlock(options), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.GroupByBlock(options), new cls.HavingBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.OffsetBlock(options), new cls.UnionBlock(options)];
            return _possibleConstructorReturn(this, (_class30.__proto__ || Object.getPrototypeOf(_class30)).call(this, options, blocks));
          }
          return _class30;
        }(cls.QueryBuilder);
        cls.Update = function(_cls$QueryBuilder2) {
          _inherits(_class31, _cls$QueryBuilder2);
          function _class31(options) {
            var blocks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            _classCallCheck(this, _class31);
            blocks = blocks || [new cls.StringBlock(options, "UPDATE"), new cls.UpdateTableBlock(options), new cls.SetFieldBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options)];
            return _possibleConstructorReturn(this, (_class31.__proto__ || Object.getPrototypeOf(_class31)).call(this, options, blocks));
          }
          return _class31;
        }(cls.QueryBuilder);
        cls.Delete = function(_cls$QueryBuilder3) {
          _inherits(_class32, _cls$QueryBuilder3);
          function _class32(options) {
            var blocks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            _classCallCheck(this, _class32);
            blocks = blocks || [new cls.StringBlock(options, "DELETE"), new cls.TargetTableBlock(options), new cls.FromTableBlock(_extend({}, options, {
              singleTable: true
            })), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options)];
            return _possibleConstructorReturn(this, (_class32.__proto__ || Object.getPrototypeOf(_class32)).call(this, options, blocks));
          }
          return _class32;
        }(cls.QueryBuilder);
        cls.Insert = function(_cls$QueryBuilder4) {
          _inherits(_class33, _cls$QueryBuilder4);
          function _class33(options) {
            var blocks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            _classCallCheck(this, _class33);
            blocks = blocks || [new cls.StringBlock(options, "INSERT"), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options)];
            return _possibleConstructorReturn(this, (_class33.__proto__ || Object.getPrototypeOf(_class33)).call(this, options, blocks));
          }
          return _class33;
        }(cls.QueryBuilder);
        var _squel = {
          VERSION: "5.13.0",
          flavour,
          expr: function expr(options) {
            return new cls.Expression(options);
          },
          case: function _case(name, options) {
            return new cls.Case(name, options);
          },
          select: function select(options, blocks) {
            return new cls.Select(options, blocks);
          },
          update: function update(options, blocks) {
            return new cls.Update(options, blocks);
          },
          insert: function insert(options, blocks) {
            return new cls.Insert(options, blocks);
          },
          delete: function _delete(options, blocks) {
            return new cls.Delete(options, blocks);
          },
          str: function str() {
            var inst = new cls.FunctionBlock();
            inst.function.apply(inst, arguments);
            return inst;
          },
          rstr: function rstr() {
            var inst = new cls.FunctionBlock({
              rawNesting: true
            });
            inst.function.apply(inst, arguments);
            return inst;
          },
          registerValueHandler: cls.registerValueHandler
        };
        _squel.remove = _squel.delete;
        _squel.cls = cls;
        return _squel;
      }
      var squel = _buildSquel();
      squel.flavours = {};
      squel.useFlavour = function() {
        var flavour = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        if (!flavour) {
          return squel;
        }
        if (squel.flavours[flavour] instanceof Function) {
          var s7 = _buildSquel(flavour);
          squel.flavours[flavour].call(null, s7);
          s7.flavours = squel.flavours;
          s7.useFlavour = squel.useFlavour;
          return s7;
        } else {
          throw new Error("Flavour not available: " + flavour);
        }
      };
      squel.flavours["mssql"] = function(_squel) {
        var cls = _squel.cls;
        cls.DefaultQueryBuilderOptions.replaceSingleQuotes = true;
        cls.DefaultQueryBuilderOptions.autoQuoteAliasNames = false;
        cls.DefaultQueryBuilderOptions.numberedParametersPrefix = "@";
        _squel.registerValueHandler(Date, function(date) {
          return "'" + date.getUTCFullYear() + "-" + (date.getUTCMonth() + 1) + "-" + date.getUTCDate() + " " + date.getUTCHours() + ":" + date.getUTCMinutes() + ":" + date.getUTCSeconds() + "'";
        });
        cls.MssqlLimitOffsetTopBlock = function(_cls$Block14) {
          _inherits(_class34, _cls$Block14);
          function _class34(options) {
            _classCallCheck(this, _class34);
            var _this38 = _possibleConstructorReturn(this, (_class34.__proto__ || Object.getPrototypeOf(_class34)).call(this, options));
            _this38._limits = null;
            _this38._offsets = null;
            var _limit = function _limit2(max) {
              max = this._sanitizeLimitOffset(max);
              this._parent._limits = max;
            };
            _this38.ParentBlock = function(_cls$Block15) {
              _inherits(_class35, _cls$Block15);
              function _class35(parent) {
                _classCallCheck(this, _class35);
                var _this39 = _possibleConstructorReturn(this, (_class35.__proto__ || Object.getPrototypeOf(_class35)).call(this, parent.options));
                _this39._parent = parent;
                return _this39;
              }
              return _class35;
            }(cls.Block);
            _this38.LimitBlock = function(_this38$ParentBlock) {
              _inherits(_class36, _this38$ParentBlock);
              function _class36(parent) {
                _classCallCheck(this, _class36);
                var _this40 = _possibleConstructorReturn(this, (_class36.__proto__ || Object.getPrototypeOf(_class36)).call(this, parent));
                _this40.limit = _limit;
                return _this40;
              }
              _createClass(_class36, [{
                key: "_toParamString",
                value: function _toParamString() {
                  var str = "";
                  if (this._parent._limits && this._parent._offsets) {
                    str = "FETCH NEXT " + this._parent._limits + " ROWS ONLY";
                  }
                  return {
                    text: str,
                    values: []
                  };
                }
              }]);
              return _class36;
            }(_this38.ParentBlock);
            _this38.TopBlock = function(_this38$ParentBlock2) {
              _inherits(_class37, _this38$ParentBlock2);
              function _class37(parent) {
                _classCallCheck(this, _class37);
                var _this41 = _possibleConstructorReturn(this, (_class37.__proto__ || Object.getPrototypeOf(_class37)).call(this, parent));
                _this41.top = _limit;
                return _this41;
              }
              _createClass(_class37, [{
                key: "_toParamString",
                value: function _toParamString() {
                  var str = "";
                  if (this._parent._limits && !this._parent._offsets) {
                    str = "TOP (" + this._parent._limits + ")";
                  }
                  return {
                    text: str,
                    values: []
                  };
                }
              }]);
              return _class37;
            }(_this38.ParentBlock);
            _this38.OffsetBlock = function(_this38$ParentBlock3) {
              _inherits(_class38, _this38$ParentBlock3);
              function _class38() {
                _classCallCheck(this, _class38);
                return _possibleConstructorReturn(this, (_class38.__proto__ || Object.getPrototypeOf(_class38)).apply(this, arguments));
              }
              _createClass(_class38, [{
                key: "offset",
                value: function offset(start) {
                  this._parent._offsets = this._sanitizeLimitOffset(start);
                }
              }, {
                key: "_toParamString",
                value: function _toParamString() {
                  var str = "";
                  if (this._parent._offsets) {
                    str = "OFFSET " + this._parent._offsets + " ROWS";
                  }
                  return {
                    text: str,
                    values: []
                  };
                }
              }]);
              return _class38;
            }(_this38.ParentBlock);
            return _this38;
          }
          _createClass(_class34, [{
            key: "LIMIT",
            value: function LIMIT() {
              return new this.LimitBlock(this);
            }
          }, {
            key: "TOP",
            value: function TOP() {
              return new this.TopBlock(this);
            }
          }, {
            key: "OFFSET",
            value: function OFFSET() {
              return new this.OffsetBlock(this);
            }
          }]);
          return _class34;
        }(cls.Block);
        cls.MssqlUpdateTopBlock = function(_cls$Block16) {
          _inherits(_class39, _cls$Block16);
          function _class39(options) {
            _classCallCheck(this, _class39);
            var _this43 = _possibleConstructorReturn(this, (_class39.__proto__ || Object.getPrototypeOf(_class39)).call(this, options));
            _this43._limits = null;
            _this43.limit = _this43.top = function(max) {
              _this43._limits = _this43._sanitizeLimitOffset(max);
            };
            return _this43;
          }
          _createClass(_class39, [{
            key: "_toParamString",
            value: function _toParamString() {
              return {
                text: this._limits ? "TOP (" + this._limits + ")" : "",
                values: []
              };
            }
          }]);
          return _class39;
        }(cls.Block);
        cls.MssqlInsertFieldValueBlock = function(_cls$InsertFieldValue) {
          _inherits(_class40, _cls$InsertFieldValue);
          function _class40(options) {
            _classCallCheck(this, _class40);
            var _this44 = _possibleConstructorReturn(this, (_class40.__proto__ || Object.getPrototypeOf(_class40)).call(this, options));
            _this44._outputs = [];
            return _this44;
          }
          _createClass(_class40, [{
            key: "output",
            value: function output(fields) {
              var _this45 = this;
              if ("string" === typeof fields) {
                this._outputs.push("INSERTED." + this._sanitizeField(fields));
              } else {
                fields.forEach(function(f6) {
                  _this45._outputs.push("INSERTED." + _this45._sanitizeField(f6));
                });
              }
            }
          }, {
            key: "_toParamString",
            value: function _toParamString(options) {
              var ret = _get(_class40.prototype.__proto__ || Object.getPrototypeOf(_class40.prototype), "_toParamString", this).call(this, options);
              if (ret.text.length && 0 < this._outputs.length) {
                var innerStr = "OUTPUT " + this._outputs.join(", ") + " ";
                var valuesPos = ret.text.indexOf("VALUES");
                ret.text = ret.text.substr(0, valuesPos) + innerStr + ret.text.substr(valuesPos);
              }
              return ret;
            }
          }]);
          return _class40;
        }(cls.InsertFieldValueBlock);
        cls.MssqlUpdateDeleteOutputBlock = function(_cls$Block17) {
          _inherits(_class41, _cls$Block17);
          function _class41(options) {
            _classCallCheck(this, _class41);
            var _this46 = _possibleConstructorReturn(this, (_class41.__proto__ || Object.getPrototypeOf(_class41)).call(this, options));
            _this46._outputs = [];
            return _this46;
          }
          _createClass(_class41, [{
            key: "outputs",
            value: function outputs(_outputs) {
              for (var output in _outputs) {
                this.output(output, _outputs[output]);
              }
            }
            /**
            # Add the given field to the final result set.
            #
            # The 'field' parameter does not necessarily have to be a fieldname. It can use database functions too,
            # e.g. DATE_FORMAT(a.started, "%H")
            #
            # An alias may also be specified for this field.
            */
          }, {
            key: "output",
            value: function output(_output) {
              var alias = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              _output = this._sanitizeField(_output);
              alias = alias ? this._sanitizeFieldAlias(alias) : alias;
              this._outputs.push({
                name: this.options.forDelete ? "DELETED." + _output : "INSERTED." + _output,
                alias
              });
            }
          }, {
            key: "_toParamString",
            value: function _toParamString(queryBuilder) {
              var totalStr = "";
              if (this._outputs.length) {
                var _iteratorNormalCompletion15 = true;
                var _didIteratorError15 = false;
                var _iteratorError15 = void 0;
                try {
                  for (var _iterator15 = this._outputs[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                    var output = _step15.value;
                    totalStr = _pad(totalStr, ", ");
                    totalStr += output.name;
                    if (output.alias) {
                      totalStr += " AS " + this._formatFieldAlias(output.alias);
                    }
                  }
                } catch (err) {
                  _didIteratorError15 = true;
                  _iteratorError15 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion15 && _iterator15.return) {
                      _iterator15.return();
                    }
                  } finally {
                    if (_didIteratorError15) {
                      throw _iteratorError15;
                    }
                  }
                }
                totalStr = "OUTPUT " + totalStr;
              }
              return {
                text: totalStr,
                values: []
              };
            }
          }]);
          return _class41;
        }(cls.Block);
        cls.Select = function(_cls$QueryBuilder5) {
          _inherits(_class42, _cls$QueryBuilder5);
          function _class42(options) {
            var blocks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            _classCallCheck(this, _class42);
            var limitOffsetTopBlock = new cls.MssqlLimitOffsetTopBlock(options);
            blocks = blocks || [new cls.StringBlock(options, "SELECT"), new cls.DistinctBlock(options), limitOffsetTopBlock.TOP(), new cls.GetFieldBlock(options), new cls.FromTableBlock(options), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.GroupByBlock(options), new cls.OrderByBlock(options), limitOffsetTopBlock.OFFSET(), limitOffsetTopBlock.LIMIT(), new cls.UnionBlock(options)];
            return _possibleConstructorReturn(this, (_class42.__proto__ || Object.getPrototypeOf(_class42)).call(this, options, blocks));
          }
          return _class42;
        }(cls.QueryBuilder);
        cls.Update = function(_cls$QueryBuilder6) {
          _inherits(_class43, _cls$QueryBuilder6);
          function _class43(options) {
            var blocks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            _classCallCheck(this, _class43);
            blocks = blocks || [new cls.StringBlock(options, "UPDATE"), new cls.MssqlUpdateTopBlock(options), new cls.UpdateTableBlock(options), new cls.SetFieldBlock(options), new cls.MssqlUpdateDeleteOutputBlock(options), new cls.WhereBlock(options)];
            return _possibleConstructorReturn(this, (_class43.__proto__ || Object.getPrototypeOf(_class43)).call(this, options, blocks));
          }
          return _class43;
        }(cls.QueryBuilder);
        cls.Delete = function(_cls$QueryBuilder7) {
          _inherits(_class44, _cls$QueryBuilder7);
          function _class44(options) {
            var blocks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            _classCallCheck(this, _class44);
            blocks = blocks || [new cls.StringBlock(options, "DELETE"), new cls.TargetTableBlock(options), new cls.FromTableBlock(_extend({}, options, { singleTable: true })), new cls.JoinBlock(options), new cls.MssqlUpdateDeleteOutputBlock(_extend({}, options, { forDelete: true })), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options)];
            return _possibleConstructorReturn(this, (_class44.__proto__ || Object.getPrototypeOf(_class44)).call(this, options, blocks));
          }
          return _class44;
        }(cls.QueryBuilder);
        cls.Insert = function(_cls$QueryBuilder8) {
          _inherits(_class45, _cls$QueryBuilder8);
          function _class45(options) {
            var blocks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            _classCallCheck(this, _class45);
            blocks = blocks || [new cls.StringBlock(options, "INSERT"), new cls.IntoTableBlock(options), new cls.MssqlInsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options)];
            return _possibleConstructorReturn(this, (_class45.__proto__ || Object.getPrototypeOf(_class45)).call(this, options, blocks));
          }
          return _class45;
        }(cls.QueryBuilder);
      };
      squel.flavours["mysql"] = function(_squel) {
        var cls = _squel.cls;
        cls.MysqlOnDuplicateKeyUpdateBlock = function(_cls$AbstractSetField3) {
          _inherits(_class46, _cls$AbstractSetField3);
          function _class46() {
            _classCallCheck(this, _class46);
            return _possibleConstructorReturn(this, (_class46.__proto__ || Object.getPrototypeOf(_class46)).apply(this, arguments));
          }
          _createClass(_class46, [{
            key: "onDupUpdate",
            value: function onDupUpdate(field, value, options) {
              this._set(field, value, options);
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var totalStr = "", totalValues = [];
              for (var i8 = 0; i8 < this._fields.length; ++i8) {
                totalStr = _pad(totalStr, ", ");
                var field = this._fields[i8];
                var value = this._values[0][i8];
                var valueOptions = this._valueOptions[0][i8];
                if (typeof value === "undefined") {
                  totalStr += field;
                } else {
                  var ret = this._buildString(field + " = " + this.options.parameterCharacter, [value], {
                    buildParameterized: options.buildParameterized,
                    formattingOptions: valueOptions
                  });
                  totalStr += ret.text;
                  ret.values.forEach(function(value2) {
                    return totalValues.push(value2);
                  });
                }
              }
              return {
                text: !totalStr.length ? "" : "ON DUPLICATE KEY UPDATE " + totalStr,
                values: totalValues
              };
            }
          }]);
          return _class46;
        }(cls.AbstractSetFieldBlock);
        cls.Insert = function(_cls$QueryBuilder9) {
          _inherits(_class47, _cls$QueryBuilder9);
          function _class47(options) {
            var blocks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            _classCallCheck(this, _class47);
            blocks = blocks || [new cls.StringBlock(options, "INSERT"), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options), new cls.MysqlOnDuplicateKeyUpdateBlock(options)];
            return _possibleConstructorReturn(this, (_class47.__proto__ || Object.getPrototypeOf(_class47)).call(this, options, blocks));
          }
          return _class47;
        }(cls.QueryBuilder);
        cls.Replace = function(_cls$QueryBuilder10) {
          _inherits(_class48, _cls$QueryBuilder10);
          function _class48(options) {
            var blocks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            _classCallCheck(this, _class48);
            blocks = blocks || [new cls.StringBlock(options, "REPLACE"), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options)];
            return _possibleConstructorReturn(this, (_class48.__proto__ || Object.getPrototypeOf(_class48)).call(this, options, blocks));
          }
          return _class48;
        }(cls.QueryBuilder);
        _squel.replace = function(options, blocks) {
          return new cls.Replace(options, blocks);
        };
      };
      squel.flavours["postgres"] = function(_squel) {
        var cls = _squel.cls;
        cls.DefaultQueryBuilderOptions.numberedParameters = true;
        cls.DefaultQueryBuilderOptions.numberedParametersStartAt = 1;
        cls.DefaultQueryBuilderOptions.autoQuoteAliasNames = false;
        cls.DefaultQueryBuilderOptions.useAsForTableAliasNames = true;
        cls.PostgresOnConflictKeyUpdateBlock = function(_cls$AbstractSetField4) {
          _inherits(_class49, _cls$AbstractSetField4);
          function _class49() {
            _classCallCheck(this, _class49);
            return _possibleConstructorReturn(this, (_class49.__proto__ || Object.getPrototypeOf(_class49)).apply(this, arguments));
          }
          _createClass(_class49, [{
            key: "onConflict",
            value: function onConflict(conflictFields, fields) {
              var _this55 = this;
              this._onConflict = true;
              if (!conflictFields) {
                return;
              }
              if (!_isArray(conflictFields)) {
                conflictFields = [conflictFields];
              }
              this._dupFields = conflictFields.map(this._sanitizeField.bind(this));
              if (fields) {
                Object.keys(fields).forEach(function(key) {
                  _this55._set(key, fields[key]);
                });
              }
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var totalStr = "", totalValues = [];
              for (var i8 = 0; i8 < this._fields.length; ++i8) {
                totalStr = _pad(totalStr, ", ");
                var field = this._fields[i8];
                var value = this._values[0][i8];
                var valueOptions = this._valueOptions[0][i8];
                if (typeof value === "undefined") {
                  totalStr += field;
                } else {
                  var ret = this._buildString(field + " = " + this.options.parameterCharacter, [value], {
                    buildParameterized: options.buildParameterized,
                    formattingOptions: valueOptions
                  });
                  totalStr += ret.text;
                  ret.values.forEach(function(value2) {
                    return totalValues.push(value2);
                  });
                }
              }
              var returned = {
                text: "",
                values: totalValues
              };
              if (this._onConflict) {
                var conflictFields = this._dupFields ? "(" + this._dupFields.join(", ") + ") " : "";
                var action = totalStr.length ? "UPDATE SET " + totalStr : "NOTHING";
                returned.text = "ON CONFLICT " + conflictFields + "DO " + action;
              }
              return returned;
            }
          }]);
          return _class49;
        }(cls.AbstractSetFieldBlock);
        cls.ReturningBlock = function(_cls$Block18) {
          _inherits(_class50, _cls$Block18);
          function _class50(options) {
            _classCallCheck(this, _class50);
            var _this56 = _possibleConstructorReturn(this, (_class50.__proto__ || Object.getPrototypeOf(_class50)).call(this, options));
            _this56._fields = [];
            return _this56;
          }
          _createClass(_class50, [{
            key: "returning",
            value: function returning(field) {
              var alias = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
              alias = alias ? this._sanitizeFieldAlias(alias) : alias;
              field = this._sanitizeField(field);
              var existingField = this._fields.filter(function(f6) {
                return f6.name === field && f6.alias === alias;
              });
              if (existingField.length) {
                return this;
              }
              this._fields.push({
                name: field,
                alias,
                options
              });
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var queryBuilder = options.queryBuilder, buildParameterized = options.buildParameterized;
              var totalStr = "", totalValues = [];
              var _iteratorNormalCompletion16 = true;
              var _didIteratorError16 = false;
              var _iteratorError16 = void 0;
              try {
                for (var _iterator16 = this._fields[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                  var field = _step16.value;
                  totalStr = _pad(totalStr, ", ");
                  var name = field.name, alias = field.alias, _options2 = field.options;
                  if (typeof name === "string") {
                    totalStr += this._formatFieldName(name, _options2);
                  } else {
                    var ret = name._toParamString({
                      nested: true,
                      buildParameterized
                    });
                    totalStr += ret.text;
                    ret.values.forEach(function(value) {
                      return totalValues.push(value);
                    });
                  }
                  if (alias) {
                    totalStr += " AS " + this._formatFieldAlias(alias);
                  }
                }
              } catch (err) {
                _didIteratorError16 = true;
                _iteratorError16 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion16 && _iterator16.return) {
                    _iterator16.return();
                  }
                } finally {
                  if (_didIteratorError16) {
                    throw _iteratorError16;
                  }
                }
              }
              return {
                text: totalStr.length > 0 ? "RETURNING " + totalStr : "",
                values: totalValues
              };
            }
          }]);
          return _class50;
        }(cls.Block);
        cls.WithBlock = function(_cls$Block19) {
          _inherits(_class51, _cls$Block19);
          function _class51(options) {
            _classCallCheck(this, _class51);
            var _this57 = _possibleConstructorReturn(this, (_class51.__proto__ || Object.getPrototypeOf(_class51)).call(this, options));
            _this57._tables = [];
            return _this57;
          }
          _createClass(_class51, [{
            key: "with",
            value: function _with(alias, table) {
              this._tables.push({ alias, table });
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var parts = [];
              var values = [];
              var _iteratorNormalCompletion17 = true;
              var _didIteratorError17 = false;
              var _iteratorError17 = void 0;
              try {
                for (var _iterator17 = this._tables[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                  var _ref8 = _step17.value;
                  var alias = _ref8.alias;
                  var table = _ref8.table;
                  var ret = table._toParamString({
                    buildParameterized: options.buildParameterized,
                    nested: true
                  });
                  parts.push(alias + " AS " + ret.text);
                  ret.values.forEach(function(value) {
                    return values.push(value);
                  });
                }
              } catch (err) {
                _didIteratorError17 = true;
                _iteratorError17 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion17 && _iterator17.return) {
                    _iterator17.return();
                  }
                } finally {
                  if (_didIteratorError17) {
                    throw _iteratorError17;
                  }
                }
              }
              return {
                text: parts.length ? "WITH " + parts.join(", ") : "",
                values
              };
            }
          }]);
          return _class51;
        }(cls.Block);
        cls.DistinctOnBlock = function(_cls$Block20) {
          _inherits(_class52, _cls$Block20);
          function _class52(options) {
            _classCallCheck(this, _class52);
            var _this58 = _possibleConstructorReturn(this, (_class52.__proto__ || Object.getPrototypeOf(_class52)).call(this, options));
            _this58._distinctFields = [];
            return _this58;
          }
          _createClass(_class52, [{
            key: "distinct",
            value: function distinct() {
              var _this59 = this;
              this._useDistinct = true;
              for (var _len11 = arguments.length, fields = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
                fields[_key11] = arguments[_key11];
              }
              fields.forEach(function(field) {
                _this59._distinctFields.push(_this59._sanitizeField(field));
              });
            }
          }, {
            key: "_toParamString",
            value: function _toParamString() {
              var text = "";
              if (this._useDistinct) {
                text = "DISTINCT";
                if (this._distinctFields.length) {
                  text += " ON (" + this._distinctFields.join(", ") + ")";
                }
              }
              return {
                text,
                values: []
              };
            }
          }]);
          return _class52;
        }(cls.Block);
        cls.Select = function(_cls$QueryBuilder11) {
          _inherits(_class53, _cls$QueryBuilder11);
          function _class53(options) {
            var blocks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            _classCallCheck(this, _class53);
            blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, "SELECT"), new cls.FunctionBlock(options), new cls.DistinctOnBlock(options), new cls.GetFieldBlock(options), new cls.FromTableBlock(options), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.GroupByBlock(options), new cls.HavingBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.OffsetBlock(options), new cls.UnionBlock(options)];
            return _possibleConstructorReturn(this, (_class53.__proto__ || Object.getPrototypeOf(_class53)).call(this, options, blocks));
          }
          return _class53;
        }(cls.QueryBuilder);
        cls.Insert = function(_cls$QueryBuilder12) {
          _inherits(_class54, _cls$QueryBuilder12);
          function _class54(options) {
            var blocks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            _classCallCheck(this, _class54);
            blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, "INSERT"), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options), new cls.PostgresOnConflictKeyUpdateBlock(options), new cls.ReturningBlock(options)];
            return _possibleConstructorReturn(this, (_class54.__proto__ || Object.getPrototypeOf(_class54)).call(this, options, blocks));
          }
          return _class54;
        }(cls.QueryBuilder);
        cls.Update = function(_cls$QueryBuilder13) {
          _inherits(_class55, _cls$QueryBuilder13);
          function _class55(options) {
            var blocks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            _classCallCheck(this, _class55);
            blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, "UPDATE"), new cls.UpdateTableBlock(options), new cls.SetFieldBlock(options), new cls.FromTableBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.ReturningBlock(options)];
            return _possibleConstructorReturn(this, (_class55.__proto__ || Object.getPrototypeOf(_class55)).call(this, options, blocks));
          }
          return _class55;
        }(cls.QueryBuilder);
        cls.Delete = function(_cls$QueryBuilder14) {
          _inherits(_class56, _cls$QueryBuilder14);
          function _class56(options) {
            var blocks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            _classCallCheck(this, _class56);
            blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, "DELETE"), new cls.TargetTableBlock(options), new cls.FromTableBlock(_extend({}, options, {
              singleTable: true
            })), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.ReturningBlock(options)];
            return _possibleConstructorReturn(this, (_class56.__proto__ || Object.getPrototypeOf(_class56)).call(this, options, blocks));
          }
          return _class56;
        }(cls.QueryBuilder);
      };
      return squel;
    });
  }
});

// node_modules/lodash.flow/index.js
var require_lodash3 = __commonJS({
  "node_modules/lodash.flow/index.js"(exports2, module2) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var Symbol2 = root2.Symbol;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    var nativeMax = Math.max;
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    function baseRest(func, start) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }
    function createFlow(fromRight) {
      return baseRest(function(funcs) {
        funcs = baseFlatten(funcs, 1);
        var length = funcs.length, index = length;
        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          if (typeof funcs[index] != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
        }
        return function() {
          var index2 = 0, result = length ? funcs[index2].apply(this, arguments) : arguments[0];
          while (++index2 < length) {
            result = funcs[index2].call(this, result);
          }
          return result;
        };
      });
    }
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    var flow = createFlow();
    module2.exports = flow;
  }
});

// node_modules/lodash.pick/index.js
var require_lodash4 = __commonJS({
  "node_modules/lodash.pick/index.js"(exports2, module2) {
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var symbolTag = "[object Symbol]";
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayMap(array, iteratee) {
      var index = -1, length = array ? array.length : 0, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var Symbol2 = root2.Symbol;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    var nativeMax = Math.max;
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    function basePick(object, props) {
      object = Object(object);
      return basePickBy(object, props, function(value, key) {
        return key in object;
      });
    }
    function basePickBy(object, props, predicate) {
      var index = -1, length = props.length, result = {};
      while (++index < length) {
        var key = props[index], value = object[key];
        if (predicate(value, key)) {
          result[key] = value;
        }
      }
      return result;
    }
    function baseRest(func, start) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    var pick = baseRest(function(object, props) {
      return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
    });
    module2.exports = pick;
  }
});

// node_modules/lodash.omitby/index.js
var require_lodash5 = __commonJS({
  "node_modules/lodash.omitby/index.js"(exports2, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var UNORDERED_COMPARE_FLAG = 1;
    var PARTIAL_COMPARE_FLAG = 2;
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding("util");
      } catch (e5) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arraySome(array, predicate) {
      var index = -1, length = array ? array.length : 0;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    function baseTimes(n11, iteratee) {
      var index = -1, result = Array(n11);
      while (++index < n11) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e5) {
        }
      }
      return result;
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root2["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Symbol2 = root2.Symbol;
    var Uint8Array2 = root2.Uint8Array;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView2 = getNative(root2, "DataView");
    var Map2 = getNative(root2, "Map");
    var Promise2 = getNative(root2, "Promise");
    var Set2 = getNative(root2, "Set");
    var WeakMap2 = getNative(root2, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1, length = values ? values.length : 0;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache();
    }
    function stackDelete(key) {
      return this.__data__["delete"](key);
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGetTag(value) {
      return objectToString.call(value);
    }
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;
      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object), othIsObj = othTag == objectTag && !isHostObject(other), isSameTag = objTag == othTag;
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, void 0, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }
    function basePickBy(object, props, predicate) {
      var index = -1, length = props.length, result = {};
      while (++index < length) {
        var key = props[index], value = object[key];
        if (predicate(value, key)) {
          result[key] = value;
        }
      }
      return result;
    }
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1, result = true, seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!seen.has(othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, objProps = keys(object), objLength = objProps.length, othProps = keys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getMatchData(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function hasPath(object, path, hasFunc) {
      path = isKey(path, object) ? [path] : castPath(path);
      var result, index = -1, length = path.length;
      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    var stringToPath = memoize(function(string) {
      string = toString2(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e5) {
        }
        try {
          return func + "";
        } catch (e5) {
        }
      }
      return "";
    }
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function negate2(predicate) {
      if (typeof predicate != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0:
            return !predicate.call(this);
          case 1:
            return !predicate.call(this, args[0]);
          case 2:
            return !predicate.call(this, args[0], args[1]);
          case 3:
            return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toString2(value) {
      return value == null ? "" : baseToString(value);
    }
    function get(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    function omitBy(object, predicate) {
      return pickBy(object, negate2(baseIteratee(predicate)));
    }
    function pickBy(object, predicate) {
      return object == null ? {} : basePickBy(object, getAllKeysIn(object), baseIteratee(predicate));
    }
    function identity(value) {
      return value;
    }
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    function stubArray() {
      return [];
    }
    module2.exports = omitBy;
  }
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/function-bind/implementation.js"(exports2, module2) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var slice = Array.prototype.slice;
    var toStr = Object.prototype.toString;
    var funcType = "[object Function]";
    module2.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slice.call(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            args.concat(slice.call(arguments))
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        } else {
          return target.apply(
            that,
            args.concat(slice.call(arguments))
          );
        }
      };
      var boundLength = Math.max(0, target.length - args.length);
      var boundArgs = [];
      for (var i8 = 0; i8 < boundLength; i8++) {
        boundArgs.push("$" + i8);
      }
      bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation();
    module2.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports2, module2) {
    "use strict";
    module2.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports2, module2) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module2.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/has-proto/index.js
var require_has_proto = __commonJS({
  "node_modules/has-proto/index.js"(exports2, module2) {
    "use strict";
    var test = {
      foo: {}
    };
    var $Object = Object;
    module2.exports = function hasProto() {
      return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
    };
  }
});

// node_modules/has/src/index.js
var require_src = __commonJS({
  "node_modules/has/src/index.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    module2.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports2, module2) {
    "use strict";
    var undefined2;
    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e5) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e5) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var hasProto = require_has_proto()();
    var getProto = Object.getPrototypeOf || (hasProto ? function(x6) {
      return x6.__proto__;
    } : null);
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": RangeError,
      "%ReferenceError%": ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    if (getProto) {
      try {
        null.error;
      } catch (e5) {
        errorProto = getProto(getProto(e5));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_src();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var $exec = bind.call(Function.call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module2.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i8 = 1, isOwn = true; i8 < parts.length; i8 += 1) {
        var part = parts[i8];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i8 + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var $max = GetIntrinsic("%Math.max%");
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e5) {
        $defineProperty = null;
      }
    }
    module2.exports = function callBind2(originalFunction) {
      var func = $reflectApply(bind, $call, arguments);
      if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, "length");
        if (desc.configurable) {
          $defineProperty(
            func,
            "length",
            { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
          );
        }
      }
      return func;
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", { value: applyBind });
    } else {
      module2.exports.apply = applyBind;
    }
  }
});

// node_modules/es-abstract/5/CheckObjectCoercible.js
var require_CheckObjectCoercible = __commonJS({
  "node_modules/es-abstract/5/CheckObjectCoercible.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $TypeError = GetIntrinsic("%TypeError%");
    module2.exports = function CheckObjectCoercible(value, optMessage) {
      if (value == null) {
        throw new $TypeError(optMessage || "Cannot call method on " + value);
      }
      return value;
    };
  }
});

// node_modules/es-abstract/2023/RequireObjectCoercible.js
var require_RequireObjectCoercible = __commonJS({
  "node_modules/es-abstract/2023/RequireObjectCoercible.js"(exports2, module2) {
    "use strict";
    module2.exports = require_CheckObjectCoercible();
  }
});

// node_modules/es-abstract/2023/ToObject.js
var require_ToObject = __commonJS({
  "node_modules/es-abstract/2023/ToObject.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $Object = GetIntrinsic("%Object%");
    var RequireObjectCoercible = require_RequireObjectCoercible();
    module2.exports = function ToObject(value) {
      RequireObjectCoercible(value);
      return $Object(value);
    };
  }
});

// node_modules/es-to-primitive/helpers/isPrimitive.js
var require_isPrimitive = __commonJS({
  "node_modules/es-to-primitive/helpers/isPrimitive.js"(exports2, module2) {
    "use strict";
    module2.exports = function isPrimitive(value) {
      return value === null || typeof value !== "function" && typeof value !== "object";
    };
  }
});

// node_modules/is-callable/index.js
var require_is_callable = __commonJS({
  "node_modules/is-callable/index.js"(exports2, module2) {
    "use strict";
    var fnToStr = Function.prototype.toString;
    var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
    var badArrayLike;
    var isCallableMarker;
    if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
      try {
        badArrayLike = Object.defineProperty({}, "length", {
          get: function() {
            throw isCallableMarker;
          }
        });
        isCallableMarker = {};
        reflectApply(function() {
          throw 42;
        }, null, badArrayLike);
      } catch (_6) {
        if (_6 !== isCallableMarker) {
          reflectApply = null;
        }
      }
    } else {
      reflectApply = null;
    }
    var constructorRegex = /^\s*class\b/;
    var isES6ClassFn = function isES6ClassFunction(value) {
      try {
        var fnStr = fnToStr.call(value);
        return constructorRegex.test(fnStr);
      } catch (e5) {
        return false;
      }
    };
    var tryFunctionObject = function tryFunctionToStr(value) {
      try {
        if (isES6ClassFn(value)) {
          return false;
        }
        fnToStr.call(value);
        return true;
      } catch (e5) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var objectClass = "[object Object]";
    var fnClass = "[object Function]";
    var genClass = "[object GeneratorFunction]";
    var ddaClass = "[object HTMLAllCollection]";
    var ddaClass2 = "[object HTML document.all class]";
    var ddaClass3 = "[object HTMLCollection]";
    var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
    var isIE68 = !(0 in [,]);
    var isDDA = function isDocumentDotAll() {
      return false;
    };
    if (typeof document === "object") {
      all = document.all;
      if (toStr.call(all) === toStr.call(document.all)) {
        isDDA = function isDocumentDotAll(value) {
          if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
            try {
              var str = toStr.call(value);
              return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
            } catch (e5) {
            }
          }
          return false;
        };
      }
    }
    var all;
    module2.exports = reflectApply ? function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      try {
        reflectApply(value, null, badArrayLike);
      } catch (e5) {
        if (e5 !== isCallableMarker) {
          return false;
        }
      }
      return !isES6ClassFn(value) && tryFunctionObject(value);
    } : function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      if (hasToStringTag) {
        return tryFunctionObject(value);
      }
      if (isES6ClassFn(value)) {
        return false;
      }
      var strClass = toStr.call(value);
      if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
        return false;
      }
      return tryFunctionObject(value);
    };
  }
});

// node_modules/has-tostringtag/shams.js
var require_shams2 = __commonJS({
  "node_modules/has-tostringtag/shams.js"(exports2, module2) {
    "use strict";
    var hasSymbols = require_shams();
    module2.exports = function hasToStringTagShams() {
      return hasSymbols() && !!Symbol.toStringTag;
    };
  }
});

// node_modules/is-date-object/index.js
var require_is_date_object = __commonJS({
  "node_modules/is-date-object/index.js"(exports2, module2) {
    "use strict";
    var getDay = Date.prototype.getDay;
    var tryDateObject = function tryDateGetDayCall(value) {
      try {
        getDay.call(value);
        return true;
      } catch (e5) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var dateClass = "[object Date]";
    var hasToStringTag = require_shams2()();
    module2.exports = function isDateObject(value) {
      if (typeof value !== "object" || value === null) {
        return false;
      }
      return hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;
    };
  }
});

// node_modules/is-symbol/index.js
var require_is_symbol = __commonJS({
  "node_modules/is-symbol/index.js"(exports2, module2) {
    "use strict";
    var toStr = Object.prototype.toString;
    var hasSymbols = require_has_symbols()();
    if (hasSymbols) {
      symToStr = Symbol.prototype.toString;
      symStringRegex = /^Symbol\(.*\)$/;
      isSymbolObject = function isRealSymbolObject(value) {
        if (typeof value.valueOf() !== "symbol") {
          return false;
        }
        return symStringRegex.test(symToStr.call(value));
      };
      module2.exports = function isSymbol(value) {
        if (typeof value === "symbol") {
          return true;
        }
        if (toStr.call(value) !== "[object Symbol]") {
          return false;
        }
        try {
          return isSymbolObject(value);
        } catch (e5) {
          return false;
        }
      };
    } else {
      module2.exports = function isSymbol(value) {
        return false;
      };
    }
    var symToStr;
    var symStringRegex;
    var isSymbolObject;
  }
});

// node_modules/es-to-primitive/es2015.js
var require_es2015 = __commonJS({
  "node_modules/es-to-primitive/es2015.js"(exports2, module2) {
    "use strict";
    var hasSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "symbol";
    var isPrimitive = require_isPrimitive();
    var isCallable = require_is_callable();
    var isDate = require_is_date_object();
    var isSymbol = require_is_symbol();
    var ordinaryToPrimitive = function OrdinaryToPrimitive(O5, hint) {
      if (typeof O5 === "undefined" || O5 === null) {
        throw new TypeError("Cannot call method on " + O5);
      }
      if (typeof hint !== "string" || hint !== "number" && hint !== "string") {
        throw new TypeError('hint must be "string" or "number"');
      }
      var methodNames = hint === "string" ? ["toString", "valueOf"] : ["valueOf", "toString"];
      var method, result, i8;
      for (i8 = 0; i8 < methodNames.length; ++i8) {
        method = O5[methodNames[i8]];
        if (isCallable(method)) {
          result = method.call(O5);
          if (isPrimitive(result)) {
            return result;
          }
        }
      }
      throw new TypeError("No default value");
    };
    var GetMethod = function GetMethod2(O5, P4) {
      var func = O5[P4];
      if (func !== null && typeof func !== "undefined") {
        if (!isCallable(func)) {
          throw new TypeError(func + " returned for property " + P4 + " of object " + O5 + " is not a function");
        }
        return func;
      }
      return void 0;
    };
    module2.exports = function ToPrimitive(input) {
      if (isPrimitive(input)) {
        return input;
      }
      var hint = "default";
      if (arguments.length > 1) {
        if (arguments[1] === String) {
          hint = "string";
        } else if (arguments[1] === Number) {
          hint = "number";
        }
      }
      var exoticToPrim;
      if (hasSymbols) {
        if (Symbol.toPrimitive) {
          exoticToPrim = GetMethod(input, Symbol.toPrimitive);
        } else if (isSymbol(input)) {
          exoticToPrim = Symbol.prototype.valueOf;
        }
      }
      if (typeof exoticToPrim !== "undefined") {
        var result = exoticToPrim.call(input, hint);
        if (isPrimitive(result)) {
          return result;
        }
        throw new TypeError("unable to convert exotic object to primitive");
      }
      if (hint === "default" && (isDate(input) || isSymbol(input))) {
        hint = "string";
      }
      return ordinaryToPrimitive(input, hint === "default" ? "number" : hint);
    };
  }
});

// node_modules/es-abstract/2023/ToPrimitive.js
var require_ToPrimitive = __commonJS({
  "node_modules/es-abstract/2023/ToPrimitive.js"(exports2, module2) {
    "use strict";
    var toPrimitive = require_es2015();
    module2.exports = function ToPrimitive(input) {
      if (arguments.length > 1) {
        return toPrimitive(input, arguments[1]);
      }
      return toPrimitive(input);
    };
  }
});

// node_modules/es-abstract/2023/ToString.js
var require_ToString = __commonJS({
  "node_modules/es-abstract/2023/ToString.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $String = GetIntrinsic("%String%");
    var $TypeError = GetIntrinsic("%TypeError%");
    module2.exports = function ToString(argument) {
      if (typeof argument === "symbol") {
        throw new $TypeError("Cannot convert a Symbol value to a string");
      }
      return $String(argument);
    };
  }
});

// node_modules/es-abstract/2023/ToPropertyKey.js
var require_ToPropertyKey = __commonJS({
  "node_modules/es-abstract/2023/ToPropertyKey.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $String = GetIntrinsic("%String%");
    var ToPrimitive = require_ToPrimitive();
    var ToString = require_ToString();
    module2.exports = function ToPropertyKey(argument) {
      var key = ToPrimitive(argument, $String);
      return typeof key === "symbol" ? key : ToString(key);
    };
  }
});

// node_modules/es-abstract/2023/IsPropertyKey.js
var require_IsPropertyKey = __commonJS({
  "node_modules/es-abstract/2023/IsPropertyKey.js"(exports2, module2) {
    "use strict";
    module2.exports = function IsPropertyKey(argument) {
      return typeof argument === "string" || typeof argument === "symbol";
    };
  }
});

// node_modules/es-abstract/5/Type.js
var require_Type = __commonJS({
  "node_modules/es-abstract/5/Type.js"(exports2, module2) {
    "use strict";
    module2.exports = function Type(x6) {
      if (x6 === null) {
        return "Null";
      }
      if (typeof x6 === "undefined") {
        return "Undefined";
      }
      if (typeof x6 === "function" || typeof x6 === "object") {
        return "Object";
      }
      if (typeof x6 === "number") {
        return "Number";
      }
      if (typeof x6 === "boolean") {
        return "Boolean";
      }
      if (typeof x6 === "string") {
        return "String";
      }
    };
  }
});

// node_modules/es-abstract/2023/Type.js
var require_Type2 = __commonJS({
  "node_modules/es-abstract/2023/Type.js"(exports2, module2) {
    "use strict";
    var ES5Type = require_Type();
    module2.exports = function Type(x6) {
      if (typeof x6 === "symbol") {
        return "Symbol";
      }
      if (typeof x6 === "bigint") {
        return "BigInt";
      }
      return ES5Type(x6);
    };
  }
});

// node_modules/es-abstract/2023/HasOwnProperty.js
var require_HasOwnProperty = __commonJS({
  "node_modules/es-abstract/2023/HasOwnProperty.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $TypeError = GetIntrinsic("%TypeError%");
    var has = require_src();
    var IsPropertyKey = require_IsPropertyKey();
    var Type = require_Type2();
    module2.exports = function HasOwnProperty(O5, P4) {
      if (Type(O5) !== "Object") {
        throw new $TypeError("Assertion failed: `O` must be an Object");
      }
      if (!IsPropertyKey(P4)) {
        throw new $TypeError("Assertion failed: `P` must be a Property Key");
      }
      return has(O5, P4);
    };
  }
});

// node_modules/object.hasown/implementation.js
var require_implementation2 = __commonJS({
  "node_modules/object.hasown/implementation.js"(exports2, module2) {
    "use strict";
    var ToObject = require_ToObject();
    var ToPropertyKey = require_ToPropertyKey();
    var HasOwnProperty = require_HasOwnProperty();
    module2.exports = function hasOwn(O5, P4) {
      var obj = ToObject(O5);
      var key = ToPropertyKey(P4);
      return HasOwnProperty(obj, key);
    };
  }
});

// node_modules/object.hasown/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/object.hasown/polyfill.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation2();
    module2.exports = function getPolyfill2() {
      return Object.hasOwn || implementation;
    };
  }
});

// node_modules/object-keys/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/object-keys/isArguments.js"(exports2, module2) {
    "use strict";
    var toStr = Object.prototype.toString;
    module2.exports = function isArguments(value) {
      var str = toStr.call(value);
      var isArgs = str === "[object Arguments]";
      if (!isArgs) {
        isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
      }
      return isArgs;
    };
  }
});

// node_modules/object-keys/implementation.js
var require_implementation3 = __commonJS({
  "node_modules/object-keys/implementation.js"(exports2, module2) {
    "use strict";
    var keysShim;
    if (!Object.keys) {
      has = Object.prototype.hasOwnProperty;
      toStr = Object.prototype.toString;
      isArgs = require_isArguments();
      isEnumerable = Object.prototype.propertyIsEnumerable;
      hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
      hasProtoEnumBug = isEnumerable.call(function() {
      }, "prototype");
      dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      equalsConstructorPrototype = function(o9) {
        var ctor = o9.constructor;
        return ctor && ctor.prototype === o9;
      };
      excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
      };
      hasAutomationEqualityBug = function() {
        if (typeof window === "undefined") {
          return false;
        }
        for (var k3 in window) {
          try {
            if (!excludedKeys["$" + k3] && has.call(window, k3) && window[k3] !== null && typeof window[k3] === "object") {
              try {
                equalsConstructorPrototype(window[k3]);
              } catch (e5) {
                return true;
              }
            }
          } catch (e5) {
            return true;
          }
        }
        return false;
      }();
      equalsConstructorPrototypeIfNotBuggy = function(o9) {
        if (typeof window === "undefined" || !hasAutomationEqualityBug) {
          return equalsConstructorPrototype(o9);
        }
        try {
          return equalsConstructorPrototype(o9);
        } catch (e5) {
          return false;
        }
      };
      keysShim = function keys(object) {
        var isObject = object !== null && typeof object === "object";
        var isFunction = toStr.call(object) === "[object Function]";
        var isArguments = isArgs(object);
        var isString = isObject && toStr.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject && !isFunction && !isArguments) {
          throw new TypeError("Object.keys called on a non-object");
        }
        var skipProto = hasProtoEnumBug && isFunction;
        if (isString && object.length > 0 && !has.call(object, 0)) {
          for (var i8 = 0; i8 < object.length; ++i8) {
            theKeys.push(String(i8));
          }
        }
        if (isArguments && object.length > 0) {
          for (var j5 = 0; j5 < object.length; ++j5) {
            theKeys.push(String(j5));
          }
        } else {
          for (var name in object) {
            if (!(skipProto && name === "prototype") && has.call(object, name)) {
              theKeys.push(String(name));
            }
          }
        }
        if (hasDontEnumBug) {
          var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
          for (var k3 = 0; k3 < dontEnums.length; ++k3) {
            if (!(skipConstructor && dontEnums[k3] === "constructor") && has.call(object, dontEnums[k3])) {
              theKeys.push(dontEnums[k3]);
            }
          }
        }
        return theKeys;
      };
    }
    var has;
    var toStr;
    var isArgs;
    var isEnumerable;
    var hasDontEnumBug;
    var hasProtoEnumBug;
    var dontEnums;
    var equalsConstructorPrototype;
    var excludedKeys;
    var hasAutomationEqualityBug;
    var equalsConstructorPrototypeIfNotBuggy;
    module2.exports = keysShim;
  }
});

// node_modules/object-keys/index.js
var require_object_keys = __commonJS({
  "node_modules/object-keys/index.js"(exports2, module2) {
    "use strict";
    var slice = Array.prototype.slice;
    var isArgs = require_isArguments();
    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o9) {
      return origKeys(o9);
    } : require_implementation3();
    var originalKeys = Object.keys;
    keysShim.shim = function shimObjectKeys() {
      if (Object.keys) {
        var keysWorksWithArguments = function() {
          var args = Object.keys(arguments);
          return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) {
          Object.keys = function keys(object) {
            if (isArgs(object)) {
              return originalKeys(slice.call(object));
            }
            return originalKeys(object);
          };
        }
      } else {
        Object.keys = keysShim;
      }
      return Object.keys || keysShim;
    };
    module2.exports = keysShim;
  }
});

// node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "node_modules/has-property-descriptors/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      if ($defineProperty) {
        try {
          $defineProperty({}, "a", { value: 1 });
          return true;
        } catch (e5) {
          return false;
        }
      }
      return false;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!hasPropertyDescriptors()) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e5) {
        return true;
      }
    };
    module2.exports = hasPropertyDescriptors;
  }
});

// node_modules/define-properties/index.js
var require_define_properties = __commonJS({
  "node_modules/define-properties/index.js"(exports2, module2) {
    "use strict";
    var keys = require_object_keys();
    var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    var toStr = Object.prototype.toString;
    var concat = Array.prototype.concat;
    var origDefineProperty = Object.defineProperty;
    var isFunction = function(fn) {
      return typeof fn === "function" && toStr.call(fn) === "[object Function]";
    };
    var hasPropertyDescriptors = require_has_property_descriptors()();
    var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;
    var defineProperty = function(object, name, value, predicate) {
      if (name in object) {
        if (predicate === true) {
          if (object[name] === value) {
            return;
          }
        } else if (!isFunction(predicate) || !predicate()) {
          return;
        }
      }
      if (supportsDescriptors) {
        origDefineProperty(object, name, {
          configurable: true,
          enumerable: false,
          value,
          writable: true
        });
      } else {
        object[name] = value;
      }
    };
    var defineProperties = function(object, map) {
      var predicates = arguments.length > 2 ? arguments[2] : {};
      var props = keys(map);
      if (hasSymbols) {
        props = concat.call(props, Object.getOwnPropertySymbols(map));
      }
      for (var i8 = 0; i8 < props.length; i8 += 1) {
        defineProperty(object, props[i8], map[props[i8]], predicates[props[i8]]);
      }
    };
    defineProperties.supportsDescriptors = !!supportsDescriptors;
    module2.exports = defineProperties;
  }
});

// node_modules/object.hasown/shim.js
var require_shim = __commonJS({
  "node_modules/object.hasown/shim.js"(exports2, module2) {
    "use strict";
    var getPolyfill2 = require_polyfill();
    var define2 = require_define_properties();
    module2.exports = function shimObjectHasOwn() {
      var polyfill = getPolyfill2();
      define2(
        Object,
        { hasOwn: polyfill },
        { hasOwn: function() {
          return Object.hasOwn !== polyfill;
        } }
      );
      return polyfill;
    };
  }
});

// node_modules/lodash.mapvalues/index.js
var require_lodash6 = __commonJS({
  "node_modules/lodash.mapvalues/index.js"(exports2, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var UNORDERED_COMPARE_FLAG = 1;
    var PARTIAL_COMPARE_FLAG = 2;
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding("util");
      } catch (e5) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arraySome(array, predicate) {
      var index = -1, length = array ? array.length : 0;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    function baseTimes(n11, iteratee) {
      var index = -1, result = Array(n11);
      while (++index < n11) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e5) {
        }
      }
      return result;
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root2["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Symbol2 = root2.Symbol;
    var Uint8Array2 = root2.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView2 = getNative(root2, "DataView");
    var Map2 = getNative(root2, "Map");
    var Promise2 = getNative(root2, "Promise");
    var Set2 = getNative(root2, "Set");
    var WeakMap2 = getNative(root2, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1, length = values ? values.length : 0;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache();
    }
    function stackDelete(key) {
      return this.__data__["delete"](key);
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    var baseFor = createBaseFor();
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    function baseGetTag(value) {
      return objectToString.call(value);
    }
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;
      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object), othIsObj = othTag == objectTag && !isHostObject(other), isSameTag = objTag == othTag;
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, void 0, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1, result = true, seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!seen.has(othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, objProps = keys(object), objLength = objProps.length, othProps = keys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getMatchData(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function hasPath(object, path, hasFunc) {
      path = isKey(path, object) ? [path] : castPath(path);
      var result, index = -1, length = path.length;
      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    var stringToPath = memoize(function(string) {
      string = toString2(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e5) {
        }
        try {
          return func + "";
        } catch (e5) {
        }
      }
      return "";
    }
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toString2(value) {
      return value == null ? "" : baseToString(value);
    }
    function get(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = baseIteratee(iteratee, 3);
      baseForOwn(object, function(value, key, object2) {
        result[key] = iteratee(value, key, object2);
      });
      return result;
    }
    function identity(value) {
      return value;
    }
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    module2.exports = mapValues;
  }
});

// node_modules/lodash.partition/index.js
var require_lodash7 = __commonJS({
  "node_modules/lodash.partition/index.js"(exports2, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var UNORDERED_COMPARE_FLAG = 1;
    var PARTIAL_COMPARE_FLAG = 2;
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding("util");
      } catch (e5) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1, length = array ? array.length : 0;
      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }
    function arraySome(array, predicate) {
      var index = -1, length = array ? array.length : 0;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    function baseTimes(n11, iteratee) {
      var index = -1, result = Array(n11);
      while (++index < n11) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e5) {
        }
      }
      return result;
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root2["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Symbol2 = root2.Symbol;
    var Uint8Array2 = root2.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView2 = getNative(root2, "DataView");
    var Map2 = getNative(root2, "Map");
    var Promise2 = getNative(root2, "Promise");
    var Set2 = getNative(root2, "Set");
    var WeakMap2 = getNative(root2, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1, length = values ? values.length : 0;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache();
    }
    function stackDelete(key) {
      return this.__data__["delete"](key);
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection2) {
        setter(accumulator, value, iteratee(value), collection2);
      });
      return accumulator;
    }
    var baseEach = createBaseEach(baseForOwn);
    var baseFor = createBaseFor();
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    function baseGetTag(value) {
      return objectToString.call(value);
    }
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;
      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object), othIsObj = othTag == objectTag && !isHostObject(other), isSameTag = objTag == othTag;
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, void 0, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
        return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
      };
    }
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1, result = true, seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!seen.has(othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, objProps = keys(object), objLength = objProps.length, othProps = keys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getMatchData(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function hasPath(object, path, hasFunc) {
      path = isKey(path, object) ? [path] : castPath(path);
      var result, index = -1, length = path.length;
      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    var stringToPath = memoize(function(string) {
      string = toString2(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e5) {
        }
        try {
          return func + "";
        } catch (e5) {
        }
      }
      return "";
    }
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() {
      return [[], []];
    });
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toString2(value) {
      return value == null ? "" : baseToString(value);
    }
    function get(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function identity(value) {
      return value;
    }
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    module2.exports = partition;
  }
});

// node_modules/lodash.groupby/index.js
var require_lodash8 = __commonJS({
  "node_modules/lodash.groupby/index.js"(exports2, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var UNORDERED_COMPARE_FLAG = 1;
    var PARTIAL_COMPARE_FLAG = 2;
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding("util");
      } catch (e5) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1, length = array ? array.length : 0;
      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }
    function arraySome(array, predicate) {
      var index = -1, length = array ? array.length : 0;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    function baseTimes(n11, iteratee) {
      var index = -1, result = Array(n11);
      while (++index < n11) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e5) {
        }
      }
      return result;
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root2["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Symbol2 = root2.Symbol;
    var Uint8Array2 = root2.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView2 = getNative(root2, "DataView");
    var Map2 = getNative(root2, "Map");
    var Promise2 = getNative(root2, "Promise");
    var Set2 = getNative(root2, "Set");
    var WeakMap2 = getNative(root2, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1, length = values ? values.length : 0;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache();
    }
    function stackDelete(key) {
      return this.__data__["delete"](key);
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection2) {
        setter(accumulator, value, iteratee(value), collection2);
      });
      return accumulator;
    }
    var baseEach = createBaseEach(baseForOwn);
    var baseFor = createBaseFor();
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    function baseGetTag(value) {
      return objectToString.call(value);
    }
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;
      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object), othIsObj = othTag == objectTag && !isHostObject(other), isSameTag = objTag == othTag;
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, void 0, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
        return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
      };
    }
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1, result = true, seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!seen.has(othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, objProps = keys(object), objLength = objProps.length, othProps = keys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getMatchData(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function hasPath(object, path, hasFunc) {
      path = isKey(path, object) ? [path] : castPath(path);
      var result, index = -1, length = path.length;
      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    var stringToPath = memoize(function(string) {
      string = toString2(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e5) {
        }
        try {
          return func + "";
        } catch (e5) {
        }
      }
      return "";
    }
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toString2(value) {
      return value == null ? "" : baseToString(value);
    }
    function get(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function identity(value) {
      return value;
    }
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    module2.exports = groupBy;
  }
});

// src/index.tsx
var import_react15 = __toESM(require_react());
var import_client7 = __toESM(require_client());

// src/App.tsx
var import_react14 = __toESM(require_react());

// src/logo.svg
var logo_default = 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg"%0A    viewBox="0 0 264 264"%0A    width="132"%0A    height="132">%0A  <path d="M136.992 53.1244C137.711 52.4029 138.683 52 139.692 52H200L114.008 138.089C113.289 138.811 112.317 139.213 111.308 139.213H51L136.992 53.1244Z"%0A      fill="%2300D2A0"%0A  />%0A  <path d="M126.416 141.125C126.416 140.066 127.275 139.204 128.331 139.204H200L126.416 213V141.125Z"%0A      fill="%2300D2A0"%0A  />%0A</svg>%0A';

// src/Example.tsx
var import_react12 = __toESM(require_react());

// node_modules/electric-sql/dist/frameworks/react/hooks/useConnectivityState.js
var import_react2 = __toESM(require_react(), 1);

// node_modules/electric-sql/dist/frameworks/react/provider.js
var import_react = __toESM(require_react(), 1);
var c = (0, import_react.createContext)(void 0);
function s() {
  const e5 = (0, import_react.createContext)(void 0);
  return c = e5, { ElectricContext: e5, useElectric: () => (0, import_react.useContext)(e5), ElectricProvider: ({ children: n11, db: i8 }) => import_react.default.createElement(e5.Provider, { value: i8 }, n11) };
}

// node_modules/electric-sql/dist/frameworks/react/hooks/useConnectivityState.js
var e = { available: "available", connected: "connected", disconnected: "disconnected" };
var u = Object.values(e);

// node_modules/electric-sql/dist/frameworks/react/hooks/useLiveQuery.js
var import_react3 = __toESM(require_react(), 1);

// node_modules/ohash/dist/index.mjs
var defaults = Object.freeze({
  ignoreUnknown: false,
  respectType: false,
  respectFunctionNames: false,
  respectFunctionProperties: false,
  unorderedObjects: true,
  unorderedArrays: false,
  unorderedSets: false,
  excludeKeys: void 0,
  excludeValues: void 0,
  replacer: void 0
});
function objectHash(object, options) {
  if (options) {
    options = { ...defaults, ...options };
  } else {
    options = defaults;
  }
  const hasher = createHasher(options);
  hasher.dispatch(object);
  return hasher.toString();
}
var defaultPrototypesKeys = Object.freeze([
  "prototype",
  "__proto__",
  "constructor"
]);
function createHasher(options) {
  let buff = "";
  let context = /* @__PURE__ */ new Map();
  const write = (str) => {
    buff += str;
  };
  return {
    toString() {
      return buff;
    },
    getContext() {
      return context;
    },
    dispatch(value) {
      if (options.replacer) {
        value = options.replacer(value);
      }
      const type = value === null ? "null" : typeof value;
      return this[type](value);
    },
    object(object) {
      if (object && typeof object.toJSON === "function") {
        return this.object(object.toJSON());
      }
      const objString = Object.prototype.toString.call(object);
      let objType = "";
      const objectLength = objString.length;
      if (objectLength < 10) {
        objType = "unknown:[" + objString + "]";
      } else {
        objType = objString.slice(8, objectLength - 1);
      }
      objType = objType.toLowerCase();
      let objectNumber = null;
      if ((objectNumber = context.get(object)) === void 0) {
        context.set(object, context.size);
      } else {
        return this.dispatch("[CIRCULAR:" + objectNumber + "]");
      }
      if (typeof Buffer !== "undefined" && Buffer.isBuffer && Buffer.isBuffer(object)) {
        write("buffer:");
        return write(object.toString("utf8"));
      }
      if (objType !== "object" && objType !== "function" && objType !== "asyncfunction") {
        if (this[objType]) {
          this[objType](object);
        } else if (!options.ignoreUnknown) {
          this.unkown(object, objType);
        }
      } else {
        let keys = Object.keys(object);
        if (options.unorderedObjects) {
          keys = keys.sort();
        }
        let extraKeys = [];
        if (options.respectType !== false && !isNativeFunction(object)) {
          extraKeys = defaultPrototypesKeys;
        }
        if (options.excludeKeys) {
          keys = keys.filter((key) => {
            return !options.excludeKeys(key);
          });
          extraKeys = extraKeys.filter((key) => {
            return !options.excludeKeys(key);
          });
        }
        write("object:" + (keys.length + extraKeys.length) + ":");
        const dispatchForKey = (key) => {
          this.dispatch(key);
          write(":");
          if (!options.excludeValues) {
            this.dispatch(object[key]);
          }
          write(",");
        };
        for (const key of keys) {
          dispatchForKey(key);
        }
        for (const key of extraKeys) {
          dispatchForKey(key);
        }
      }
    },
    array(arr, unordered) {
      unordered = unordered === void 0 ? options.unorderedArrays !== false : unordered;
      write("array:" + arr.length + ":");
      if (!unordered || arr.length <= 1) {
        for (const entry of arr) {
          this.dispatch(entry);
        }
        return;
      }
      const contextAdditions = /* @__PURE__ */ new Map();
      const entries = arr.map((entry) => {
        const hasher = createHasher(options);
        hasher.dispatch(entry);
        for (const [key, value] of hasher.getContext()) {
          contextAdditions.set(key, value);
        }
        return hasher.toString();
      });
      context = contextAdditions;
      entries.sort();
      return this.array(entries, false);
    },
    date(date) {
      return write("date:" + date.toJSON());
    },
    symbol(sym) {
      return write("symbol:" + sym.toString());
    },
    unkown(value, type) {
      write(type);
      if (!value) {
        return;
      }
      write(":");
      if (value && typeof value.entries === "function") {
        return this.array(
          Array.from(value.entries()),
          true
          /* ordered */
        );
      }
    },
    error(err) {
      return write("error:" + err.toString());
    },
    boolean(bool) {
      return write("bool:" + bool);
    },
    string(string) {
      write("string:" + string.length + ":");
      write(string);
    },
    function(fn) {
      write("fn:");
      if (isNativeFunction(fn)) {
        this.dispatch("[native]");
      } else {
        this.dispatch(fn.toString());
      }
      if (options.respectFunctionNames !== false) {
        this.dispatch("function-name:" + String(fn.name));
      }
      if (options.respectFunctionProperties) {
        this.object(fn);
      }
    },
    number(number) {
      return write("number:" + number);
    },
    xml(xml) {
      return write("xml:" + xml.toString());
    },
    null() {
      return write("Null");
    },
    undefined() {
      return write("Undefined");
    },
    regexp(regex) {
      return write("regex:" + regex.toString());
    },
    uint8array(arr) {
      write("uint8array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    uint8clampedarray(arr) {
      write("uint8clampedarray:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    int8array(arr) {
      write("int8array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    uint16array(arr) {
      write("uint16array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    int16array(arr) {
      write("int16array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    uint32array(arr) {
      write("uint32array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    int32array(arr) {
      write("int32array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    float32array(arr) {
      write("float32array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    float64array(arr) {
      write("float64array:");
      return this.dispatch(Array.prototype.slice.call(arr));
    },
    arraybuffer(arr) {
      write("arraybuffer:");
      return this.dispatch(new Uint8Array(arr));
    },
    url(url) {
      return write("url:" + url.toString());
    },
    map(map) {
      write("map:");
      const arr = [...map];
      return this.array(arr, options.unorderedSets !== false);
    },
    set(set) {
      write("set:");
      const arr = [...set];
      return this.array(arr, options.unorderedSets !== false);
    },
    file(file) {
      write("file:");
      return this.dispatch([file.name, file.size, file.type, file.lastModfied]);
    },
    blob() {
      if (options.ignoreUnknown) {
        return write("[blob]");
      }
      throw new Error(
        'Hashing Blob objects is currently not supported\nUse "options.replacer" or "options.ignoreUnknown"\n'
      );
    },
    domwindow() {
      return write("domwindow");
    },
    bigint(number) {
      return write("bigint:" + number.toString());
    },
    /* Node.js standard native objects */
    process() {
      return write("process");
    },
    timer() {
      return write("timer");
    },
    pipe() {
      return write("pipe");
    },
    tcp() {
      return write("tcp");
    },
    udp() {
      return write("udp");
    },
    tty() {
      return write("tty");
    },
    statwatcher() {
      return write("statwatcher");
    },
    securecontext() {
      return write("securecontext");
    },
    connection() {
      return write("connection");
    },
    zlib() {
      return write("zlib");
    },
    context() {
      return write("context");
    },
    nodescript() {
      return write("nodescript");
    },
    httpparser() {
      return write("httpparser");
    },
    dataview() {
      return write("dataview");
    },
    signal() {
      return write("signal");
    },
    fsevent() {
      return write("fsevent");
    },
    tlswrap() {
      return write("tlswrap");
    }
  };
}
var nativeFunc = "[native code] }";
var nativeFuncLength = nativeFunc.length;
function isNativeFunction(f6) {
  if (typeof f6 !== "function") {
    return false;
  }
  return Function.prototype.toString.call(f6).slice(-nativeFuncLength) === nativeFunc;
}
var WordArray = class {
  constructor(words, sigBytes) {
    words = this.words = words || [];
    this.sigBytes = sigBytes === void 0 ? words.length * 4 : sigBytes;
  }
  toString(encoder) {
    return (encoder || Hex).stringify(this);
  }
  concat(wordArray) {
    this.clamp();
    if (this.sigBytes % 4) {
      for (let i8 = 0; i8 < wordArray.sigBytes; i8++) {
        const thatByte = wordArray.words[i8 >>> 2] >>> 24 - i8 % 4 * 8 & 255;
        this.words[this.sigBytes + i8 >>> 2] |= thatByte << 24 - (this.sigBytes + i8) % 4 * 8;
      }
    } else {
      for (let j5 = 0; j5 < wordArray.sigBytes; j5 += 4) {
        this.words[this.sigBytes + j5 >>> 2] = wordArray.words[j5 >>> 2];
      }
    }
    this.sigBytes += wordArray.sigBytes;
    return this;
  }
  clamp() {
    this.words[this.sigBytes >>> 2] &= 4294967295 << 32 - this.sigBytes % 4 * 8;
    this.words.length = Math.ceil(this.sigBytes / 4);
  }
  clone() {
    return new WordArray([...this.words]);
  }
};
var Hex = {
  stringify(wordArray) {
    const hexChars = [];
    for (let i8 = 0; i8 < wordArray.sigBytes; i8++) {
      const bite = wordArray.words[i8 >>> 2] >>> 24 - i8 % 4 * 8 & 255;
      hexChars.push((bite >>> 4).toString(16), (bite & 15).toString(16));
    }
    return hexChars.join("");
  }
};
var Base64 = {
  stringify(wordArray) {
    const keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    const base64Chars = [];
    for (let i8 = 0; i8 < wordArray.sigBytes; i8 += 3) {
      const byte1 = wordArray.words[i8 >>> 2] >>> 24 - i8 % 4 * 8 & 255;
      const byte2 = wordArray.words[i8 + 1 >>> 2] >>> 24 - (i8 + 1) % 4 * 8 & 255;
      const byte3 = wordArray.words[i8 + 2 >>> 2] >>> 24 - (i8 + 2) % 4 * 8 & 255;
      const triplet = byte1 << 16 | byte2 << 8 | byte3;
      for (let j5 = 0; j5 < 4 && i8 * 8 + j5 * 6 < wordArray.sigBytes * 8; j5++) {
        base64Chars.push(keyStr.charAt(triplet >>> 6 * (3 - j5) & 63));
      }
    }
    return base64Chars.join("");
  }
};
var Latin1 = {
  parse(latin1Str) {
    const latin1StrLength = latin1Str.length;
    const words = [];
    for (let i8 = 0; i8 < latin1StrLength; i8++) {
      words[i8 >>> 2] |= (latin1Str.charCodeAt(i8) & 255) << 24 - i8 % 4 * 8;
    }
    return new WordArray(words, latin1StrLength);
  }
};
var Utf8 = {
  parse(utf8Str) {
    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
  }
};
var BufferedBlockAlgorithm = class {
  constructor() {
    this._data = new WordArray();
    this._nDataBytes = 0;
    this._minBufferSize = 0;
    this.blockSize = 512 / 32;
  }
  reset() {
    this._data = new WordArray();
    this._nDataBytes = 0;
  }
  _append(data) {
    if (typeof data === "string") {
      data = Utf8.parse(data);
    }
    this._data.concat(data);
    this._nDataBytes += data.sigBytes;
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _doProcessBlock(_dataWords, _offset) {
  }
  _process(doFlush) {
    let processedWords;
    let nBlocksReady = this._data.sigBytes / (this.blockSize * 4);
    if (doFlush) {
      nBlocksReady = Math.ceil(nBlocksReady);
    } else {
      nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
    }
    const nWordsReady = nBlocksReady * this.blockSize;
    const nBytesReady = Math.min(nWordsReady * 4, this._data.sigBytes);
    if (nWordsReady) {
      for (let offset = 0; offset < nWordsReady; offset += this.blockSize) {
        this._doProcessBlock(this._data.words, offset);
      }
      processedWords = this._data.words.splice(0, nWordsReady);
      this._data.sigBytes -= nBytesReady;
    }
    return new WordArray(processedWords, nBytesReady);
  }
};
var Hasher = class extends BufferedBlockAlgorithm {
  update(messageUpdate) {
    this._append(messageUpdate);
    this._process();
    return this;
  }
  finalize(messageUpdate) {
    if (messageUpdate) {
      this._append(messageUpdate);
    }
  }
};
var H = [
  1779033703,
  -1150833019,
  1013904242,
  -1521486534,
  1359893119,
  -1694144372,
  528734635,
  1541459225
];
var K = [
  1116352408,
  1899447441,
  -1245643825,
  -373957723,
  961987163,
  1508970993,
  -1841331548,
  -1424204075,
  -670586216,
  310598401,
  607225278,
  1426881987,
  1925078388,
  -2132889090,
  -1680079193,
  -1046744716,
  -459576895,
  -272742522,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  -1740746414,
  -1473132947,
  -1341970488,
  -1084653625,
  -958395405,
  -710438585,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  -2117940946,
  -1838011259,
  -1564481375,
  -1474664885,
  -1035236496,
  -949202525,
  -778901479,
  -694614492,
  -200395387,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  -2067236844,
  -1933114872,
  -1866530822,
  -1538233109,
  -1090935817,
  -965641998
];
var W = [];
var SHA256 = class extends Hasher {
  constructor() {
    super(...arguments);
    this._hash = new WordArray([...H]);
  }
  reset() {
    super.reset();
    this._hash = new WordArray([...H]);
  }
  _doProcessBlock(M3, offset) {
    const H22 = this._hash.words;
    let a5 = H22[0];
    let b9 = H22[1];
    let c8 = H22[2];
    let d8 = H22[3];
    let e5 = H22[4];
    let f6 = H22[5];
    let g9 = H22[6];
    let h8 = H22[7];
    for (let i8 = 0; i8 < 64; i8++) {
      if (i8 < 16) {
        W[i8] = M3[offset + i8] | 0;
      } else {
        const gamma0x = W[i8 - 15];
        const gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
        const gamma1x = W[i8 - 2];
        const gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
        W[i8] = gamma0 + W[i8 - 7] + gamma1 + W[i8 - 16];
      }
      const ch = e5 & f6 ^ ~e5 & g9;
      const maj = a5 & b9 ^ a5 & c8 ^ b9 & c8;
      const sigma0 = (a5 << 30 | a5 >>> 2) ^ (a5 << 19 | a5 >>> 13) ^ (a5 << 10 | a5 >>> 22);
      const sigma1 = (e5 << 26 | e5 >>> 6) ^ (e5 << 21 | e5 >>> 11) ^ (e5 << 7 | e5 >>> 25);
      const t1 = h8 + sigma1 + ch + K[i8] + W[i8];
      const t22 = sigma0 + maj;
      h8 = g9;
      g9 = f6;
      f6 = e5;
      e5 = d8 + t1 | 0;
      d8 = c8;
      c8 = b9;
      b9 = a5;
      a5 = t1 + t22 | 0;
    }
    H22[0] = H22[0] + a5 | 0;
    H22[1] = H22[1] + b9 | 0;
    H22[2] = H22[2] + c8 | 0;
    H22[3] = H22[3] + d8 | 0;
    H22[4] = H22[4] + e5 | 0;
    H22[5] = H22[5] + f6 | 0;
    H22[6] = H22[6] + g9 | 0;
    H22[7] = H22[7] + h8 | 0;
  }
  finalize(messageUpdate) {
    super.finalize(messageUpdate);
    const nBitsTotal = this._nDataBytes * 8;
    const nBitsLeft = this._data.sigBytes * 8;
    this._data.words[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
    this._data.words[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(
      nBitsTotal / 4294967296
    );
    this._data.words[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
    this._data.sigBytes = this._data.words.length * 4;
    this._process();
    return this._hash;
  }
};
function sha256base64(message) {
  return new SHA256().finalize(message).toString(Base64);
}
function hash(object, options = {}) {
  const hashed = typeof object === "string" ? object : objectHash(object, options);
  return sha256base64(hashed).slice(0, 10);
}

// node_modules/electric-sql/dist/util/tablename.js
var b = class {
  namespace;
  tablename;
  constructor(e5, a5) {
    this.namespace = e5, this.tablename = a5;
  }
  isEqual({ namespace: e5, tablename: a5 }) {
    return e5 === this.namespace && a5 === this.tablename;
  }
  toString() {
    return `${this.namespace}.${this.tablename}`;
  }
};
var u2 = (n11, e5) => {
  const a5 = n11.length, s7 = e5.length;
  for (let t3 = 0; t3 < a5; ++t3) {
    const i8 = n11[t3];
    for (let l7 = 0; l7 < s7; ++l7) {
      const m10 = e5[l7];
      if (i8.isEqual(m10))
        return true;
    }
  }
  return false;
};

// node_modules/electric-sql/dist/frameworks/react/hooks/useLiveQuery.js
function m(e5) {
  return { error: void 0, results: e5, updatedAt: new Date() };
}
function D(e5) {
  return { error: e5, results: void 0, updatedAt: new Date() };
}
function k(e5, s7) {
  return s7 ? H2(e5, s7) : S(e5);
}
function H2(e5, s7) {
  const n11 = (0, import_react3.useMemo)(e5, s7);
  return h(n11, [n11]);
}
function S(e5) {
  const [s7, n11] = (0, import_react3.useState)(() => hash(e5.sourceQuery));
  return (0, import_react3.useEffect)(() => {
    const a5 = hash(e5.sourceQuery);
    a5 !== s7 && n11(a5);
  }, [e5.sourceQuery]), h(e5, [s7]);
}
function h(e5, s7) {
  const n11 = (0, import_react3.useContext)(c), [a5, L2] = (0, import_react3.useState)(), [l7, C9] = (0, import_react3.useState)(), [f6, b9] = (0, import_react3.useState)(), [p10, o9] = (0, import_react3.useState)({});
  (0, import_react3.useEffect)(() => {
    let t3 = false;
    return (async () => {
      try {
        const u8 = await e5(), c8 = JSON.stringify(u8.tablenames);
        t3 || C9(u8.tablenames), t3 || b9(c8), t3 || o9(m(u8.result));
      } catch (u8) {
        t3 || o9(D(u8));
      }
    })(), () => {
      t3 = true;
    };
  }, s7);
  const d8 = (0, import_react3.useCallback)(async () => {
    try {
      const t3 = await e5();
      o9(m(t3.result));
    } catch (t3) {
      o9(D(t3));
    }
  }, s7);
  return (0, import_react3.useEffect)(() => {
    if (n11 === void 0 || f6 === void 0 || l7 === void 0)
      return;
    let t3 = false;
    const r7 = n11.notifier, u8 = (v10) => {
      const Q4 = r7.alias(v10);
      u2(l7, Q4) && (t3 || d8());
    }, c8 = r7.subscribeToDataChanges(u8);
    return a5 !== void 0 && r7.unsubscribeFromDataChanges(a5), L2(c8), () => {
      t3 = true, r7.unsubscribeFromDataChanges(c8);
    };
  }, [n11, f6, l7, d8]), p10;
}
var q = k;

// node_modules/electric-sql/dist/frameworks/react/hooks/useRandom.js
var import_react4 = __toESM(require_react(), 1);

// node_modules/electric-sql/dist/util/random.js
var n = () => Math.random().toString(16).substring(2);
var i2 = () => {
  if (globalThis.crypto && globalThis.crypto.randomUUID)
    return globalThis.crypto.randomUUID();
  const o9 = new Uint8Array(16);
  if (globalThis.crypto && globalThis.crypto.getRandomValues)
    globalThis.crypto.getRandomValues(o9);
  else
    for (let r7 = 0; r7 < o9.length; r7++)
      o9[r7] = Math.floor(Math.random() * 256);
  o9[6] = o9[6] & 15 | 64, o9[8] = o9[8] & 63 | 128;
  const t3 = [];
  return o9.forEach((r7) => {
    t3.push(r7.toString(16).padStart(2, "0"));
  }), t3.slice(0, 4).join("") + "-" + t3.slice(4, 6).join("") + "-" + t3.slice(6, 8).join("") + "-" + t3.slice(8, 10).join("") + "-" + t3.slice(10).join("");
};

// node_modules/electric-sql/dist/util/common.js
var import_base_64 = __toESM(require_base64(), 1);

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i8 = 0; i8 < 256; ++i8) {
  byteToHex.push((i8 + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i8 = 0; i8 < 16; ++i8) {
      buf[offset + i8] = rnds[i8];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// node_modules/electric-sql/dist/util/common.js
var u3 = (e5) => {
  e5.uuid || (e5.uuid = v4_default);
};
u3(typeof global == "" + void 0 ? typeof self == "" + void 0 ? {} : self : global);
var x2 = { number: c2, text: (e5) => new TextDecoder().decode(e5) };
var v2 = { number: s2, text: (e5) => new TextEncoder().encode(e5) };
var b2 = { fromBytes: (e5) => import_base_64.default.encode(String.fromCharCode.apply(null, new Uint8Array(e5))), toBytes: (e5) => Uint8Array.from(import_base_64.default.decode(e5), (r7) => r7.charCodeAt(0)) };
var T2 = s2(0);
function s2(e5) {
  return Uint8Array.of((e5 & 4278190080) >> 24, (e5 & 16711680) >> 16, (e5 & 65280) >> 8, (e5 & 255) >> 0);
}
function c2(e5) {
  let r7 = 0;
  for (const o9 of e5.values())
    r7 = r7 << 8 | o9;
  return r7;
}
function A() {
  return globalThis.uuid();
}
function l2() {
  let e5, r7;
  return { promise: new Promise((n11, t3) => {
    e5 = n11, r7 = t3;
  }), resolve: e5, reject: r7 };
}
function U() {
  const { promise: e5, resolve: r7, reject: o9 } = l2();
  let n11 = false, t3 = false;
  return { waitOn: async () => {
    n11 = true, await e5;
  }, resolve: async () => {
    t3 = true, r7();
  }, reject: async (a5) => {
    t3 = true, n11 ? o9(a5) : r7();
  }, finished: () => t3 };
}

// node_modules/electric-sql/dist/util/options.js
var i4 = (n11 = {}, o9 = {}) => {
  const e5 = {};
  for (const [r7, t3] of Object.entries(o9))
    t3 !== void 0 && (e5[r7] = t3);
  return Object.assign({}, n11, e5);
};

// node_modules/electric-sql/dist/util/parser.js
var import_sqlite_parser = __toESM(require_sqlite_parser(), 1);
var import_walkjs = __toESM(require_lib(), 1);
var c3 = ["add", "alter", "commit", "create", "delete", "drop", "exec", "insert", "select into", "set", "truncate", "update"];
var f = new RegExp(c3.map((e5) => `\\b${e5}\\b`).join("|"), "imu");
var S2 = (e5, t3 = "main") => {
  const r7 = (0, import_sqlite_parser.default)(e5);
  if (r7.type !== "statement")
    throw "Invalid SQL statement";
  if (r7.statement.length !== 1)
    throw "Query must be a single SQL statement.";
  const a5 = r7.statement[0];
  if (a5.type !== "statement" || a5.variant !== "select")
    throw "Query must be a valid SELECT statement.";
  const o9 = [], i8 = /* @__PURE__ */ new Set();
  return new import_walkjs.WalkBuilder().withSimpleCallback((n11) => {
    const s7 = d(n11.val.name, t3).toLowerCase();
    i8.add(s7);
  }).withGlobalFilter(b3).walk(a5.from), Array.from(i8).sort().forEach((n11) => {
    const [s7, l7] = n11.split(".");
    o9.push(new b(s7, l7));
  }), o9;
};
var b3 = (e5) => {
  if (e5.nodeType !== "object")
    return false;
  const { val: t3 } = e5;
  return !(!Object.prototype.hasOwnProperty.call(t3, "variant") || !Object.prototype.hasOwnProperty.call(t3, "type") || t3.type !== "identifier" || t3.variant !== "table");
};
var d = (e5, t3 = "main") => e5.includes(".") ? e5 : `${t3}.${e5}`;

// node_modules/long/index.js
var wasm = null;
try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0,
    97,
    115,
    109,
    1,
    0,
    0,
    0,
    1,
    13,
    2,
    96,
    0,
    1,
    127,
    96,
    4,
    127,
    127,
    127,
    127,
    1,
    127,
    3,
    7,
    6,
    0,
    1,
    1,
    1,
    1,
    1,
    6,
    6,
    1,
    127,
    1,
    65,
    0,
    11,
    7,
    50,
    6,
    3,
    109,
    117,
    108,
    0,
    1,
    5,
    100,
    105,
    118,
    95,
    115,
    0,
    2,
    5,
    100,
    105,
    118,
    95,
    117,
    0,
    3,
    5,
    114,
    101,
    109,
    95,
    115,
    0,
    4,
    5,
    114,
    101,
    109,
    95,
    117,
    0,
    5,
    8,
    103,
    101,
    116,
    95,
    104,
    105,
    103,
    104,
    0,
    0,
    10,
    191,
    1,
    6,
    4,
    0,
    35,
    0,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    126,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    127,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    128,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    129,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    130,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11
  ])), {}).exports;
} catch (e5) {
}
function Long(low, high, unsigned) {
  this.low = low | 0;
  this.high = high | 0;
  this.unsigned = !!unsigned;
}
Long.prototype.__isLong__;
Object.defineProperty(Long.prototype, "__isLong__", { value: true });
function isLong(obj) {
  return (obj && obj["__isLong__"]) === true;
}
function ctz32(value) {
  var c8 = Math.clz32(value & -value);
  return value ? 31 - c8 : c8;
}
Long.isLong = isLong;
var INT_CACHE = {};
var UINT_CACHE = {};
function fromInt(value, unsigned) {
  var obj, cachedObj, cache;
  if (unsigned) {
    value >>>= 0;
    if (cache = 0 <= value && value < 256) {
      cachedObj = UINT_CACHE[value];
      if (cachedObj)
        return cachedObj;
    }
    obj = fromBits(value, 0, true);
    if (cache)
      UINT_CACHE[value] = obj;
    return obj;
  } else {
    value |= 0;
    if (cache = -128 <= value && value < 128) {
      cachedObj = INT_CACHE[value];
      if (cachedObj)
        return cachedObj;
    }
    obj = fromBits(value, value < 0 ? -1 : 0, false);
    if (cache)
      INT_CACHE[value] = obj;
    return obj;
  }
}
Long.fromInt = fromInt;
function fromNumber(value, unsigned) {
  if (isNaN(value))
    return unsigned ? UZERO : ZERO;
  if (unsigned) {
    if (value < 0)
      return UZERO;
    if (value >= TWO_PWR_64_DBL)
      return MAX_UNSIGNED_VALUE;
  } else {
    if (value <= -TWO_PWR_63_DBL)
      return MIN_VALUE;
    if (value + 1 >= TWO_PWR_63_DBL)
      return MAX_VALUE;
  }
  if (value < 0)
    return fromNumber(-value, unsigned).neg();
  return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
}
Long.fromNumber = fromNumber;
function fromBits(lowBits, highBits, unsigned) {
  return new Long(lowBits, highBits, unsigned);
}
Long.fromBits = fromBits;
var pow_dbl = Math.pow;
function fromString(str, unsigned, radix) {
  if (str.length === 0)
    throw Error("empty string");
  if (typeof unsigned === "number") {
    radix = unsigned;
    unsigned = false;
  } else {
    unsigned = !!unsigned;
  }
  if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
    return unsigned ? UZERO : ZERO;
  radix = radix || 10;
  if (radix < 2 || 36 < radix)
    throw RangeError("radix");
  var p10;
  if ((p10 = str.indexOf("-")) > 0)
    throw Error("interior hyphen");
  else if (p10 === 0) {
    return fromString(str.substring(1), unsigned, radix).neg();
  }
  var radixToPower = fromNumber(pow_dbl(radix, 8));
  var result = ZERO;
  for (var i8 = 0; i8 < str.length; i8 += 8) {
    var size = Math.min(8, str.length - i8), value = parseInt(str.substring(i8, i8 + size), radix);
    if (size < 8) {
      var power = fromNumber(pow_dbl(radix, size));
      result = result.mul(power).add(fromNumber(value));
    } else {
      result = result.mul(radixToPower);
      result = result.add(fromNumber(value));
    }
  }
  result.unsigned = unsigned;
  return result;
}
Long.fromString = fromString;
function fromValue(val, unsigned) {
  if (typeof val === "number")
    return fromNumber(val, unsigned);
  if (typeof val === "string")
    return fromString(val, unsigned);
  return fromBits(val.low, val.high, typeof unsigned === "boolean" ? unsigned : val.unsigned);
}
Long.fromValue = fromValue;
var TWO_PWR_16_DBL = 1 << 16;
var TWO_PWR_24_DBL = 1 << 24;
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
var ZERO = fromInt(0);
Long.ZERO = ZERO;
var UZERO = fromInt(0, true);
Long.UZERO = UZERO;
var ONE = fromInt(1);
Long.ONE = ONE;
var UONE = fromInt(1, true);
Long.UONE = UONE;
var NEG_ONE = fromInt(-1);
Long.NEG_ONE = NEG_ONE;
var MAX_VALUE = fromBits(4294967295 | 0, 2147483647 | 0, false);
Long.MAX_VALUE = MAX_VALUE;
var MAX_UNSIGNED_VALUE = fromBits(4294967295 | 0, 4294967295 | 0, true);
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
var MIN_VALUE = fromBits(0, 2147483648 | 0, false);
Long.MIN_VALUE = MIN_VALUE;
var LongPrototype = Long.prototype;
LongPrototype.toInt = function toInt() {
  return this.unsigned ? this.low >>> 0 : this.low;
};
LongPrototype.toNumber = function toNumber() {
  if (this.unsigned)
    return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};
LongPrototype.toString = function toString(radix) {
  radix = radix || 10;
  if (radix < 2 || 36 < radix)
    throw RangeError("radix");
  if (this.isZero())
    return "0";
  if (this.isNegative()) {
    if (this.eq(MIN_VALUE)) {
      var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
      return div.toString(radix) + rem1.toInt().toString(radix);
    } else
      return "-" + this.neg().toString(radix);
  }
  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero())
      return digits + result;
    else {
      while (digits.length < 6)
        digits = "0" + digits;
      result = "" + digits + result;
    }
  }
};
LongPrototype.getHighBits = function getHighBits() {
  return this.high;
};
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
  return this.high >>> 0;
};
LongPrototype.getLowBits = function getLowBits() {
  return this.low;
};
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
  return this.low >>> 0;
};
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
  if (this.isNegative())
    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
  var val = this.high != 0 ? this.high : this.low;
  for (var bit = 31; bit > 0; bit--)
    if ((val & 1 << bit) != 0)
      break;
  return this.high != 0 ? bit + 33 : bit + 1;
};
LongPrototype.isZero = function isZero() {
  return this.high === 0 && this.low === 0;
};
LongPrototype.eqz = LongPrototype.isZero;
LongPrototype.isNegative = function isNegative() {
  return !this.unsigned && this.high < 0;
};
LongPrototype.isPositive = function isPositive() {
  return this.unsigned || this.high >= 0;
};
LongPrototype.isOdd = function isOdd() {
  return (this.low & 1) === 1;
};
LongPrototype.isEven = function isEven() {
  return (this.low & 1) === 0;
};
LongPrototype.equals = function equals(other) {
  if (!isLong(other))
    other = fromValue(other);
  if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
    return false;
  return this.high === other.high && this.low === other.low;
};
LongPrototype.eq = LongPrototype.equals;
LongPrototype.notEquals = function notEquals(other) {
  return !this.eq(
    /* validates */
    other
  );
};
LongPrototype.neq = LongPrototype.notEquals;
LongPrototype.ne = LongPrototype.notEquals;
LongPrototype.lessThan = function lessThan(other) {
  return this.comp(
    /* validates */
    other
  ) < 0;
};
LongPrototype.lt = LongPrototype.lessThan;
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
  return this.comp(
    /* validates */
    other
  ) <= 0;
};
LongPrototype.lte = LongPrototype.lessThanOrEqual;
LongPrototype.le = LongPrototype.lessThanOrEqual;
LongPrototype.greaterThan = function greaterThan(other) {
  return this.comp(
    /* validates */
    other
  ) > 0;
};
LongPrototype.gt = LongPrototype.greaterThan;
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
  return this.comp(
    /* validates */
    other
  ) >= 0;
};
LongPrototype.gte = LongPrototype.greaterThanOrEqual;
LongPrototype.ge = LongPrototype.greaterThanOrEqual;
LongPrototype.compare = function compare(other) {
  if (!isLong(other))
    other = fromValue(other);
  if (this.eq(other))
    return 0;
  var thisNeg = this.isNegative(), otherNeg = other.isNegative();
  if (thisNeg && !otherNeg)
    return -1;
  if (!thisNeg && otherNeg)
    return 1;
  if (!this.unsigned)
    return this.sub(other).isNegative() ? -1 : 1;
  return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
};
LongPrototype.comp = LongPrototype.compare;
LongPrototype.negate = function negate() {
  if (!this.unsigned && this.eq(MIN_VALUE))
    return MIN_VALUE;
  return this.not().add(ONE);
};
LongPrototype.neg = LongPrototype.negate;
LongPrototype.add = function add(addend) {
  if (!isLong(addend))
    addend = fromValue(addend);
  var a48 = this.high >>> 16;
  var a32 = this.high & 65535;
  var a16 = this.low >>> 16;
  var a00 = this.low & 65535;
  var b48 = addend.high >>> 16;
  var b32 = addend.high & 65535;
  var b16 = addend.low >>> 16;
  var b00 = addend.low & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
};
LongPrototype.subtract = function subtract(subtrahend) {
  if (!isLong(subtrahend))
    subtrahend = fromValue(subtrahend);
  return this.add(subtrahend.neg());
};
LongPrototype.sub = LongPrototype.subtract;
LongPrototype.multiply = function multiply(multiplier) {
  if (this.isZero())
    return this;
  if (!isLong(multiplier))
    multiplier = fromValue(multiplier);
  if (wasm) {
    var low = wasm["mul"](
      this.low,
      this.high,
      multiplier.low,
      multiplier.high
    );
    return fromBits(low, wasm["get_high"](), this.unsigned);
  }
  if (multiplier.isZero())
    return this.unsigned ? UZERO : ZERO;
  if (this.eq(MIN_VALUE))
    return multiplier.isOdd() ? MIN_VALUE : ZERO;
  if (multiplier.eq(MIN_VALUE))
    return this.isOdd() ? MIN_VALUE : ZERO;
  if (this.isNegative()) {
    if (multiplier.isNegative())
      return this.neg().mul(multiplier.neg());
    else
      return this.neg().mul(multiplier).neg();
  } else if (multiplier.isNegative())
    return this.mul(multiplier.neg()).neg();
  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
    return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
  var a48 = this.high >>> 16;
  var a32 = this.high & 65535;
  var a16 = this.low >>> 16;
  var a00 = this.low & 65535;
  var b48 = multiplier.high >>> 16;
  var b32 = multiplier.high & 65535;
  var b16 = multiplier.low >>> 16;
  var b00 = multiplier.low & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
};
LongPrototype.mul = LongPrototype.multiply;
LongPrototype.divide = function divide(divisor) {
  if (!isLong(divisor))
    divisor = fromValue(divisor);
  if (divisor.isZero())
    throw Error("division by zero");
  if (wasm) {
    if (!this.unsigned && this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) {
      return this;
    }
    var low = (this.unsigned ? wasm["div_u"] : wasm["div_s"])(
      this.low,
      this.high,
      divisor.low,
      divisor.high
    );
    return fromBits(low, wasm["get_high"](), this.unsigned);
  }
  if (this.isZero())
    return this.unsigned ? UZERO : ZERO;
  var approx, rem, res;
  if (!this.unsigned) {
    if (this.eq(MIN_VALUE)) {
      if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
        return MIN_VALUE;
      else if (divisor.eq(MIN_VALUE))
        return ONE;
      else {
        var halfThis = this.shr(1);
        approx = halfThis.div(divisor).shl(1);
        if (approx.eq(ZERO)) {
          return divisor.isNegative() ? ONE : NEG_ONE;
        } else {
          rem = this.sub(divisor.mul(approx));
          res = approx.add(rem.div(divisor));
          return res;
        }
      }
    } else if (divisor.eq(MIN_VALUE))
      return this.unsigned ? UZERO : ZERO;
    if (this.isNegative()) {
      if (divisor.isNegative())
        return this.neg().div(divisor.neg());
      return this.neg().div(divisor).neg();
    } else if (divisor.isNegative())
      return this.div(divisor.neg()).neg();
    res = ZERO;
  } else {
    if (!divisor.unsigned)
      divisor = divisor.toUnsigned();
    if (divisor.gt(this))
      return UZERO;
    if (divisor.gt(this.shru(1)))
      return UONE;
    res = UZERO;
  }
  rem = this;
  while (rem.gte(divisor)) {
    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
    var log22 = Math.ceil(Math.log(approx) / Math.LN2), delta = log22 <= 48 ? 1 : pow_dbl(2, log22 - 48), approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);
    while (approxRem.isNegative() || approxRem.gt(rem)) {
      approx -= delta;
      approxRes = fromNumber(approx, this.unsigned);
      approxRem = approxRes.mul(divisor);
    }
    if (approxRes.isZero())
      approxRes = ONE;
    res = res.add(approxRes);
    rem = rem.sub(approxRem);
  }
  return res;
};
LongPrototype.div = LongPrototype.divide;
LongPrototype.modulo = function modulo(divisor) {
  if (!isLong(divisor))
    divisor = fromValue(divisor);
  if (wasm) {
    var low = (this.unsigned ? wasm["rem_u"] : wasm["rem_s"])(
      this.low,
      this.high,
      divisor.low,
      divisor.high
    );
    return fromBits(low, wasm["get_high"](), this.unsigned);
  }
  return this.sub(this.div(divisor).mul(divisor));
};
LongPrototype.mod = LongPrototype.modulo;
LongPrototype.rem = LongPrototype.modulo;
LongPrototype.not = function not() {
  return fromBits(~this.low, ~this.high, this.unsigned);
};
LongPrototype.countLeadingZeros = function countLeadingZeros() {
  return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;
};
LongPrototype.clz = LongPrototype.countLeadingZeros;
LongPrototype.countTrailingZeros = function countTrailingZeros() {
  return this.low ? ctz32(this.low) : ctz32(this.high) + 32;
};
LongPrototype.ctz = LongPrototype.countTrailingZeros;
LongPrototype.and = function and(other) {
  if (!isLong(other))
    other = fromValue(other);
  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};
LongPrototype.or = function or(other) {
  if (!isLong(other))
    other = fromValue(other);
  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};
LongPrototype.xor = function xor(other) {
  if (!isLong(other))
    other = fromValue(other);
  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};
LongPrototype.shiftLeft = function shiftLeft(numBits) {
  if (isLong(numBits))
    numBits = numBits.toInt();
  if ((numBits &= 63) === 0)
    return this;
  else if (numBits < 32)
    return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
  else
    return fromBits(0, this.low << numBits - 32, this.unsigned);
};
LongPrototype.shl = LongPrototype.shiftLeft;
LongPrototype.shiftRight = function shiftRight(numBits) {
  if (isLong(numBits))
    numBits = numBits.toInt();
  if ((numBits &= 63) === 0)
    return this;
  else if (numBits < 32)
    return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
  else
    return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
};
LongPrototype.shr = LongPrototype.shiftRight;
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
  if (isLong(numBits))
    numBits = numBits.toInt();
  if ((numBits &= 63) === 0)
    return this;
  if (numBits < 32)
    return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);
  if (numBits === 32)
    return fromBits(this.high, 0, this.unsigned);
  return fromBits(this.high >>> numBits - 32, 0, this.unsigned);
};
LongPrototype.shru = LongPrototype.shiftRightUnsigned;
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;
LongPrototype.rotateLeft = function rotateLeft(numBits) {
  var b9;
  if (isLong(numBits))
    numBits = numBits.toInt();
  if ((numBits &= 63) === 0)
    return this;
  if (numBits === 32)
    return fromBits(this.high, this.low, this.unsigned);
  if (numBits < 32) {
    b9 = 32 - numBits;
    return fromBits(this.low << numBits | this.high >>> b9, this.high << numBits | this.low >>> b9, this.unsigned);
  }
  numBits -= 32;
  b9 = 32 - numBits;
  return fromBits(this.high << numBits | this.low >>> b9, this.low << numBits | this.high >>> b9, this.unsigned);
};
LongPrototype.rotl = LongPrototype.rotateLeft;
LongPrototype.rotateRight = function rotateRight(numBits) {
  var b9;
  if (isLong(numBits))
    numBits = numBits.toInt();
  if ((numBits &= 63) === 0)
    return this;
  if (numBits === 32)
    return fromBits(this.high, this.low, this.unsigned);
  if (numBits < 32) {
    b9 = 32 - numBits;
    return fromBits(this.high << b9 | this.low >>> numBits, this.low << b9 | this.high >>> numBits, this.unsigned);
  }
  numBits -= 32;
  b9 = 32 - numBits;
  return fromBits(this.low << b9 | this.high >>> numBits, this.high << b9 | this.low >>> numBits, this.unsigned);
};
LongPrototype.rotr = LongPrototype.rotateRight;
LongPrototype.toSigned = function toSigned() {
  if (!this.unsigned)
    return this;
  return fromBits(this.low, this.high, false);
};
LongPrototype.toUnsigned = function toUnsigned() {
  if (this.unsigned)
    return this;
  return fromBits(this.low, this.high, true);
};
LongPrototype.toBytes = function toBytes(le2) {
  return le2 ? this.toBytesLE() : this.toBytesBE();
};
LongPrototype.toBytesLE = function toBytesLE() {
  var hi = this.high, lo = this.low;
  return [
    lo & 255,
    lo >>> 8 & 255,
    lo >>> 16 & 255,
    lo >>> 24,
    hi & 255,
    hi >>> 8 & 255,
    hi >>> 16 & 255,
    hi >>> 24
  ];
};
LongPrototype.toBytesBE = function toBytesBE() {
  var hi = this.high, lo = this.low;
  return [
    hi >>> 24,
    hi >>> 16 & 255,
    hi >>> 8 & 255,
    hi & 255,
    lo >>> 24,
    lo >>> 16 & 255,
    lo >>> 8 & 255,
    lo & 255
  ];
};
Long.fromBytes = function fromBytes(bytes, unsigned, le2) {
  return le2 ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
  return new Long(
    bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24,
    bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24,
    unsigned
  );
};
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
  return new Long(
    bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7],
    bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3],
    unsigned
  );
};
var long_default = Long;

// node_modules/electric-sql/dist/_generated/protocol/satellite.js
var import_minimal = __toESM(require_minimal2(), 1);

// node_modules/electric-sql/dist/_generated/typeRegistry.js
var a2 = /* @__PURE__ */ new Map();

// node_modules/electric-sql/dist/_generated/protocol/satellite.js
var rt = "Electric.Satellite.v1_4";
var Ke = ((s7) => (s7[s7.UNSPECIFIED = 0] = "UNSPECIFIED", s7[s7.PROTO_VERSION = 1] = "PROTO_VERSION", s7[s7.UNRECOGNIZED = -1] = "UNRECOGNIZED", s7))(Ke || {});
var Fe = ((l7) => (l7[l7.INTERNAL = 0] = "INTERNAL", l7[l7.AUTH_REQUIRED = 1] = "AUTH_REQUIRED", l7[l7.AUTH_FAILED = 2] = "AUTH_FAILED", l7[l7.REPLICATION_FAILED = 3] = "REPLICATION_FAILED", l7[l7.INVALID_REQUEST = 4] = "INVALID_REQUEST", l7[l7.PROTO_VSN_MISMATCH = 5] = "PROTO_VSN_MISMATCH", l7[l7.SCHEMA_VSN_MISMATCH = 6] = "SCHEMA_VSN_MISMATCH", l7[l7.UNRECOGNIZED = -1] = "UNRECOGNIZED", l7))(Fe || {});
var Ze = ((a5) => (a5[a5.NONE = 0] = "NONE", a5[a5.UNRECOGNIZED = -1] = "UNRECOGNIZED", a5))(Ze || {});
var Ge = ((u8) => (u8[u8.CODE_UNSPECIFIED = 0] = "CODE_UNSPECIFIED", u8[u8.BEHIND_WINDOW = 1] = "BEHIND_WINDOW", u8[u8.INVALID_POSITION = 2] = "INVALID_POSITION", u8[u8.SUBSCRIPTION_NOT_FOUND = 3] = "SUBSCRIPTION_NOT_FOUND", u8[u8.MALFORMED_LSN = 4] = "MALFORMED_LSN", u8[u8.UNKNOWN_SCHEMA_VSN = 5] = "UNKNOWN_SCHEMA_VSN", u8[u8.UNRECOGNIZED = -1] = "UNRECOGNIZED", u8))(Ge || {});
var ze = ((r7) => (r7[r7.TABLE = 0] = "TABLE", r7[r7.INDEX = 1] = "INDEX", r7[r7.VIEW = 2] = "VIEW", r7[r7.TRIGGER = 3] = "TRIGGER", r7[r7.UNRECOGNIZED = -1] = "UNRECOGNIZED", r7))(ze || {});
var Xe = ((n11) => (n11[n11.CREATE_TABLE = 0] = "CREATE_TABLE", n11[n11.CREATE_INDEX = 1] = "CREATE_INDEX", n11[n11.ALTER_ADD_COLUMN = 6] = "ALTER_ADD_COLUMN", n11[n11.UNRECOGNIZED = -1] = "UNRECOGNIZED", n11))(Xe || {});
var Ye = ((n11) => (n11[n11.CODE_UNSPECIFIED = 0] = "CODE_UNSPECIFIED", n11[n11.SUBSCRIPTION_ID_ALREADY_EXISTS = 1] = "SUBSCRIPTION_ID_ALREADY_EXISTS", n11[n11.SHAPE_REQUEST_ERROR = 2] = "SHAPE_REQUEST_ERROR", n11[n11.UNRECOGNIZED = -1] = "UNRECOGNIZED", n11))(Ye || {});
var Qe = ((o9) => (o9[o9.CODE_UNSPECIFIED = 0] = "CODE_UNSPECIFIED", o9[o9.TABLE_NOT_FOUND = 1] = "TABLE_NOT_FOUND", o9[o9.REFERENTIAL_INTEGRITY_VIOLATION = 2] = "REFERENTIAL_INTEGRITY_VIOLATION", o9[o9.EMPTY_SHAPE_DEFINITION = 3] = "EMPTY_SHAPE_DEFINITION", o9[o9.DUPLICATE_TABLE_IN_SHAPE_DEFINITION = 4] = "DUPLICATE_TABLE_IN_SHAPE_DEFINITION", o9[o9.UNRECOGNIZED = -1] = "UNRECOGNIZED", o9))(Qe || {});
var Je = ((s7) => (s7[s7.CODE_UNSPECIFIED = 0] = "CODE_UNSPECIFIED", s7[s7.SHAPE_DELIVERY_ERROR = 1] = "SHAPE_DELIVERY_ERROR", s7[s7.UNRECOGNIZED = -1] = "UNRECOGNIZED", s7))(Je || {});
var je = ((s7) => (s7[s7.CODE_UNSPECIFIED = 0] = "CODE_UNSPECIFIED", s7[s7.SHAPE_SIZE_LIMIT_EXCEEDED = 1] = "SHAPE_SIZE_LIMIT_EXCEEDED", s7[s7.UNRECOGNIZED = -1] = "UNRECOGNIZED", s7))(je || {});
function te() {
  return { $type: "Electric.Satellite.v1_4.SatPingReq" };
}
var W2 = { $type: "Electric.Satellite.v1_4.SatPingReq", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = te();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return W2.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  return te();
} };
a2.set(W2.$type, W2);
function ae() {
  return { $type: "Electric.Satellite.v1_4.SatPingResp", lsn: void 0 };
}
var A2 = { $type: "Electric.Satellite.v1_4.SatPingResp", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.lsn !== void 0 && t3.uint32(10).bytes(e5.lsn), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = ae();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.lsn = a5.bytes();
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return A2.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = ae();
  return t3.lsn = e5.lsn ?? void 0, t3;
} };
a2.set(A2.$type, A2);
function re() {
  return { $type: "Electric.Satellite.v1_4.SatAuthHeaderPair", key: 0, value: "" };
}
var d2 = { $type: "Electric.Satellite.v1_4.SatAuthHeaderPair", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.key !== 0 && t3.uint32(8).int32(e5.key), e5.value !== "" && t3.uint32(18).string(e5.value), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = re();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 8)
          break;
        n11.key = a5.int32();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.value = a5.string();
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return d2.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = re();
  return t3.key = e5.key ?? 0, t3.value = e5.value ?? "", t3;
} };
a2.set(d2.$type, d2);
function ne() {
  return { $type: "Electric.Satellite.v1_4.SatAuthReq", id: "", token: "", headers: [] };
}
var M = { $type: "Electric.Satellite.v1_4.SatAuthReq", encode(e5, t3 = import_minimal.default.Writer.create()) {
  e5.id !== "" && t3.uint32(10).string(e5.id), e5.token !== "" && t3.uint32(18).string(e5.token);
  for (const a5 of e5.headers)
    d2.encode(a5, t3.uint32(26).fork()).ldelim();
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = ne();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.id = a5.string();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.token = a5.string();
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.headers.push(d2.decode(a5, a5.uint32()));
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return M.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = ne();
  return t3.id = e5.id ?? "", t3.token = e5.token ?? "", t3.headers = e5.headers?.map((a5) => d2.fromPartial(a5)) || [], t3;
} };
a2.set(M.$type, M);
function ie() {
  return { $type: "Electric.Satellite.v1_4.SatAuthResp", id: "", headers: [] };
}
var B = { $type: "Electric.Satellite.v1_4.SatAuthResp", encode(e5, t3 = import_minimal.default.Writer.create()) {
  e5.id !== "" && t3.uint32(10).string(e5.id);
  for (const a5 of e5.headers)
    d2.encode(a5, t3.uint32(26).fork()).ldelim();
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = ie();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.id = a5.string();
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.headers.push(d2.decode(a5, a5.uint32()));
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return B.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = ie();
  return t3.id = e5.id ?? "", t3.headers = e5.headers?.map((a5) => d2.fromPartial(a5)) || [], t3;
} };
a2.set(B.$type, B);
function se() {
  return { $type: "Electric.Satellite.v1_4.SatErrorResp", errorType: 0 };
}
var N = { $type: "Electric.Satellite.v1_4.SatErrorResp", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.errorType !== 0 && t3.uint32(8).int32(e5.errorType), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = se();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 8)
          break;
        n11.errorType = a5.int32();
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return N.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = se();
  return t3.errorType = e5.errorType ?? 0, t3;
} };
a2.set(N.$type, N);
function ce() {
  return { $type: "Electric.Satellite.v1_4.SatInStartReplicationReq", lsn: new Uint8Array(), options: [], subscriptionIds: [], schemaVersion: void 0 };
}
var w = { $type: "Electric.Satellite.v1_4.SatInStartReplicationReq", encode(e5, t3 = import_minimal.default.Writer.create()) {
  e5.lsn.length !== 0 && t3.uint32(10).bytes(e5.lsn), t3.uint32(18).fork();
  for (const a5 of e5.options)
    t3.int32(a5);
  t3.ldelim();
  for (const a5 of e5.subscriptionIds)
    t3.uint32(34).string(a5);
  return e5.schemaVersion !== void 0 && t3.uint32(42).string(e5.schemaVersion), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = ce();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.lsn = a5.bytes();
        continue;
      case 2:
        if (r7 === 16) {
          n11.options.push(a5.int32());
          continue;
        }
        if (r7 === 18) {
          const o9 = a5.uint32() + a5.pos;
          for (; a5.pos < o9; )
            n11.options.push(a5.int32());
          continue;
        }
        break;
      case 4:
        if (r7 !== 34)
          break;
        n11.subscriptionIds.push(a5.string());
        continue;
      case 5:
        if (r7 !== 42)
          break;
        n11.schemaVersion = a5.string();
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return w.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = ce();
  return t3.lsn = e5.lsn ?? new Uint8Array(), t3.options = e5.options?.map((a5) => a5) || [], t3.subscriptionIds = e5.subscriptionIds?.map((a5) => a5) || [], t3.schemaVersion = e5.schemaVersion ?? void 0, t3;
} };
a2.set(w.$type, w);
function oe() {
  return { $type: "Electric.Satellite.v1_4.SatInStartReplicationResp", err: void 0 };
}
var C2 = { $type: "Electric.Satellite.v1_4.SatInStartReplicationResp", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.err !== void 0 && f2.encode(e5.err, t3.uint32(10).fork()).ldelim(), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = oe();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.err = f2.decode(a5, a5.uint32());
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return C2.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = oe();
  return t3.err = e5.err !== void 0 && e5.err !== null ? f2.fromPartial(e5.err) : void 0, t3;
} };
a2.set(C2.$type, C2);
function le() {
  return { $type: "Electric.Satellite.v1_4.SatInStartReplicationResp.ReplicationError", code: 0, message: "" };
}
var f2 = { $type: "Electric.Satellite.v1_4.SatInStartReplicationResp.ReplicationError", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.code !== 0 && t3.uint32(8).int32(e5.code), e5.message !== "" && t3.uint32(18).string(e5.message), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = le();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 8)
          break;
        n11.code = a5.int32();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.message = a5.string();
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return f2.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = le();
  return t3.code = e5.code ?? 0, t3.message = e5.message ?? "", t3;
} };
a2.set(f2.$type, f2);
function pe() {
  return { $type: "Electric.Satellite.v1_4.SatInStopReplicationReq" };
}
var L = { $type: "Electric.Satellite.v1_4.SatInStopReplicationReq", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = pe();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return L.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  return pe();
} };
a2.set(L.$type, L);
function ue() {
  return { $type: "Electric.Satellite.v1_4.SatInStopReplicationResp" };
}
var H3 = { $type: "Electric.Satellite.v1_4.SatInStopReplicationResp", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = ue();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return H3.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  return ue();
} };
a2.set(H3.$type, H3);
function de() {
  return { $type: "Electric.Satellite.v1_4.SatRelationColumn", name: "", type: "", primaryKey: false, isNullable: false };
}
var m4 = { $type: "Electric.Satellite.v1_4.SatRelationColumn", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.name !== "" && t3.uint32(10).string(e5.name), e5.type !== "" && t3.uint32(18).string(e5.type), e5.primaryKey === true && t3.uint32(24).bool(e5.primaryKey), e5.isNullable === true && t3.uint32(32).bool(e5.isNullable), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = de();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.name = a5.string();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.type = a5.string();
        continue;
      case 3:
        if (r7 !== 24)
          break;
        n11.primaryKey = a5.bool();
        continue;
      case 4:
        if (r7 !== 32)
          break;
        n11.isNullable = a5.bool();
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return m4.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = de();
  return t3.name = e5.name ?? "", t3.type = e5.type ?? "", t3.primaryKey = e5.primaryKey ?? false, t3.isNullable = e5.isNullable ?? false, t3;
} };
a2.set(m4.$type, m4);
function Se() {
  return { $type: "Electric.Satellite.v1_4.SatRelation", schemaName: "", tableType: 0, tableName: "", relationId: 0, columns: [] };
}
var V = { $type: "Electric.Satellite.v1_4.SatRelation", encode(e5, t3 = import_minimal.default.Writer.create()) {
  e5.schemaName !== "" && t3.uint32(10).string(e5.schemaName), e5.tableType !== 0 && t3.uint32(16).int32(e5.tableType), e5.tableName !== "" && t3.uint32(26).string(e5.tableName), e5.relationId !== 0 && t3.uint32(32).uint32(e5.relationId);
  for (const a5 of e5.columns)
    m4.encode(a5, t3.uint32(42).fork()).ldelim();
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = Se();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.schemaName = a5.string();
        continue;
      case 2:
        if (r7 !== 16)
          break;
        n11.tableType = a5.int32();
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.tableName = a5.string();
        continue;
      case 4:
        if (r7 !== 32)
          break;
        n11.relationId = a5.uint32();
        continue;
      case 5:
        if (r7 !== 42)
          break;
        n11.columns.push(m4.decode(a5, a5.uint32()));
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return V.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = Se();
  return t3.schemaName = e5.schemaName ?? "", t3.tableType = e5.tableType ?? 0, t3.tableName = e5.tableName ?? "", t3.relationId = e5.relationId ?? 0, t3.columns = e5.columns?.map((a5) => m4.fromPartial(a5)) || [], t3;
} };
a2.set(V.$type, V);
function fe() {
  return { $type: "Electric.Satellite.v1_4.SatOpLog", ops: [] };
}
var K2 = { $type: "Electric.Satellite.v1_4.SatOpLog", encode(e5, t3 = import_minimal.default.Writer.create()) {
  for (const a5 of e5.ops)
    I.encode(a5, t3.uint32(10).fork()).ldelim();
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = fe();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.ops.push(I.decode(a5, a5.uint32()));
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return K2.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = fe();
  return t3.ops = e5.ops?.map((a5) => I.fromPartial(a5)) || [], t3;
} };
a2.set(K2.$type, K2);
function me() {
  return { $type: "Electric.Satellite.v1_4.SatTransOp", begin: void 0, commit: void 0, update: void 0, insert: void 0, delete: void 0, migrate: void 0 };
}
var I = { $type: "Electric.Satellite.v1_4.SatTransOp", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.begin !== void 0 && R2.encode(e5.begin, t3.uint32(10).fork()).ldelim(), e5.commit !== void 0 && y.encode(e5.commit, t3.uint32(18).fork()).ldelim(), e5.update !== void 0 && E.encode(e5.update, t3.uint32(26).fork()).ldelim(), e5.insert !== void 0 && g2.encode(e5.insert, t3.uint32(34).fork()).ldelim(), e5.delete !== void 0 && b4.encode(e5.delete, t3.uint32(42).fork()).ldelim(), e5.migrate !== void 0 && _.encode(e5.migrate, t3.uint32(50).fork()).ldelim(), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = me();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.begin = R2.decode(a5, a5.uint32());
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.commit = y.decode(a5, a5.uint32());
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.update = E.decode(a5, a5.uint32());
        continue;
      case 4:
        if (r7 !== 34)
          break;
        n11.insert = g2.decode(a5, a5.uint32());
        continue;
      case 5:
        if (r7 !== 42)
          break;
        n11.delete = b4.decode(a5, a5.uint32());
        continue;
      case 6:
        if (r7 !== 50)
          break;
        n11.migrate = _.decode(a5, a5.uint32());
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return I.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = me();
  return t3.begin = e5.begin !== void 0 && e5.begin !== null ? R2.fromPartial(e5.begin) : void 0, t3.commit = e5.commit !== void 0 && e5.commit !== null ? y.fromPartial(e5.commit) : void 0, t3.update = e5.update !== void 0 && e5.update !== null ? E.fromPartial(e5.update) : void 0, t3.insert = e5.insert !== void 0 && e5.insert !== null ? g2.fromPartial(e5.insert) : void 0, t3.delete = e5.delete !== void 0 && e5.delete !== null ? b4.fromPartial(e5.delete) : void 0, t3.migrate = e5.migrate !== void 0 && e5.migrate !== null ? _.fromPartial(e5.migrate) : void 0, t3;
} };
a2.set(I.$type, I);
function Ie() {
  return { $type: "Electric.Satellite.v1_4.SatOpBegin", commitTimestamp: long_default.UZERO, transId: "", lsn: new Uint8Array(), origin: void 0, isMigration: false };
}
var R2 = { $type: "Electric.Satellite.v1_4.SatOpBegin", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.commitTimestamp.isZero() || t3.uint32(8).uint64(e5.commitTimestamp), e5.transId !== "" && t3.uint32(18).string(e5.transId), e5.lsn.length !== 0 && t3.uint32(26).bytes(e5.lsn), e5.origin !== void 0 && t3.uint32(34).string(e5.origin), e5.isMigration === true && t3.uint32(40).bool(e5.isMigration), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = Ie();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 8)
          break;
        n11.commitTimestamp = a5.uint64();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.transId = a5.string();
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.lsn = a5.bytes();
        continue;
      case 4:
        if (r7 !== 34)
          break;
        n11.origin = a5.string();
        continue;
      case 5:
        if (r7 !== 40)
          break;
        n11.isMigration = a5.bool();
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return R2.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = Ie();
  return t3.commitTimestamp = e5.commitTimestamp !== void 0 && e5.commitTimestamp !== null ? long_default.fromValue(e5.commitTimestamp) : long_default.UZERO, t3.transId = e5.transId ?? "", t3.lsn = e5.lsn ?? new Uint8Array(), t3.origin = e5.origin ?? void 0, t3.isMigration = e5.isMigration ?? false, t3;
} };
a2.set(R2.$type, R2);
function Re() {
  return { $type: "Electric.Satellite.v1_4.SatOpCommit", commitTimestamp: long_default.UZERO, transId: "", lsn: new Uint8Array() };
}
var y = { $type: "Electric.Satellite.v1_4.SatOpCommit", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.commitTimestamp.isZero() || t3.uint32(8).uint64(e5.commitTimestamp), e5.transId !== "" && t3.uint32(18).string(e5.transId), e5.lsn.length !== 0 && t3.uint32(26).bytes(e5.lsn), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = Re();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 8)
          break;
        n11.commitTimestamp = a5.uint64();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.transId = a5.string();
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.lsn = a5.bytes();
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return y.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = Re();
  return t3.commitTimestamp = e5.commitTimestamp !== void 0 && e5.commitTimestamp !== null ? long_default.fromValue(e5.commitTimestamp) : long_default.UZERO, t3.transId = e5.transId ?? "", t3.lsn = e5.lsn ?? new Uint8Array(), t3;
} };
a2.set(y.$type, y);
function ye() {
  return { $type: "Electric.Satellite.v1_4.SatOpInsert", relationId: 0, rowData: void 0, tags: [] };
}
var g2 = { $type: "Electric.Satellite.v1_4.SatOpInsert", encode(e5, t3 = import_minimal.default.Writer.create()) {
  e5.relationId !== 0 && t3.uint32(8).uint32(e5.relationId), e5.rowData !== void 0 && p.encode(e5.rowData, t3.uint32(18).fork()).ldelim();
  for (const a5 of e5.tags)
    t3.uint32(26).string(a5);
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = ye();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 8)
          break;
        n11.relationId = a5.uint32();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.rowData = p.decode(a5, a5.uint32());
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.tags.push(a5.string());
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return g2.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = ye();
  return t3.relationId = e5.relationId ?? 0, t3.rowData = e5.rowData !== void 0 && e5.rowData !== null ? p.fromPartial(e5.rowData) : void 0, t3.tags = e5.tags?.map((a5) => a5) || [], t3;
} };
a2.set(g2.$type, g2);
function ge() {
  return { $type: "Electric.Satellite.v1_4.SatOpUpdate", relationId: 0, rowData: void 0, oldRowData: void 0, tags: [] };
}
var E = { $type: "Electric.Satellite.v1_4.SatOpUpdate", encode(e5, t3 = import_minimal.default.Writer.create()) {
  e5.relationId !== 0 && t3.uint32(8).uint32(e5.relationId), e5.rowData !== void 0 && p.encode(e5.rowData, t3.uint32(18).fork()).ldelim(), e5.oldRowData !== void 0 && p.encode(e5.oldRowData, t3.uint32(26).fork()).ldelim();
  for (const a5 of e5.tags)
    t3.uint32(34).string(a5);
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = ge();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 8)
          break;
        n11.relationId = a5.uint32();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.rowData = p.decode(a5, a5.uint32());
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.oldRowData = p.decode(a5, a5.uint32());
        continue;
      case 4:
        if (r7 !== 34)
          break;
        n11.tags.push(a5.string());
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return E.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = ge();
  return t3.relationId = e5.relationId ?? 0, t3.rowData = e5.rowData !== void 0 && e5.rowData !== null ? p.fromPartial(e5.rowData) : void 0, t3.oldRowData = e5.oldRowData !== void 0 && e5.oldRowData !== null ? p.fromPartial(e5.oldRowData) : void 0, t3.tags = e5.tags?.map((a5) => a5) || [], t3;
} };
a2.set(E.$type, E);
function Ee() {
  return { $type: "Electric.Satellite.v1_4.SatOpDelete", relationId: 0, oldRowData: void 0, tags: [] };
}
var b4 = { $type: "Electric.Satellite.v1_4.SatOpDelete", encode(e5, t3 = import_minimal.default.Writer.create()) {
  e5.relationId !== 0 && t3.uint32(8).uint32(e5.relationId), e5.oldRowData !== void 0 && p.encode(e5.oldRowData, t3.uint32(18).fork()).ldelim();
  for (const a5 of e5.tags)
    t3.uint32(26).string(a5);
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = Ee();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 8)
          break;
        n11.relationId = a5.uint32();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.oldRowData = p.decode(a5, a5.uint32());
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.tags.push(a5.string());
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return b4.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = Ee();
  return t3.relationId = e5.relationId ?? 0, t3.oldRowData = e5.oldRowData !== void 0 && e5.oldRowData !== null ? p.fromPartial(e5.oldRowData) : void 0, t3.tags = e5.tags?.map((a5) => a5) || [], t3;
} };
a2.set(b4.$type, b4);
function be() {
  return { $type: "Electric.Satellite.v1_4.SatMigrationNotification", oldSchemaVersion: "", oldSchemaHash: "", newSchemaVersion: "", newSchemaHash: "" };
}
var F2 = { $type: "Electric.Satellite.v1_4.SatMigrationNotification", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.oldSchemaVersion !== "" && t3.uint32(10).string(e5.oldSchemaVersion), e5.oldSchemaHash !== "" && t3.uint32(18).string(e5.oldSchemaHash), e5.newSchemaVersion !== "" && t3.uint32(26).string(e5.newSchemaVersion), e5.newSchemaHash !== "" && t3.uint32(34).string(e5.newSchemaHash), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = be();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.oldSchemaVersion = a5.string();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.oldSchemaHash = a5.string();
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.newSchemaVersion = a5.string();
        continue;
      case 4:
        if (r7 !== 34)
          break;
        n11.newSchemaHash = a5.string();
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return F2.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = be();
  return t3.oldSchemaVersion = e5.oldSchemaVersion ?? "", t3.oldSchemaHash = e5.oldSchemaHash ?? "", t3.newSchemaVersion = e5.newSchemaVersion ?? "", t3.newSchemaHash = e5.newSchemaHash ?? "", t3;
} };
a2.set(F2.$type, F2);
function _e() {
  return { $type: "Electric.Satellite.v1_4.SatOpRow", nullsBitmask: new Uint8Array(), values: [] };
}
var p = { $type: "Electric.Satellite.v1_4.SatOpRow", encode(e5, t3 = import_minimal.default.Writer.create()) {
  e5.nullsBitmask.length !== 0 && t3.uint32(10).bytes(e5.nullsBitmask);
  for (const a5 of e5.values)
    t3.uint32(18).bytes(a5);
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = _e();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.nullsBitmask = a5.bytes();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.values.push(a5.bytes());
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return p.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = _e();
  return t3.nullsBitmask = e5.nullsBitmask ?? new Uint8Array(), t3.values = e5.values?.map((a5) => a5) || [], t3;
} };
a2.set(p.$type, p);
function De() {
  return { $type: "Electric.Satellite.v1_4.SatOpMigrate", version: "", stmts: [], table: void 0 };
}
var _ = { $type: "Electric.Satellite.v1_4.SatOpMigrate", encode(e5, t3 = import_minimal.default.Writer.create()) {
  e5.version !== "" && t3.uint32(10).string(e5.version);
  for (const a5 of e5.stmts)
    D2.encode(a5, t3.uint32(18).fork()).ldelim();
  return e5.table !== void 0 && k2.encode(e5.table, t3.uint32(26).fork()).ldelim(), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = De();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.version = a5.string();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.stmts.push(D2.decode(a5, a5.uint32()));
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.table = k2.decode(a5, a5.uint32());
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return _.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = De();
  return t3.version = e5.version ?? "", t3.stmts = e5.stmts?.map((a5) => D2.fromPartial(a5)) || [], t3.table = e5.table !== void 0 && e5.table !== null ? k2.fromPartial(e5.table) : void 0, t3;
} };
a2.set(_.$type, _);
function he() {
  return { $type: "Electric.Satellite.v1_4.SatOpMigrate.Stmt", type: 0, sql: "" };
}
var D2 = { $type: "Electric.Satellite.v1_4.SatOpMigrate.Stmt", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.type !== 0 && t3.uint32(8).int32(e5.type), e5.sql !== "" && t3.uint32(18).string(e5.sql), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = he();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 8)
          break;
        n11.type = a5.int32();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.sql = a5.string();
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return D2.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = he();
  return t3.type = e5.type ?? 0, t3.sql = e5.sql ?? "", t3;
} };
a2.set(D2.$type, D2);
function Pe() {
  return { $type: "Electric.Satellite.v1_4.SatOpMigrate.PgColumnType", name: "", array: [], size: [] };
}
var h2 = { $type: "Electric.Satellite.v1_4.SatOpMigrate.PgColumnType", encode(e5, t3 = import_minimal.default.Writer.create()) {
  e5.name !== "" && t3.uint32(10).string(e5.name), t3.uint32(18).fork();
  for (const a5 of e5.array)
    t3.int32(a5);
  t3.ldelim(), t3.uint32(26).fork();
  for (const a5 of e5.size)
    t3.int32(a5);
  return t3.ldelim(), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = Pe();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.name = a5.string();
        continue;
      case 2:
        if (r7 === 16) {
          n11.array.push(a5.int32());
          continue;
        }
        if (r7 === 18) {
          const o9 = a5.uint32() + a5.pos;
          for (; a5.pos < o9; )
            n11.array.push(a5.int32());
          continue;
        }
        break;
      case 3:
        if (r7 === 24) {
          n11.size.push(a5.int32());
          continue;
        }
        if (r7 === 26) {
          const o9 = a5.uint32() + a5.pos;
          for (; a5.pos < o9; )
            n11.size.push(a5.int32());
          continue;
        }
        break;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return h2.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = Pe();
  return t3.name = e5.name ?? "", t3.array = e5.array?.map((a5) => a5) || [], t3.size = e5.size?.map((a5) => a5) || [], t3;
} };
a2.set(h2.$type, h2);
function xe() {
  return { $type: "Electric.Satellite.v1_4.SatOpMigrate.Column", name: "", sqliteType: "", pgType: void 0 };
}
var P = { $type: "Electric.Satellite.v1_4.SatOpMigrate.Column", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.name !== "" && t3.uint32(10).string(e5.name), e5.sqliteType !== "" && t3.uint32(18).string(e5.sqliteType), e5.pgType !== void 0 && h2.encode(e5.pgType, t3.uint32(26).fork()).ldelim(), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = xe();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.name = a5.string();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.sqliteType = a5.string();
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.pgType = h2.decode(a5, a5.uint32());
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return P.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = xe();
  return t3.name = e5.name ?? "", t3.sqliteType = e5.sqliteType ?? "", t3.pgType = e5.pgType !== void 0 && e5.pgType !== null ? h2.fromPartial(e5.pgType) : void 0, t3;
} };
a2.set(P.$type, P);
function ke() {
  return { $type: "Electric.Satellite.v1_4.SatOpMigrate.ForeignKey", fkCols: [], pkTable: "", pkCols: [] };
}
var x3 = { $type: "Electric.Satellite.v1_4.SatOpMigrate.ForeignKey", encode(e5, t3 = import_minimal.default.Writer.create()) {
  for (const a5 of e5.fkCols)
    t3.uint32(10).string(a5);
  e5.pkTable !== "" && t3.uint32(18).string(e5.pkTable);
  for (const a5 of e5.pkCols)
    t3.uint32(26).string(a5);
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = ke();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.fkCols.push(a5.string());
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.pkTable = a5.string();
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.pkCols.push(a5.string());
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return x3.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = ke();
  return t3.fkCols = e5.fkCols?.map((a5) => a5) || [], t3.pkTable = e5.pkTable ?? "", t3.pkCols = e5.pkCols?.map((a5) => a5) || [], t3;
} };
a2.set(x3.$type, x3);
function Oe() {
  return { $type: "Electric.Satellite.v1_4.SatOpMigrate.Table", name: "", columns: [], fks: [], pks: [] };
}
var k2 = { $type: "Electric.Satellite.v1_4.SatOpMigrate.Table", encode(e5, t3 = import_minimal.default.Writer.create()) {
  e5.name !== "" && t3.uint32(10).string(e5.name);
  for (const a5 of e5.columns)
    P.encode(a5, t3.uint32(18).fork()).ldelim();
  for (const a5 of e5.fks)
    x3.encode(a5, t3.uint32(26).fork()).ldelim();
  for (const a5 of e5.pks)
    t3.uint32(34).string(a5);
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = Oe();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.name = a5.string();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.columns.push(P.decode(a5, a5.uint32()));
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.fks.push(x3.decode(a5, a5.uint32()));
        continue;
      case 4:
        if (r7 !== 34)
          break;
        n11.pks.push(a5.string());
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return k2.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = Oe();
  return t3.name = e5.name ?? "", t3.columns = e5.columns?.map((a5) => P.fromPartial(a5)) || [], t3.fks = e5.fks?.map((a5) => x3.fromPartial(a5)) || [], t3.pks = e5.pks?.map((a5) => a5) || [], t3;
} };
a2.set(k2.$type, k2);
function ve() {
  return { $type: "Electric.Satellite.v1_4.SatSubsReq", subscriptionId: "", shapeRequests: [] };
}
var Z = { $type: "Electric.Satellite.v1_4.SatSubsReq", encode(e5, t3 = import_minimal.default.Writer.create()) {
  e5.subscriptionId !== "" && t3.uint32(10).string(e5.subscriptionId);
  for (const a5 of e5.shapeRequests)
    $.encode(a5, t3.uint32(18).fork()).ldelim();
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = ve();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.subscriptionId = a5.string();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.shapeRequests.push($.decode(a5, a5.uint32()));
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return Z.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = ve();
  return t3.subscriptionId = e5.subscriptionId ?? "", t3.shapeRequests = e5.shapeRequests?.map((a5) => $.fromPartial(a5)) || [], t3;
} };
a2.set(Z.$type, Z);
function $e() {
  return { $type: "Electric.Satellite.v1_4.SatSubsResp", subscriptionId: "", err: void 0 };
}
var G = { $type: "Electric.Satellite.v1_4.SatSubsResp", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.subscriptionId !== "" && t3.uint32(10).string(e5.subscriptionId), e5.err !== void 0 && O.encode(e5.err, t3.uint32(18).fork()).ldelim(), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = $e();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.subscriptionId = a5.string();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.err = O.decode(a5, a5.uint32());
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return G.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = $e();
  return t3.subscriptionId = e5.subscriptionId ?? "", t3.err = e5.err !== void 0 && e5.err !== null ? O.fromPartial(e5.err) : void 0, t3;
} };
a2.set(G.$type, G);
function Te() {
  return { $type: "Electric.Satellite.v1_4.SatSubsResp.SatSubsError", code: 0, message: "", shapeRequestError: [] };
}
var O = { $type: "Electric.Satellite.v1_4.SatSubsResp.SatSubsError", encode(e5, t3 = import_minimal.default.Writer.create()) {
  e5.code !== 0 && t3.uint32(16).int32(e5.code), e5.message !== "" && t3.uint32(26).string(e5.message);
  for (const a5 of e5.shapeRequestError)
    v3.encode(a5, t3.uint32(34).fork()).ldelim();
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = Te();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 2:
        if (r7 !== 16)
          break;
        n11.code = a5.int32();
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.message = a5.string();
        continue;
      case 4:
        if (r7 !== 34)
          break;
        n11.shapeRequestError.push(v3.decode(a5, a5.uint32()));
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return O.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = Te();
  return t3.code = e5.code ?? 0, t3.message = e5.message ?? "", t3.shapeRequestError = e5.shapeRequestError?.map((a5) => v3.fromPartial(a5)) || [], t3;
} };
a2.set(O.$type, O);
function qe() {
  return { $type: "Electric.Satellite.v1_4.SatSubsResp.SatSubsError.ShapeReqError", code: 0, message: "", requestId: "" };
}
var v3 = { $type: "Electric.Satellite.v1_4.SatSubsResp.SatSubsError.ShapeReqError", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.code !== 0 && t3.uint32(8).int32(e5.code), e5.message !== "" && t3.uint32(18).string(e5.message), e5.requestId !== "" && t3.uint32(26).string(e5.requestId), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = qe();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 8)
          break;
        n11.code = a5.int32();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.message = a5.string();
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.requestId = a5.string();
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return v3.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = qe();
  return t3.code = e5.code ?? 0, t3.message = e5.message ?? "", t3.requestId = e5.requestId ?? "", t3;
} };
a2.set(v3.$type, v3);
function Ue() {
  return { $type: "Electric.Satellite.v1_4.SatUnsubsReq", subscriptionIds: [] };
}
var z = { $type: "Electric.Satellite.v1_4.SatUnsubsReq", encode(e5, t3 = import_minimal.default.Writer.create()) {
  for (const a5 of e5.subscriptionIds)
    t3.uint32(10).string(a5);
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = Ue();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.subscriptionIds.push(a5.string());
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return z.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = Ue();
  return t3.subscriptionIds = e5.subscriptionIds?.map((a5) => a5) || [], t3;
} };
a2.set(z.$type, z);
function We() {
  return { $type: "Electric.Satellite.v1_4.SatUnsubsResp" };
}
var X = { $type: "Electric.Satellite.v1_4.SatUnsubsResp", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = We();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return X.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  return We();
} };
a2.set(X.$type, X);
function Ae() {
  return { $type: "Electric.Satellite.v1_4.SatShapeReq", requestId: "", shapeDefinition: void 0 };
}
var $ = { $type: "Electric.Satellite.v1_4.SatShapeReq", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.requestId !== "" && t3.uint32(10).string(e5.requestId), e5.shapeDefinition !== void 0 && T3.encode(e5.shapeDefinition, t3.uint32(18).fork()).ldelim(), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = Ae();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.requestId = a5.string();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.shapeDefinition = T3.decode(a5, a5.uint32());
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return $.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = Ae();
  return t3.requestId = e5.requestId ?? "", t3.shapeDefinition = e5.shapeDefinition !== void 0 && e5.shapeDefinition !== null ? T3.fromPartial(e5.shapeDefinition) : void 0, t3;
} };
a2.set($.$type, $);
function Me() {
  return { $type: "Electric.Satellite.v1_4.SatShapeDef", selects: [] };
}
var T3 = { $type: "Electric.Satellite.v1_4.SatShapeDef", encode(e5, t3 = import_minimal.default.Writer.create()) {
  for (const a5 of e5.selects)
    q2.encode(a5, t3.uint32(10).fork()).ldelim();
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = Me();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.selects.push(q2.decode(a5, a5.uint32()));
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return T3.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = Me();
  return t3.selects = e5.selects?.map((a5) => q2.fromPartial(a5)) || [], t3;
} };
a2.set(T3.$type, T3);
function Be() {
  return { $type: "Electric.Satellite.v1_4.SatShapeDef.Select", tablename: "" };
}
var q2 = { $type: "Electric.Satellite.v1_4.SatShapeDef.Select", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.tablename !== "" && t3.uint32(10).string(e5.tablename), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = Be();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.tablename = a5.string();
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return q2.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = Be();
  return t3.tablename = e5.tablename ?? "", t3;
} };
a2.set(q2.$type, q2);
function Ne() {
  return { $type: "Electric.Satellite.v1_4.SatSubsDataError", code: 0, message: "", subscriptionId: "", shapeRequestError: [] };
}
var Y = { $type: "Electric.Satellite.v1_4.SatSubsDataError", encode(e5, t3 = import_minimal.default.Writer.create()) {
  e5.code !== 0 && t3.uint32(8).int32(e5.code), e5.message !== "" && t3.uint32(18).string(e5.message), e5.subscriptionId !== "" && t3.uint32(26).string(e5.subscriptionId);
  for (const a5 of e5.shapeRequestError)
    U2.encode(a5, t3.uint32(34).fork()).ldelim();
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = Ne();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 8)
          break;
        n11.code = a5.int32();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.message = a5.string();
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.subscriptionId = a5.string();
        continue;
      case 4:
        if (r7 !== 34)
          break;
        n11.shapeRequestError.push(U2.decode(a5, a5.uint32()));
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return Y.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = Ne();
  return t3.code = e5.code ?? 0, t3.message = e5.message ?? "", t3.subscriptionId = e5.subscriptionId ?? "", t3.shapeRequestError = e5.shapeRequestError?.map((a5) => U2.fromPartial(a5)) || [], t3;
} };
a2.set(Y.$type, Y);
function we() {
  return { $type: "Electric.Satellite.v1_4.SatSubsDataError.ShapeReqError", code: 0, message: "", requestId: "" };
}
var U2 = { $type: "Electric.Satellite.v1_4.SatSubsDataError.ShapeReqError", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.code !== 0 && t3.uint32(8).int32(e5.code), e5.message !== "" && t3.uint32(18).string(e5.message), e5.requestId !== "" && t3.uint32(26).string(e5.requestId), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = we();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 8)
          break;
        n11.code = a5.int32();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.message = a5.string();
        continue;
      case 3:
        if (r7 !== 26)
          break;
        n11.requestId = a5.string();
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return U2.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = we();
  return t3.code = e5.code ?? 0, t3.message = e5.message ?? "", t3.requestId = e5.requestId ?? "", t3;
} };
a2.set(U2.$type, U2);
function Ce() {
  return { $type: "Electric.Satellite.v1_4.SatSubsDataBegin", subscriptionId: "", lsn: new Uint8Array() };
}
var Q = { $type: "Electric.Satellite.v1_4.SatSubsDataBegin", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.subscriptionId !== "" && t3.uint32(10).string(e5.subscriptionId), e5.lsn.length !== 0 && t3.uint32(18).bytes(e5.lsn), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = Ce();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.subscriptionId = a5.string();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.lsn = a5.bytes();
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return Q.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = Ce();
  return t3.subscriptionId = e5.subscriptionId ?? "", t3.lsn = e5.lsn ?? new Uint8Array(), t3;
} };
a2.set(Q.$type, Q);
function Le() {
  return { $type: "Electric.Satellite.v1_4.SatSubsDataEnd" };
}
var J = { $type: "Electric.Satellite.v1_4.SatSubsDataEnd", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = Le();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return J.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  return Le();
} };
a2.set(J.$type, J);
function He() {
  return { $type: "Electric.Satellite.v1_4.SatShapeDataBegin", requestId: "", uuid: "" };
}
var j = { $type: "Electric.Satellite.v1_4.SatShapeDataBegin", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return e5.requestId !== "" && t3.uint32(10).string(e5.requestId), e5.uuid !== "" && t3.uint32(18).string(e5.uuid), t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = He();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
      case 1:
        if (r7 !== 10)
          break;
        n11.requestId = a5.string();
        continue;
      case 2:
        if (r7 !== 18)
          break;
        n11.uuid = a5.string();
        continue;
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return j.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  const t3 = He();
  return t3.requestId = e5.requestId ?? "", t3.uuid = e5.uuid ?? "", t3;
} };
a2.set(j.$type, j);
function Ve() {
  return { $type: "Electric.Satellite.v1_4.SatShapeDataEnd" };
}
var ee = { $type: "Electric.Satellite.v1_4.SatShapeDataEnd", encode(e5, t3 = import_minimal.default.Writer.create()) {
  return t3;
}, decode(e5, t3) {
  const a5 = e5 instanceof import_minimal.default.Reader ? e5 : import_minimal.default.Reader.create(e5);
  let s7 = t3 === void 0 ? a5.len : a5.pos + t3;
  const n11 = Ve();
  for (; a5.pos < s7; ) {
    const r7 = a5.uint32();
    switch (r7 >>> 3) {
    }
    if ((r7 & 7) === 4 || r7 === 0)
      break;
    a5.skipType(r7 & 7);
  }
  return n11;
}, create(e5) {
  return ee.fromPartial(e5 ?? {});
}, fromPartial(e5) {
  return Ve();
} };
a2.set(ee.$type, ee), import_minimal.default.util.Long !== long_default && (import_minimal.default.util.Long = long_default, import_minimal.default.configure());

// node_modules/electric-sql/dist/util/types.js
var x4 = class extends Error {
  code;
  constructor(t3, T9) {
    super(T9), this.code = t3;
  }
};
var _2 = ((n11) => (n11[n11.CONNECTION_FAILED_AFTER_RETRY = 0] = "CONNECTION_FAILED_AFTER_RETRY", n11[n11.INTERNAL = 1] = "INTERNAL", n11[n11.TIMEOUT = 2] = "TIMEOUT", n11[n11.REPLICATION_NOT_STARTED = 3] = "REPLICATION_NOT_STARTED", n11[n11.REPLICATION_ALREADY_STARTED = 4] = "REPLICATION_ALREADY_STARTED", n11[n11.UNEXPECTED_STATE = 5] = "UNEXPECTED_STATE", n11[n11.UNEXPECTED_MESSAGE_TYPE = 6] = "UNEXPECTED_MESSAGE_TYPE", n11[n11.PROTOCOL_VIOLATION = 7] = "PROTOCOL_VIOLATION", n11[n11.UNKNOWN_DATA_TYPE = 8] = "UNKNOWN_DATA_TYPE", n11[n11.SOCKET_ERROR = 9] = "SOCKET_ERROR", n11[n11.UNRECOGNIZED = 10] = "UNRECOGNIZED", n11[n11.AUTH_ERROR = 11] = "AUTH_ERROR", n11[n11.AUTH_FAILED = 12] = "AUTH_FAILED", n11[n11.AUTH_REQUIRED = 13] = "AUTH_REQUIRED", n11[n11.INVALID_REQUEST = 14] = "INVALID_REQUEST", n11[n11.PROTO_VSN_MISMATCH = 15] = "PROTO_VSN_MISMATCH", n11[n11.REPLICATION_FAILED = 16] = "REPLICATION_FAILED", n11[n11.BEHIND_WINDOW = 17] = "BEHIND_WINDOW", n11[n11.INVALID_POSITION = 18] = "INVALID_POSITION", n11[n11.SUBSCRIPTION_NOT_FOUND = 19] = "SUBSCRIPTION_NOT_FOUND", n11[n11.SUBSCRIPTION_ERROR = 20] = "SUBSCRIPTION_ERROR", n11[n11.MALFORMED_LSN = 21] = "MALFORMED_LSN", n11[n11.UNKNOWN_SCHEMA_VSN = 22] = "UNKNOWN_SCHEMA_VSN", n11[n11.SHAPE_REQUEST_ERROR = 23] = "SHAPE_REQUEST_ERROR", n11[n11.SUBSCRIPTION_ID_ALREADY_EXISTS = 24] = "SUBSCRIPTION_ID_ALREADY_EXISTS", n11[n11.SUBSCRIPTION_ALREADY_EXISTS = 25] = "SUBSCRIPTION_ALREADY_EXISTS", n11[n11.UNEXPECTED_SUBSCRIPTION_STATE = 26] = "UNEXPECTED_SUBSCRIPTION_STATE", n11[n11.TABLE_NOT_FOUND = 27] = "TABLE_NOT_FOUND", n11[n11.REFERENTIAL_INTEGRITY_VIOLATION = 28] = "REFERENTIAL_INTEGRITY_VIOLATION", n11[n11.EMPTY_SHAPE_DEFINITION = 29] = "EMPTY_SHAPE_DEFINITION", n11[n11.DUPLICATE_TABLE_IN_SHAPE_DEFINITION = 30] = "DUPLICATE_TABLE_IN_SHAPE_DEFINITION", n11[n11.SHAPE_DELIVERY_ERROR = 31] = "SHAPE_DELIVERY_ERROR", n11[n11.SHAPE_SIZE_LIMIT_EXCEEDED = 32] = "SHAPE_SIZE_LIMIT_EXCEEDED", n11))(_2 || {});
var I2 = ((s7) => (s7.INSERT = "INSERT", s7.UPDATE = "UPDATE", s7.DELETE = "DELETE", s7))(I2 || {});
function D3(R6) {
  return "relation" in R6;
}
var a3 = ((p10) => (p10[p10.STOPPED = 0] = "STOPPED", p10[p10.STARTING = 1] = "STARTING", p10[p10.STOPPING = 2] = "STOPPING", p10[p10.ACTIVE = 3] = "ACTIVE", p10))(a3 || {});
var g3 = ((T9) => (T9[T9.LOCAL_SEND = 0] = "LOCAL_SEND", T9[T9.REMOTE_COMMIT = 1] = "REMOTE_COMMIT", T9))(g3 || {});

// node_modules/electric-sql/dist/util/bitmaskHelpers.js
function i6(n11, t3) {
  const e5 = Math.floor(t3 / 8), s7 = 1 << 7 - t3 % 8;
  n11[e5] = n11[e5] | s7;
}
function b5(n11, t3) {
  const e5 = Math.floor(t3 / 8), o9 = 7 - t3 % 8;
  return n11[e5] >>> o9 & 1;
}

// node_modules/electric-sql/dist/util/proto.js
var D4 = { [Fe.AUTH_FAILED]: _2.AUTH_FAILED, [Fe.AUTH_REQUIRED]: _2.AUTH_REQUIRED, [Fe.INVALID_REQUEST]: _2.INVALID_REQUEST, [Fe.PROTO_VSN_MISMATCH]: _2.PROTO_VSN_MISMATCH, [Fe.REPLICATION_FAILED]: _2.REPLICATION_FAILED, [Fe.SCHEMA_VSN_MISMATCH]: _2.UNKNOWN_SCHEMA_VSN, [Fe.INTERNAL]: _2.INTERNAL, [Fe.UNRECOGNIZED]: _2.UNRECOGNIZED };
var P2 = { [Ge.CODE_UNSPECIFIED]: _2.INTERNAL, [Ge.UNRECOGNIZED]: _2.INTERNAL, [Ge.BEHIND_WINDOW]: _2.BEHIND_WINDOW, [Ge.INVALID_POSITION]: _2.INVALID_POSITION, [Ge.SUBSCRIPTION_NOT_FOUND]: _2.SUBSCRIPTION_NOT_FOUND, [Ge.MALFORMED_LSN]: _2.MALFORMED_LSN, [Ge.UNKNOWN_SCHEMA_VSN]: _2.UNKNOWN_SCHEMA_VSN };
var c4 = { [Ye.CODE_UNSPECIFIED]: _2.INTERNAL, [Ye.UNRECOGNIZED]: _2.INTERNAL, [Ye.SHAPE_REQUEST_ERROR]: _2.SHAPE_REQUEST_ERROR, [Ye.SUBSCRIPTION_ID_ALREADY_EXISTS]: _2.SUBSCRIPTION_ID_ALREADY_EXISTS };
var g4 = { [Qe.CODE_UNSPECIFIED]: _2.INTERNAL, [Qe.UNRECOGNIZED]: _2.INTERNAL, [Qe.TABLE_NOT_FOUND]: _2.TABLE_NOT_FOUND, [Qe.REFERENTIAL_INTEGRITY_VIOLATION]: _2.REFERENTIAL_INTEGRITY_VIOLATION, [Qe.EMPTY_SHAPE_DEFINITION]: _2.EMPTY_SHAPE_DEFINITION, [Qe.DUPLICATE_TABLE_IN_SHAPE_DEFINITION]: _2.DUPLICATE_TABLE_IN_SHAPE_DEFINITION };
var u5 = { [Je.CODE_UNSPECIFIED]: _2.INTERNAL, [Je.UNRECOGNIZED]: _2.INTERNAL, [Je.SHAPE_DELIVERY_ERROR]: _2.SHAPE_DELIVERY_ERROR };
var T4 = { [je.CODE_UNSPECIFIED]: _2.INTERNAL, [je.UNRECOGNIZED]: _2.INTERNAL, [je.SHAPE_SIZE_LIMIT_EXCEEDED]: _2.SHAPE_SIZE_LIMIT_EXCEEDED };
var l3 = { SatErrorResp: [0, N], SatAuthReq: [1, M], SatAuthResp: [2, B], SatPingReq: [3, W2], SatPingResp: [4, A2], SatInStartReplicationReq: [5, w], SatInStartReplicationResp: [6, C2], SatInStopReplicationReq: [7, L], SatInStopReplicationResp: [8, H3], SatOpLog: [9, K2], SatRelation: [10, V], SatMigrationNotification: [11, F2], SatSubsReq: [12, Z], SatSubsResp: [13, G], SatSubsDataError: [14, Y], SatSubsDataBegin: [15, Q], SatSubsDataEnd: [16, J], SatShapeDataBegin: [17, j], SatShapeDataEnd: [18, ee], SatUnsubsReq: [19, z], SatUnsubsResp: [20, X] };
var R3 = Object.fromEntries(Object.entries(l3).map((t3) => [_3(t3[0]), t3[1]]));
var C3 = Object.fromEntries(Object.entries(l3).map((t3) => [t3[1][0], _3(t3[0])]));
function A3(t3) {
  const a5 = R3[t3.$type];
  return a5 ? a5[0] : 0;
}
function B2(t3) {
  return C3[t3] ?? "";
}
function w2(t3) {
  return R3[t3]?.[1];
}
function H4(t3) {
  const a5 = A3(t3), o9 = new Uint8Array(1);
  return o9.set([a5], 0), o9;
}
function O2() {
  return rt;
}
function _3(t3) {
  return O2() + "." + t3;
}
function x5(t3) {
  return new x4(D4[t3.errorType], "server error");
}
function m5(t3) {
  return new x4(P2[t3.code], t3.message);
}
function V2({ shapeRequestError: t3, code: a5, message: o9 }) {
  if (t3.length > 0) {
    const S6 = t3.map($2).map((s7) => s7.message).join("; "), E5 = `subscription error message: ${o9}; shape error messages: ${S6}`;
    return new x4(c4[a5], E5);
  }
  return new x4(c4[a5], o9);
}
function $2(t3) {
  return new x4(g4[t3.code], t3.message);
}
function j2({ shapeRequestError: t3, code: a5, message: o9 }) {
  if (t3.length > 0) {
    const S6 = t3.map(h3).map((s7) => s7.message).join("; "), E5 = `subscription data error message: ${o9}; shape error messages: ${S6}`;
    return new x4(u5[a5], E5);
  }
  return new x4(u5[a5], o9);
}
function h3(t3) {
  return new x4(T4[t3.code], t3.message);
}
function G2(t3) {
  const a5 = [];
  for (const o9 of t3) {
    const S6 = o9.requestId, s7 = { selects: o9.definition.selects.map((I5) => ({ tablename: I5.tablename })) }, b9 = $.fromPartial({ requestId: S6, shapeDefinition: s7 });
    a5.push(b9);
  }
  return a5;
}
function K3(t3) {
  switch (t3.$type) {
    case "Electric.Satellite.v1_4.SatAuthReq":
      return `#SatAuthReq{id: ${t3.id}, token: ${t3.token}}`;
    case "Electric.Satellite.v1_4.SatAuthResp":
      return `#SatAuthResp{id: ${t3.id}}`;
    case "Electric.Satellite.v1_4.SatErrorResp":
      return `#SatErrorResp{type: ${Fe[t3.errorType]}}`;
    case "Electric.Satellite.v1_4.SatInStartReplicationReq": {
      const a5 = t3.schemaVersion ? ` schema: ${t3.schemaVersion},` : "";
      return `#SatInStartReplicationReq{lsn: ${b2.fromBytes(t3.lsn)},${a5} subscriptions: [${t3.subscriptionIds}]}`;
    }
    case "Electric.Satellite.v1_4.SatInStartReplicationResp":
      return `#SatInStartReplicationResp{${t3.err ? "`" + m5(t3.err) + "`" : ""}}`;
    case "Electric.Satellite.v1_4.SatInStopReplicationReq":
      return "#SatInStopReplicationReq{}";
    case "Electric.Satellite.v1_4.SatInStopReplicationResp":
      return "#SatInStopReplicationResp{}";
    case "Electric.Satellite.v1_4.SatMigrationNotification":
      return `#SatMigrationNotification{to: ${t3.newSchemaVersion}, from: ${t3.newSchemaVersion}}`;
    case "Electric.Satellite.v1_4.SatPingReq":
      return "#SatPingReq{}";
    case "Electric.Satellite.v1_4.SatPingResp":
      return `#SatPingResp{lsn: ${t3.lsn ? b2.fromBytes(t3.lsn) : "NULL"}}`;
    case "Electric.Satellite.v1_4.SatRelation": {
      const a5 = t3.columns.map((o9) => `${o9.name}: ${o9.type}${o9.primaryKey ? " PK" : ""}`).join(", ");
      return `#SatRelation{for: ${t3.schemaName}.${t3.tableName}, as: ${t3.relationId}, cols: [${a5}]}`;
    }
    case "Electric.Satellite.v1_4.SatSubsDataBegin":
      return `#SatSubsDataBegin{id: ${t3.subscriptionId}, lsn: ${b2.fromBytes(t3.lsn)}}`;
    case "Electric.Satellite.v1_4.SatSubsDataEnd":
      return "#SatSubsDataEnd{}";
    case "Electric.Satellite.v1_4.SatShapeDataBegin":
      return `#SatShapeDataBegin{id: ${t3.requestId}}`;
    case "Electric.Satellite.v1_4.SatShapeDataEnd":
      return "#SatShapeDataEnd{}";
    case "Electric.Satellite.v1_4.SatSubsDataError": {
      const a5 = t3.shapeRequestError.map((S6) => `${S6.requestId}: ${je[S6.code]} (${S6.message})`), o9 = Je[t3.code];
      return `#SatSubsDataError{id: ${t3.subscriptionId}, code: ${o9}, msg: "${t3.message}", errors: [${a5}]}`;
    }
    case "Electric.Satellite.v1_4.SatSubsReq":
      return `#SatSubsReq{id: ${t3.subscriptionId}, shapes: ${JSON.stringify(t3.shapeRequests)}}`;
    case "Electric.Satellite.v1_4.SatSubsResp":
      if (t3.err) {
        const a5 = t3.err.shapeRequestError.map((o9) => `${o9.requestId}: ${Qe[o9.code]} (${o9.message})`);
        return `#SatSubsReq{id: ${t3.subscriptionId}, err: ${Ye[t3.err.code]} (${t3.err.message}), shapes: [${a5}]}`;
      } else
        return `#SatSubsReq{id: ${t3.subscriptionId}}`;
    case "Electric.Satellite.v1_4.SatUnsubsReq":
      return `#SatUnsubsReq{ids: ${t3.subscriptionIds}}`;
    case "Electric.Satellite.v1_4.SatUnsubsResp":
      return "#SatUnsubsResp{}";
    case "Electric.Satellite.v1_4.SatOpLog":
      return `#SatOpLog{ops: [${t3.ops.map(f3).join(", ")}]}`;
  }
}
function f3(t3) {
  return t3.begin ? `#Begin{lsn: ${b2.fromBytes(t3.begin.lsn)}, ts: ${t3.begin.commitTimestamp.toString()}, isMigration: ${t3.begin.isMigration}}` : t3.commit ? `#Commit{lsn: ${b2.fromBytes(t3.commit.lsn)}}` : t3.insert ? `#Insert{for: ${t3.insert.relationId}, tags: [${t3.insert.tags}], new: [${t3.insert.rowData ? p2(t3.insert.rowData) : ""}]}` : t3.update ? `#Update{for: ${t3.update.relationId}, tags: [${t3.update.tags}], new: [${t3.update.rowData ? p2(t3.update.rowData) : ""}], old: data: [${t3.update.oldRowData ? p2(t3.update.oldRowData) : ""}]}` : t3.delete ? `#Delete{for: ${t3.delete.relationId}, tags: [${t3.delete.tags}], old: [${t3.delete.oldRowData ? p2(t3.delete.oldRowData) : ""}]}` : t3.migrate ? `#Migrate{vsn: ${t3.migrate.version}, for: ${t3.migrate.table?.name}, stmts: [${t3.migrate.stmts.map((a5) => a5.sql.replaceAll(`
`, "\\n")).join("; ")}]}` : "";
}
function p2(t3) {
  return t3.values.map((a5, o9) => b5(t3.nullsBitmask, o9) == 0 ? JSON.stringify(x2.text(a5)) : "\u2205").join(", ");
}

// node_modules/electric-sql/dist/util/tab.js
var c5 = "electric-sql.utils.tab:id";
var o2 = null;
var E2 = (e5 = {}) => {
  const g9 = e5.key ?? c5;
  let n11;
  if (e5.storage !== void 0)
    n11 = e5.storage;
  else
    try {
      n11 = window.sessionStorage;
    } catch {
      n11 = {};
    }
  let t3;
  if (e5.navEntries !== void 0)
    t3 = e5.navEntries;
  else
    try {
      t3 = window.performance.getEntriesByType("navigation");
    } catch {
      t3 = [];
    }
  let a5, i8;
  try {
    a5 = n11.getItem(g9), i8 = true;
  } catch {
    a5 = o2, i8 = false;
  }
  const s7 = a5 !== null;
  if (s7 && !i8)
    return { tabId: a5, hasExisting: true, usingExisting: true };
  const l7 = (t3 && t3.length ? t3[0] : { type: null }).type === "back_forward";
  if (s7 && !l7)
    return { tabId: a5, hasExisting: true, usingExisting: true, mayBeDuplicate: false };
  const r7 = i2();
  try {
    n11.setItem(g9, r7);
  } catch {
    o2 = r7;
  }
  return { tabId: r7, hasExisting: s7, usingExisting: false, mayBeDuplicate: l7 };
};

// node_modules/electric-sql/dist/drivers/util/results.js
var f4 = (e5) => {
  const o9 = [];
  if (e5.length == 0)
    return o9;
  for (const r7 of e5) {
    const s7 = r7.columns;
    r7.values.map((n11) => {
      const t3 = {};
      n11.map((u8, l7) => {
        const w5 = s7[l7];
        t3[w5] = u8;
      }), o9.push(t3);
    });
  }
  return o9;
};

// node_modules/electric-sql/dist/util/statements.js
function q3(n11) {
  const t3 = n11.toLowerCase().trimStart();
  return t3.startsWith("insert") || t3.startsWith("update") || t3.startsWith("delete");
}
function C4(n11, t3, a5, o9) {
  const i8 = [], s7 = t3.length, c8 = a5.length;
  let e5 = 0;
  const l7 = " (" + "?, ".repeat(s7).slice(0, -2) + "),", p10 = (o9 - o9 % s7) / s7;
  for (; e5 < c8; ) {
    const r7 = Math.min(c8 - e5, p10), u8 = n11 + l7.repeat(r7).slice(0, -1), h8 = a5.slice(e5, e5 + r7).flatMap((m10) => t3.map((S6) => m10[S6]));
    e5 += r7, i8.push({ sql: u8, args: h8 });
  }
  return i8;
}

// node_modules/async-mutex/index.mjs
var E_TIMEOUT = new Error("timeout while waiting for mutex to become available");
var E_ALREADY_LOCKED = new Error("mutex already locked");
var E_CANCELED = new Error("request for lock canceled");
var __awaiter$2 = function(thisArg, _arguments, P4, generator) {
  function adopt(value) {
    return value instanceof P4 ? value : new P4(function(resolve) {
      resolve(value);
    });
  }
  return new (P4 || (P4 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e5) {
        reject(e5);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e5) {
        reject(e5);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var Semaphore = class {
  constructor(_value, _cancelError = E_CANCELED) {
    this._value = _value;
    this._cancelError = _cancelError;
    this._weightedQueues = [];
    this._weightedWaiters = [];
  }
  acquire(weight = 1) {
    if (weight <= 0)
      throw new Error(`invalid weight ${weight}: must be positive`);
    return new Promise((resolve, reject) => {
      if (!this._weightedQueues[weight - 1])
        this._weightedQueues[weight - 1] = [];
      this._weightedQueues[weight - 1].push({ resolve, reject });
      this._dispatch();
    });
  }
  runExclusive(callback, weight = 1) {
    return __awaiter$2(this, void 0, void 0, function* () {
      const [value, release] = yield this.acquire(weight);
      try {
        return yield callback(value);
      } finally {
        release();
      }
    });
  }
  waitForUnlock(weight = 1) {
    if (weight <= 0)
      throw new Error(`invalid weight ${weight}: must be positive`);
    return new Promise((resolve) => {
      if (!this._weightedWaiters[weight - 1])
        this._weightedWaiters[weight - 1] = [];
      this._weightedWaiters[weight - 1].push(resolve);
      this._dispatch();
    });
  }
  isLocked() {
    return this._value <= 0;
  }
  getValue() {
    return this._value;
  }
  setValue(value) {
    this._value = value;
    this._dispatch();
  }
  release(weight = 1) {
    if (weight <= 0)
      throw new Error(`invalid weight ${weight}: must be positive`);
    this._value += weight;
    this._dispatch();
  }
  cancel() {
    this._weightedQueues.forEach((queue) => queue.forEach((entry) => entry.reject(this._cancelError)));
    this._weightedQueues = [];
  }
  _dispatch() {
    var _a;
    for (let weight = this._value; weight > 0; weight--) {
      const queueEntry = (_a = this._weightedQueues[weight - 1]) === null || _a === void 0 ? void 0 : _a.shift();
      if (!queueEntry)
        continue;
      const previousValue = this._value;
      const previousWeight = weight;
      this._value -= weight;
      weight = this._value + 1;
      queueEntry.resolve([previousValue, this._newReleaser(previousWeight)]);
    }
    this._drainUnlockWaiters();
  }
  _newReleaser(weight) {
    let called = false;
    return () => {
      if (called)
        return;
      called = true;
      this.release(weight);
    };
  }
  _drainUnlockWaiters() {
    for (let weight = this._value; weight > 0; weight--) {
      if (!this._weightedWaiters[weight - 1])
        continue;
      this._weightedWaiters[weight - 1].forEach((waiter) => waiter());
      this._weightedWaiters[weight - 1] = [];
    }
  }
};
var __awaiter$1 = function(thisArg, _arguments, P4, generator) {
  function adopt(value) {
    return value instanceof P4 ? value : new P4(function(resolve) {
      resolve(value);
    });
  }
  return new (P4 || (P4 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e5) {
        reject(e5);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e5) {
        reject(e5);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var Mutex = class {
  constructor(cancelError) {
    this._semaphore = new Semaphore(1, cancelError);
  }
  acquire() {
    return __awaiter$1(this, void 0, void 0, function* () {
      const [, releaser] = yield this._semaphore.acquire();
      return releaser;
    });
  }
  runExclusive(callback) {
    return this._semaphore.runExclusive(() => callback());
  }
  isLocked() {
    return this._semaphore.isLocked();
  }
  waitForUnlock() {
    return this._semaphore.waitForUnlock();
  }
  release() {
    if (this._semaphore.isLocked())
      this._semaphore.release();
  }
  cancel() {
    return this._semaphore.cancel();
  }
};

// node_modules/electric-sql/dist/drivers/wa-sqlite/adapter.js
var D5 = class {
  db;
  txMutex;
  constructor(t3) {
    this.db = t3, this.txMutex = new Mutex();
  }
  async runInTransaction(...t3) {
    const e5 = await this.txMutex.acquire();
    let a5 = false, r7 = 0;
    try {
      await this.db.exec({ sql: "BEGIN" }), a5 = true;
      for (const i8 of t3)
        await this.db.exec(i8), q3(i8.sql) && (r7 += await this.db.getRowsModified());
      return { rowsAffected: r7 };
    } catch (i8) {
      throw await this.db.exec({ sql: "ROLLBACK" }), a5 = false, i8;
    } finally {
      a5 && await this.db.exec({ sql: "COMMIT" }), e5();
    }
  }
  async transaction(t3) {
    const e5 = await this.txMutex.acquire();
    try {
      await this.db.exec({ sql: "BEGIN" });
    } catch (a5) {
      throw e5(), a5;
    }
    return new Promise((a5, r7) => {
      const i8 = (n11) => {
        e5(), r7(n11);
      }, o9 = new h4(this, i8);
      t3(o9, (n11) => {
        this.db.exec({ sql: "COMMIT" }).then(() => {
          e5(), a5(n11);
        }).catch((d8) => {
          e5(), r7(d8);
        });
      });
    });
  }
  run(t3) {
    return this.txMutex.runExclusive(() => this._runUncoordinated(t3));
  }
  async _runUncoordinated(t3) {
    return await this.db.exec(t3), { rowsAffected: this.db.getRowsModified() };
  }
  query(t3) {
    return this.txMutex.runExclusive(() => this._queryUncoordinated(t3));
  }
  async _queryUncoordinated(t3) {
    const e5 = await this.db.exec(t3);
    return f4([e5]);
  }
  tableNames({ sql: t3 }) {
    return S2(t3);
  }
};
var h4 = class {
  constructor(t3, e5) {
    this.adapter = t3;
    this.signalFailure = e5;
  }
  rollback(t3, e5) {
    const a5 = () => {
      typeof e5 < "u" && e5(t3), this.signalFailure(t3);
    };
    this.adapter._runUncoordinated({ sql: "ROLLBACK" }).then(() => {
      a5();
    }).catch(() => a5());
  }
  invokeCallback(t3, e5, a5) {
    t3.then((r7) => {
      typeof e5 < "u" && e5(this, r7);
    }).catch((r7) => {
      this.rollback(r7, a5);
    });
  }
  run(t3, e5, a5) {
    const r7 = this.adapter._runUncoordinated(t3);
    this.invokeCallback(r7, e5, a5);
  }
  query(t3, e5, a5) {
    const r7 = this.adapter._queryUncoordinated(t3);
    this.invokeCallback(r7, e5, a5);
  }
};

// node_modules/wa-sqlite/dist/wa-sqlite-async.mjs
var import_meta = {};
var Module = (() => {
  var _scriptDir = import_meta.url;
  return function(Module2 = {}) {
    var e5;
    e5 || (e5 = typeof Module2 !== "undefined" ? Module2 : {});
    var aa, ba;
    e5.ready = new Promise((a5, b9) => {
      aa = a5;
      ba = b9;
    });
    var ca = Object.assign({}, e5), da = "./this.program", ea = (a5, b9) => {
      throw b9;
    }, fa = "object" == typeof window, ia = "function" == typeof importScripts, p10 = "", ja;
    if (fa || ia)
      ia ? p10 = self.location.href : "undefined" != typeof document && document.currentScript && (p10 = document.currentScript.src), _scriptDir && (p10 = _scriptDir), 0 !== p10.indexOf("blob:") ? p10 = p10.substr(0, p10.replace(/[?#].*/, "").lastIndexOf("/") + 1) : p10 = "", ia && (ja = (a5) => {
        var b9 = new XMLHttpRequest();
        b9.open("GET", a5, false);
        b9.responseType = "arraybuffer";
        b9.send(null);
        return new Uint8Array(b9.response);
      });
    var ka = e5.print || console.log.bind(console), t3 = e5.printErr || console.warn.bind(console);
    Object.assign(e5, ca);
    ca = null;
    e5.thisProgram && (da = e5.thisProgram);
    e5.quit && (ea = e5.quit);
    var la;
    e5.wasmBinary && (la = e5.wasmBinary);
    var noExitRuntime = e5.noExitRuntime || true;
    "object" != typeof WebAssembly && u8("no native wasm support detected");
    var ma, v10 = false, na, x6, y6, oa, A6, B7, pa, qa;
    function ra() {
      var a5 = ma.buffer;
      e5.HEAP8 = x6 = new Int8Array(a5);
      e5.HEAP16 = oa = new Int16Array(a5);
      e5.HEAP32 = A6 = new Int32Array(a5);
      e5.HEAPU8 = y6 = new Uint8Array(a5);
      e5.HEAPU16 = new Uint16Array(a5);
      e5.HEAPU32 = B7 = new Uint32Array(a5);
      e5.HEAPF32 = pa = new Float32Array(a5);
      e5.HEAPF64 = qa = new Float64Array(a5);
    }
    var sa = [], ta = [], ua = [], va = [], wa = 0;
    function xa() {
      var a5 = e5.preRun.shift();
      sa.unshift(a5);
    }
    var C9 = 0, ya = null, za = null;
    function u8(a5) {
      if (e5.onAbort)
        e5.onAbort(a5);
      a5 = "Aborted(" + a5 + ")";
      t3(a5);
      v10 = true;
      na = 1;
      a5 = new WebAssembly.RuntimeError(a5 + ". Build with -sASSERTIONS for more info.");
      ba(a5);
      throw a5;
    }
    function Aa(a5) {
      return a5.startsWith("data:application/octet-stream;base64,");
    }
    var E5;
    if (e5.locateFile) {
      if (E5 = "wa-sqlite-async.wasm", !Aa(E5)) {
        var Ba = E5;
        E5 = e5.locateFile ? e5.locateFile(Ba, p10) : p10 + Ba;
      }
    } else
      E5 = new URL("wa-sqlite-async.wasm", import_meta.url).href;
    function Ca(a5) {
      try {
        if (a5 == E5 && la)
          return new Uint8Array(la);
        if (ja)
          return ja(a5);
        throw "both async and sync fetching of the wasm failed";
      } catch (b9) {
        u8(b9);
      }
    }
    function Da(a5) {
      return la || !fa && !ia || "function" != typeof fetch ? Promise.resolve().then(() => Ca(a5)) : fetch(a5, { credentials: "same-origin" }).then((b9) => {
        if (!b9.ok)
          throw "failed to load wasm binary file at '" + a5 + "'";
        return b9.arrayBuffer();
      }).catch(() => Ca(a5));
    }
    function Ea(a5, b9, c8) {
      return Da(a5).then((d8) => WebAssembly.instantiate(d8, b9)).then((d8) => d8).then(c8, (d8) => {
        t3("failed to asynchronously prepare wasm: " + d8);
        u8(d8);
      });
    }
    function Fa(a5, b9) {
      var c8 = E5;
      return la || "function" != typeof WebAssembly.instantiateStreaming || Aa(c8) || "function" != typeof fetch ? Ea(c8, a5, b9) : fetch(c8, { credentials: "same-origin" }).then((d8) => WebAssembly.instantiateStreaming(d8, a5).then(b9, function(f6) {
        t3("wasm streaming compile failed: " + f6);
        t3("falling back to ArrayBuffer instantiation");
        return Ea(c8, a5, b9);
      }));
    }
    var H5, I5;
    function Ga(a5) {
      this.name = "ExitStatus";
      this.message = "Program terminated with exit(" + a5 + ")";
      this.status = a5;
    }
    function Ha(a5) {
      for (; 0 < a5.length; )
        a5.shift()(e5);
    }
    function K6(a5, b9 = "i8") {
      b9.endsWith("*") && (b9 = "*");
      switch (b9) {
        case "i1":
          return x6[a5 >> 0];
        case "i8":
          return x6[a5 >> 0];
        case "i16":
          return oa[a5 >> 1];
        case "i32":
          return A6[a5 >> 2];
        case "i64":
          return A6[a5 >> 2];
        case "float":
          return pa[a5 >> 2];
        case "double":
          return qa[a5 >> 3];
        case "*":
          return B7[a5 >> 2];
        default:
          u8("invalid type for getValue: " + b9);
      }
    }
    function L2(a5, b9, c8 = "i8") {
      c8.endsWith("*") && (c8 = "*");
      switch (c8) {
        case "i1":
          x6[a5 >> 0] = b9;
          break;
        case "i8":
          x6[a5 >> 0] = b9;
          break;
        case "i16":
          oa[a5 >> 1] = b9;
          break;
        case "i32":
          A6[a5 >> 2] = b9;
          break;
        case "i64":
          I5 = [b9 >>> 0, (H5 = b9, 1 <= +Math.abs(H5) ? 0 < H5 ? +Math.floor(H5 / 4294967296) >>> 0 : ~~+Math.ceil((H5 - +(~~H5 >>> 0)) / 4294967296) >>> 0 : 0)];
          A6[a5 >> 2] = I5[0];
          A6[a5 + 4 >> 2] = I5[1];
          break;
        case "float":
          pa[a5 >> 2] = b9;
          break;
        case "double":
          qa[a5 >> 3] = b9;
          break;
        case "*":
          B7[a5 >> 2] = b9;
          break;
        default:
          u8("invalid type for setValue: " + c8);
      }
    }
    var Ia = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0;
    function Ja(a5, b9, c8) {
      var d8 = b9 + c8;
      for (c8 = b9; a5[c8] && !(c8 >= d8); )
        ++c8;
      if (16 < c8 - b9 && a5.buffer && Ia)
        return Ia.decode(a5.subarray(b9, c8));
      for (d8 = ""; b9 < c8; ) {
        var f6 = a5[b9++];
        if (f6 & 128) {
          var h8 = a5[b9++] & 63;
          if (192 == (f6 & 224))
            d8 += String.fromCharCode((f6 & 31) << 6 | h8);
          else {
            var g9 = a5[b9++] & 63;
            f6 = 224 == (f6 & 240) ? (f6 & 15) << 12 | h8 << 6 | g9 : (f6 & 7) << 18 | h8 << 12 | g9 << 6 | a5[b9++] & 63;
            65536 > f6 ? d8 += String.fromCharCode(f6) : (f6 -= 65536, d8 += String.fromCharCode(55296 | f6 >> 10, 56320 | f6 & 1023));
          }
        } else
          d8 += String.fromCharCode(f6);
      }
      return d8;
    }
    function M3(a5, b9) {
      return a5 ? Ja(y6, a5, b9) : "";
    }
    var Ka = (a5, b9) => {
      for (var c8 = 0, d8 = a5.length - 1; 0 <= d8; d8--) {
        var f6 = a5[d8];
        "." === f6 ? a5.splice(d8, 1) : ".." === f6 ? (a5.splice(d8, 1), c8++) : c8 && (a5.splice(d8, 1), c8--);
      }
      if (b9)
        for (; c8; c8--)
          a5.unshift("..");
      return a5;
    }, N6 = (a5) => {
      var b9 = "/" === a5.charAt(0), c8 = "/" === a5.substr(-1);
      (a5 = Ka(a5.split("/").filter((d8) => !!d8), !b9).join("/")) || b9 || (a5 = ".");
      a5 && c8 && (a5 += "/");
      return (b9 ? "/" : "") + a5;
    }, La = (a5) => {
      var b9 = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(a5).slice(1);
      a5 = b9[0];
      b9 = b9[1];
      if (!a5 && !b9)
        return ".";
      b9 && (b9 = b9.substr(0, b9.length - 1));
      return a5 + b9;
    }, Ma = (a5) => {
      if ("/" === a5)
        return "/";
      a5 = N6(a5);
      a5 = a5.replace(/\/$/, "");
      var b9 = a5.lastIndexOf("/");
      return -1 === b9 ? a5 : a5.substr(b9 + 1);
    };
    function Na() {
      if ("object" == typeof crypto && "function" == typeof crypto.getRandomValues)
        return (a5) => crypto.getRandomValues(a5);
      u8("initRandomDevice");
    }
    function Oa(a5) {
      return (Oa = Na())(a5);
    }
    function Pa() {
      for (var a5 = "", b9 = false, c8 = arguments.length - 1; -1 <= c8 && !b9; c8--) {
        b9 = 0 <= c8 ? arguments[c8] : "/";
        if ("string" != typeof b9)
          throw new TypeError("Arguments to path.resolve must be strings");
        if (!b9)
          return "";
        a5 = b9 + "/" + a5;
        b9 = "/" === b9.charAt(0);
      }
      a5 = Ka(a5.split("/").filter((d8) => !!d8), !b9).join("/");
      return (b9 ? "/" : "") + a5 || ".";
    }
    function Qa(a5) {
      for (var b9 = 0, c8 = 0; c8 < a5.length; ++c8) {
        var d8 = a5.charCodeAt(c8);
        127 >= d8 ? b9++ : 2047 >= d8 ? b9 += 2 : 55296 <= d8 && 57343 >= d8 ? (b9 += 4, ++c8) : b9 += 3;
      }
      return b9;
    }
    function Ra(a5, b9, c8, d8) {
      if (!(0 < d8))
        return 0;
      var f6 = c8;
      d8 = c8 + d8 - 1;
      for (var h8 = 0; h8 < a5.length; ++h8) {
        var g9 = a5.charCodeAt(h8);
        if (55296 <= g9 && 57343 >= g9) {
          var m10 = a5.charCodeAt(++h8);
          g9 = 65536 + ((g9 & 1023) << 10) | m10 & 1023;
        }
        if (127 >= g9) {
          if (c8 >= d8)
            break;
          b9[c8++] = g9;
        } else {
          if (2047 >= g9) {
            if (c8 + 1 >= d8)
              break;
            b9[c8++] = 192 | g9 >> 6;
          } else {
            if (65535 >= g9) {
              if (c8 + 2 >= d8)
                break;
              b9[c8++] = 224 | g9 >> 12;
            } else {
              if (c8 + 3 >= d8)
                break;
              b9[c8++] = 240 | g9 >> 18;
              b9[c8++] = 128 | g9 >> 12 & 63;
            }
            b9[c8++] = 128 | g9 >> 6 & 63;
          }
          b9[c8++] = 128 | g9 & 63;
        }
      }
      b9[c8] = 0;
      return c8 - f6;
    }
    var Sa = [];
    function Ta(a5, b9) {
      Sa[a5] = { input: [], Rb: [], bc: b9 };
      Ua(a5, Va);
    }
    var Va = { open: function(a5) {
      var b9 = Sa[a5.node.ec];
      if (!b9)
        throw new O5(43);
      a5.Sb = b9;
      a5.seekable = false;
    }, close: function(a5) {
      a5.Sb.bc.ic(a5.Sb);
    }, ic: function(a5) {
      a5.Sb.bc.ic(a5.Sb);
    }, read: function(a5, b9, c8, d8) {
      if (!a5.Sb || !a5.Sb.bc.zc)
        throw new O5(60);
      for (var f6 = 0, h8 = 0; h8 < d8; h8++) {
        try {
          var g9 = a5.Sb.bc.zc(a5.Sb);
        } catch (m10) {
          throw new O5(29);
        }
        if (void 0 === g9 && 0 === f6)
          throw new O5(6);
        if (null === g9 || void 0 === g9)
          break;
        f6++;
        b9[c8 + h8] = g9;
      }
      f6 && (a5.node.timestamp = Date.now());
      return f6;
    }, write: function(a5, b9, c8, d8) {
      if (!a5.Sb || !a5.Sb.bc.sc)
        throw new O5(60);
      try {
        for (var f6 = 0; f6 < d8; f6++)
          a5.Sb.bc.sc(
            a5.Sb,
            b9[c8 + f6]
          );
      } catch (h8) {
        throw new O5(29);
      }
      d8 && (a5.node.timestamp = Date.now());
      return f6;
    } }, Wa = { zc: function(a5) {
      if (!a5.input.length) {
        var b9 = null;
        "undefined" != typeof window && "function" == typeof window.prompt ? (b9 = window.prompt("Input: "), null !== b9 && (b9 += "\n")) : "function" == typeof readline && (b9 = readline(), null !== b9 && (b9 += "\n"));
        if (!b9)
          return null;
        var c8 = Array(Qa(b9) + 1);
        b9 = Ra(b9, c8, 0, c8.length);
        c8.length = b9;
        a5.input = c8;
      }
      return a5.input.shift();
    }, sc: function(a5, b9) {
      null === b9 || 10 === b9 ? (ka(Ja(a5.Rb, 0)), a5.Rb = []) : 0 != b9 && a5.Rb.push(b9);
    }, ic: function(a5) {
      a5.Rb && 0 < a5.Rb.length && (ka(Ja(a5.Rb, 0)), a5.Rb = []);
    } }, Xa = { sc: function(a5, b9) {
      null === b9 || 10 === b9 ? (t3(Ja(a5.Rb, 0)), a5.Rb = []) : 0 != b9 && a5.Rb.push(b9);
    }, ic: function(a5) {
      a5.Rb && 0 < a5.Rb.length && (t3(Ja(a5.Rb, 0)), a5.Rb = []);
    } }, P4 = { Vb: null, Ub: function() {
      return P4.createNode(null, "/", 16895, 0);
    }, createNode: function(a5, b9, c8, d8) {
      if (24576 === (c8 & 61440) || 4096 === (c8 & 61440))
        throw new O5(63);
      P4.Vb || (P4.Vb = { dir: { node: { Tb: P4.Cb.Tb, Qb: P4.Cb.Qb, cc: P4.Cb.cc, jc: P4.Cb.jc, Cc: P4.Cb.Cc, oc: P4.Cb.oc, mc: P4.Cb.mc, Bc: P4.Cb.Bc, nc: P4.Cb.nc }, stream: { Zb: P4.Mb.Zb } }, file: { node: {
        Tb: P4.Cb.Tb,
        Qb: P4.Cb.Qb
      }, stream: { Zb: P4.Mb.Zb, read: P4.Mb.read, write: P4.Mb.write, vc: P4.Mb.vc, kc: P4.Mb.kc, lc: P4.Mb.lc } }, link: { node: { Tb: P4.Cb.Tb, Qb: P4.Cb.Qb, fc: P4.Cb.fc }, stream: {} }, wc: { node: { Tb: P4.Cb.Tb, Qb: P4.Cb.Qb }, stream: Ya } });
      c8 = Za(a5, b9, c8, d8);
      16384 === (c8.mode & 61440) ? (c8.Cb = P4.Vb.dir.node, c8.Mb = P4.Vb.dir.stream, c8.Nb = {}) : 32768 === (c8.mode & 61440) ? (c8.Cb = P4.Vb.file.node, c8.Mb = P4.Vb.file.stream, c8.Pb = 0, c8.Nb = null) : 40960 === (c8.mode & 61440) ? (c8.Cb = P4.Vb.link.node, c8.Mb = P4.Vb.link.stream) : 8192 === (c8.mode & 61440) && (c8.Cb = P4.Vb.wc.node, c8.Mb = P4.Vb.wc.stream);
      c8.timestamp = Date.now();
      a5 && (a5.Nb[b9] = c8, a5.timestamp = c8.timestamp);
      return c8;
    }, Uc: function(a5) {
      return a5.Nb ? a5.Nb.subarray ? a5.Nb.subarray(0, a5.Pb) : new Uint8Array(a5.Nb) : new Uint8Array(0);
    }, xc: function(a5, b9) {
      var c8 = a5.Nb ? a5.Nb.length : 0;
      c8 >= b9 || (b9 = Math.max(b9, c8 * (1048576 > c8 ? 2 : 1.125) >>> 0), 0 != c8 && (b9 = Math.max(b9, 256)), c8 = a5.Nb, a5.Nb = new Uint8Array(b9), 0 < a5.Pb && a5.Nb.set(c8.subarray(0, a5.Pb), 0));
    }, Qc: function(a5, b9) {
      if (a5.Pb != b9)
        if (0 == b9)
          a5.Nb = null, a5.Pb = 0;
        else {
          var c8 = a5.Nb;
          a5.Nb = new Uint8Array(b9);
          c8 && a5.Nb.set(c8.subarray(0, Math.min(b9, a5.Pb)));
          a5.Pb = b9;
        }
    }, Cb: {
      Tb: function(a5) {
        var b9 = {};
        b9.Ic = 8192 === (a5.mode & 61440) ? a5.id : 1;
        b9.qc = a5.id;
        b9.mode = a5.mode;
        b9.Oc = 1;
        b9.uid = 0;
        b9.Lc = 0;
        b9.ec = a5.ec;
        16384 === (a5.mode & 61440) ? b9.size = 4096 : 32768 === (a5.mode & 61440) ? b9.size = a5.Pb : 40960 === (a5.mode & 61440) ? b9.size = a5.link.length : b9.size = 0;
        b9.Ec = new Date(a5.timestamp);
        b9.Nc = new Date(a5.timestamp);
        b9.Hc = new Date(a5.timestamp);
        b9.Fc = 4096;
        b9.Gc = Math.ceil(b9.size / b9.Fc);
        return b9;
      },
      Qb: function(a5, b9) {
        void 0 !== b9.mode && (a5.mode = b9.mode);
        void 0 !== b9.timestamp && (a5.timestamp = b9.timestamp);
        void 0 !== b9.size && P4.Qc(a5, b9.size);
      },
      cc: function() {
        throw $a[44];
      },
      jc: function(a5, b9, c8, d8) {
        return P4.createNode(a5, b9, c8, d8);
      },
      Cc: function(a5, b9, c8) {
        if (16384 === (a5.mode & 61440)) {
          try {
            var d8 = ab(b9, c8);
          } catch (h8) {
          }
          if (d8)
            for (var f6 in d8.Nb)
              throw new O5(55);
        }
        delete a5.parent.Nb[a5.name];
        a5.parent.timestamp = Date.now();
        a5.name = c8;
        b9.Nb[c8] = a5;
        b9.timestamp = a5.parent.timestamp;
        a5.parent = b9;
      },
      oc: function(a5, b9) {
        delete a5.Nb[b9];
        a5.timestamp = Date.now();
      },
      mc: function(a5, b9) {
        var c8 = ab(a5, b9), d8;
        for (d8 in c8.Nb)
          throw new O5(55);
        delete a5.Nb[b9];
        a5.timestamp = Date.now();
      },
      Bc: function(a5) {
        var b9 = [".", ".."], c8;
        for (c8 in a5.Nb)
          a5.Nb.hasOwnProperty(c8) && b9.push(c8);
        return b9;
      },
      nc: function(a5, b9, c8) {
        a5 = P4.createNode(a5, b9, 41471, 0);
        a5.link = c8;
        return a5;
      },
      fc: function(a5) {
        if (40960 !== (a5.mode & 61440))
          throw new O5(28);
        return a5.link;
      }
    }, Mb: { read: function(a5, b9, c8, d8, f6) {
      var h8 = a5.node.Nb;
      if (f6 >= a5.node.Pb)
        return 0;
      a5 = Math.min(a5.node.Pb - f6, d8);
      if (8 < a5 && h8.subarray)
        b9.set(h8.subarray(f6, f6 + a5), c8);
      else
        for (d8 = 0; d8 < a5; d8++)
          b9[c8 + d8] = h8[f6 + d8];
      return a5;
    }, write: function(a5, b9, c8, d8, f6, h8) {
      b9.buffer === x6.buffer && (h8 = false);
      if (!d8)
        return 0;
      a5 = a5.node;
      a5.timestamp = Date.now();
      if (b9.subarray && (!a5.Nb || a5.Nb.subarray)) {
        if (h8)
          return a5.Nb = b9.subarray(c8, c8 + d8), a5.Pb = d8;
        if (0 === a5.Pb && 0 === f6)
          return a5.Nb = b9.slice(c8, c8 + d8), a5.Pb = d8;
        if (f6 + d8 <= a5.Pb)
          return a5.Nb.set(b9.subarray(c8, c8 + d8), f6), d8;
      }
      P4.xc(a5, f6 + d8);
      if (a5.Nb.subarray && b9.subarray)
        a5.Nb.set(b9.subarray(c8, c8 + d8), f6);
      else
        for (h8 = 0; h8 < d8; h8++)
          a5.Nb[f6 + h8] = b9[c8 + h8];
      a5.Pb = Math.max(a5.Pb, f6 + d8);
      return d8;
    }, Zb: function(a5, b9, c8) {
      1 === c8 ? b9 += a5.position : 2 === c8 && 32768 === (a5.node.mode & 61440) && (b9 += a5.node.Pb);
      if (0 > b9)
        throw new O5(28);
      return b9;
    }, vc: function(a5, b9, c8) {
      P4.xc(a5.node, b9 + c8);
      a5.node.Pb = Math.max(
        a5.node.Pb,
        b9 + c8
      );
    }, kc: function(a5, b9, c8, d8, f6) {
      if (32768 !== (a5.node.mode & 61440))
        throw new O5(43);
      a5 = a5.node.Nb;
      if (f6 & 2 || a5.buffer !== x6.buffer) {
        if (0 < c8 || c8 + b9 < a5.length)
          a5.subarray ? a5 = a5.subarray(c8, c8 + b9) : a5 = Array.prototype.slice.call(a5, c8, c8 + b9);
        c8 = true;
        b9 = 65536 * Math.ceil(b9 / 65536);
        (f6 = bb(65536, b9)) ? (y6.fill(0, f6, f6 + b9), b9 = f6) : b9 = 0;
        if (!b9)
          throw new O5(48);
        x6.set(a5, b9);
      } else
        c8 = false, b9 = a5.byteOffset;
      return { Pc: b9, Dc: c8 };
    }, lc: function(a5, b9, c8, d8) {
      P4.Mb.write(a5, b9, 0, d8, c8, false);
      return 0;
    } } }, cb = null, db = {}, Q4 = [], eb = 1, R6 = null, fb = true, O5 = null, $a = {}, S6 = (a5, b9 = {}) => {
      a5 = Pa(a5);
      if (!a5)
        return {
          path: "",
          node: null
        };
      b9 = Object.assign({ yc: true, tc: 0 }, b9);
      if (8 < b9.tc)
        throw new O5(32);
      a5 = a5.split("/").filter((g9) => !!g9);
      for (var c8 = cb, d8 = "/", f6 = 0; f6 < a5.length; f6++) {
        var h8 = f6 === a5.length - 1;
        if (h8 && b9.parent)
          break;
        c8 = ab(c8, a5[f6]);
        d8 = N6(d8 + "/" + a5[f6]);
        c8.$b && (!h8 || h8 && b9.yc) && (c8 = c8.$b.root);
        if (!h8 || b9.Yb) {
          for (h8 = 0; 40960 === (c8.mode & 61440); )
            if (c8 = gb(d8), d8 = Pa(La(d8), c8), c8 = S6(d8, { tc: b9.tc + 1 }).node, 40 < h8++)
              throw new O5(32);
        }
      }
      return { path: d8, node: c8 };
    }, hb = (a5) => {
      for (var b9; ; ) {
        if (a5 === a5.parent)
          return a5 = a5.Ub.Ac, b9 ? "/" !== a5[a5.length - 1] ? a5 + "/" + b9 : a5 + b9 : a5;
        b9 = b9 ? a5.name + "/" + b9 : a5.name;
        a5 = a5.parent;
      }
    }, ib = (a5, b9) => {
      for (var c8 = 0, d8 = 0; d8 < b9.length; d8++)
        c8 = (c8 << 5) - c8 + b9.charCodeAt(d8) | 0;
      return (a5 + c8 >>> 0) % R6.length;
    }, jb = (a5) => {
      var b9 = ib(a5.parent.id, a5.name);
      if (R6[b9] === a5)
        R6[b9] = a5.ac;
      else
        for (b9 = R6[b9]; b9; ) {
          if (b9.ac === a5) {
            b9.ac = a5.ac;
            break;
          }
          b9 = b9.ac;
        }
    }, ab = (a5, b9) => {
      var c8;
      if (c8 = (c8 = kb(a5, "x")) ? c8 : a5.Cb.cc ? 0 : 2)
        throw new O5(c8, a5);
      for (c8 = R6[ib(a5.id, b9)]; c8; c8 = c8.ac) {
        var d8 = c8.name;
        if (c8.parent.id === a5.id && d8 === b9)
          return c8;
      }
      return a5.Cb.cc(a5, b9);
    }, Za = (a5, b9, c8, d8) => {
      a5 = new lb(a5, b9, c8, d8);
      b9 = ib(a5.parent.id, a5.name);
      a5.ac = R6[b9];
      return R6[b9] = a5;
    }, mb = {
      r: 0,
      "r+": 2,
      w: 577,
      "w+": 578,
      a: 1089,
      "a+": 1090
    }, nb = (a5) => {
      var b9 = ["r", "w", "rw"][a5 & 3];
      a5 & 512 && (b9 += "w");
      return b9;
    }, kb = (a5, b9) => {
      if (fb)
        return 0;
      if (!b9.includes("r") || a5.mode & 292) {
        if (b9.includes("w") && !(a5.mode & 146) || b9.includes("x") && !(a5.mode & 73))
          return 2;
      } else
        return 2;
      return 0;
    }, ob = (a5, b9) => {
      try {
        return ab(a5, b9), 20;
      } catch (c8) {
      }
      return kb(a5, "wx");
    }, pb = (a5, b9, c8) => {
      try {
        var d8 = ab(a5, b9);
      } catch (f6) {
        return f6.Ob;
      }
      if (a5 = kb(a5, "wx"))
        return a5;
      if (c8) {
        if (16384 !== (d8.mode & 61440))
          return 54;
        if (d8 === d8.parent || "/" === hb(d8))
          return 10;
      } else if (16384 === (d8.mode & 61440))
        return 31;
      return 0;
    }, qb = (a5 = 0) => {
      for (; 4096 >= a5; a5++)
        if (!Q4[a5])
          return a5;
      throw new O5(33);
    }, sb = (a5, b9) => {
      rb || (rb = function() {
        this.hc = {};
      }, rb.prototype = {}, Object.defineProperties(rb.prototype, { object: { get: function() {
        return this.node;
      }, set: function(c8) {
        this.node = c8;
      } }, flags: { get: function() {
        return this.hc.flags;
      }, set: function(c8) {
        this.hc.flags = c8;
      } }, position: { get: function() {
        return this.hc.position;
      }, set: function(c8) {
        this.hc.position = c8;
      } } }));
      a5 = Object.assign(new rb(), a5);
      b9 = qb(b9);
      a5.Wb = b9;
      return Q4[b9] = a5;
    }, Ya = {
      open: (a5) => {
        a5.Mb = db[a5.node.ec].Mb;
        a5.Mb.open && a5.Mb.open(a5);
      },
      Zb: () => {
        throw new O5(70);
      }
    }, Ua = (a5, b9) => {
      db[a5] = { Mb: b9 };
    }, tb = (a5, b9) => {
      var c8 = "/" === b9, d8 = !b9;
      if (c8 && cb)
        throw new O5(10);
      if (!c8 && !d8) {
        var f6 = S6(b9, { yc: false });
        b9 = f6.path;
        f6 = f6.node;
        if (f6.$b)
          throw new O5(10);
        if (16384 !== (f6.mode & 61440))
          throw new O5(54);
      }
      b9 = { type: a5, Wc: {}, Ac: b9, Mc: [] };
      a5 = a5.Ub(b9);
      a5.Ub = b9;
      b9.root = a5;
      c8 ? cb = a5 : f6 && (f6.$b = b9, f6.Ub && f6.Ub.Mc.push(b9));
    }, ub = (a5, b9, c8) => {
      var d8 = S6(a5, { parent: true }).node;
      a5 = Ma(a5);
      if (!a5 || "." === a5 || ".." === a5)
        throw new O5(28);
      var f6 = ob(d8, a5);
      if (f6)
        throw new O5(f6);
      if (!d8.Cb.jc)
        throw new O5(63);
      return d8.Cb.jc(d8, a5, b9, c8);
    }, T9 = (a5, b9) => ub(a5, (void 0 !== b9 ? b9 : 511) & 1023 | 16384, 0), vb = (a5, b9, c8) => {
      "undefined" == typeof c8 && (c8 = b9, b9 = 438);
      ub(a5, b9 | 8192, c8);
    }, wb = (a5, b9) => {
      if (!Pa(a5))
        throw new O5(44);
      var c8 = S6(b9, { parent: true }).node;
      if (!c8)
        throw new O5(44);
      b9 = Ma(b9);
      var d8 = ob(c8, b9);
      if (d8)
        throw new O5(d8);
      if (!c8.Cb.nc)
        throw new O5(63);
      c8.Cb.nc(c8, b9, a5);
    }, xb = (a5) => {
      var b9 = S6(a5, { parent: true }).node;
      a5 = Ma(a5);
      var c8 = ab(b9, a5), d8 = pb(b9, a5, true);
      if (d8)
        throw new O5(d8);
      if (!b9.Cb.mc)
        throw new O5(63);
      if (c8.$b)
        throw new O5(10);
      b9.Cb.mc(b9, a5);
      jb(c8);
    }, gb = (a5) => {
      a5 = S6(a5).node;
      if (!a5)
        throw new O5(44);
      if (!a5.Cb.fc)
        throw new O5(28);
      return Pa(hb(a5.parent), a5.Cb.fc(a5));
    }, yb = (a5, b9) => {
      a5 = S6(a5, { Yb: !b9 }).node;
      if (!a5)
        throw new O5(44);
      if (!a5.Cb.Tb)
        throw new O5(63);
      return a5.Cb.Tb(a5);
    }, zb = (a5) => yb(a5, true), Ab = (a5, b9) => {
      a5 = "string" == typeof a5 ? S6(a5, { Yb: true }).node : a5;
      if (!a5.Cb.Qb)
        throw new O5(63);
      a5.Cb.Qb(a5, { mode: b9 & 4095 | a5.mode & -4096, timestamp: Date.now() });
    }, Bb = (a5, b9) => {
      if (0 > b9)
        throw new O5(28);
      a5 = "string" == typeof a5 ? S6(a5, { Yb: true }).node : a5;
      if (!a5.Cb.Qb)
        throw new O5(63);
      if (16384 === (a5.mode & 61440))
        throw new O5(31);
      if (32768 !== (a5.mode & 61440))
        throw new O5(28);
      var c8 = kb(a5, "w");
      if (c8)
        throw new O5(c8);
      a5.Cb.Qb(a5, { size: b9, timestamp: Date.now() });
    }, Db = (a5, b9, c8) => {
      if ("" === a5)
        throw new O5(44);
      if ("string" == typeof b9) {
        var d8 = mb[b9];
        if ("undefined" == typeof d8)
          throw Error("Unknown file open mode: " + b9);
        b9 = d8;
      }
      c8 = b9 & 64 ? ("undefined" == typeof c8 ? 438 : c8) & 4095 | 32768 : 0;
      if ("object" == typeof a5)
        var f6 = a5;
      else {
        a5 = N6(a5);
        try {
          f6 = S6(a5, { Yb: !(b9 & 131072) }).node;
        } catch (h8) {
        }
      }
      d8 = false;
      if (b9 & 64)
        if (f6) {
          if (b9 & 128)
            throw new O5(20);
        } else
          f6 = ub(a5, c8, 0), d8 = true;
      if (!f6)
        throw new O5(44);
      8192 === (f6.mode & 61440) && (b9 &= -513);
      if (b9 & 65536 && 16384 !== (f6.mode & 61440))
        throw new O5(54);
      if (!d8 && (c8 = f6 ? 40960 === (f6.mode & 61440) ? 32 : 16384 === (f6.mode & 61440) && ("r" !== nb(b9) || b9 & 512) ? 31 : kb(f6, nb(b9)) : 44))
        throw new O5(c8);
      b9 & 512 && !d8 && Bb(f6, 0);
      b9 &= -131713;
      f6 = sb({ node: f6, path: hb(f6), flags: b9, seekable: true, position: 0, Mb: f6.Mb, Tc: [], error: false });
      f6.Mb.open && f6.Mb.open(f6);
      !e5.logReadFiles || b9 & 1 || (Cb || (Cb = {}), a5 in Cb || (Cb[a5] = 1));
      return f6;
    }, Eb = (a5, b9, c8) => {
      if (null === a5.Wb)
        throw new O5(8);
      if (!a5.seekable || !a5.Mb.Zb)
        throw new O5(70);
      if (0 != c8 && 1 != c8 && 2 != c8)
        throw new O5(28);
      a5.position = a5.Mb.Zb(a5, b9, c8);
      a5.Tc = [];
    }, Fb = () => {
      O5 || (O5 = function(a5, b9) {
        this.name = "ErrnoError";
        this.node = b9;
        this.Rc = function(c8) {
          this.Ob = c8;
        };
        this.Rc(a5);
        this.message = "FS error";
      }, O5.prototype = Error(), O5.prototype.constructor = O5, [44].forEach((a5) => {
        $a[a5] = new O5(a5);
        $a[a5].stack = "<generic error, no stack>";
      }));
    }, Gb, Hb = (a5, b9) => {
      var c8 = 0;
      a5 && (c8 |= 365);
      b9 && (c8 |= 146);
      return c8;
    }, Jb = (a5, b9, c8) => {
      a5 = N6("/dev/" + a5);
      var d8 = Hb(!!b9, !!c8);
      Ib || (Ib = 64);
      var f6 = Ib++ << 8 | 0;
      Ua(f6, { open: (h8) => {
        h8.seekable = false;
      }, close: () => {
        c8 && c8.buffer && c8.buffer.length && c8(10);
      }, read: (h8, g9, m10, k3) => {
        for (var l7 = 0, q9 = 0; q9 < k3; q9++) {
          try {
            var n11 = b9();
          } catch (r7) {
            throw new O5(29);
          }
          if (void 0 === n11 && 0 === l7)
            throw new O5(6);
          if (null === n11 || void 0 === n11)
            break;
          l7++;
          g9[m10 + q9] = n11;
        }
        l7 && (h8.node.timestamp = Date.now());
        return l7;
      }, write: (h8, g9, m10, k3) => {
        for (var l7 = 0; l7 < k3; l7++)
          try {
            c8(g9[m10 + l7]);
          } catch (q9) {
            throw new O5(29);
          }
        k3 && (h8.node.timestamp = Date.now());
        return l7;
      } });
      vb(a5, d8, f6);
    }, Ib, U3 = {}, rb, Cb;
    function Kb(a5, b9, c8) {
      if ("/" === b9.charAt(0))
        return b9;
      a5 = -100 === a5 ? "/" : W4(a5).path;
      if (0 == b9.length) {
        if (!c8)
          throw new O5(44);
        return a5;
      }
      return N6(a5 + "/" + b9);
    }
    function Lb(a5, b9, c8) {
      try {
        var d8 = a5(b9);
      } catch (h8) {
        if (h8 && h8.node && N6(b9) !== N6(hb(h8.node)))
          return -54;
        throw h8;
      }
      A6[c8 >> 2] = d8.Ic;
      A6[c8 + 8 >> 2] = d8.qc;
      A6[c8 + 12 >> 2] = d8.mode;
      B7[c8 + 16 >> 2] = d8.Oc;
      A6[c8 + 20 >> 2] = d8.uid;
      A6[c8 + 24 >> 2] = d8.Lc;
      A6[c8 + 28 >> 2] = d8.ec;
      I5 = [d8.size >>> 0, (H5 = d8.size, 1 <= +Math.abs(H5) ? 0 < H5 ? +Math.floor(H5 / 4294967296) >>> 0 : ~~+Math.ceil((H5 - +(~~H5 >>> 0)) / 4294967296) >>> 0 : 0)];
      A6[c8 + 40 >> 2] = I5[0];
      A6[c8 + 44 >> 2] = I5[1];
      A6[c8 + 48 >> 2] = 4096;
      A6[c8 + 52 >> 2] = d8.Gc;
      a5 = d8.Ec.getTime();
      b9 = d8.Nc.getTime();
      var f6 = d8.Hc.getTime();
      I5 = [Math.floor(a5 / 1e3) >>> 0, (H5 = Math.floor(a5 / 1e3), 1 <= +Math.abs(H5) ? 0 < H5 ? +Math.floor(H5 / 4294967296) >>> 0 : ~~+Math.ceil((H5 - +(~~H5 >>> 0)) / 4294967296) >>> 0 : 0)];
      A6[c8 + 56 >> 2] = I5[0];
      A6[c8 + 60 >> 2] = I5[1];
      B7[c8 + 64 >> 2] = a5 % 1e3 * 1e3;
      I5 = [Math.floor(b9 / 1e3) >>> 0, (H5 = Math.floor(b9 / 1e3), 1 <= +Math.abs(H5) ? 0 < H5 ? +Math.floor(H5 / 4294967296) >>> 0 : ~~+Math.ceil((H5 - +(~~H5 >>> 0)) / 4294967296) >>> 0 : 0)];
      A6[c8 + 72 >> 2] = I5[0];
      A6[c8 + 76 >> 2] = I5[1];
      B7[c8 + 80 >> 2] = b9 % 1e3 * 1e3;
      I5 = [Math.floor(f6 / 1e3) >>> 0, (H5 = Math.floor(f6 / 1e3), 1 <= +Math.abs(H5) ? 0 < H5 ? +Math.floor(H5 / 4294967296) >>> 0 : ~~+Math.ceil((H5 - +(~~H5 >>> 0)) / 4294967296) >>> 0 : 0)];
      A6[c8 + 88 >> 2] = I5[0];
      A6[c8 + 92 >> 2] = I5[1];
      B7[c8 + 96 >> 2] = f6 % 1e3 * 1e3;
      I5 = [d8.qc >>> 0, (H5 = d8.qc, 1 <= +Math.abs(H5) ? 0 < H5 ? +Math.floor(H5 / 4294967296) >>> 0 : ~~+Math.ceil((H5 - +(~~H5 >>> 0)) / 4294967296) >>> 0 : 0)];
      A6[c8 + 104 >> 2] = I5[0];
      A6[c8 + 108 >> 2] = I5[1];
      return 0;
    }
    var Mb = void 0;
    function Nb() {
      Mb += 4;
      return A6[Mb - 4 >> 2];
    }
    function W4(a5) {
      a5 = Q4[a5];
      if (!a5)
        throw new O5(8);
      return a5;
    }
    function Ob(a5, b9, c8) {
      return Ra(a5, y6, b9, c8);
    }
    function Pb(a5) {
      return B7[a5 >> 2] + 4294967296 * A6[a5 + 4 >> 2];
    }
    var Qb = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], Rb = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
    function Sb(a5) {
      var b9 = Qa(a5) + 1, c8 = Tb(b9);
      c8 && Ob(a5, c8, b9);
      return c8;
    }
    var Ub = {};
    function Vb() {
      if (!Wb) {
        var a5 = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: da || "./this.program" }, b9;
        for (b9 in Ub)
          void 0 === Ub[b9] ? delete a5[b9] : a5[b9] = Ub[b9];
        var c8 = [];
        for (b9 in a5)
          c8.push(b9 + "=" + a5[b9]);
        Wb = c8;
      }
      return Wb;
    }
    var Wb;
    function Xb() {
    }
    function Yb() {
    }
    function Zb() {
    }
    function $b() {
    }
    function ac() {
    }
    function bc() {
    }
    function cc() {
    }
    function dc() {
    }
    function ec() {
    }
    function fc() {
    }
    function gc() {
    }
    function hc() {
    }
    function ic() {
    }
    function jc() {
    }
    function kc() {
    }
    function lc() {
    }
    function mc() {
    }
    function nc() {
    }
    function oc() {
    }
    function pc() {
    }
    function qc() {
    }
    function rc() {
    }
    function sc() {
    }
    function tc() {
    }
    function uc() {
    }
    function vc() {
    }
    function wc() {
    }
    function xc() {
    }
    function yc() {
    }
    function zc() {
    }
    function Ac() {
    }
    function Bc() {
    }
    function Cc() {
    }
    function Dc() {
    }
    function Ec() {
    }
    function Fc() {
    }
    function Gc() {
    }
    function Hc() {
    }
    function Ic() {
    }
    function Jc(a5) {
      na = a5;
      if (!(noExitRuntime || 0 < wa)) {
        if (e5.onExit)
          e5.onExit(a5);
        v10 = true;
      }
      ea(a5, new Ga(a5));
    }
    function Kc(a5) {
      a5 instanceof Ga || "unwind" == a5 || ea(1, a5);
    }
    function Lc(a5) {
      try {
        a5();
      } catch (b9) {
        u8(b9);
      }
    }
    function Mc(a5) {
      var b9 = {}, c8;
      for (c8 in a5)
        (function(d8) {
          var f6 = a5[d8];
          b9[d8] = "function" == typeof f6 ? function() {
            Nc.push(d8);
            try {
              return f6.apply(null, arguments);
            } finally {
              v10 || (Nc.pop() === d8 || u8(), X2 && 1 === Y2 && 0 === Nc.length && (Y2 = 0, Lc(Oc), "undefined" != typeof Fibers && Fibers.Xc()));
            }
          } : f6;
        })(c8);
      return b9;
    }
    var Y2 = 0, X2 = null, Pc = 0, Nc = [], Qc = {}, Rc = {}, Sc = 0, Tc = null, Uc = [];
    function Vc() {
      return new Promise((a5, b9) => {
        Tc = { resolve: a5, reject: b9 };
      });
    }
    function Wc() {
      var a5 = Tb(16396), b9 = a5 + 12;
      A6[a5 >> 2] = b9;
      A6[a5 + 4 >> 2] = b9 + 16384;
      b9 = Nc[0];
      var c8 = Qc[b9];
      void 0 === c8 && (c8 = Sc++, Qc[b9] = c8, Rc[c8] = b9);
      A6[a5 + 8 >> 2] = c8;
      return a5;
    }
    function Xc(a5) {
      if (!v10) {
        if (0 === Y2) {
          var b9 = false, c8 = false;
          a5((d8 = 0) => {
            if (!v10 && (Pc = d8, b9 = true, c8)) {
              Y2 = 2;
              Lc(() => Yc(X2));
              "undefined" != typeof Zc && Zc.rc.Kc && Zc.rc.resume();
              d8 = false;
              try {
                var f6 = (0, e5.asm[Rc[A6[X2 + 8 >> 2]]])();
              } catch (m10) {
                f6 = m10, d8 = true;
              }
              var h8 = false;
              if (!X2) {
                var g9 = Tc;
                g9 && (Tc = null, (d8 ? g9.reject : g9.resolve)(f6), h8 = true);
              }
              if (d8 && !h8)
                throw f6;
            }
          });
          c8 = true;
          b9 || (Y2 = 1, X2 = Wc(), "undefined" != typeof Zc && Zc.rc.Kc && Zc.rc.pause(), Lc(() => $c(X2)));
        } else
          2 === Y2 ? (Y2 = 0, Lc(ad), bd(X2), X2 = null, Uc.forEach((d8) => {
            if (!v10)
              try {
                if (d8(), !(noExitRuntime || 0 < wa))
                  try {
                    na = d8 = na, Jc(d8);
                  } catch (f6) {
                    Kc(f6);
                  }
              } catch (f6) {
                Kc(f6);
              }
          })) : u8("invalid state: " + Y2);
        return Pc;
      }
    }
    function cd(a5) {
      return Xc((b9) => {
        a5().then(b9);
      });
    }
    var dd = {};
    function Z3(a5, b9, c8, d8, f6) {
      function h8(n11) {
        --wa;
        0 !== k3 && ed(k3);
        return "string" === b9 ? M3(n11) : "boolean" === b9 ? !!n11 : n11;
      }
      var g9 = { string: (n11) => {
        var r7 = 0;
        if (null !== n11 && void 0 !== n11 && 0 !== n11) {
          r7 = Qa(n11) + 1;
          var w5 = fd(r7);
          Ob(n11, w5, r7);
          r7 = w5;
        }
        return r7;
      }, array: (n11) => {
        var r7 = fd(n11.length);
        x6.set(n11, r7);
        return r7;
      } };
      a5 = e5["_" + a5];
      var m10 = [], k3 = 0;
      if (d8)
        for (var l7 = 0; l7 < d8.length; l7++) {
          var q9 = g9[c8[l7]];
          q9 ? (0 === k3 && (k3 = gd()), m10[l7] = q9(d8[l7])) : m10[l7] = d8[l7];
        }
      c8 = X2;
      d8 = a5.apply(null, m10);
      wa += 1;
      f6 = f6 && f6.async;
      if (X2 != c8)
        return Vc().then(h8);
      d8 = h8(d8);
      return f6 ? Promise.resolve(d8) : d8;
    }
    function lb(a5, b9, c8, d8) {
      a5 || (a5 = this);
      this.parent = a5;
      this.Ub = a5.Ub;
      this.$b = null;
      this.id = eb++;
      this.name = b9;
      this.mode = c8;
      this.Cb = {};
      this.Mb = {};
      this.ec = d8;
    }
    Object.defineProperties(lb.prototype, { read: { get: function() {
      return 365 === (this.mode & 365);
    }, set: function(a5) {
      a5 ? this.mode |= 365 : this.mode &= -366;
    } }, write: { get: function() {
      return 146 === (this.mode & 146);
    }, set: function(a5) {
      a5 ? this.mode |= 146 : this.mode &= -147;
    } } });
    Fb();
    R6 = Array(4096);
    tb(P4, "/");
    T9("/tmp");
    T9("/home");
    T9("/home/web_user");
    (() => {
      T9("/dev");
      Ua(259, { read: () => 0, write: (d8, f6, h8, g9) => g9 });
      vb("/dev/null", 259);
      Ta(1280, Wa);
      Ta(1536, Xa);
      vb("/dev/tty", 1280);
      vb("/dev/tty1", 1536);
      var a5 = new Uint8Array(1024), b9 = 0, c8 = () => {
        0 === b9 && (b9 = Oa(a5).byteLength);
        return a5[--b9];
      };
      Jb("random", c8);
      Jb("urandom", c8);
      T9("/dev/shm");
      T9("/dev/shm/tmp");
    })();
    (() => {
      T9("/proc");
      var a5 = T9("/proc/self");
      T9("/proc/self/fd");
      tb({ Ub: () => {
        var b9 = Za(a5, "fd", 16895, 73);
        b9.Cb = { cc: (c8, d8) => {
          var f6 = Q4[+d8];
          if (!f6)
            throw new O5(8);
          c8 = { parent: null, Ub: { Ac: "fake" }, Cb: { fc: () => f6.path } };
          return c8.parent = c8;
        } };
        return b9;
      } }, "/proc/self/fd");
    })();
    var Zc;
    (function() {
      const a5 = /* @__PURE__ */ new Map();
      e5.setAuthorizer = function(b9, c8, d8) {
        c8 ? a5.set(b9, { f: c8, uc: d8 }) : a5.delete(b9);
        return Z3("set_authorizer", "number", ["number"], [b9]);
      };
      Xb = function(b9, c8, d8, f6, h8, g9) {
        if (a5.has(b9)) {
          const { f: m10, uc: k3 } = a5.get(b9);
          return m10(k3, c8, d8 ? M3(d8) : null, f6 ? M3(f6) : null, h8 ? M3(h8) : null, g9 ? M3(g9) : null);
        }
        return 0;
      };
    })();
    (function() {
      const a5 = /* @__PURE__ */ new Map(), b9 = /* @__PURE__ */ new Map();
      e5.createFunction = function(c8, d8, f6, h8, g9, m10) {
        const k3 = a5.size;
        a5.set(k3, { f: m10, Xb: g9 });
        return Z3("create_function", "number", "number string number number number number".split(" "), [c8, d8, f6, h8, k3, 0]);
      };
      e5.createAggregate = function(c8, d8, f6, h8, g9, m10, k3) {
        const l7 = a5.size;
        a5.set(l7, { step: m10, Jc: k3, Xb: g9 });
        return Z3("create_function", "number", "number string number number number number".split(" "), [c8, d8, f6, h8, l7, 1]);
      };
      e5.getFunctionUserData = function(c8) {
        return b9.get(c8);
      };
      Zb = function(c8, d8, f6, h8) {
        c8 = a5.get(c8);
        b9.set(
          d8,
          c8.Xb
        );
        c8.f(d8, new Uint32Array(y6.buffer, h8, f6));
        b9.delete(d8);
      };
      ac = function(c8, d8, f6, h8) {
        c8 = a5.get(c8);
        b9.set(d8, c8.Xb);
        c8.step(d8, new Uint32Array(y6.buffer, h8, f6));
        b9.delete(d8);
      };
      Yb = function(c8, d8) {
        c8 = a5.get(c8);
        b9.set(d8, c8.Xb);
        c8.Jc(d8);
        b9.delete(d8);
      };
    })();
    (function() {
      const a5 = /* @__PURE__ */ new Map();
      e5.progressHandler = function(b9, c8, d8, f6) {
        d8 ? a5.set(b9, { f: d8, uc: f6 }) : a5.delete(b9);
        return Z3("progress_handler", null, ["number", "number"], [b9, c8]);
      };
      $b = function(b9) {
        if (a5.has(b9)) {
          const { f: c8, uc: d8 } = a5.get(b9);
          return c8(d8);
        }
        return 0;
      };
    })();
    (function() {
      function a5(k3, l7) {
        const q9 = `get${k3}`, n11 = `set${k3}`;
        return new Proxy(new DataView(y6.buffer, l7, "Int32" === k3 ? 4 : 8), { get(r7, w5) {
          if (w5 === q9)
            return function(z3, F5) {
              if (!F5)
                throw Error("must be little endian");
              return r7[w5](z3, F5);
            };
          if (w5 === n11)
            return function(z3, F5, D7) {
              if (!D7)
                throw Error("must be little endian");
              return r7[w5](z3, F5, D7);
            };
          if ("string" === typeof w5 && w5.match(/^(get)|(set)/))
            throw Error("invalid type");
          return r7[w5];
        } });
      }
      const b9 = "object" === typeof dd, c8 = /* @__PURE__ */ new Map(), d8 = /* @__PURE__ */ new Map(), f6 = /* @__PURE__ */ new Map(), h8 = b9 ? /* @__PURE__ */ new Set() : null, g9 = b9 ? /* @__PURE__ */ new Set() : null, m10 = /* @__PURE__ */ new Map();
      rc = function(k3, l7, q9, n11) {
        m10.set(M3(k3), { size: l7, dc: Array.from(new Uint32Array(y6.buffer, n11, q9)) });
      };
      e5.createModule = function(k3, l7, q9, n11) {
        b9 && (q9.handleAsync = cd);
        const r7 = c8.size;
        c8.set(r7, { module: q9, Xb: n11 });
        n11 = 0;
        q9.xCreate && (n11 |= 1);
        q9.xConnect && (n11 |= 2);
        q9.xBestIndex && (n11 |= 4);
        q9.xDisconnect && (n11 |= 8);
        q9.xDestroy && (n11 |= 16);
        q9.xOpen && (n11 |= 32);
        q9.xClose && (n11 |= 64);
        q9.xFilter && (n11 |= 128);
        q9.xNext && (n11 |= 256);
        q9.xEof && (n11 |= 512);
        q9.xColumn && (n11 |= 1024);
        q9.xRowid && (n11 |= 2048);
        q9.xUpdate && (n11 |= 4096);
        q9.xBegin && (n11 |= 8192);
        q9.xSync && (n11 |= 16384);
        q9.xCommit && (n11 |= 32768);
        q9.xRollback && (n11 |= 65536);
        q9.xFindFunction && (n11 |= 131072);
        q9.xRename && (n11 |= 262144);
        return Z3("create_module", "number", ["number", "string", "number", "number"], [k3, l7, r7, n11]);
      };
      hc = function(k3, l7, q9, n11, r7, w5) {
        l7 = c8.get(l7);
        d8.set(r7, l7);
        if (b9) {
          h8.delete(r7);
          for (const z3 of h8)
            d8.delete(z3);
        }
        n11 = Array.from(new Uint32Array(y6.buffer, n11, q9)).map((z3) => M3(z3));
        return l7.module.xCreate(k3, l7.Xb, n11, r7, a5("Int32", w5));
      };
      gc = function(k3, l7, q9, n11, r7, w5) {
        l7 = c8.get(l7);
        d8.set(r7, l7);
        if (b9) {
          h8.delete(r7);
          for (const z3 of h8)
            d8.delete(z3);
        }
        n11 = Array.from(new Uint32Array(y6.buffer, n11, q9)).map((z3) => M3(z3));
        return l7.module.xConnect(k3, l7.Xb, n11, r7, a5("Int32", w5));
      };
      cc = function(k3, l7) {
        var q9 = d8.get(k3), n11 = m10.get("sqlite3_index_info").dc;
        const r7 = {};
        r7.nConstraint = K6(l7 + n11[0], "i32");
        r7.aConstraint = [];
        var w5 = K6(l7 + n11[1], "*"), z3 = m10.get("sqlite3_index_constraint").size;
        for (var F5 = 0; F5 < r7.nConstraint; ++F5) {
          var D7 = r7.aConstraint, J2 = D7.push, G3 = w5 + F5 * z3, ha = m10.get("sqlite3_index_constraint").dc, V5 = {};
          V5.iColumn = K6(G3 + ha[0], "i32");
          V5.op = K6(G3 + ha[1], "i8");
          V5.usable = !!K6(G3 + ha[2], "i8");
          J2.call(D7, V5);
        }
        r7.nOrderBy = K6(l7 + n11[2], "i32");
        r7.aOrderBy = [];
        w5 = K6(l7 + n11[3], "*");
        z3 = m10.get("sqlite3_index_orderby").size;
        for (F5 = 0; F5 < r7.nOrderBy; ++F5)
          D7 = r7.aOrderBy, J2 = D7.push, G3 = w5 + F5 * z3, ha = m10.get("sqlite3_index_orderby").dc, V5 = {}, V5.iColumn = K6(G3 + ha[0], "i32"), V5.desc = !!K6(G3 + ha[1], "i8"), J2.call(D7, V5);
        r7.aConstraintUsage = [];
        for (w5 = 0; w5 < r7.nConstraint; ++w5)
          r7.aConstraintUsage.push({ argvIndex: 0, omit: false });
        r7.idxNum = K6(l7 + n11[5], "i32");
        r7.idxStr = null;
        r7.orderByConsumed = !!K6(l7 + n11[8], "i8");
        r7.estimatedCost = K6(l7 + n11[9], "double");
        r7.estimatedRows = K6(l7 + n11[10], "i64");
        r7.idxFlags = K6(l7 + n11[11], "i32");
        r7.colUsed = K6(l7 + n11[12], "i64");
        k3 = q9.module.xBestIndex(
          k3,
          r7
        );
        q9 = m10.get("sqlite3_index_info").dc;
        n11 = K6(l7 + q9[4], "*");
        w5 = m10.get("sqlite3_index_constraint_usage").size;
        for (J2 = 0; J2 < r7.nConstraint; ++J2)
          z3 = n11 + J2 * w5, D7 = r7.aConstraintUsage[J2], G3 = m10.get("sqlite3_index_constraint_usage").dc, L2(z3 + G3[0], D7.argvIndex, "i32"), L2(z3 + G3[1], D7.omit ? 1 : 0, "i8");
        L2(l7 + q9[5], r7.idxNum, "i32");
        "string" === typeof r7.idxStr && (n11 = Qa(r7.idxStr), w5 = Z3("sqlite3_malloc", "number", ["number"], [n11 + 1]), Ob(r7.idxStr, w5, n11 + 1), L2(l7 + q9[6], w5, "*"), L2(l7 + q9[7], 1, "i32"));
        L2(l7 + q9[8], r7.orderByConsumed, "i32");
        L2(l7 + q9[9], r7.estimatedCost, "double");
        L2(l7 + q9[10], r7.estimatedRows, "i64");
        L2(l7 + q9[11], r7.idxFlags, "i32");
        return k3;
      };
      jc = function(k3) {
        const l7 = d8.get(k3);
        b9 ? h8.add(k3) : d8.delete(k3);
        return l7.module.xDisconnect(k3);
      };
      ic = function(k3) {
        const l7 = d8.get(k3);
        b9 ? h8.add(k3) : d8.delete(k3);
        return l7.module.xDestroy(k3);
      };
      nc = function(k3, l7) {
        const q9 = d8.get(k3);
        f6.set(l7, q9);
        if (b9) {
          g9.delete(l7);
          for (const n11 of g9)
            f6.delete(n11);
        }
        return q9.module.xOpen(k3, l7);
      };
      dc = function(k3) {
        const l7 = f6.get(k3);
        b9 ? g9.add(k3) : f6.delete(k3);
        return l7.module.xClose(k3);
      };
      kc = function(k3) {
        return f6.get(k3).module.xEof(k3) ? 1 : 0;
      };
      lc = function(k3, l7, q9, n11, r7) {
        const w5 = f6.get(k3);
        q9 = q9 ? M3(q9) : null;
        r7 = new Uint32Array(y6.buffer, r7, n11);
        return w5.module.xFilter(k3, l7, q9, r7);
      };
      mc = function(k3) {
        return f6.get(k3).module.xNext(k3);
      };
      ec = function(k3, l7, q9) {
        return f6.get(k3).module.xColumn(k3, l7, q9);
      };
      qc = function(k3, l7) {
        return f6.get(k3).module.xRowid(k3, a5("BigInt64", l7));
      };
      tc = function(k3, l7, q9, n11) {
        const r7 = d8.get(k3);
        q9 = new Uint32Array(y6.buffer, q9, l7);
        return r7.module.xUpdate(k3, q9, a5("BigInt64", n11));
      };
      bc = function(k3) {
        return d8.get(k3).module.xBegin(k3);
      };
      sc = function(k3) {
        return d8.get(k3).module.xSync(k3);
      };
      fc = function(k3) {
        return d8.get(k3).module.xCommit(k3);
      };
      pc = function(k3) {
        return d8.get(k3).module.xRollback(k3);
      };
      oc = function(k3, l7) {
        const q9 = d8.get(k3);
        l7 = M3(l7);
        return q9.module.xRename(k3, l7);
      };
    })();
    (function() {
      function a5(g9, m10) {
        const k3 = `get${g9}`, l7 = `set${g9}`;
        return new Proxy(new DataView(y6.buffer, m10, "Int32" === g9 ? 4 : 8), { get(q9, n11) {
          if (n11 === k3)
            return function(r7, w5) {
              if (!w5)
                throw Error("must be little endian");
              return q9[n11](r7, w5);
            };
          if (n11 === l7)
            return function(r7, w5, z3) {
              if (!z3)
                throw Error("must be little endian");
              return q9[n11](r7, w5, z3);
            };
          if ("string" === typeof n11 && n11.match(/^(get)|(set)/))
            throw Error("invalid type");
          return q9[n11];
        } });
      }
      function b9(g9) {
        g9 >>= 2;
        return B7[g9] + B7[g9 + 1] * 2 ** 32;
      }
      const c8 = "object" === typeof dd, d8 = /* @__PURE__ */ new Map(), f6 = /* @__PURE__ */ new Map();
      e5.registerVFS = function(g9, m10) {
        if (Z3("sqlite3_vfs_find", "number", ["string"], [g9.name]))
          throw Error(`VFS '${g9.name}' already registered`);
        c8 && (g9.handleAsync = cd);
        var k3 = g9.Vc ?? 64;
        const l7 = e5._malloc(4);
        m10 = Z3("register_vfs", "number", ["string", "number", "number", "number"], [g9.name, k3, m10 ? 1 : 0, l7]);
        m10 || (k3 = K6(l7, "*"), d8.set(k3, g9));
        e5._free(l7);
        return m10;
      };
      const h8 = c8 ? /* @__PURE__ */ new Set() : null;
      wc = function(g9) {
        const m10 = f6.get(g9);
        c8 ? h8.add(g9) : f6.delete(g9);
        return m10.xClose(g9);
      };
      Dc = function(g9, m10, k3, l7) {
        return f6.get(g9).xRead(g9, y6.subarray(m10, m10 + k3), b9(l7));
      };
      Ic = function(g9, m10, k3, l7) {
        return f6.get(g9).xWrite(
          g9,
          y6.subarray(m10, m10 + k3),
          b9(l7)
        );
      };
      Gc = function(g9, m10) {
        return f6.get(g9).xTruncate(g9, b9(m10));
      };
      Fc = function(g9, m10) {
        return f6.get(g9).xSync(g9, m10);
      };
      Ac = function(g9, m10) {
        const k3 = f6.get(g9);
        m10 = a5("BigInt64", m10);
        return k3.xFileSize(g9, m10);
      };
      Bc = function(g9, m10) {
        return f6.get(g9).xLock(g9, m10);
      };
      Hc = function(g9, m10) {
        return f6.get(g9).xUnlock(g9, m10);
      };
      vc = function(g9, m10) {
        const k3 = f6.get(g9);
        m10 = a5("Int32", m10);
        return k3.xCheckReservedLock(g9, m10);
      };
      zc = function(g9, m10, k3) {
        const l7 = f6.get(g9);
        k3 = new DataView(y6.buffer, k3);
        return l7.xFileControl(g9, m10, k3);
      };
      Ec = function(g9) {
        return f6.get(g9).xSectorSize(g9);
      };
      yc = function(g9) {
        return f6.get(g9).xDeviceCharacteristics(g9);
      };
      Cc = function(g9, m10, k3, l7, q9) {
        g9 = d8.get(g9);
        f6.set(k3, g9);
        if (c8) {
          h8.delete(k3);
          for (var n11 of h8)
            f6.delete(n11);
        }
        n11 = null;
        if (l7 & 64) {
          n11 = 1;
          const r7 = [];
          for (; n11; ) {
            const w5 = y6[m10++];
            if (w5)
              r7.push(w5);
            else
              switch (y6[m10] || (n11 = null), n11) {
                case 1:
                  r7.push(63);
                  n11 = 2;
                  break;
                case 2:
                  r7.push(61);
                  n11 = 3;
                  break;
                case 3:
                  r7.push(38), n11 = 2;
              }
          }
          n11 = new TextDecoder().decode(new Uint8Array(r7));
        } else
          m10 && (n11 = M3(m10));
        q9 = a5("Int32", q9);
        return g9.xOpen(n11, k3, l7, q9);
      };
      xc = function(g9, m10, k3) {
        return d8.get(g9).xDelete(M3(m10), k3);
      };
      uc = function(g9, m10, k3, l7) {
        g9 = d8.get(g9);
        l7 = a5("Int32", l7);
        return g9.xAccess(M3(m10), k3, l7);
      };
    })();
    var jd = {
      a: function(a5, b9, c8, d8) {
        u8("Assertion failed: " + M3(a5) + ", at: " + [b9 ? M3(b9) : "unknown filename", c8, d8 ? M3(d8) : "unknown function"]);
      },
      K: function(a5, b9) {
        try {
          return a5 = M3(a5), Ab(a5, b9), 0;
        } catch (c8) {
          if ("undefined" == typeof U3 || "ErrnoError" !== c8.name)
            throw c8;
          return -c8.Ob;
        }
      },
      M: function(a5, b9, c8) {
        try {
          b9 = M3(b9);
          b9 = Kb(a5, b9);
          if (c8 & -8)
            return -28;
          var d8 = S6(b9, { Yb: true }).node;
          if (!d8)
            return -44;
          a5 = "";
          c8 & 4 && (a5 += "r");
          c8 & 2 && (a5 += "w");
          c8 & 1 && (a5 += "x");
          return a5 && kb(d8, a5) ? -2 : 0;
        } catch (f6) {
          if ("undefined" == typeof U3 || "ErrnoError" !== f6.name)
            throw f6;
          return -f6.Ob;
        }
      },
      L: function(a5, b9) {
        try {
          var c8 = Q4[a5];
          if (!c8)
            throw new O5(8);
          Ab(c8.node, b9);
          return 0;
        } catch (d8) {
          if ("undefined" == typeof U3 || "ErrnoError" !== d8.name)
            throw d8;
          return -d8.Ob;
        }
      },
      J: function(a5) {
        try {
          var b9 = Q4[a5];
          if (!b9)
            throw new O5(8);
          var c8 = b9.node;
          var d8 = "string" == typeof c8 ? S6(c8, { Yb: true }).node : c8;
          if (!d8.Cb.Qb)
            throw new O5(63);
          d8.Cb.Qb(d8, { timestamp: Date.now() });
          return 0;
        } catch (f6) {
          if ("undefined" == typeof U3 || "ErrnoError" !== f6.name)
            throw f6;
          return -f6.Ob;
        }
      },
      b: function(a5, b9, c8) {
        Mb = c8;
        try {
          var d8 = W4(a5);
          switch (b9) {
            case 0:
              var f6 = Nb();
              return 0 > f6 ? -28 : sb(d8, f6).Wb;
            case 1:
            case 2:
              return 0;
            case 3:
              return d8.flags;
            case 4:
              return f6 = Nb(), d8.flags |= f6, 0;
            case 5:
              return f6 = Nb(), oa[f6 + 0 >> 1] = 2, 0;
            case 6:
            case 7:
              return 0;
            case 16:
            case 8:
              return -28;
            case 9:
              return A6[hd() >> 2] = 28, -1;
            default:
              return -28;
          }
        } catch (h8) {
          if ("undefined" == typeof U3 || "ErrnoError" !== h8.name)
            throw h8;
          return -h8.Ob;
        }
      },
      I: function(a5, b9) {
        try {
          var c8 = W4(a5);
          return Lb(yb, c8.path, b9);
        } catch (d8) {
          if ("undefined" == typeof U3 || "ErrnoError" !== d8.name)
            throw d8;
          return -d8.Ob;
        }
      },
      j: function(a5, b9, c8) {
        try {
          b9 = c8 + 2097152 >>> 0 < 4194305 - !!b9 ? (b9 >>> 0) + 4294967296 * c8 : NaN;
          if (isNaN(b9))
            return -61;
          var d8 = Q4[a5];
          if (!d8)
            throw new O5(8);
          if (0 === (d8.flags & 2097155))
            throw new O5(28);
          Bb(d8.node, b9);
          return 0;
        } catch (f6) {
          if ("undefined" == typeof U3 || "ErrnoError" !== f6.name)
            throw f6;
          return -f6.Ob;
        }
      },
      C: function(a5, b9) {
        try {
          if (0 === b9)
            return -28;
          var c8 = Qa("/") + 1;
          if (b9 < c8)
            return -68;
          Ob("/", a5, b9);
          return c8;
        } catch (d8) {
          if ("undefined" == typeof U3 || "ErrnoError" !== d8.name)
            throw d8;
          return -d8.Ob;
        }
      },
      F: function(a5, b9) {
        try {
          return a5 = M3(a5), Lb(zb, a5, b9);
        } catch (c8) {
          if ("undefined" == typeof U3 || "ErrnoError" !== c8.name)
            throw c8;
          return -c8.Ob;
        }
      },
      z: function(a5, b9, c8) {
        try {
          return b9 = M3(b9), b9 = Kb(a5, b9), b9 = N6(b9), "/" === b9[b9.length - 1] && (b9 = b9.substr(0, b9.length - 1)), T9(b9, c8), 0;
        } catch (d8) {
          if ("undefined" == typeof U3 || "ErrnoError" !== d8.name)
            throw d8;
          return -d8.Ob;
        }
      },
      E: function(a5, b9, c8, d8) {
        try {
          b9 = M3(b9);
          var f6 = d8 & 256;
          b9 = Kb(a5, b9, d8 & 4096);
          return Lb(f6 ? zb : yb, b9, c8);
        } catch (h8) {
          if ("undefined" == typeof U3 || "ErrnoError" !== h8.name)
            throw h8;
          return -h8.Ob;
        }
      },
      u: function(a5, b9, c8, d8) {
        Mb = d8;
        try {
          b9 = M3(b9);
          b9 = Kb(a5, b9);
          var f6 = d8 ? Nb() : 0;
          return Db(b9, c8, f6).Wb;
        } catch (h8) {
          if ("undefined" == typeof U3 || "ErrnoError" !== h8.name)
            throw h8;
          return -h8.Ob;
        }
      },
      s: function(a5, b9, c8, d8) {
        try {
          b9 = M3(b9);
          b9 = Kb(a5, b9);
          if (0 >= d8)
            return -28;
          var f6 = gb(b9), h8 = Math.min(d8, Qa(f6)), g9 = x6[c8 + h8];
          Ob(f6, c8, d8 + 1);
          x6[c8 + h8] = g9;
          return h8;
        } catch (m10) {
          if ("undefined" == typeof U3 || "ErrnoError" !== m10.name)
            throw m10;
          return -m10.Ob;
        }
      },
      r: function(a5) {
        try {
          return a5 = M3(a5), xb(a5), 0;
        } catch (b9) {
          if ("undefined" == typeof U3 || "ErrnoError" !== b9.name)
            throw b9;
          return -b9.Ob;
        }
      },
      H: function(a5, b9) {
        try {
          return a5 = M3(a5), Lb(yb, a5, b9);
        } catch (c8) {
          if ("undefined" == typeof U3 || "ErrnoError" !== c8.name)
            throw c8;
          return -c8.Ob;
        }
      },
      o: function(a5, b9, c8) {
        try {
          b9 = M3(b9);
          b9 = Kb(a5, b9);
          if (0 === c8) {
            a5 = b9;
            var d8 = S6(a5, { parent: true }).node;
            if (!d8)
              throw new O5(44);
            var f6 = Ma(a5), h8 = ab(d8, f6), g9 = pb(d8, f6, false);
            if (g9)
              throw new O5(g9);
            if (!d8.Cb.oc)
              throw new O5(63);
            if (h8.$b)
              throw new O5(10);
            d8.Cb.oc(d8, f6);
            jb(h8);
          } else
            512 === c8 ? xb(b9) : u8("Invalid flags passed to unlinkat");
          return 0;
        } catch (m10) {
          if ("undefined" == typeof U3 || "ErrnoError" !== m10.name)
            throw m10;
          return -m10.Ob;
        }
      },
      n: function(a5, b9, c8) {
        try {
          b9 = M3(b9);
          b9 = Kb(a5, b9, true);
          if (c8) {
            var d8 = Pb(c8), f6 = A6[c8 + 8 >> 2];
            h8 = 1e3 * d8 + f6 / 1e6;
            c8 += 16;
            d8 = Pb(c8);
            f6 = A6[c8 + 8 >> 2];
            g9 = 1e3 * d8 + f6 / 1e6;
          } else
            var h8 = Date.now(), g9 = h8;
          a5 = h8;
          var m10 = S6(b9, { Yb: true }).node;
          m10.Cb.Qb(m10, { timestamp: Math.max(
            a5,
            g9
          ) });
          return 0;
        } catch (k3) {
          if ("undefined" == typeof U3 || "ErrnoError" !== k3.name)
            throw k3;
          return -k3.Ob;
        }
      },
      y: function(a5, b9) {
        a5 = new Date(1e3 * Pb(a5));
        A6[b9 >> 2] = a5.getSeconds();
        A6[b9 + 4 >> 2] = a5.getMinutes();
        A6[b9 + 8 >> 2] = a5.getHours();
        A6[b9 + 12 >> 2] = a5.getDate();
        A6[b9 + 16 >> 2] = a5.getMonth();
        A6[b9 + 20 >> 2] = a5.getFullYear() - 1900;
        A6[b9 + 24 >> 2] = a5.getDay();
        var c8 = a5.getFullYear();
        A6[b9 + 28 >> 2] = (0 !== c8 % 4 || 0 === c8 % 100 && 0 !== c8 % 400 ? Rb : Qb)[a5.getMonth()] + a5.getDate() - 1 | 0;
        A6[b9 + 36 >> 2] = -(60 * a5.getTimezoneOffset());
        c8 = new Date(a5.getFullYear(), 6, 1).getTimezoneOffset();
        var d8 = new Date(a5.getFullYear(), 0, 1).getTimezoneOffset();
        A6[b9 + 32 >> 2] = (c8 != d8 && a5.getTimezoneOffset() == Math.min(d8, c8)) | 0;
      },
      w: function(a5, b9, c8, d8, f6, h8, g9) {
        try {
          var m10 = W4(d8);
          if (0 !== (b9 & 2) && 0 === (c8 & 2) && 2 !== (m10.flags & 2097155))
            throw new O5(2);
          if (1 === (m10.flags & 2097155))
            throw new O5(2);
          if (!m10.Mb.kc)
            throw new O5(43);
          var k3 = m10.Mb.kc(m10, a5, f6, b9, c8);
          var l7 = k3.Pc;
          A6[h8 >> 2] = k3.Dc;
          B7[g9 >> 2] = l7;
          return 0;
        } catch (q9) {
          if ("undefined" == typeof U3 || "ErrnoError" !== q9.name)
            throw q9;
          return -q9.Ob;
        }
      },
      x: function(a5, b9, c8, d8, f6, h8) {
        try {
          var g9 = W4(f6);
          if (c8 & 2) {
            if (32768 !== (g9.node.mode & 61440))
              throw new O5(43);
            d8 & 2 || g9.Mb.lc && g9.Mb.lc(g9, y6.slice(a5, a5 + b9), h8, b9, d8);
          }
        } catch (m10) {
          if ("undefined" == typeof U3 || "ErrnoError" !== m10.name)
            throw m10;
          return -m10.Ob;
        }
      },
      p: function(a5, b9, c8) {
        function d8(k3) {
          return (k3 = k3.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? k3[1] : "GMT";
        }
        var f6 = new Date().getFullYear(), h8 = new Date(f6, 0, 1), g9 = new Date(f6, 6, 1);
        f6 = h8.getTimezoneOffset();
        var m10 = g9.getTimezoneOffset();
        B7[a5 >> 2] = 60 * Math.max(f6, m10);
        A6[b9 >> 2] = Number(f6 != m10);
        a5 = d8(h8);
        b9 = d8(g9);
        a5 = Sb(a5);
        b9 = Sb(b9);
        m10 < f6 ? (B7[c8 >> 2] = a5, B7[c8 + 4 >> 2] = b9) : (B7[c8 >> 2] = b9, B7[c8 + 4 >> 2] = a5);
      },
      e: function() {
        return Date.now();
      },
      d: () => performance.now(),
      l: function(a5) {
        var b9 = y6.length;
        a5 >>>= 0;
        if (2147483648 < a5)
          return false;
        for (var c8 = 1; 4 >= c8; c8 *= 2) {
          var d8 = b9 * (1 + 0.2 / c8);
          d8 = Math.min(d8, a5 + 100663296);
          var f6 = Math, h8 = f6.min;
          d8 = Math.max(a5, d8);
          d8 += (65536 - d8 % 65536) % 65536;
          a: {
            var g9 = ma.buffer;
            try {
              ma.grow(h8.call(f6, 2147483648, d8) - g9.byteLength + 65535 >>> 16);
              ra();
              var m10 = 1;
              break a;
            } catch (k3) {
            }
            m10 = void 0;
          }
          if (m10)
            return true;
        }
        return false;
      },
      A: function(a5, b9) {
        var c8 = 0;
        Vb().forEach(function(d8, f6) {
          var h8 = b9 + c8;
          f6 = B7[a5 + 4 * f6 >> 2] = h8;
          for (h8 = 0; h8 < d8.length; ++h8)
            x6[f6++ >> 0] = d8.charCodeAt(h8);
          x6[f6 >> 0] = 0;
          c8 += d8.length + 1;
        });
        return 0;
      },
      B: function(a5, b9) {
        var c8 = Vb();
        B7[a5 >> 2] = c8.length;
        var d8 = 0;
        c8.forEach(function(f6) {
          d8 += f6.length + 1;
        });
        B7[b9 >> 2] = d8;
        return 0;
      },
      f: function(a5) {
        try {
          var b9 = W4(a5);
          if (null === b9.Wb)
            throw new O5(8);
          b9.pc && (b9.pc = null);
          try {
            b9.Mb.close && b9.Mb.close(b9);
          } catch (c8) {
            throw c8;
          } finally {
            Q4[b9.Wb] = null;
          }
          b9.Wb = null;
          return 0;
        } catch (c8) {
          if ("undefined" == typeof U3 || "ErrnoError" !== c8.name)
            throw c8;
          return c8.Ob;
        }
      },
      m: function(a5, b9) {
        try {
          var c8 = W4(a5);
          x6[b9 >> 0] = c8.Sb ? 2 : 16384 === (c8.mode & 61440) ? 3 : 40960 === (c8.mode & 61440) ? 7 : 4;
          oa[b9 + 2 >> 1] = 0;
          I5 = [0, (H5 = 0, 1 <= +Math.abs(H5) ? 0 < H5 ? +Math.floor(H5 / 4294967296) >>> 0 : ~~+Math.ceil((H5 - +(~~H5 >>> 0)) / 4294967296) >>> 0 : 0)];
          A6[b9 + 8 >> 2] = I5[0];
          A6[b9 + 12 >> 2] = I5[1];
          I5 = [0, (H5 = 0, 1 <= +Math.abs(H5) ? 0 < H5 ? +Math.floor(H5 / 4294967296) >>> 0 : ~~+Math.ceil((H5 - +(~~H5 >>> 0)) / 4294967296) >>> 0 : 0)];
          A6[b9 + 16 >> 2] = I5[0];
          A6[b9 + 20 >> 2] = I5[1];
          return 0;
        } catch (d8) {
          if ("undefined" == typeof U3 || "ErrnoError" !== d8.name)
            throw d8;
          return d8.Ob;
        }
      },
      t: function(a5, b9, c8, d8) {
        try {
          a: {
            var f6 = W4(a5);
            a5 = b9;
            for (var h8, g9 = b9 = 0; g9 < c8; g9++) {
              var m10 = B7[a5 >> 2], k3 = B7[a5 + 4 >> 2];
              a5 += 8;
              var l7 = f6, q9 = m10, n11 = k3, r7 = h8, w5 = x6;
              if (0 > n11 || 0 > r7)
                throw new O5(28);
              if (null === l7.Wb)
                throw new O5(8);
              if (1 === (l7.flags & 2097155))
                throw new O5(8);
              if (16384 === (l7.node.mode & 61440))
                throw new O5(31);
              if (!l7.Mb.read)
                throw new O5(28);
              var z3 = "undefined" != typeof r7;
              if (!z3)
                r7 = l7.position;
              else if (!l7.seekable)
                throw new O5(70);
              var F5 = l7.Mb.read(l7, w5, q9, n11, r7);
              z3 || (l7.position += F5);
              var D7 = F5;
              if (0 > D7) {
                var J2 = -1;
                break a;
              }
              b9 += D7;
              if (D7 < k3)
                break;
              "undefined" !== typeof h8 && (h8 += D7);
            }
            J2 = b9;
          }
          B7[d8 >> 2] = J2;
          return 0;
        } catch (G3) {
          if ("undefined" == typeof U3 || "ErrnoError" !== G3.name)
            throw G3;
          return G3.Ob;
        }
      },
      i: function(a5, b9, c8, d8, f6) {
        try {
          b9 = c8 + 2097152 >>> 0 < 4194305 - !!b9 ? (b9 >>> 0) + 4294967296 * c8 : NaN;
          if (isNaN(b9))
            return 61;
          var h8 = W4(a5);
          Eb(h8, b9, d8);
          I5 = [h8.position >>> 0, (H5 = h8.position, 1 <= +Math.abs(H5) ? 0 < H5 ? +Math.floor(H5 / 4294967296) >>> 0 : ~~+Math.ceil((H5 - +(~~H5 >>> 0)) / 4294967296) >>> 0 : 0)];
          A6[f6 >> 2] = I5[0];
          A6[f6 + 4 >> 2] = I5[1];
          h8.pc && 0 === b9 && 0 === d8 && (h8.pc = null);
          return 0;
        } catch (g9) {
          if ("undefined" == typeof U3 || "ErrnoError" !== g9.name)
            throw g9;
          return g9.Ob;
        }
      },
      D: function(a5) {
        try {
          var b9 = W4(a5);
          return Xc(function(c8) {
            var d8 = b9.node.Ub;
            d8.type.Sc ? d8.type.Sc(d8, false, function(f6) {
              f6 ? c8(function() {
                return 29;
              }) : c8(0);
            }) : c8(0);
          });
        } catch (c8) {
          if ("undefined" == typeof U3 || "ErrnoError" !== c8.name)
            throw c8;
          return c8.Ob;
        }
      },
      q: function(a5, b9, c8, d8) {
        try {
          a: {
            var f6 = W4(a5);
            a5 = b9;
            for (var h8, g9 = b9 = 0; g9 < c8; g9++) {
              var m10 = B7[a5 >> 2], k3 = B7[a5 + 4 >> 2];
              a5 += 8;
              var l7 = f6, q9 = m10, n11 = k3, r7 = h8, w5 = x6;
              if (0 > n11 || 0 > r7)
                throw new O5(28);
              if (null === l7.Wb)
                throw new O5(8);
              if (0 === (l7.flags & 2097155))
                throw new O5(8);
              if (16384 === (l7.node.mode & 61440))
                throw new O5(31);
              if (!l7.Mb.write)
                throw new O5(28);
              l7.seekable && l7.flags & 1024 && Eb(l7, 0, 2);
              var z3 = "undefined" != typeof r7;
              if (!z3)
                r7 = l7.position;
              else if (!l7.seekable)
                throw new O5(70);
              var F5 = l7.Mb.write(l7, w5, q9, n11, r7, void 0);
              z3 || (l7.position += F5);
              var D7 = F5;
              if (0 > D7) {
                var J2 = -1;
                break a;
              }
              b9 += D7;
              "undefined" !== typeof h8 && (h8 += D7);
            }
            J2 = b9;
          }
          B7[d8 >> 2] = J2;
          return 0;
        } catch (G3) {
          if ("undefined" == typeof U3 || "ErrnoError" !== G3.name)
            throw G3;
          return G3.Ob;
        }
      },
      ra: Xb,
      N: Yb,
      ga: Zb,
      ca: $b,
      Y: ac,
      la: bc,
      G: cc,
      h: dc,
      oa: ec,
      ja: fc,
      ea: gc,
      fa: hc,
      k: ic,
      v: jc,
      pa: kc,
      g: lc,
      qa: mc,
      da: nc,
      ha: oc,
      ia: pc,
      na: qc,
      c: rc,
      ka: sc,
      ma: tc,
      aa: uc,
      V: vc,
      $: wc,
      ba: xc,
      S: yc,
      U: zc,
      Z: Ac,
      X: Bc,
      R: Cc,
      Q: Dc,
      T: Ec,
      _: Fc,
      O: Gc,
      W: Hc,
      P: Ic
    };
    (function() {
      function a5(c8) {
        c8 = c8.exports;
        c8 = Mc(c8);
        e5.asm = c8;
        ma = e5.asm.sa;
        ra();
        ta.unshift(e5.asm.ta);
        C9--;
        e5.monitorRunDependencies && e5.monitorRunDependencies(C9);
        if (0 == C9 && (null !== ya && (clearInterval(ya), ya = null), za)) {
          var d8 = za;
          za = null;
          d8();
        }
        return c8;
      }
      var b9 = { a: jd };
      C9++;
      e5.monitorRunDependencies && e5.monitorRunDependencies(C9);
      if (e5.instantiateWasm)
        try {
          return e5.instantiateWasm(b9, a5);
        } catch (c8) {
          t3("Module.instantiateWasm callback failed with error: " + c8), ba(c8);
        }
      Fa(b9, function(c8) {
        a5(c8.instance);
      }).catch(ba);
      return {};
    })();
    e5._sqlite3_vfs_find = function() {
      return (e5._sqlite3_vfs_find = e5.asm.ua).apply(null, arguments);
    };
    e5._sqlite3_malloc = function() {
      return (e5._sqlite3_malloc = e5.asm.va).apply(null, arguments);
    };
    e5._sqlite3_free = function() {
      return (e5._sqlite3_free = e5.asm.wa).apply(null, arguments);
    };
    e5._sqlite3_prepare_v2 = function() {
      return (e5._sqlite3_prepare_v2 = e5.asm.xa).apply(null, arguments);
    };
    e5._sqlite3_step = function() {
      return (e5._sqlite3_step = e5.asm.ya).apply(null, arguments);
    };
    e5._sqlite3_column_int64 = function() {
      return (e5._sqlite3_column_int64 = e5.asm.za).apply(null, arguments);
    };
    e5._sqlite3_column_int = function() {
      return (e5._sqlite3_column_int = e5.asm.Aa).apply(null, arguments);
    };
    e5._sqlite3_finalize = function() {
      return (e5._sqlite3_finalize = e5.asm.Ba).apply(null, arguments);
    };
    e5._sqlite3_reset = function() {
      return (e5._sqlite3_reset = e5.asm.Ca).apply(null, arguments);
    };
    e5._sqlite3_clear_bindings = function() {
      return (e5._sqlite3_clear_bindings = e5.asm.Da).apply(null, arguments);
    };
    e5._sqlite3_value_blob = function() {
      return (e5._sqlite3_value_blob = e5.asm.Ea).apply(null, arguments);
    };
    e5._sqlite3_value_text = function() {
      return (e5._sqlite3_value_text = e5.asm.Fa).apply(null, arguments);
    };
    e5._sqlite3_value_bytes = function() {
      return (e5._sqlite3_value_bytes = e5.asm.Ga).apply(null, arguments);
    };
    e5._sqlite3_value_double = function() {
      return (e5._sqlite3_value_double = e5.asm.Ha).apply(null, arguments);
    };
    e5._sqlite3_value_int = function() {
      return (e5._sqlite3_value_int = e5.asm.Ia).apply(null, arguments);
    };
    e5._sqlite3_value_int64 = function() {
      return (e5._sqlite3_value_int64 = e5.asm.Ja).apply(null, arguments);
    };
    e5._sqlite3_value_type = function() {
      return (e5._sqlite3_value_type = e5.asm.Ka).apply(null, arguments);
    };
    e5._sqlite3_result_blob = function() {
      return (e5._sqlite3_result_blob = e5.asm.La).apply(null, arguments);
    };
    e5._sqlite3_result_double = function() {
      return (e5._sqlite3_result_double = e5.asm.Ma).apply(null, arguments);
    };
    e5._sqlite3_result_error = function() {
      return (e5._sqlite3_result_error = e5.asm.Na).apply(null, arguments);
    };
    e5._sqlite3_result_int = function() {
      return (e5._sqlite3_result_int = e5.asm.Oa).apply(null, arguments);
    };
    e5._sqlite3_result_int64 = function() {
      return (e5._sqlite3_result_int64 = e5.asm.Pa).apply(null, arguments);
    };
    e5._sqlite3_result_null = function() {
      return (e5._sqlite3_result_null = e5.asm.Qa).apply(null, arguments);
    };
    e5._sqlite3_result_text = function() {
      return (e5._sqlite3_result_text = e5.asm.Ra).apply(null, arguments);
    };
    e5._sqlite3_column_count = function() {
      return (e5._sqlite3_column_count = e5.asm.Sa).apply(null, arguments);
    };
    e5._sqlite3_data_count = function() {
      return (e5._sqlite3_data_count = e5.asm.Ta).apply(null, arguments);
    };
    e5._sqlite3_column_blob = function() {
      return (e5._sqlite3_column_blob = e5.asm.Ua).apply(null, arguments);
    };
    e5._sqlite3_column_bytes = function() {
      return (e5._sqlite3_column_bytes = e5.asm.Va).apply(null, arguments);
    };
    e5._sqlite3_column_double = function() {
      return (e5._sqlite3_column_double = e5.asm.Wa).apply(null, arguments);
    };
    e5._sqlite3_column_text = function() {
      return (e5._sqlite3_column_text = e5.asm.Xa).apply(null, arguments);
    };
    e5._sqlite3_column_type = function() {
      return (e5._sqlite3_column_type = e5.asm.Ya).apply(null, arguments);
    };
    e5._sqlite3_column_name = function() {
      return (e5._sqlite3_column_name = e5.asm.Za).apply(null, arguments);
    };
    e5._sqlite3_bind_blob = function() {
      return (e5._sqlite3_bind_blob = e5.asm._a).apply(null, arguments);
    };
    e5._sqlite3_bind_double = function() {
      return (e5._sqlite3_bind_double = e5.asm.$a).apply(null, arguments);
    };
    e5._sqlite3_bind_int = function() {
      return (e5._sqlite3_bind_int = e5.asm.ab).apply(null, arguments);
    };
    e5._sqlite3_bind_int64 = function() {
      return (e5._sqlite3_bind_int64 = e5.asm.bb).apply(null, arguments);
    };
    e5._sqlite3_bind_null = function() {
      return (e5._sqlite3_bind_null = e5.asm.cb).apply(null, arguments);
    };
    e5._sqlite3_bind_text = function() {
      return (e5._sqlite3_bind_text = e5.asm.db).apply(null, arguments);
    };
    e5._sqlite3_bind_parameter_count = function() {
      return (e5._sqlite3_bind_parameter_count = e5.asm.eb).apply(null, arguments);
    };
    e5._sqlite3_bind_parameter_name = function() {
      return (e5._sqlite3_bind_parameter_name = e5.asm.fb).apply(null, arguments);
    };
    e5._sqlite3_sql = function() {
      return (e5._sqlite3_sql = e5.asm.gb).apply(null, arguments);
    };
    e5._sqlite3_exec = function() {
      return (e5._sqlite3_exec = e5.asm.hb).apply(null, arguments);
    };
    e5._sqlite3_errmsg = function() {
      return (e5._sqlite3_errmsg = e5.asm.ib).apply(null, arguments);
    };
    e5._sqlite3_declare_vtab = function() {
      return (e5._sqlite3_declare_vtab = e5.asm.jb).apply(null, arguments);
    };
    e5._sqlite3_libversion = function() {
      return (e5._sqlite3_libversion = e5.asm.kb).apply(null, arguments);
    };
    e5._sqlite3_libversion_number = function() {
      return (e5._sqlite3_libversion_number = e5.asm.lb).apply(null, arguments);
    };
    e5._sqlite3_changes = function() {
      return (e5._sqlite3_changes = e5.asm.mb).apply(null, arguments);
    };
    e5._sqlite3_close = function() {
      return (e5._sqlite3_close = e5.asm.nb).apply(null, arguments);
    };
    e5._sqlite3_limit = function() {
      return (e5._sqlite3_limit = e5.asm.ob).apply(null, arguments);
    };
    e5._sqlite3_open_v2 = function() {
      return (e5._sqlite3_open_v2 = e5.asm.pb).apply(null, arguments);
    };
    e5._sqlite3_get_autocommit = function() {
      return (e5._sqlite3_get_autocommit = e5.asm.qb).apply(null, arguments);
    };
    function hd() {
      return (hd = e5.asm.rb).apply(null, arguments);
    }
    var Tb = e5._malloc = function() {
      return (Tb = e5._malloc = e5.asm.sb).apply(null, arguments);
    }, bd = e5._free = function() {
      return (bd = e5._free = e5.asm.tb).apply(null, arguments);
    };
    e5._RegisterExtensionFunctions = function() {
      return (e5._RegisterExtensionFunctions = e5.asm.ub).apply(null, arguments);
    };
    e5._set_authorizer = function() {
      return (e5._set_authorizer = e5.asm.vb).apply(null, arguments);
    };
    e5._create_function = function() {
      return (e5._create_function = e5.asm.wb).apply(null, arguments);
    };
    e5._create_module = function() {
      return (e5._create_module = e5.asm.xb).apply(null, arguments);
    };
    e5._progress_handler = function() {
      return (e5._progress_handler = e5.asm.yb).apply(null, arguments);
    };
    e5._register_vfs = function() {
      return (e5._register_vfs = e5.asm.zb).apply(null, arguments);
    };
    e5._getSqliteFree = function() {
      return (e5._getSqliteFree = e5.asm.Ab).apply(null, arguments);
    };
    var kd = e5._main = function() {
      return (kd = e5._main = e5.asm.Bb).apply(null, arguments);
    };
    function bb() {
      return (bb = e5.asm.Db).apply(null, arguments);
    }
    function ld() {
      return (ld = e5.asm.Eb).apply(null, arguments);
    }
    function gd() {
      return (gd = e5.asm.Fb).apply(null, arguments);
    }
    function ed() {
      return (ed = e5.asm.Gb).apply(null, arguments);
    }
    function fd() {
      return (fd = e5.asm.Hb).apply(null, arguments);
    }
    function $c() {
      return ($c = e5.asm.Ib).apply(null, arguments);
    }
    function Oc() {
      return (Oc = e5.asm.Jb).apply(null, arguments);
    }
    function Yc() {
      return (Yc = e5.asm.Kb).apply(null, arguments);
    }
    function ad() {
      return (ad = e5.asm.Lb).apply(null, arguments);
    }
    e5.getTempRet0 = ld;
    e5.ccall = Z3;
    e5.cwrap = function(a5, b9, c8, d8) {
      var f6 = !c8 || c8.every((h8) => "number" === h8 || "boolean" === h8);
      return "string" !== b9 && f6 && !d8 ? e5["_" + a5] : function() {
        return Z3(a5, b9, c8, arguments, d8);
      };
    };
    e5.setValue = L2;
    e5.getValue = K6;
    e5.UTF8ToString = M3;
    e5.stringToUTF8 = Ob;
    e5.lengthBytesUTF8 = Qa;
    var md;
    za = function nd() {
      md || od();
      md || (za = nd);
    };
    function od() {
      function a5() {
        if (!md && (md = true, e5.calledRun = true, !v10)) {
          e5.noFSInit || Gb || (Gb = true, Fb(), e5.stdin = e5.stdin, e5.stdout = e5.stdout, e5.stderr = e5.stderr, e5.stdin ? Jb("stdin", e5.stdin) : wb("/dev/tty", "/dev/stdin"), e5.stdout ? Jb("stdout", null, e5.stdout) : wb("/dev/tty", "/dev/stdout"), e5.stderr ? Jb("stderr", null, e5.stderr) : wb("/dev/tty1", "/dev/stderr"), Db("/dev/stdin", 0), Db("/dev/stdout", 1), Db("/dev/stderr", 1));
          fb = false;
          Ha(ta);
          Ha(ua);
          aa(e5);
          if (e5.onRuntimeInitialized)
            e5.onRuntimeInitialized();
          if (pd) {
            var b9 = kd;
            try {
              var c8 = b9(0, 0);
              na = c8;
              Jc(c8);
            } catch (d8) {
              Kc(d8);
            }
          }
          if (e5.postRun)
            for ("function" == typeof e5.postRun && (e5.postRun = [e5.postRun]); e5.postRun.length; )
              b9 = e5.postRun.shift(), va.unshift(b9);
          Ha(va);
        }
      }
      if (!(0 < C9)) {
        if (e5.preRun)
          for ("function" == typeof e5.preRun && (e5.preRun = [e5.preRun]); e5.preRun.length; )
            xa();
        Ha(sa);
        0 < C9 || (e5.setStatus ? (e5.setStatus("Running..."), setTimeout(function() {
          setTimeout(function() {
            e5.setStatus("");
          }, 1);
          a5();
        }, 1)) : a5());
      }
    }
    if (e5.preInit)
      for ("function" == typeof e5.preInit && (e5.preInit = [e5.preInit]); 0 < e5.preInit.length; )
        e5.preInit.pop()();
    var pd = true;
    e5.noInitialRun && (pd = false);
    od();
    return Module2.ready;
  };
})();
var wa_sqlite_async_default = Module;

// node_modules/wa-sqlite/src/sqlite-constants.js
var SQLITE_OK = 0;
var SQLITE_BUSY = 5;
var SQLITE_IOERR = 10;
var SQLITE_NOTFOUND = 12;
var SQLITE_CANTOPEN = 14;
var SQLITE_MISUSE = 21;
var SQLITE_RANGE = 25;
var SQLITE_NOTICE = 27;
var SQLITE_ROW = 100;
var SQLITE_DONE = 101;
var SQLITE_IOERR_LOCK = 3850;
var SQLITE_IOERR_SHORT_READ = 522;
var SQLITE_OPEN_READONLY = 1;
var SQLITE_OPEN_READWRITE = 2;
var SQLITE_OPEN_CREATE = 4;
var SQLITE_OPEN_DELETEONCLOSE = 8;
var SQLITE_OPEN_MAIN_DB = 256;
var SQLITE_OPEN_TEMP_DB = 512;
var SQLITE_OPEN_TRANSIENT_DB = 1024;
var SQLITE_OPEN_MAIN_JOURNAL = 2048;
var SQLITE_OPEN_TEMP_JOURNAL = 4096;
var SQLITE_OPEN_SUBJOURNAL = 8192;
var SQLITE_OPEN_SUPER_JOURNAL = 16384;
var SQLITE_LOCK_NONE = 0;
var SQLITE_LOCK_SHARED = 1;
var SQLITE_LOCK_RESERVED = 2;
var SQLITE_LOCK_PENDING = 3;
var SQLITE_LOCK_EXCLUSIVE = 4;
var SQLITE_IOCAP_SAFE_APPEND = 512;
var SQLITE_IOCAP_SEQUENTIAL = 1024;
var SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN = 2048;
var SQLITE_IOCAP_BATCH_ATOMIC = 16384;
var SQLITE_INTEGER = 1;
var SQLITE_FLOAT = 2;
var SQLITE_TEXT = 3;
var SQLITE_BLOB = 4;
var SQLITE_NULL = 5;

// node_modules/wa-sqlite/src/sqlite-api.js
var MAX_INT64 = 0x7fffffffffffffffn;
var MIN_INT64 = -0x8000000000000000n;
var SQLiteError = class extends Error {
  constructor(message, code) {
    super(message);
    this.code = code;
  }
};
var async = true;
function Factory(Module2) {
  const sqlite3 = {};
  const sqliteFreeAddress = Module2._getSqliteFree();
  const tmp = Module2._malloc(8);
  const tmpPtr = [tmp, tmp + 4];
  function createUTF8(s7) {
    if (typeof s7 !== "string")
      return 0;
    const n11 = Module2.lengthBytesUTF8(s7);
    const zts = Module2._sqlite3_malloc(n11 + 1);
    Module2.stringToUTF8(s7, zts, n11 + 1);
    return zts;
  }
  function cvt32x2ToBigInt(lo32, hi32) {
    return BigInt(hi32) << 32n | BigInt(lo32) & 0xffffffffn;
  }
  const cvt32x2AsSafe = function() {
    const hiMax = BigInt(Number.MAX_SAFE_INTEGER) >> 32n;
    const hiMin = BigInt(Number.MIN_SAFE_INTEGER) >> 32n;
    return function(lo32, hi32) {
      if (hi32 > hiMax || hi32 < hiMin) {
        return cvt32x2ToBigInt(lo32, hi32);
      } else {
        return hi32 * 4294967296 + (lo32 & 2147483647) - (lo32 & 2147483648);
      }
    };
  }();
  const databases = /* @__PURE__ */ new Set();
  function verifyDatabase(db) {
    if (!databases.has(db)) {
      throw new SQLiteError("not a database", SQLITE_MISUSE);
    }
  }
  const mapStmtToDB = /* @__PURE__ */ new Map();
  function verifyStatement(stmt) {
    if (!mapStmtToDB.has(stmt)) {
      throw new SQLiteError("not a statement", SQLITE_MISUSE);
    }
  }
  sqlite3.bind_collection = function(stmt, bindings) {
    verifyStatement(stmt);
    const isArray = Array.isArray(bindings);
    const nBindings = sqlite3.bind_parameter_count(stmt);
    for (let i8 = 1; i8 <= nBindings; ++i8) {
      const key = isArray ? i8 - 1 : sqlite3.bind_parameter_name(stmt, i8);
      const value = bindings[key];
      if (value !== void 0) {
        sqlite3.bind(stmt, i8, value);
      }
    }
    return SQLITE_OK;
  };
  sqlite3.bind = function(stmt, i8, value) {
    verifyStatement(stmt);
    switch (typeof value) {
      case "number":
        if (value === (value | 0)) {
          return sqlite3.bind_int(stmt, i8, value);
        } else {
          return sqlite3.bind_double(stmt, i8, value);
        }
      case "string":
        return sqlite3.bind_text(stmt, i8, value);
      default:
        if (value instanceof Uint8Array || Array.isArray(value)) {
          return sqlite3.bind_blob(stmt, i8, value);
        } else if (value === null) {
          return sqlite3.bind_null(stmt, i8);
        } else if (typeof value === "bigint") {
          return sqlite3.bind_int64(stmt, i8, value);
        } else if (value === void 0) {
          return SQLITE_NOTICE;
        } else {
          console.warn("unknown binding converted to null", value);
          return sqlite3.bind_null(stmt, i8);
        }
    }
  };
  sqlite3.bind_blob = function() {
    const fname = "sqlite3_bind_blob";
    const f6 = Module2.cwrap(fname, ...decl("nnnnn:n"));
    return function(stmt, i8, value) {
      verifyStatement(stmt);
      const byteLength = value.byteLength ?? value.length;
      const ptr = Module2._sqlite3_malloc(byteLength);
      Module2.HEAPU8.subarray(ptr).set(value);
      const result = f6(stmt, i8, ptr, byteLength, sqliteFreeAddress);
      return check(fname, result, mapStmtToDB.get(stmt));
    };
  }();
  sqlite3.bind_parameter_count = function() {
    const fname = "sqlite3_bind_parameter_count";
    const f6 = Module2.cwrap(fname, ...decl("n:n"));
    return function(stmt) {
      verifyStatement(stmt);
      const result = f6(stmt);
      return result;
    };
  }();
  sqlite3.bind_double = function() {
    const fname = "sqlite3_bind_double";
    const f6 = Module2.cwrap(fname, ...decl("nnn:n"));
    return function(stmt, i8, value) {
      verifyStatement(stmt);
      const result = f6(stmt, i8, value);
      return check(fname, result, mapStmtToDB.get(stmt));
    };
  }();
  sqlite3.bind_int = function() {
    const fname = "sqlite3_bind_int";
    const f6 = Module2.cwrap(fname, ...decl("nnn:n"));
    return function(stmt, i8, value) {
      verifyStatement(stmt);
      if (value > 2147483647 || value < -2147483648)
        return SQLITE_RANGE;
      const result = f6(stmt, i8, value);
      return check(fname, result, mapStmtToDB.get(stmt));
    };
  }();
  sqlite3.bind_int64 = function() {
    const fname = "sqlite3_bind_int64";
    const f6 = Module2.cwrap(fname, ...decl("nnnn:n"));
    return function(stmt, i8, value) {
      verifyStatement(stmt);
      if (value > MAX_INT64 || value < MIN_INT64)
        return SQLITE_RANGE;
      const lo32 = value & 0xffffffffn;
      const hi32 = value >> 32n;
      const result = f6(stmt, i8, Number(lo32), Number(hi32));
      return check(fname, result, mapStmtToDB.get(stmt));
    };
  }();
  sqlite3.bind_null = function() {
    const fname = "sqlite3_bind_null";
    const f6 = Module2.cwrap(fname, ...decl("nn:n"));
    return function(stmt, i8) {
      verifyStatement(stmt);
      const result = f6(stmt, i8);
      return check(fname, result, mapStmtToDB.get(stmt));
    };
  }();
  sqlite3.bind_parameter_name = function() {
    const fname = "sqlite3_bind_parameter_name";
    const f6 = Module2.cwrap(fname, ...decl("n:s"));
    return function(stmt, i8) {
      verifyStatement(stmt);
      const result = f6(stmt, i8);
      return result;
    };
  }();
  sqlite3.bind_text = function() {
    const fname = "sqlite3_bind_text";
    const f6 = Module2.cwrap(fname, ...decl("nnnnn:n"));
    return function(stmt, i8, value) {
      verifyStatement(stmt);
      const ptr = createUTF8(value);
      const result = f6(stmt, i8, ptr, -1, sqliteFreeAddress);
      return check(fname, result, mapStmtToDB.get(stmt));
    };
  }();
  sqlite3.changes = function() {
    const fname = "sqlite3_changes";
    const f6 = Module2.cwrap(fname, ...decl("n:n"));
    return function(db) {
      verifyDatabase(db);
      const result = f6(db);
      return result;
    };
  }();
  sqlite3.close = function() {
    const fname = "sqlite3_close";
    const f6 = Module2.cwrap(fname, ...decl("n:n"), { async });
    return async function(db) {
      verifyDatabase(db);
      const result = await f6(db);
      databases.delete(db);
      return check(fname, result, db);
    };
  }();
  sqlite3.column = function(stmt, iCol) {
    verifyStatement(stmt);
    const type = sqlite3.column_type(stmt, iCol);
    switch (type) {
      case SQLITE_BLOB:
        return sqlite3.column_blob(stmt, iCol);
      case SQLITE_FLOAT:
        return sqlite3.column_double(stmt, iCol);
      case SQLITE_INTEGER:
        const lo32 = sqlite3.column_int(stmt, iCol);
        const hi32 = Module2.getTempRet0();
        return cvt32x2AsSafe(lo32, hi32);
      case SQLITE_NULL:
        return null;
      case SQLITE_TEXT:
        return sqlite3.column_text(stmt, iCol);
      default:
        throw new SQLiteError("unknown type", type);
    }
  };
  sqlite3.column_blob = function() {
    const fname = "sqlite3_column_blob";
    const f6 = Module2.cwrap(fname, ...decl("nn:n"));
    return function(stmt, iCol) {
      verifyStatement(stmt);
      const nBytes = sqlite3.column_bytes(stmt, iCol);
      const address = f6(stmt, iCol);
      const result = Module2.HEAPU8.subarray(address, address + nBytes);
      return result;
    };
  }();
  sqlite3.column_bytes = function() {
    const fname = "sqlite3_column_bytes";
    const f6 = Module2.cwrap(fname, ...decl("nn:n"));
    return function(stmt, iCol) {
      verifyStatement(stmt);
      const result = f6(stmt, iCol);
      return result;
    };
  }();
  sqlite3.column_count = function() {
    const fname = "sqlite3_column_count";
    const f6 = Module2.cwrap(fname, ...decl("n:n"));
    return function(stmt) {
      verifyStatement(stmt);
      const result = f6(stmt);
      return result;
    };
  }();
  sqlite3.column_double = function() {
    const fname = "sqlite3_column_double";
    const f6 = Module2.cwrap(fname, ...decl("nn:n"));
    return function(stmt, iCol) {
      verifyStatement(stmt);
      const result = f6(stmt, iCol);
      return result;
    };
  }();
  sqlite3.column_int = function() {
    const fname = "sqlite3_column_int64";
    const f6 = Module2.cwrap(fname, ...decl("nn:n"));
    return function(stmt, iCol) {
      verifyStatement(stmt);
      const result = f6(stmt, iCol);
      return result;
    };
  }();
  sqlite3.column_int64 = function() {
    const fname = "sqlite3_column_int64";
    const f6 = Module2.cwrap(fname, ...decl("nn:n"));
    return function(stmt, iCol) {
      verifyStatement(stmt);
      const lo32 = f6(stmt, iCol);
      const hi32 = Module2.getTempRet0();
      const result = cvt32x2ToBigInt(lo32, hi32);
      return result;
    };
  }();
  sqlite3.column_name = function() {
    const fname = "sqlite3_column_name";
    const f6 = Module2.cwrap(fname, ...decl("nn:s"));
    return function(stmt, iCol) {
      verifyStatement(stmt);
      const result = f6(stmt, iCol);
      return result;
    };
  }();
  sqlite3.column_names = function(stmt) {
    const columns = [];
    const nColumns = sqlite3.column_count(stmt);
    for (let i8 = 0; i8 < nColumns; ++i8) {
      columns.push(sqlite3.column_name(stmt, i8));
    }
    return columns;
  };
  sqlite3.column_text = function() {
    const fname = "sqlite3_column_text";
    const f6 = Module2.cwrap(fname, ...decl("nn:s"));
    return function(stmt, iCol) {
      verifyStatement(stmt);
      const result = f6(stmt, iCol);
      return result;
    };
  }();
  sqlite3.column_type = function() {
    const fname = "sqlite3_column_type";
    const f6 = Module2.cwrap(fname, ...decl("nn:n"));
    return function(stmt, iCol) {
      verifyStatement(stmt);
      const result = f6(stmt, iCol);
      return result;
    };
  }();
  sqlite3.create_function = function(db, zFunctionName, nArg, eTextRep, pApp, xFunc, xStep, xFinal) {
    verifyDatabase(db);
    if (xFunc && !xStep && !xFinal) {
      const result = Module2.createFunction(db, zFunctionName, nArg, eTextRep, pApp, xFunc);
      return check("sqlite3_create_function", result, db);
    }
    if (!xFunc && xStep && xFinal) {
      const result = Module2.createAggregate(db, zFunctionName, nArg, eTextRep, pApp, xStep, xFinal);
      return check("sqlite3_create_function", result, db);
    }
    throw new SQLiteError("invalid function combination", SQLITE_MISUSE);
  };
  sqlite3.create_module = function(db, zName, module2, appData) {
    verifyDatabase(db);
    const result = Module2.createModule(db, zName, module2, appData);
    return check("sqlite3_create_module", result, db);
  };
  sqlite3.data_count = function() {
    const fname = "sqlite3_data_count";
    const f6 = Module2.cwrap(fname, ...decl("n:n"));
    return function(stmt) {
      verifyStatement(stmt);
      const result = f6(stmt);
      return result;
    };
  }();
  sqlite3.declare_vtab = function() {
    const fname = "sqlite3_declare_vtab";
    const f6 = Module2.cwrap(fname, ...decl("ns:n"));
    return function(pVTab, zSQL) {
      const result = f6(pVTab, zSQL);
      return check("sqlite3_declare_vtab", result);
    };
  }();
  sqlite3.exec = async function(db, sql, callback) {
    for await (const stmt of sqlite3.statements(db, sql)) {
      let columns;
      while (await sqlite3.step(stmt) === SQLITE_ROW) {
        if (callback) {
          columns = columns ?? sqlite3.column_names(stmt);
          const row = sqlite3.row(stmt);
          await callback(row, columns);
        }
      }
    }
    return SQLITE_OK;
  };
  sqlite3.finalize = function() {
    const fname = "sqlite3_finalize";
    const f6 = Module2.cwrap(fname, ...decl("n:n"), { async });
    return async function(stmt) {
      if (!mapStmtToDB.has(stmt)) {
        return SQLITE_MISUSE;
      }
      const result = await f6(stmt);
      const db = mapStmtToDB.get(stmt);
      mapStmtToDB.delete(stmt);
      return result;
    };
  }();
  sqlite3.get_autocommit = function() {
    const fname = "sqlite3_get_autocommit";
    const f6 = Module2.cwrap(fname, ...decl("n:n"));
    return function(db) {
      const result = f6(db);
      return result;
    };
  }();
  sqlite3.libversion = function() {
    const fname = "sqlite3_libversion";
    const f6 = Module2.cwrap(fname, ...decl(":s"));
    return function() {
      const result = f6();
      return result;
    };
  }();
  sqlite3.libversion_number = function() {
    const fname = "sqlite3_libversion_number";
    const f6 = Module2.cwrap(fname, ...decl(":n"));
    return function() {
      const result = f6();
      return result;
    };
  }();
  sqlite3.limit = function() {
    const fname = "sqlite3_limit";
    const f6 = Module2.cwrap(fname, ...decl("nnn:n"));
    return function(db, id, newVal) {
      const result = f6(db, id, newVal);
      return result;
    };
  }();
  sqlite3.open_v2 = function() {
    const fname = "sqlite3_open_v2";
    const f6 = Module2.cwrap(fname, ...decl("snnn:n"), { async });
    return async function(zFilename, flags, zVfs) {
      flags = flags || SQLITE_OPEN_CREATE | SQLITE_OPEN_READWRITE;
      zVfs = createUTF8(zVfs);
      const result = await f6(zFilename, tmpPtr[0], flags, zVfs);
      const db = Module2.getValue(tmpPtr[0], "*");
      databases.add(db);
      Module2._sqlite3_free(zVfs);
      Module2.ccall("RegisterExtensionFunctions", "void", ["number"], [db]);
      check(fname, result);
      return db;
    };
  }();
  sqlite3.prepare_v2 = function() {
    const fname = "sqlite3_prepare_v2";
    const f6 = Module2.cwrap(fname, ...decl("nnnnn:n"), { async });
    return async function(db, sql) {
      const result = await f6(db, sql, -1, tmpPtr[0], tmpPtr[1]);
      check(fname, result, db);
      const stmt = Module2.getValue(tmpPtr[0], "*");
      if (stmt) {
        mapStmtToDB.set(stmt, db);
        return { stmt, sql: Module2.getValue(tmpPtr[1], "*") };
      }
      return null;
    };
  }();
  sqlite3.progress_handler = function(db, nProgressOps, handler, userData) {
    verifyDatabase(db);
    Module2.progressHandler(db, nProgressOps, handler, userData);
  };
  ;
  sqlite3.reset = function() {
    const fname = "sqlite3_reset";
    const f6 = Module2.cwrap(fname, ...decl("n:n"), { async });
    return async function(stmt) {
      verifyStatement(stmt);
      const result = await f6(stmt);
      return check(fname, result, mapStmtToDB.get(stmt));
    };
  }();
  sqlite3.result = function(context, value) {
    switch (typeof value) {
      case "number":
        if (value === (value | 0)) {
          sqlite3.result_int(context, value);
        } else {
          sqlite3.result_double(context, value);
        }
        break;
      case "string":
        sqlite3.result_text(context, value);
        break;
      default:
        if (value instanceof Uint8Array || Array.isArray(value)) {
          sqlite3.result_blob(context, value);
        } else if (value === null) {
          sqlite3.result_null(context);
        } else if (typeof value === "bigint") {
          return sqlite3.result_int64(context, value);
        } else {
          console.warn("unknown result converted to null", value);
          sqlite3.result_null(context);
        }
        break;
    }
  };
  sqlite3.result_blob = function() {
    const fname = "sqlite3_result_blob";
    const f6 = Module2.cwrap(fname, ...decl("nnnn:n"));
    return function(context, value) {
      const byteLength = value.byteLength ?? value.length;
      const ptr = Module2._sqlite3_malloc(byteLength);
      Module2.HEAPU8.subarray(ptr).set(value);
      f6(context, ptr, byteLength, sqliteFreeAddress);
    };
  }();
  sqlite3.result_double = function() {
    const fname = "sqlite3_result_double";
    const f6 = Module2.cwrap(fname, ...decl("nn:n"));
    return function(context, value) {
      f6(context, value);
    };
  }();
  sqlite3.result_int = function() {
    const fname = "sqlite3_result_int";
    const f6 = Module2.cwrap(fname, ...decl("nn:n"));
    return function(context, value) {
      f6(context, value);
    };
  }();
  sqlite3.result_int64 = function() {
    const fname = "sqlite3_result_int64";
    const f6 = Module2.cwrap(fname, ...decl("nnn:n"));
    return function(context, value) {
      if (value > MAX_INT64 || value < MIN_INT64)
        return SQLITE_RANGE;
      const lo32 = value & 0xffffffffn;
      const hi32 = value >> 32n;
      f6(context, Number(lo32), Number(hi32));
    };
  }();
  sqlite3.result_null = function() {
    const fname = "sqlite3_result_null";
    const f6 = Module2.cwrap(fname, ...decl("n:n"));
    return function(context) {
      f6(context);
    };
  }();
  sqlite3.result_text = function() {
    const fname = "sqlite3_result_text";
    const f6 = Module2.cwrap(fname, ...decl("nnnn:n"));
    return function(context, value) {
      const ptr = createUTF8(value);
      f6(context, ptr, -1, sqliteFreeAddress);
    };
  }();
  sqlite3.row = function(stmt) {
    const row = [];
    const nColumns = sqlite3.data_count(stmt);
    for (let i8 = 0; i8 < nColumns; ++i8) {
      const value = sqlite3.column(stmt, i8);
      row.push(value?.buffer === Module2.HEAPU8.buffer ? value.slice() : value);
    }
    return row;
  };
  sqlite3.set_authorizer = function(db, authFunction, userData) {
    verifyDatabase(db);
    const result = Module2.setAuthorizer(db, authFunction, userData);
    return check("sqlite3_set_authorizer", result, db);
  };
  ;
  sqlite3.sql = function() {
    const fname = "sqlite3_sql";
    const f6 = Module2.cwrap(fname, ...decl("n:s"));
    return function(stmt) {
      verifyStatement(stmt);
      const result = f6(stmt);
      return result;
    };
  }();
  sqlite3.statements = function(db, sql) {
    return async function* () {
      const str = sqlite3.str_new(db, sql);
      let prepared = { stmt: null, sql: sqlite3.str_value(str) };
      try {
        while (prepared = await sqlite3.prepare_v2(db, prepared.sql)) {
          yield prepared.stmt;
          sqlite3.finalize(prepared.stmt);
          prepared.stmt = null;
        }
      } finally {
        if (prepared?.stmt) {
          sqlite3.finalize(prepared.stmt);
        }
        sqlite3.str_finish(str);
      }
    }();
  };
  sqlite3.step = function() {
    const fname = "sqlite3_step";
    const f6 = Module2.cwrap(fname, ...decl("n:n"), { async });
    return async function(stmt) {
      verifyStatement(stmt);
      const result = await f6(stmt);
      return check(fname, result, mapStmtToDB.get(stmt), [SQLITE_ROW, SQLITE_DONE]);
    };
  }();
  let stringId = 0;
  const strings = /* @__PURE__ */ new Map();
  sqlite3.str_new = function(db, s7 = "") {
    const sBytes = Module2.lengthBytesUTF8(s7);
    const str = stringId++ & 4294967295;
    const data = {
      offset: Module2._sqlite3_malloc(sBytes + 1),
      bytes: sBytes
    };
    strings.set(str, data);
    Module2.stringToUTF8(s7, data.offset, data.bytes + 1);
    return str;
  };
  sqlite3.str_appendall = function(str, s7) {
    if (!strings.has(str)) {
      throw new SQLiteError("not a string", SQLITE_MISUSE);
    }
    const data = strings.get(str);
    const sBytes = Module2.lengthBytesUTF8(s7);
    const newBytes = data.bytes + sBytes;
    const newOffset = Module2._sqlite3_malloc(newBytes + 1);
    const newArray = Module2.HEAPU8.subarray(newOffset, newOffset + newBytes + 1);
    newArray.set(Module2.HEAPU8.subarray(data.offset, data.offset + data.bytes));
    Module2.stringToUTF8(s7, newOffset + data.bytes, sBytes + 1);
    Module2._sqlite3_free(data.offset);
    data.offset = newOffset;
    data.bytes = newBytes;
    strings.set(str, data);
  };
  sqlite3.str_finish = function(str) {
    if (!strings.has(str)) {
      throw new SQLiteError("not a string", SQLITE_MISUSE);
    }
    const data = strings.get(str);
    strings.delete(str);
    Module2._sqlite3_free(data.offset);
  };
  sqlite3.str_value = function(str) {
    if (!strings.has(str)) {
      throw new SQLiteError("not a string", SQLITE_MISUSE);
    }
    return strings.get(str).offset;
  };
  sqlite3.user_data = function(context) {
    return Module2.getFunctionUserData(context);
  };
  sqlite3.value = function(pValue) {
    const type = sqlite3.value_type(pValue);
    switch (type) {
      case SQLITE_BLOB:
        return sqlite3.value_blob(pValue);
      case SQLITE_FLOAT:
        return sqlite3.value_double(pValue);
      case SQLITE_INTEGER:
        const lo32 = sqlite3.value_int(pValue);
        const hi32 = Module2.getTempRet0();
        return cvt32x2AsSafe(lo32, hi32);
      case SQLITE_NULL:
        return null;
      case SQLITE_TEXT:
        return sqlite3.value_text(pValue);
      default:
        throw new SQLiteError("unknown type", type);
    }
  };
  sqlite3.value_blob = function() {
    const fname = "sqlite3_value_blob";
    const f6 = Module2.cwrap(fname, ...decl("n:n"));
    return function(pValue) {
      const nBytes = sqlite3.value_bytes(pValue);
      const address = f6(pValue);
      const result = Module2.HEAPU8.subarray(address, address + nBytes);
      return result;
    };
  }();
  sqlite3.value_bytes = function() {
    const fname = "sqlite3_value_bytes";
    const f6 = Module2.cwrap(fname, ...decl("n:n"));
    return function(pValue) {
      const result = f6(pValue);
      return result;
    };
  }();
  sqlite3.value_double = function() {
    const fname = "sqlite3_value_double";
    const f6 = Module2.cwrap(fname, ...decl("n:n"));
    return function(pValue) {
      const result = f6(pValue);
      return result;
    };
  }();
  sqlite3.value_int = function() {
    const fname = "sqlite3_value_int64";
    const f6 = Module2.cwrap(fname, ...decl("n:n"));
    return function(pValue) {
      const result = f6(pValue);
      return result;
    };
  }();
  sqlite3.value_int64 = function() {
    const fname = "sqlite3_value_int64";
    const f6 = Module2.cwrap(fname, ...decl("n:n"));
    return function(pValue) {
      const lo32 = f6(pValue);
      const hi32 = Module2.getTempRet0();
      const result = cvt32x2ToBigInt(lo32, hi32);
      return result;
    };
  }();
  sqlite3.value_text = function() {
    const fname = "sqlite3_value_text";
    const f6 = Module2.cwrap(fname, ...decl("n:s"));
    return function(pValue) {
      const result = f6(pValue);
      return result;
    };
  }();
  sqlite3.value_type = function() {
    const fname = "sqlite3_value_type";
    const f6 = Module2.cwrap(fname, ...decl("n:n"));
    return function(pValue) {
      const result = f6(pValue);
      return result;
    };
  }();
  sqlite3.vfs_register = function(vfs, makeDefault) {
    const result = Module2.registerVFS(vfs, makeDefault);
    return check("sqlite3_vfs_register", result);
  };
  function check(fname, result, db = null, allowed = [SQLITE_OK]) {
    if (allowed.includes(result))
      return result;
    const message = db ? Module2.ccall("sqlite3_errmsg", "string", ["number"], [db]) : fname;
    throw new SQLiteError(message, result);
  }
  return sqlite3;
}
function decl(s7) {
  const result = [];
  const m10 = s7.match(/([ns@]*):([nsv@])/);
  switch (m10[2]) {
    case "n":
      result.push("number");
      break;
    case "s":
      result.push("string");
      break;
    case "v":
      result.push(null);
      break;
  }
  const args = [];
  for (let c8 of m10[1]) {
    switch (c8) {
      case "n":
        args.push("number");
        break;
      case "s":
        args.push("string");
        break;
    }
  }
  result.push(args);
  return result;
}

// node_modules/wa-sqlite/src/VFS.js
var Base = class {
  mxPathName = 64;
  /**
   * @param {number} fileId 
   * @returns {number}
   */
  xClose(fileId) {
    return SQLITE_IOERR;
  }
  /**
   * @param {number} fileId 
   * @param {Uint8Array} pData 
   * @param {number} iOffset
   * @returns {number}
   */
  xRead(fileId, pData, iOffset) {
    return SQLITE_IOERR;
  }
  /**
   * @param {number} fileId 
   * @param {Uint8Array} pData 
   * @param {number} iOffset
   * @returns {number}
   */
  xWrite(fileId, pData, iOffset) {
    return SQLITE_IOERR;
  }
  /**
   * @param {number} fileId 
   * @param {number} iSize 
   * @returns {number}
   */
  xTruncate(fileId, iSize) {
    return SQLITE_IOERR;
  }
  /**
   * @param {number} fileId 
   * @param {*} flags 
   * @returns {number}
   */
  xSync(fileId, flags) {
    return SQLITE_OK;
  }
  /**
   * @param {number} fileId 
   * @param {DataView} pSize64 
   * @returns {number}
   */
  xFileSize(fileId, pSize64) {
    return SQLITE_IOERR;
  }
  /**
   * @param {number} fileId 
   * @param {number} flags 
   * @returns {number}
   */
  xLock(fileId, flags) {
    return SQLITE_OK;
  }
  /**
   * @param {number} fileId 
   * @param {number} flags 
   * @returns {number}
   */
  xUnlock(fileId, flags) {
    return SQLITE_OK;
  }
  /**
   * @param {number} fileId 
   * @param {DataView} pResOut 
   * @returns {number}
   */
  xCheckReservedLock(fileId, pResOut) {
    pResOut.setInt32(0, 0, true);
    return SQLITE_OK;
  }
  /**
   * @param {number} fileId 
   * @param {number} op 
   * @param {DataView} pArg 
   * @returns {number}
   */
  xFileControl(fileId, op, pArg) {
    return SQLITE_NOTFOUND;
  }
  /**
   * @param {number} fileId 
   * @returns {number}
   */
  xSectorSize(fileId) {
    return 512;
  }
  /**
   * @param {number} fileId 
   * @returns {number}
   */
  xDeviceCharacteristics(fileId) {
    return 0;
  }
  /**
   * @param {string?} name 
   * @param {number} fileId 
   * @param {number} flags 
   * @param {DataView} pOutFlags 
   * @returns {number}
   */
  xOpen(name, fileId, flags, pOutFlags) {
    return SQLITE_CANTOPEN;
  }
  /**
   * @param {string} name 
   * @param {number} syncDir 
   * @returns {number}
   */
  xDelete(name, syncDir) {
    return SQLITE_IOERR;
  }
  /**
   * @param {string} name 
   * @param {number} flags 
   * @param {DataView} pResOut 
   * @returns {number}
   */
  xAccess(name, flags, pResOut) {
    return SQLITE_IOERR;
  }
  /**
   * Handle asynchronous operation. This implementation will be overriden on
   * registration by an Asyncify build.
   * @param {function(): Promise<number>} f 
   * @returns {number}
   */
  handleAsync(f6) {
    return f6();
  }
};
var FILE_TYPE_MASK = [
  SQLITE_OPEN_MAIN_DB,
  SQLITE_OPEN_MAIN_JOURNAL,
  SQLITE_OPEN_TEMP_DB,
  SQLITE_OPEN_TEMP_JOURNAL,
  SQLITE_OPEN_TRANSIENT_DB,
  SQLITE_OPEN_SUBJOURNAL,
  SQLITE_OPEN_SUPER_JOURNAL
].reduce((mask, element) => mask | element);

// node_modules/wa-sqlite/src/examples/WebLocks.js
var LOCK_TYPE_MASK = SQLITE_LOCK_NONE | SQLITE_LOCK_SHARED | SQLITE_LOCK_RESERVED | SQLITE_LOCK_PENDING | SQLITE_LOCK_EXCLUSIVE;
var WebLocksBase = class {
  get state() {
    return this.#state;
  }
  #state = SQLITE_LOCK_NONE;
  timeoutMillis = 0;
  /** @type {Map<string, (value: any) => void>} */
  #releasers = /* @__PURE__ */ new Map();
  /** @type {Promise<0|5|3850>} */
  #pending = Promise.resolve(0);
  /**
   * @param {number} flags 
   * @returns {Promise<0|5|3850>} SQLITE_OK, SQLITE_BUSY, SQLITE_IOERR_LOCK
   */
  async lock(flags) {
    return this.#apply(this.#lock, flags);
  }
  /**
   * @param {number} flags 
   * @returns {Promise<0|5|3850>} SQLITE_OK, SQLITE_IOERR_LOCK
   */
  async unlock(flags) {
    return this.#apply(this.#unlock, flags);
  }
  /**
   * @returns {Promise<boolean>}
   */
  async isSomewhereReserved() {
    throw new Error("unimplemented");
  }
  /**
   * 
   * @param {(targetState: number) => void} method 
   * @param {number} flags 
   */
  async #apply(method, flags) {
    const targetState = flags & LOCK_TYPE_MASK;
    try {
      const call = () => method.call(this, targetState);
      await (this.#pending = this.#pending.then(call, call));
      this.#state = targetState;
      return SQLITE_OK;
    } catch (e5) {
      if (e5.name === "AbortError") {
        return SQLITE_BUSY;
      }
      console.error(e5);
      return SQLITE_IOERR_LOCK;
    }
  }
  async #lock(targetState) {
    if (targetState === this.#state)
      return SQLITE_OK;
    switch (this.#state) {
      case SQLITE_LOCK_NONE:
        switch (targetState) {
          case SQLITE_LOCK_SHARED:
            return this._NONEtoSHARED();
          default:
            throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);
        }
      case SQLITE_LOCK_SHARED:
        switch (targetState) {
          case SQLITE_LOCK_RESERVED:
            return this._SHAREDtoRESERVED();
          case SQLITE_LOCK_EXCLUSIVE:
            return this._SHAREDtoEXCLUSIVE();
          default:
            throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);
        }
      case SQLITE_LOCK_RESERVED:
        switch (targetState) {
          case SQLITE_LOCK_EXCLUSIVE:
            return this._RESERVEDtoEXCLUSIVE();
          default:
            throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);
        }
      default:
        throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);
    }
  }
  async #unlock(targetState) {
    if (targetState === this.#state)
      return SQLITE_OK;
    switch (this.#state) {
      case SQLITE_LOCK_EXCLUSIVE:
        switch (targetState) {
          case SQLITE_LOCK_SHARED:
            return this._EXCLUSIVEtoSHARED();
          case SQLITE_LOCK_NONE:
            return this._EXCLUSIVEtoNONE();
          default:
            throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);
        }
      case SQLITE_LOCK_RESERVED:
        switch (targetState) {
          case SQLITE_LOCK_SHARED:
            return this._RESERVEDtoSHARED();
          case SQLITE_LOCK_NONE:
            return this._RESERVEDtoNONE();
          default:
            throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);
        }
      case SQLITE_LOCK_SHARED:
        switch (targetState) {
          case SQLITE_LOCK_NONE:
            return this._SHAREDtoNONE();
          default:
            throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);
        }
      default:
        throw new Error(`unexpected transition ${this.#state} -> ${targetState}`);
    }
  }
  async _NONEtoSHARED() {
  }
  async _SHAREDtoEXCLUSIVE() {
    await this._SHAREDtoRESERVED();
    await this._RESERVEDtoEXCLUSIVE();
  }
  async _SHAREDtoRESERVED() {
  }
  async _RESERVEDtoEXCLUSIVE() {
  }
  async _EXCLUSIVEtoRESERVED() {
  }
  async _EXCLUSIVEtoSHARED() {
    await this._EXCLUSIVEtoRESERVED();
    await this._RESERVEDtoSHARED();
  }
  async _EXCLUSIVEtoNONE() {
    await this._EXCLUSIVEtoRESERVED();
    await this._RESERVEDtoSHARED();
    await this._SHAREDtoNONE();
  }
  async _RESERVEDtoSHARED() {
  }
  async _RESERVEDtoNONE() {
    await this._RESERVEDtoSHARED();
    await this._SHAREDtoNONE();
  }
  async _SHAREDtoNONE() {
  }
  /**
   * @param {string} lockName 
   * @param {LockOptions} options 
   * @returns {Promise<?Lock>}
   */
  _acquireWebLock(lockName, options) {
    return new Promise(async (resolve, reject) => {
      try {
        await navigator.locks.request(lockName, options, (lock) => {
          resolve(lock);
          if (lock) {
            return new Promise((release) => this.#releasers.set(lockName, release));
          }
        });
      } catch (e5) {
        reject(e5);
      }
    });
  }
  /**
   * @param {string} lockName 
   */
  _releaseWebLock(lockName) {
    this.#releasers.get(lockName)?.();
    this.#releasers.delete(lockName);
  }
  /**
   * @param {string} lockName 
   */
  async _pollWebLock(lockName) {
    const query = await navigator.locks.query();
    return query.held.find(({ name }) => name === lockName)?.mode;
  }
  /**
   * @returns {?AbortSignal}
   */
  _getTimeoutSignal() {
    if (this.timeoutMillis) {
      const abortController = new AbortController();
      setTimeout(() => abortController.abort(), this.timeoutMillis);
      return abortController.signal;
    }
    return void 0;
  }
};
var WebLocksExclusive = class extends WebLocksBase {
  /**
   * @param {string} name 
   */
  constructor(name) {
    super();
    this._lockName = name + "-outer";
    this._reservedName = name + "-reserved";
  }
  async isSomewhereReserved() {
    const mode = await this._pollWebLock(this._reservedName);
    return mode === "exclusive";
  }
  async _NONEtoSHARED() {
    await this._acquireWebLock(this._lockName, {
      mode: "exclusive",
      signal: this._getTimeoutSignal()
    });
  }
  async _SHAREDtoRESERVED() {
    await this._acquireWebLock(this._reservedName, {
      mode: "exclusive",
      signal: this._getTimeoutSignal()
    });
  }
  async _RESERVEDtoSHARED() {
    this._releaseWebLock(this._reservedName);
  }
  async _SHAREDtoNONE() {
    this._releaseWebLock(this._lockName);
  }
};

// node_modules/wa-sqlite/src/examples/IDBContext.js
var MAX_TRANSACTION_LIFETIME_MILLIS = 5e3;
var nextTxId = 0;
var mapTxToId = /* @__PURE__ */ new WeakMap();
function log(...args) {
}
var IDBContext = class {
  /** @type {IDBDatabase} */
  #db;
  /** @type {Promise<IDBDatabase>} */
  #dbReady;
  #txOptions;
  /** @type {IDBTransaction} */
  #tx = null;
  #txTimestamp = 0;
  #runChain = Promise.resolve();
  #putChain = Promise.resolve();
  /**
   * @param {IDBDatabase|Promise<IDBDatabase>} idbDatabase
   */
  constructor(idbDatabase, txOptions = { durability: "default" }) {
    this.#dbReady = Promise.resolve(idbDatabase).then((db) => this.#db = db);
    this.#txOptions = txOptions;
  }
  async close() {
    const db = this.#db ?? await this.#dbReady;
    await this.#runChain;
    await this.sync();
    db.close();
  }
  /**
   * Run a function with the provided object stores. The function
   * should be idempotent in case it is passed an expired transaction.
   * @param {IDBTransactionMode} mode
   * @param {(stores: Object.<string, ObjectStore>) => any} f 
   */
  async run(mode, f6) {
    const result = this.#runChain.then(() => this.#run(mode, f6));
    this.#runChain = result.catch(() => {
    });
    return result;
  }
  /**
   * @param {IDBTransactionMode} mode
   * @param {(stores: Object.<string, ObjectStore>) => any} f 
   * @returns 
   */
  async #run(mode, f6) {
    const db = this.#db ?? await this.#dbReady;
    if (mode === "readwrite" && this.#tx?.mode === "readonly") {
      this.#tx = null;
    } else if (performance.now() - this.#txTimestamp > MAX_TRANSACTION_LIFETIME_MILLIS) {
      try {
        this.#tx?.commit();
      } catch (e5) {
        if (e5.name !== "InvalidStateError")
          throw e5;
      }
      await new Promise((resolve) => setTimeout(resolve));
      this.#tx = null;
    }
    for (let i8 = 0; i8 < 2; ++i8) {
      if (!this.#tx) {
        this.#tx = db.transaction(db.objectStoreNames, mode, this.#txOptions);
        const timestamp = this.#txTimestamp = performance.now();
        this.#putChain = this.#putChain.then(() => {
          return new Promise((resolve, reject) => {
            this.#tx.addEventListener("complete", (event) => {
              resolve();
              if (this.#tx === event.target) {
                this.#tx = null;
              }
              log(`transaction ${mapTxToId.get(event.target)} complete`);
            });
            this.#tx.addEventListener("abort", (event) => {
              console.warn("tx abort", (performance.now() - timestamp) / 1e3);
              const e5 = event.target.error;
              reject(e5);
              if (this.#tx === event.target) {
                this.#tx = null;
              }
              log(`transaction ${mapTxToId.get(event.target)} aborted`, e5);
            });
          });
        });
        log(`new transaction ${nextTxId} ${mode}`);
        mapTxToId.set(this.#tx, nextTxId++);
      }
      try {
        const stores = Object.fromEntries(Array.from(db.objectStoreNames, (name) => {
          return [name, new ObjectStore(this.#tx.objectStore(name))];
        }));
        return await f6(stores);
      } catch (e5) {
        this.#tx = null;
        if (i8)
          throw e5;
      }
    }
  }
  async sync() {
    await this.#putChain;
    this.#putChain = Promise.resolve();
  }
};
function wrapRequest(request) {
  return new Promise((resolve, reject) => {
    request.addEventListener("success", () => resolve(request.result));
    request.addEventListener("error", () => reject(request.error));
  });
}
var ObjectStore = class {
  #objectStore;
  /**
   * @param {IDBObjectStore} objectStore 
   */
  constructor(objectStore) {
    this.#objectStore = objectStore;
  }
  /**
   * @param {IDBValidKey|IDBKeyRange} query 
   * @returns {Promise}
   */
  get(query) {
    log(`get ${this.#objectStore.name}`, query);
    const request = this.#objectStore.get(query);
    return wrapRequest(request);
  }
  /**
   * @param {IDBValidKey|IDBKeyRange} query 
   * @param {number} [count]
   * @returns {Promise}
   */
  getAll(query, count) {
    log(`getAll ${this.#objectStore.name}`, query, count);
    const request = this.#objectStore.getAll(query, count);
    return wrapRequest(request);
  }
  /**
   * @param {IDBValidKey|IDBKeyRange} query 
   * @returns {Promise<IDBValidKey>}
   */
  getKey(query) {
    log(`getKey ${this.#objectStore.name}`, query);
    const request = this.#objectStore.getKey(query);
    return wrapRequest(request);
  }
  /**
   * @param {IDBValidKey|IDBKeyRange} query 
   * @param {number} [count]
   * @returns {Promise}
   */
  getAllKeys(query, count) {
    log(`getAllKeys ${this.#objectStore.name}`, query, count);
    const request = this.#objectStore.getAllKeys(query, count);
    return wrapRequest(request);
  }
  /**
   * @param {any} value
   * @param {IDBValidKey} [key] 
   * @returns {Promise}
   */
  put(value, key) {
    log(`put ${this.#objectStore.name}`, value, key);
    const request = this.#objectStore.put(value, key);
    return wrapRequest(request);
  }
  /**
   * @param {IDBValidKey|IDBKeyRange} query 
   * @returns {Promise}
   */
  delete(query) {
    log(`delete ${this.#objectStore.name}`, query);
    const request = this.#objectStore.delete(query);
    return wrapRequest(request);
  }
  clear() {
    log(`clear ${this.#objectStore.name}`);
    const request = this.#objectStore.clear();
    return wrapRequest(request);
  }
  index(name) {
    return new Index(this.#objectStore.index(name));
  }
};
var Index = class {
  /** @type {IDBIndex} */
  #index;
  /**
   * @param {IDBIndex} index 
   */
  constructor(index) {
    this.#index = index;
  }
  /**
   * @param {IDBValidKey|IDBKeyRange} query 
   * @param {number} [count]
   * @returns {Promise<IDBValidKey[]>}
   */
  getAllKeys(query, count) {
    log(`IDBIndex.getAllKeys ${this.#index.objectStore.name}<${this.#index.name}>`, query, count);
    const request = this.#index.getAllKeys(query, count);
    return wrapRequest(request);
  }
};

// node_modules/wa-sqlite/src/examples/IDBBatchAtomicVFS.js
var SECTOR_SIZE = 512;
var MAX_TASK_MILLIS = 3e3;
var DEFAULT_OPTIONS = {
  durability: "default",
  purge: "deferred",
  purgeAtLeast: 16
};
function log2(...args) {
}
var IDBBatchAtomicVFS = class extends Base {
  #options;
  /** @type {Map<number, OpenedFileEntry>} */
  #mapIdToFile = /* @__PURE__ */ new Map();
  /** @type {IDBContext} */
  #idb;
  /** @type {Set<string>} */
  #pendingPurges = /* @__PURE__ */ new Set();
  #taskTimestamp = performance.now();
  #pendingAsync = /* @__PURE__ */ new Set();
  constructor(idbDatabaseName = "wa-sqlite", options = DEFAULT_OPTIONS) {
    super();
    this.name = idbDatabaseName;
    this.#options = Object.assign({}, DEFAULT_OPTIONS, options);
    this.#idb = new IDBContext(openDatabase(idbDatabaseName), {
      durability: this.#options.durability
    });
  }
  async close() {
    for (const fileId of this.#mapIdToFile.keys()) {
      await this.xClose(fileId);
    }
    await this.#idb?.close();
    this.#idb = null;
  }
  /**
   * @param {string?} name 
   * @param {number} fileId 
   * @param {number} flags 
   * @param {DataView} pOutFlags 
   * @returns {number}
   */
  xOpen(name, fileId, flags, pOutFlags) {
    return this.handleAsync(async () => {
      if (name === null)
        name = `null_${fileId}`;
      log2(`xOpen ${name} 0x${fileId.toString(16)} 0x${flags.toString(16)}`);
      try {
        const url = new URL(name, "http://localhost/");
        const file = {
          path: url.pathname,
          flags,
          block0: null,
          locks: new WebLocksExclusive(url.pathname)
        };
        this.#mapIdToFile.set(fileId, file);
        await this.#idb.run("readwrite", async ({ blocks }) => {
          file.block0 = await blocks.get(this.#bound(file, 0));
          if (!file.block0) {
            if (flags & SQLITE_OPEN_CREATE) {
              file.block0 = {
                path: file.path,
                offset: 0,
                version: 0,
                data: new Uint8Array(0),
                fileSize: 0
              };
              blocks.put(file.block0);
            } else {
              throw new Error(`file not found: ${file.path}`);
            }
          }
        });
        pOutFlags.setInt32(0, flags & SQLITE_OPEN_READONLY, true);
        return SQLITE_OK;
      } catch (e5) {
        console.error(e5);
        return SQLITE_CANTOPEN;
      }
    });
  }
  /**
   * @param {number} fileId 
   * @returns {number}
   */
  xClose(fileId) {
    return this.handleAsync(async () => {
      try {
        const file = this.#mapIdToFile.get(fileId);
        if (file) {
          log2(`xClose ${file.path}`);
          this.#mapIdToFile.delete(fileId);
          if (file.flags & SQLITE_OPEN_DELETEONCLOSE) {
            this.#idb.run("readwrite", ({ blocks }) => {
              blocks.delete(IDBKeyRange.bound([file.path], [file.path, []]));
            });
          }
        }
        return SQLITE_OK;
      } catch (e5) {
        console.error(e5);
        return SQLITE_IOERR;
      }
    });
  }
  /**
   * @param {number} fileId 
   * @param {Uint8Array} pData 
   * @param {number} iOffset
   * @returns {number}
   */
  xRead(fileId, pData, iOffset) {
    return this.handleAsync(async () => {
      const file = this.#mapIdToFile.get(fileId);
      log2(`xRead ${file.path} ${pData.byteLength} ${iOffset}`);
      try {
        const result = await this.#idb.run("readonly", async ({ blocks }) => {
          let pDataOffset = 0;
          while (pDataOffset < pData.byteLength) {
            const fileOffset = iOffset + pDataOffset;
            const block = fileOffset < file.block0.data.byteLength ? file.block0 : await blocks.get(this.#bound(file, -fileOffset));
            if (!block || block.data.byteLength - block.offset <= fileOffset) {
              pData.fill(0, pDataOffset);
              return SQLITE_IOERR_SHORT_READ;
            }
            const buffer = pData.subarray(pDataOffset);
            const blockOffset = fileOffset + block.offset;
            const nBytesToCopy = Math.min(
              Math.max(block.data.byteLength - blockOffset, 0),
              // source bytes
              buffer.byteLength
            );
            buffer.set(block.data.subarray(blockOffset, blockOffset + nBytesToCopy));
            pDataOffset += nBytesToCopy;
          }
          return SQLITE_OK;
        });
        return result;
      } catch (e5) {
        console.error(e5);
        return SQLITE_IOERR;
      }
    });
  }
  /**
   * @param {number} fileId 
   * @param {Uint8Array} pData 
   * @param {number} iOffset
   * @returns {number}
   */
  xWrite(fileId, pData, iOffset) {
    const rewound = this.#pendingAsync.has(fileId);
    if (rewound || performance.now() - this.#taskTimestamp > MAX_TASK_MILLIS) {
      const result = this.handleAsync(async () => {
        if (this.handleAsync !== super.handleAsync) {
          this.#pendingAsync.add(fileId);
        }
        await new Promise((resolve) => setTimeout(resolve));
        const result2 = this.#xWriteHelper(fileId, pData, iOffset);
        this.#taskTimestamp = performance.now();
        return result2;
      });
      if (rewound)
        this.#pendingAsync.delete(fileId);
      return result;
    }
    return this.#xWriteHelper(fileId, pData, iOffset);
  }
  /**
   * @param {number} fileId 
   * @param {Uint8Array} pData 
   * @param {number} iOffset
   * @returns {number}
   */
  #xWriteHelper(fileId, pData, iOffset) {
    const file = this.#mapIdToFile.get(fileId);
    log2(`xWrite ${file.path} ${pData.byteLength} ${iOffset}`);
    try {
      const prevFileSize = file.block0.fileSize;
      file.block0.fileSize = Math.max(file.block0.fileSize, iOffset + pData.byteLength);
      const block = iOffset === 0 ? file.block0 : {
        path: file.path,
        offset: -iOffset,
        version: file.block0.version,
        data: null
      };
      block.data = pData.slice();
      if (file.changedPages) {
        if (prevFileSize === file.block0.fileSize) {
          file.changedPages.add(-iOffset);
        }
        if (iOffset !== 0) {
          this.#idb.run("readwrite", ({ blocks }) => blocks.put(block));
        }
      } else {
        this.#idb.run("readwrite", ({ blocks }) => blocks.put(block));
      }
      return SQLITE_OK;
    } catch (e5) {
      console.error(e5);
      return SQLITE_IOERR;
    }
  }
  /**
   * @param {number} fileId 
   * @param {number} iSize 
   * @returns {number}
   */
  xTruncate(fileId, iSize) {
    const file = this.#mapIdToFile.get(fileId);
    log2(`xTruncate ${file.path} ${iSize}`);
    try {
      Object.assign(file.block0, {
        fileSize: iSize,
        data: file.block0.data.slice(0, iSize)
      });
      const block0 = Object.assign({}, file.block0);
      this.#idb.run("readwrite", ({ blocks }) => {
        blocks.delete(this.#bound(file, -Infinity, -iSize));
        blocks.put(block0);
      });
      return SQLITE_OK;
    } catch (e5) {
      console.error(e5);
      return SQLITE_IOERR;
    }
  }
  /**
   * @param {number} fileId 
   * @param {number} flags 
   * @returns {number}
   */
  xSync(fileId, flags) {
    const rewound = this.#pendingAsync.has(fileId);
    if (rewound || this.#options.durability !== "relaxed" || performance.now() - this.#taskTimestamp > MAX_TASK_MILLIS) {
      const result = this.handleAsync(async () => {
        if (this.handleAsync !== super.handleAsync) {
          this.#pendingAsync.add(fileId);
        }
        const result2 = await this.#xSyncHelper(fileId, flags);
        this.#taskTimestamp = performance.now();
        return result2;
      });
      if (rewound)
        this.#pendingAsync.delete(fileId);
      return result;
    }
    const file = this.#mapIdToFile.get(fileId);
    log2(`xSync ${file.path} ${flags}`);
    return SQLITE_OK;
  }
  /**
   * @param {number} fileId 
   * @param {number} flags 
   * @returns {Promise<number>}
   */
  async #xSyncHelper(fileId, flags) {
    const file = this.#mapIdToFile.get(fileId);
    log2(`xSync ${file.path} ${flags}`);
    try {
      await this.#idb.sync();
    } catch (e5) {
      console.error(e5);
      return SQLITE_IOERR;
    }
    return SQLITE_OK;
  }
  /**
   * @param {number} fileId 
   * @param {DataView} pSize64 
   * @returns {number}
   */
  xFileSize(fileId, pSize64) {
    const file = this.#mapIdToFile.get(fileId);
    log2(`xFileSize ${file.path}`);
    pSize64.setBigInt64(0, BigInt(file.block0.fileSize), true);
    return SQLITE_OK;
  }
  /**
   * @param {number} fileId 
   * @param {number} flags 
   * @returns {number}
   */
  xLock(fileId, flags) {
    return this.handleAsync(async () => {
      const file = this.#mapIdToFile.get(fileId);
      log2(`xLock ${file.path} ${flags}`);
      try {
        const result = await file.locks.lock(flags);
        if (result === SQLITE_OK && file.locks.state === SQLITE_LOCK_SHARED) {
          file.block0 = await this.#idb.run("readonly", ({ blocks }) => {
            return blocks.get(this.#bound(file, 0));
          });
        }
        return result;
      } catch (e5) {
        console.error(e5);
        return SQLITE_IOERR;
      }
    });
  }
  /**
   * @param {number} fileId 
   * @param {number} flags 
   * @returns {number}
   */
  xUnlock(fileId, flags) {
    return this.handleAsync(async () => {
      const file = this.#mapIdToFile.get(fileId);
      log2(`xUnlock ${file.path} ${flags}`);
      try {
        return file.locks.unlock(flags);
      } catch (e5) {
        console.error(e5);
        return SQLITE_IOERR;
      }
    });
  }
  /**
   * @param {number} fileId 
   * @param {DataView} pResOut 
   * @returns {number}
   */
  xCheckReservedLock(fileId, pResOut) {
    return this.handleAsync(async () => {
      const file = this.#mapIdToFile.get(fileId);
      log2(`xCheckReservedLock ${file.path}`);
      const isReserved = await file.locks.isSomewhereReserved();
      pResOut.setInt32(0, isReserved ? 1 : 0, true);
      return SQLITE_OK;
    });
  }
  /**
   * @param {number} fileId 
   * @returns {number}
   */
  xSectorSize(fileId) {
    log2("xSectorSize");
    return SECTOR_SIZE;
  }
  /**
   * @param {number} fileId 
   * @returns {number}
   */
  xDeviceCharacteristics(fileId) {
    log2("xDeviceCharacteristics");
    return SQLITE_IOCAP_BATCH_ATOMIC | SQLITE_IOCAP_SAFE_APPEND | SQLITE_IOCAP_SEQUENTIAL | SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN;
  }
  /**
   * @param {number} fileId 
   * @param {number} op 
   * @param {DataView} pArg 
   * @returns {number}
   */
  xFileControl(fileId, op, pArg) {
    const file = this.#mapIdToFile.get(fileId);
    log2(`xFileControl ${file.path} ${op}`);
    switch (op) {
      case 11:
        file.overwrite = true;
        return SQLITE_OK;
      case 21:
        if (file.overwrite) {
          try {
            return this.handleAsync(async () => {
              await this.#reblockIfNeeded(file);
              return SQLITE_OK;
            });
          } catch (e5) {
            console.error(e5);
            return SQLITE_IOERR;
          }
        }
        return SQLITE_OK;
      case 22:
        file.overwrite = false;
        return SQLITE_OK;
      case 31:
        return this.handleAsync(async () => {
          try {
            file.block0.version--;
            file.changedPages = /* @__PURE__ */ new Set();
            this.#idb.run("readwrite", async ({ blocks }) => {
              const keys = await blocks.index("version").getAllKeys(IDBKeyRange.bound(
                [file.path],
                [file.path, file.block0.version]
              ));
              for (const key of keys) {
                blocks.delete(key);
              }
            });
            return SQLITE_OK;
          } catch (e5) {
            console.error(e5);
            return SQLITE_IOERR;
          }
        });
      case 32:
        try {
          const block0 = Object.assign({}, file.block0);
          block0.data = block0.data.slice();
          const changedPages = file.changedPages;
          file.changedPages = null;
          this.#idb.run("readwrite", async ({ blocks }) => {
            blocks.put(block0);
            const purgeBlock = await blocks.get([file.path, "purge", 0]) ?? {
              path: file.path,
              offset: "purge",
              version: 0,
              data: /* @__PURE__ */ new Map(),
              count: 0
            };
            purgeBlock.count += changedPages.size;
            for (const pageIndex of changedPages) {
              purgeBlock.data.set(pageIndex, block0.version);
            }
            blocks.put(purgeBlock);
            this.#maybePurge(file.path, purgeBlock.count);
          });
          return SQLITE_OK;
        } catch (e5) {
          console.error(e5);
          return SQLITE_IOERR;
        }
      case 33:
        return this.handleAsync(async () => {
          try {
            file.changedPages = null;
            file.block0 = await this.#idb.run("readonly", ({ blocks }) => {
              return blocks.get([file.path, 0, file.block0.version + 1]);
            });
            return SQLITE_OK;
          } catch (e5) {
            console.error(e5);
            return SQLITE_IOERR;
          }
        });
      default:
        return SQLITE_NOTFOUND;
    }
  }
  /**
   * @param {string} name 
   * @param {number} flags 
   * @param {DataView} pResOut 
   * @returns {number}
   */
  xAccess(name, flags, pResOut) {
    return this.handleAsync(async () => {
      try {
        const path = new URL(name, "file://localhost/").pathname;
        log2(`xAccess ${path} ${flags}`);
        const key = await this.#idb.run("readonly", ({ blocks }) => {
          return blocks.getKey(this.#bound({ path }, 0));
        });
        pResOut.setInt32(0, key ? 1 : 0, true);
        return SQLITE_OK;
      } catch (e5) {
        console.error(e5);
        return SQLITE_IOERR;
      }
    });
  }
  /**
   * @param {string} name 
   * @param {number} syncDir 
   * @returns {number}
   */
  xDelete(name, syncDir) {
    return this.handleAsync(async () => {
      const path = new URL(name, "file://localhost/").pathname;
      log2(`xDelete ${path} ${syncDir}`);
      try {
        this.#idb.run("readwrite", ({ blocks }) => {
          return blocks.delete(IDBKeyRange.bound([path], [path, []]));
        });
        if (syncDir) {
          await this.#idb.sync();
        }
        return SQLITE_OK;
      } catch (e5) {
        console.error(e5);
        return SQLITE_IOERR;
      }
    });
  }
  /**
   * Purge obsolete blocks from a database file.
   * @param {string} path 
   */
  async purge(path) {
    const start = Date.now();
    await this.#idb.run("readwrite", async ({ blocks }) => {
      const purgeBlock = await blocks.get([path, "purge", 0]);
      if (purgeBlock) {
        for (const [pageOffset, version] of purgeBlock.data) {
          blocks.delete(IDBKeyRange.bound(
            [path, pageOffset, version],
            [path, pageOffset, Infinity],
            true,
            false
          ));
        }
        await blocks.delete([path, "purge", 0]);
      }
      log2(`purge ${path} ${purgeBlock?.data.size ?? 0} pages in ${Date.now() - start} ms`);
    });
  }
  /**
   * Conditionally schedule a purge task.
   * @param {string} path 
   * @param {number} nPages 
   */
  #maybePurge(path, nPages) {
    if (this.#options.purge === "manual" || this.#pendingPurges.has(path) || nPages < this.#options.purgeAtLeast) {
      return;
    }
    if (globalThis.requestIdleCallback) {
      globalThis.requestIdleCallback(() => {
        this.purge(path);
        this.#pendingPurges.delete(path);
      });
    } else {
      setTimeout(() => {
        this.purge(path);
        this.#pendingPurges.delete(path);
      });
    }
    this.#pendingPurges.add(path);
  }
  #bound(file, begin, end = 0) {
    const version = !begin || -begin < file.block0.data.length ? -Infinity : file.block0.version;
    return IDBKeyRange.bound(
      [file.path, begin, version],
      [file.path, end, Infinity]
    );
  }
  // The database page size can be changed with PRAGMA page_size and VACUUM.
  // The updated file will be overwritten with a regular transaction using
  // the old page size. After that it will be read and written using the
  // new page size, so the IndexedDB objects must be combined or split
  // appropriately.
  async #reblockIfNeeded(file) {
    const oldPageSize = file.block0.data.length;
    if (oldPageSize < 18)
      return;
    const view = new DataView(file.block0.data.buffer, file.block0.data.byteOffset);
    let newPageSize = view.getUint16(16);
    if (newPageSize === 1)
      newPageSize = 65536;
    if (newPageSize === oldPageSize)
      return;
    const maxPageSize = Math.max(oldPageSize, newPageSize);
    const nOldPages = maxPageSize / oldPageSize;
    const nNewPages = maxPageSize / newPageSize;
    const newPageCount = view.getUint32(28);
    const fileSize = newPageCount * newPageSize;
    const version = file.block0.version;
    await this.#idb.run("readwrite", async ({ blocks }) => {
      const keys = await blocks.index("version").getAllKeys(IDBKeyRange.bound(
        [file.path, version + 1],
        [file.path, Infinity]
      ));
      for (const key of keys) {
        blocks.delete(key);
      }
      blocks.delete([file.path, "purge", 0]);
      for (let iOffset = 0; iOffset < fileSize; iOffset += maxPageSize) {
        const oldPages = await blocks.getAll(
          IDBKeyRange.lowerBound([file.path, -(iOffset + maxPageSize), Infinity]),
          nOldPages
        );
        for (const oldPage of oldPages) {
          blocks.delete([oldPage.path, oldPage.offset, oldPage.version]);
        }
        if (nNewPages === 1) {
          const buffer = new Uint8Array(newPageSize);
          for (const oldPage of oldPages) {
            buffer.set(oldPage.data, -(iOffset + oldPage.offset));
          }
          const newPage = {
            path: file.path,
            offset: -iOffset,
            version,
            data: buffer
          };
          if (newPage.offset === 0) {
            newPage.fileSize = fileSize;
            file.block0 = newPage;
          }
          blocks.put(newPage);
        } else {
          const oldPage = oldPages[0];
          for (let i8 = 0; i8 < nNewPages; ++i8) {
            const offset = -(iOffset + i8 * newPageSize);
            if (-offset >= fileSize)
              break;
            const newPage = {
              path: oldPage.path,
              offset,
              version,
              data: oldPage.data.subarray(i8 * newPageSize, (i8 + 1) * newPageSize)
            };
            if (newPage.offset === 0) {
              newPage.fileSize = fileSize;
              file.block0 = newPage;
            }
            blocks.put(newPage);
          }
        }
      }
    });
  }
};
function openDatabase(idbDatabaseName) {
  return new Promise((resolve, reject) => {
    const request = globalThis.indexedDB.open(idbDatabaseName, 5);
    request.addEventListener("upgradeneeded", function() {
      const blocks = request.result.createObjectStore("blocks", {
        keyPath: ["path", "offset", "version"]
      });
      blocks.createIndex("version", ["path", "version"]);
    });
    request.addEventListener("success", () => {
      resolve(request.result);
    });
    request.addEventListener("error", () => {
      reject(request.error);
    });
  });
}

// node_modules/electric-sql/dist/drivers/wa-sqlite/database.js
var h5 = { columns: [], values: [] };
var o3 = class {
  constructor(t3, i8, r7) {
    this.name = t3;
    this.sqlite3 = i8;
    this.db = r7;
    this.mutex = new Mutex();
  }
  mutex;
  async exec(t3) {
    const i8 = await this.mutex.acquire(), r7 = this.sqlite3.str_new(this.db, t3.sql);
    let e5;
    try {
      e5 = await this.sqlite3.prepare_v2(this.db, this.sqlite3.str_value(r7));
    } finally {
      i8();
    }
    if (e5 === null)
      return i8(), h5;
    const s7 = e5.stmt;
    try {
      typeof t3.args < "u" && this.sqlite3.bind_collection(s7, t3.args);
      const n11 = [];
      let a5 = [];
      for (; await this.sqlite3.step(s7) === SQLITE_ROW; ) {
        a5 = a5.length === 0 ? this.sqlite3.column_names(s7) : a5;
        const c8 = this.sqlite3.row(s7);
        n11.push(c8);
      }
      return { columns: a5, values: n11 };
    } finally {
      await this.sqlite3.finalize(s7), i8();
    }
  }
  getRowsModified() {
    return this.sqlite3.changes(this.db);
  }
  static async init(t3, i8) {
    const r7 = await wa_sqlite_async_default({ locateFile: (n11) => i8 + n11 }), e5 = Factory(r7);
    e5.vfs_register(new IDBBatchAtomicVFS(t3));
    const s7 = await e5.open_v2(t3, SQLITE_OPEN_CREATE | SQLITE_OPEN_READWRITE, t3);
    return new o3(t3, e5, s7);
  }
};

// node_modules/electric-sql/dist/config/index.js
var g5 = (o9) => {
  const r7 = o9.auth;
  if (!r7 || !r7.token)
    throw new Error("Invalid configuration. Missing authentication token.");
  const s7 = o9.debug ?? false, t3 = new URL(o9.url ?? "http://127.0.0.1:5133"), e5 = t3.protocol === "https:" || t3.protocol === "wss:" || t3.searchParams.get("ssl") === "true", i8 = e5 ? 443 : 80, n11 = parseInt(t3.port, 10), a5 = Number.isNaN(n11) ? i8 : n11, l7 = { host: t3.hostname, port: a5, ssl: e5 };
  return { auth: r7, replication: l7, debug: s7 };
};

// node_modules/electric-sql/dist/satellite/config.js
var r2 = { metaTable: new b("main", "_electric_meta"), migrationsTable: new b("main", "_electric_migrations"), oplogTable: new b("main", "_electric_oplog"), triggersTable: new b("main", "_electric_trigger_settings"), shadowTable: new b("main", "_electric_shadow"), pollingInterval: 2e3, minSnapshotWindow: 40, clearOnBehindWindow: true };
var s3 = { timeout: 3e3, pushPeriod: 500 };
var p3 = (a5) => {
  const e5 = [];
  if (!a5)
    return e5.push(`config not defined: ${a5}`), e5;
  const { replication: n11 } = a5;
  if (n11) {
    const { host: l7, port: t3 } = n11;
    l7 || e5.push("Please provide config.replication.host"), t3 || e5.push("Please provide config.replication.port"), t3 && typeof t3 != "number" && e5.push("Please provide correct type for config.replication.port");
  }
  return e5;
};

// node_modules/electric-sql/dist/migrators/schema.js
var { metaTable: e2, migrationsTable: n2, oplogTable: T5, triggersTable: E3, shadowTable: N2 } = r2;
var s4 = { migrations: [{ statements: [`CREATE TABLE IF NOT EXISTS ${T5} (
  rowid INTEGER PRIMARY KEY AUTOINCREMENT,
  namespace TEXT NOT NULL,
  tablename TEXT NOT NULL,
  optype TEXT NOT NULL,
  primaryKey TEXT NOT NULL,
  newRow TEXT,
  oldRow TEXT,
  timestamp TEXT,  clearTags TEXT DEFAULT "[]" NOT NULL
);`, `CREATE INDEX IF NOT EXISTS ${T5.namespace}._electric_table_pk_reference ON ${T5.tablename} (namespace, tablename, primaryKey)`, `CREATE INDEX IF NOT EXISTS ${T5.namespace}._electric_timestamp ON ${T5.tablename} (timestamp)`, `CREATE TABLE IF NOT EXISTS ${e2} (
  key TEXT PRIMARY KEY,
  value BLOB
);`, `CREATE TABLE IF NOT EXISTS ${n2} (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  version TEXT NOT NULL UNIQUE,
  applied_at TEXT NOT NULL
);`, `INSERT INTO ${e2} (key, value) VALUES ('compensations', 1), ('lastAckdRowId','0'), ('lastSentRowId', '0'), ('lsn', ''), ('clientId', ''), ('subscriptions', '');`, `DROP TABLE IF EXISTS ${E3};`, `CREATE TABLE ${E3} (tablename TEXT PRIMARY KEY, flag INTEGER);`, `CREATE TABLE ${N2} (
  namespace TEXT NOT NULL,
  tablename TEXT NOT NULL,
  primaryKey TEXT NOT NULL,
  tags TEXT NOT NULL,
  PRIMARY KEY (namespace, tablename, primaryKey));`], version: "0" }] };

// node_modules/electric-sql/dist/migrators/bundle.js
var import_loglevel = __toESM(require_loglevel(), 1);
var g6 = "Local schema doesn't match server's. Clear local state through developer tools and retry connection manually. If error persists, re-generate the client. Check documentation (https://electric-sql.com/docs/reference/limitations) to learn more.";
var d3 = { tableName: "_electric_migrations" };
var s5 = new RegExp("^[0-9_]+$");
var q4 = class {
  adapter;
  migrations;
  tableName;
  constructor(a5, t3 = [], e5) {
    const r7 = i4(d3, { tableName: e5 });
    this.adapter = a5, this.migrations = [...s4.migrations, ...t3].map(o4), this.tableName = r7.tableName;
  }
  async up() {
    const a5 = await this.queryApplied(), t3 = await this.validateApplied(this.migrations, a5);
    let e5;
    for (let i8 = 0; i8 < t3.length; i8++)
      e5 = t3[i8], import_loglevel.default.info(`applying migration: ${e5.version}`), await this.apply(e5);
    return t3.length;
  }
  async migrationsTableExists() {
    const a5 = `
      SELECT 1 FROM sqlite_master
        WHERE type = 'table'
          AND name = ?
    `;
    return (await this.adapter.query({ sql: a5, args: [this.tableName] })).length > 0;
  }
  async queryApplied() {
    if (!await this.migrationsTableExists())
      return [];
    const a5 = `
      SELECT version FROM ${this.tableName}
        ORDER BY id ASC
    `;
    return await this.adapter.query({ sql: a5 });
  }
  async querySchemaVersion() {
    if (!await this.migrationsTableExists())
      return;
    const a5 = `
      SELECT version FROM ${this.tableName}
        WHERE version != '0'
        ORDER BY version DESC
        LIMIT 1
    `, t3 = await this.adapter.query({ sql: a5 });
    if (t3.length !== 0)
      return t3[0].version;
  }
  async validateApplied(a5, t3) {
    return t3.forEach(({ version: e5 }, i8) => {
      if (a5[i8].version !== e5)
        throw new x4(_2.UNKNOWN_SCHEMA_VSN, g6);
    }), a5.slice(t3.length);
  }
  async apply({ statements: a5, version: t3 }) {
    if (!s5.test(t3))
      throw new Error(`Invalid migration version, must match ${s5}`);
    const e5 = `INSERT INTO ${this.tableName}
        ('version', 'applied_at') VALUES (?, ?)
        `;
    await this.adapter.runInTransaction(...a5, { sql: e5, args: [t3, Date.now()] });
  }
  async applyIfNotAlready(a5) {
    const t3 = `
      SELECT 1 FROM ${this.tableName}
        WHERE version = ?
    `, i8 = (await this.adapter.query({ sql: t3, args: [a5.version] })).length === 0;
    return i8 && await this.apply(a5), i8;
  }
};

// node_modules/zod/lib/index.mjs
var util;
(function(util2) {
  util2.assertEqual = (val) => val;
  function assertIs(_arg) {
  }
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k3) => typeof obj[obj[k3]] !== "number");
    const filtered = {};
    for (const k3 of validKeys) {
      filtered[k3] = obj[k3];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e5) {
      return obj[e5];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_6, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
      // second overwrites first
    };
  };
})(objectUtil || (objectUtil = {}));
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType = (data) => {
  const t3 = typeof data;
  switch (t3) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};
var ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
var quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError = class extends Error {
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  get errors() {
    return this.issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i8 = 0;
          while (i8 < issue.path.length) {
            const el = issue.path[i8];
            const terminal = i8 === issue.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue));
            }
            curr = curr[el];
            i8++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
        fieldErrors[sub.path[0]].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
};
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};
var errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
var overrideErrorMap = errorMap;
function setErrorMap(map) {
  overrideErrorMap = map;
}
function getErrorMap() {
  return overrideErrorMap;
}
var makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  let errorMessage = "";
  const maps = errorMaps.filter((m10) => !!m10).slice().reverse();
  for (const map of maps) {
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: issueData.message || errorMessage
  };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      ctx.schemaErrorMap,
      getErrorMap(),
      errorMap
      // then global default map
    ].filter((x6) => !!x6)
  });
  ctx.common.issues.push(issue);
}
var ParseStatus = class {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s7 of results) {
      if (s7.status === "aborted")
        return INVALID;
      if (s7.status === "dirty")
        status.dirty();
      arrayValue.push(s7.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      syncPairs.push({
        key: await pair.key,
        value: await pair.value
      });
    }
    return ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
};
var INVALID = Object.freeze({
  status: "aborted"
});
var DIRTY = (value) => ({ status: "dirty", value });
var OK = (value) => ({ status: "valid", value });
var isAborted = (x6) => x6.status === "aborted";
var isDirty = (x6) => x6.status === "dirty";
var isValid = (x6) => x6.status === "valid";
var isAsync = (x6) => typeof Promise !== "undefined" && x6 instanceof Promise;
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
var ParseInputLazyPath = class {
  constructor(parent, value, path, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (this._key instanceof Array) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
};
var handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    if (typeof ctx.data === "undefined") {
      return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
    }
    return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
var ZodType = class {
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    var _a;
    const ctx = {
      common: {
        issues: [],
        async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
        async: true
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  optional() {
    return ZodOptional.create(this, this._def);
  }
  nullable() {
    return ZodNullable.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this, this._def);
  }
  promise() {
    return ZodPromise.create(this, this._def);
  }
  or(option) {
    return ZodUnion.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  readonly() {
    return ZodReadonly.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var cuidRegex = /^c[^\s-]{8,}$/i;
var cuid2Regex = /^[a-z][a-z0-9]*$/;
var ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/;
var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
var emailRegex = /^([A-Z0-9_+-]+\.?)*[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
var emojiRegex = /^(\p{Extended_Pictographic}|\p{Emoji_Component})+$/u;
var ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
var ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
var datetimeRegex = (args) => {
  if (args.precision) {
    if (args.offset) {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
    } else {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
    }
  } else if (args.precision === 0) {
    if (args.offset) {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
    } else {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
    }
  } else {
    if (args.offset) {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
    } else {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
    }
  }
};
function isValidIP(ip, version) {
  if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
var ZodString = class extends ZodType {
  constructor() {
    super(...arguments);
    this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
    this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));
    this.trim = () => new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
    this.toLowerCase = () => new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
    this.toUpperCase = () => new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(
        ctx2,
        {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.string,
          received: ctx2.parsedType
        }
        //
      );
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch (_a) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex = datetimeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _addCheck(check) {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    var _a;
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options === null || options === void 0 ? void 0 : options.position,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message)
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodString.create = (params) => {
  var _a;
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}
var ZodNumber = class extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
  }
  get isFinite() {
    let max = null, min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max);
  }
};
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodBigInt = class extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = BigInt(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.bigint,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodBigInt.create = (params) => {
  var _a;
  return new ZodBigInt({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
    ...processCreateParams(params)
  });
};
var ZodBoolean = class extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodDate = class extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max != null ? new Date(max) : null;
  }
};
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};
var ZodSymbol = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodSymbol.create = (params) => {
  return new ZodSymbol({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};
var ZodUndefined = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};
var ZodNull = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};
var ZodAny = class extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};
var ZodUnknown = class extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};
var ZodNever = class extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
};
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};
var ZodVoid = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};
var ZodArray = class extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
          minimum: tooSmall ? def.exactLength.value : void 0,
          maximum: tooBig ? def.exactLength.value : void 0,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i8) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i8));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i8) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i8));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return new ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodArray.create = (schema2, params) => {
  return new ZodArray({
    type: schema2,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema2) {
  if (schema2 instanceof ZodObject) {
    const newShape = {};
    for (const key in schema2.shape) {
      const fieldSchema = schema2.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema2._def,
      shape: () => newShape
    });
  } else if (schema2 instanceof ZodArray) {
    return new ZodArray({
      ...schema2._def,
      type: deepPartialify(schema2.element)
    });
  } else if (schema2 instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema2.unwrap()));
  } else if (schema2 instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema2.unwrap()));
  } else if (schema2 instanceof ZodTuple) {
    return ZodTuple.create(schema2.items.map((item) => deepPartialify(item)));
  } else {
    return schema2;
  }
}
var ZodObject = class extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    return this._cached = { shape, keys };
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip")
        ;
      else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath(ctx, value, ctx.path, key)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          syncPairs.push({
            key,
            value: await pair.value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue, ctx) => {
          var _a, _b, _c, _d;
          const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(augmentation) {
    return new ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(merging) {
    const merged = new ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(key, schema2) {
    return this.augment({ [key]: schema2 });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(index) {
    return new ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    util.objectKeys(mask).forEach((key) => {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
};
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
var ZodUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
};
ZodUnion.create = (types, params) => {
  return new ZodUnion({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
var getDiscriminator = (type) => {
  if (type instanceof ZodLazy) {
    return getDiscriminator(type.schema);
  } else if (type instanceof ZodEffects) {
    return getDiscriminator(type.innerType());
  } else if (type instanceof ZodLiteral) {
    return [type.value];
  } else if (type instanceof ZodEnum) {
    return type.options;
  } else if (type instanceof ZodNativeEnum) {
    return Object.keys(type.enum);
  } else if (type instanceof ZodDefault) {
    return getDiscriminator(type._def.innerType);
  } else if (type instanceof ZodUndefined) {
    return [void 0];
  } else if (type instanceof ZodNull) {
    return [null];
  } else {
    return null;
  }
};
var ZodDiscriminatedUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(discriminator, options, params) {
    const optionsMap = /* @__PURE__ */ new Map();
    for (const type of options) {
      const discriminatorValues = getDiscriminator(type.shape[discriminator]);
      if (!discriminatorValues) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type);
      }
    }
    return new ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams(params)
    });
  }
};
function mergeValues(a5, b9) {
  const aType = getParsedType(a5);
  const bType = getParsedType(b9);
  if (a5 === b9) {
    return { valid: true, data: a5 };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b9);
    const sharedKeys = util.objectKeys(a5).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a5, ...b9 };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a5[key], b9[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a5.length !== b9.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a5.length; index++) {
      const itemA = a5[index];
      const itemB = b9[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a5 === +b9) {
    return { valid: true, data: a5 };
  } else {
    return { valid: false };
  }
}
var ZodIntersection = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
};
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};
var ZodTuple = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema2 = this._def.items[itemIndex] || this._def.rest;
      if (!schema2)
        return null;
      return schema2._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x6) => !!x6);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new ZodTuple({
      ...this._def,
      rest
    });
  }
};
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
var ZodRecord = class extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType) {
      return new ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new ZodRecord({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
};
var ZodMap = class extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
};
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};
var ZodSet = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i8) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i8)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};
var ZodFunction = class extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x6) => !!x6),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x6) => !!x6),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      const me2 = this;
      return OK(async function(...args) {
        const error = new ZodError([]);
        const parsedArgs = await me2._def.args.parseAsync(args, params).catch((e5) => {
          error.addIssue(makeArgsIssue(args, e5));
          throw error;
        });
        const result = await Reflect.apply(fn, this, parsedArgs);
        const parsedReturns = await me2._def.returns._def.type.parseAsync(result, params).catch((e5) => {
          error.addIssue(makeReturnsIssue(result, e5));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      const me2 = this;
      return OK(function(...args) {
        const parsedArgs = me2._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = Reflect.apply(fn, this, parsedArgs.data);
        const parsedReturns = me2._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new ZodFunction({
      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
      returns: returns || ZodUnknown.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
};
var ZodLazy = class extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
};
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};
var ZodLiteral = class extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
};
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
var ZodEnum = class extends ZodType {
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (this._def.values.indexOf(input.data) === -1) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values) {
    return ZodEnum.create(values);
  }
  exclude(values) {
    return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));
  }
};
ZodEnum.create = createZodEnum;
var ZodNativeEnum = class extends ZodType {
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (nativeEnumValues.indexOf(input.data) === -1) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
};
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};
var ZodPromise = class extends ZodType {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
};
ZodPromise.create = (schema2, params) => {
  return new ZodPromise({
    type: schema2,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};
var ZodEffects = class extends ZodType {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data, checkCtx);
      if (ctx.common.issues.length) {
        return {
          status: "dirty",
          value: ctx.data
        };
      }
      if (ctx.common.async) {
        return Promise.resolve(processed).then((processed2) => {
          return this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
        });
      } else {
        return this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
      }
    }
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return base;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return base;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
        });
      }
    }
    util.assertNever(effect);
  }
};
ZodEffects.create = (schema2, effect, params) => {
  return new ZodEffects({
    schema: schema2,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema2, params) => {
  return new ZodEffects({
    schema: schema2,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
var ZodOptional = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
var ZodNullable = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};
var ZodDefault = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
ZodDefault.create = (type, params) => {
  return new ZodDefault({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};
var ZodCatch = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
};
ZodCatch.create = (type, params) => {
  return new ZodCatch({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};
var ZodNaN = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
};
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
var BRAND = Symbol("zod_brand");
var ZodBranded = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
};
var ZodPipeline = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a5, b9) {
    return new ZodPipeline({
      in: a5,
      out: b9,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
};
var ZodReadonly = class extends ZodType {
  _parse(input) {
    const result = this._def.innerType._parse(input);
    if (isValid(result)) {
      result.value = Object.freeze(result.value);
    }
    return result;
  }
};
ZodReadonly.create = (type, params) => {
  return new ZodReadonly({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodReadonly,
    ...processCreateParams(params)
  });
};
var custom = (check, params = {}, fatal) => {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      var _a, _b;
      if (!check(data)) {
        const p10 = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
        const _fatal = (_b = (_a = p10.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
        const p22 = typeof p10 === "string" ? { message: p10 } : p10;
        ctx.addIssue({ code: "custom", ...p22, fatal: _fatal });
      }
    });
  return ZodAny.create();
};
var late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
  ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params);
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var nanType = ZodNaN.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean.create;
var dateType = ZodDate.create;
var symbolType = ZodSymbol.create;
var undefinedType = ZodUndefined.create;
var nullType = ZodNull.create;
var anyType = ZodAny.create;
var unknownType = ZodUnknown.create;
var neverType = ZodNever.create;
var voidType = ZodVoid.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion.create;
var discriminatedUnionType = ZodDiscriminatedUnion.create;
var intersectionType = ZodIntersection.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy.create;
var literalType = ZodLiteral.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional.create;
var nullableType = ZodNullable.create;
var preprocessType = ZodEffects.createWithPreprocess;
var pipelineType = ZodPipeline.create;
var ostring = () => stringType().optional();
var onumber = () => numberType().optional();
var oboolean = () => booleanType().optional();
var coerce = {
  string: (arg) => ZodString.create({ ...arg, coerce: true }),
  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
  boolean: (arg) => ZodBoolean.create({
    ...arg,
    coerce: true
  }),
  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
  date: (arg) => ZodDate.create({ ...arg, coerce: true })
};
var NEVER = INVALID;
var z2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  defaultErrorMap: errorMap,
  setErrorMap,
  getErrorMap,
  makeIssue,
  EMPTY_PATH,
  addIssueToContext,
  ParseStatus,
  INVALID,
  DIRTY,
  OK,
  isAborted,
  isDirty,
  isValid,
  isAsync,
  get util() {
    return util;
  },
  get objectUtil() {
    return objectUtil;
  },
  ZodParsedType,
  getParsedType,
  ZodType,
  ZodString,
  ZodNumber,
  ZodBigInt,
  ZodBoolean,
  ZodDate,
  ZodSymbol,
  ZodUndefined,
  ZodNull,
  ZodAny,
  ZodUnknown,
  ZodNever,
  ZodVoid,
  ZodArray,
  ZodObject,
  ZodUnion,
  ZodDiscriminatedUnion,
  ZodIntersection,
  ZodTuple,
  ZodRecord,
  ZodMap,
  ZodSet,
  ZodFunction,
  ZodLazy,
  ZodLiteral,
  ZodEnum,
  ZodNativeEnum,
  ZodPromise,
  ZodEffects,
  ZodTransformer: ZodEffects,
  ZodOptional,
  ZodNullable,
  ZodDefault,
  ZodCatch,
  ZodNaN,
  BRAND,
  ZodBranded,
  ZodPipeline,
  ZodReadonly,
  custom,
  Schema: ZodType,
  ZodSchema: ZodType,
  late,
  get ZodFirstPartyTypeKind() {
    return ZodFirstPartyTypeKind;
  },
  coerce,
  any: anyType,
  array: arrayType,
  bigint: bigIntType,
  boolean: booleanType,
  date: dateType,
  discriminatedUnion: discriminatedUnionType,
  effect: effectsType,
  "enum": enumType,
  "function": functionType,
  "instanceof": instanceOfType,
  intersection: intersectionType,
  lazy: lazyType,
  literal: literalType,
  map: mapType,
  nan: nanType,
  nativeEnum: nativeEnumType,
  never: neverType,
  "null": nullType,
  nullable: nullableType,
  number: numberType,
  object: objectType,
  oboolean,
  onumber,
  optional: optionalType,
  ostring,
  pipeline: pipelineType,
  preprocess: preprocessType,
  promise: promiseType,
  record: recordType,
  set: setType,
  strictObject: strictObjectType,
  string: stringType,
  symbol: symbolType,
  transformer: effectsType,
  tuple: tupleType,
  "undefined": undefinedType,
  union: unionType,
  unknown: unknownType,
  "void": voidType,
  NEVER,
  ZodIssueCode,
  quotelessJson,
  ZodError
});

// node_modules/electric-sql/dist/satellite/process.js
var import_lodash = __toESM(require_lodash(), 1);

// node_modules/electric-sql/dist/util/sets.js
function T6(e5, n11) {
  const r7 = new Set(n11);
  return e5.filter((t3) => !r7.has(t3));
}
function o5(e5, n11) {
  return Array.from(/* @__PURE__ */ new Set([...e5, ...n11]));
}

// node_modules/electric-sql/dist/satellite/oplog.js
var p4 = { insert: "INSERT", update: "UPDATE", delete: "DELETE", upsert: "UPSERT" };
var O3 = (e5) => {
  switch (e5) {
    case "INSERT":
      return p4.insert;
    case "UPDATE":
      return p4.update;
    case "DELETE":
      return p4.delete;
  }
  throw new Error(`unexpected opType string: ${e5}`);
};
var C5 = (e5, o9) => {
  const t3 = { namespace: e5.namespace, tablename: e5.tablename, primaryKeyCols: JSON.parse(e5.primaryKey), optype: e5.optype === p4.delete ? p4.delete : p4.upsert, changes: {}, tag: e5.optype == p4.delete ? null : o9, clearTags: y2(e5.clearTags) }, r7 = e5.oldRow ? JSON.parse(e5.oldRow) : {}, n11 = e5.newRow ? JSON.parse(e5.newRow) : {}, a5 = new Date(e5.timestamp).getTime();
  for (const [s7, l7] of Object.entries(n11))
    r7[s7] !== l7 && (t3.changes[s7] = { value: l7, timestamp: a5 });
  return t3;
};
var S3 = (e5) => {
  const o9 = e5.oldRow ? JSON.parse(e5.oldRow) : {}, t3 = e5.newRow ? JSON.parse(e5.newRow) : {}, r7 = { namespace: e5.namespace, tablename: e5.tablename, primaryKeyCols: JSON.parse(e5.primaryKey), optype: e5.optype === p4.delete ? p4.delete : p4.upsert, changes: {}, fullRow: e5.optype === p4.delete ? o9 : t3, tags: y2(e5.clearTags) }, n11 = new Date(e5.timestamp).getTime();
  for (const [a5, s7] of Object.entries(t3))
    o9[a5] !== s7 && (r7.changes[a5] = { value: s7, timestamp: n11 });
  return r7;
};
var v5 = (e5, o9) => {
  const t3 = {};
  return e5.reduce((r7, n11) => {
    const a5 = C5(n11, o9(new Date(n11.timestamp))), s7 = c6(a5.primaryKeyCols), i8 = new b(a5.namespace, a5.tablename).toString();
    if (r7[i8] === void 0 && (r7[i8] = {}), r7[i8][s7] === void 0)
      r7[i8][s7] = [n11.timestamp, a5];
    else {
      const [m10, g9] = r7[i8][s7];
      g9.optype = a5.optype;
      for (const [d8, h8] of Object.entries(a5.changes))
        g9.changes[d8] = h8;
      a5.optype == "DELETE" ? g9.tag = null : g9.tag = o9(new Date(n11.timestamp)), m10 == n11.timestamp ? g9.clearTags = a5.clearTags : g9.clearTags = o5(a5.clearTags, g9.clearTags);
    }
    return r7;
  }, t3);
};
var _4 = (e5) => {
  const o9 = {};
  return e5.reduce((t3, r7) => {
    const n11 = S3(r7), a5 = c6(n11.primaryKeyCols), l7 = new b(n11.namespace, n11.tablename).toString();
    if (t3[l7] === void 0 && (t3[l7] = {}), t3[l7][a5] === void 0)
      t3[l7][a5] = n11;
    else {
      const i8 = t3[l7][a5];
      i8.optype = n11.optype;
      for (const [m10, g9] of Object.entries(n11.changes))
        i8.changes[m10] = g9, i8.fullRow[m10] = g9.value;
    }
    return t3;
  }, o9);
};
var I3 = (e5, o9) => e5.changes.map((t3) => {
  const r7 = t3.record ? t3.record : t3.oldRecord, n11 = c6(Object.fromEntries(o9[`${t3.relation.table}`].columns.filter((a5) => a5.primaryKey).map((a5) => [a5.name, r7[a5.name]])));
  return { namespace: "main", tablename: t3.relation.table, optype: O3(t3.type), newRow: JSON.stringify(t3.record), oldRow: JSON.stringify(t3.oldRecord), primaryKey: n11, rowid: -1, timestamp: new Date(e5.commit_timestamp.toNumber()).toISOString(), clearTags: b6(t3.tags) };
});
var V3 = (e5, o9) => {
  if (e5.length == 0)
    return [];
  const t3 = (n11) => long_default.UZERO.add(new Date(n11).getTime()), r7 = { commit_timestamp: t3(e5[0].timestamp), lsn: s2(e5[0].rowid), changes: [] };
  return e5.reduce((n11, a5) => {
    let s7 = n11[n11.length - 1];
    if (t3(a5.timestamp).notEquals(s7.commit_timestamp)) {
      const m10 = { commit_timestamp: t3(a5.timestamp), lsn: s2(a5.rowid), changes: [] };
      n11.push(m10), s7 = m10;
    }
    const i8 = R4(a5, o9);
    return s7.changes.push(i8), s7.lsn = s2(a5.rowid), n11;
  }, [r7]);
};
var $3 = (e5) => "primaryKey" in e5 ? e5.primaryKey : c6(e5.primaryKeyCols);
var b6 = (e5) => JSON.stringify(e5);
var y2 = (e5) => JSON.parse(e5);
var R4 = (e5, o9) => {
  let t3, r7;
  e5.newRow != null && (t3 = JSON.parse(e5.newRow)), e5.oldRow != null && (r7 = JSON.parse(e5.oldRow));
  const n11 = o9[`${e5.tablename}`];
  if (typeof n11 > "u")
    throw new Error(`Could not find relation for ${e5.tablename}`);
  return { type: e5.optype, relation: n11, record: t3, oldRecord: r7, tags: y2(e5.clearTags) };
};
var c6 = (e5) => {
  const o9 = Object.keys(e5).sort();
  if (o9.length === 0)
    return "{}";
  let t3 = "{";
  for (const r7 of o9)
    t3 += JSON.stringify(r7) + ":" + JSON.stringify(e5[r7]) + ",";
  return t3.slice(0, -1) + "}";
};
var B3 = (e5, o9) => {
  const t3 = typeof o9 == "number" ? o9 : o9.getTime();
  return e5 + "@" + t3.toString();
};

// node_modules/electric-sql/dist/satellite/process.js
var import_loglevel2 = __toESM(require_loglevel(), 1);

// node_modules/electric-sql/dist/migrators/triggers.js
function l4(n11) {
  return { sql: n11 };
}
function m7(n11, r7) {
  const { tableName: e5, namespace: t3, columns: i8, primary: s7 } = r7, c8 = T7(s7, "new"), o9 = T7(s7, "old"), _6 = T7(i8, "new"), a5 = T7(i8, "old");
  return [`
    -- Toggles for turning the triggers on and off
    INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('${n11}', 1);
    `, `
    /* Triggers for table ${e5} */
  
    -- ensures primary key is immutable
    DROP TRIGGER IF EXISTS update_ensure_${t3}_${e5}_primarykey;
    `, `
    CREATE TRIGGER update_ensure_${t3}_${e5}_primarykey
      BEFORE UPDATE ON ${n11}
    BEGIN
      SELECT
        CASE
          ${s7.map((E5) => `WHEN old.${E5} != new.${E5} THEN
		RAISE (ABORT, 'cannot change the value of column ${E5} as it belongs to the primary key')`).join(`
`)}
        END;
    END;
    `, `
    -- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table
    DROP TRIGGER IF EXISTS insert_${t3}_${e5}_into_oplog;
    `, `
    CREATE TRIGGER insert_${t3}_${e5}_into_oplog
       AFTER INSERT ON ${n11}
       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == '${n11}')
    BEGIN
      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)
      VALUES ('${t3}', '${e5}', 'INSERT', json_object(${c8}), json_object(${_6}), NULL, NULL);
    END;
    `, `
    DROP TRIGGER IF EXISTS update_${t3}_${e5}_into_oplog;
    `, `
    CREATE TRIGGER update_${t3}_${e5}_into_oplog
       AFTER UPDATE ON ${n11}
       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == '${n11}')
    BEGIN
      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)
      VALUES ('${t3}', '${e5}', 'UPDATE', json_object(${c8}), json_object(${_6}), json_object(${a5}), NULL);
    END;
    `, `
    DROP TRIGGER IF EXISTS delete_${t3}_${e5}_into_oplog;
    `, `
    CREATE TRIGGER delete_${t3}_${e5}_into_oplog
       AFTER DELETE ON ${n11}
       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == '${n11}')
    BEGIN
      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)
      VALUES ('${t3}', '${e5}', 'DELETE', json_object(${o9}), NULL, json_object(${a5}), NULL);
    END;
    `].map(l4);
}
function R5(n11, r7) {
  const { tableName: e5, namespace: t3, foreignKeys: i8 } = r7, s7 = (o9) => {
    const { childKey: _6 } = o9, a5 = "main", E5 = o9.table, p10 = o9.parentKey, g9 = T7([p10]);
    return [`-- Triggers for foreign key compensations
      DROP TRIGGER IF EXISTS compensation_insert_${t3}_${e5}_${_6}_into_oplog;`, `
      CREATE TRIGGER compensation_insert_${t3}_${e5}_${_6}_into_oplog
        AFTER INSERT ON ${n11}
        WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == '${a5}.${E5}') AND
             1 == (SELECT value from _electric_meta WHERE key == 'compensations')
      BEGIN
        INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)
        SELECT '${a5}', '${E5}', 'UPDATE', json_object(${g9}), json_object(${g9}), NULL, NULL
        FROM ${a5}.${E5} WHERE ${o9.parentKey} = new.${o9.childKey};
      END;
      `, `DROP TRIGGER IF EXISTS compensation_update_${t3}_${e5}_${o9.childKey}_into_oplog;`, `
      CREATE TRIGGER compensation_update_${t3}_${e5}_${o9.childKey}_into_oplog
         AFTER UPDATE ON ${t3}.${e5}
         WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == '${a5}.${E5}') AND
              1 == (SELECT value from _electric_meta WHERE key == 'compensations')
      BEGIN
        INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)
        SELECT '${a5}', '${E5}', 'UPDATE', json_object(${g9}), json_object(${g9}), NULL, NULL
        FROM ${a5}.${E5} WHERE ${o9.parentKey} = new.${o9.childKey};
      END;
      `].map(l4);
  };
  return i8.map((o9) => s7(o9)).flat();
}
function $4(n11, r7) {
  const e5 = m7(n11, r7), t3 = R5(n11, r7);
  return e5.concat(t3);
}
function T7(n11, r7) {
  return typeof r7 > "u" ? n11.sort().map((e5) => `'${e5}', ${e5}`).join(", ") : n11.sort().map((e5) => `'${e5}', ${r7}.${e5}`).join(", ");
}

// node_modules/electric-sql/dist/satellite/merge.js
function D6(e5, a5, g9, i8) {
  const u8 = v5(a5, (r7) => B3(e5, r7)), l7 = _4(i8);
  for (const [r7, p10] of Object.entries(l7)) {
    const t3 = u8[r7];
    if (t3 !== void 0)
      for (const [o9, n11] of Object.entries(p10)) {
        const s7 = t3[o9];
        if (s7 === void 0)
          continue;
        const [P4, m10] = s7, d8 = y3(e5, m10.changes, g9, n11.changes, n11.fullRow);
        let f6;
        const c8 = w3(m10, n11);
        c8.length == 0 ? f6 = p4.delete : f6 = p4.upsert, Object.assign(n11, { changes: d8, optype: f6, tags: c8 });
      }
  }
  return l7;
}
var y3 = (e5, a5, g9, i8, u8) => {
  const l7 = Object.keys(a5).concat(Object.keys(i8)), r7 = Array.from(new Set(l7)), p10 = {};
  return r7.reduce((t3, o9) => {
    const n11 = a5[o9], s7 = i8[o9];
    return n11 === void 0 && s7 === void 0 || (n11 === void 0 ? t3[o9] = s7 : s7 === void 0 ? t3[o9] = n11 : n11.timestamp === s7.timestamp ? t3[o9] = e5 > g9 ? n11 : s7 : t3[o9] = n11.timestamp > s7.timestamp ? n11 : s7, u8[o9] = t3[o9].value), t3;
  }, p10);
};
function w3(e5, a5) {
  return j3(e5.tag, a5.tags, e5.clearTags);
}
function j3(e5, a5, g9) {
  return e5 == null ? T6(a5, g9) : o5([e5], T6(a5, g9));
}

// node_modules/electric-sql/dist/satellite/shapes/manager.js
var import_events = __toESM(require_events(), 1);
var y4 = class extends import_events.default {
  inFlight = {};
  fulfilledSubscriptions = {};
  shapeRequestHashmap = /* @__PURE__ */ new Map();
  gcHandler;
  constructor(i8) {
    super(), this.gcHandler = i8;
  }
  subscriptionRequested(i8, e5) {
    if (this.inFlight[i8] || this.fulfilledSubscriptions[i8])
      throw new x4(_2.SUBSCRIPTION_ALREADY_EXISTS, `a subscription with id ${i8} already exists`);
    const t3 = a4(e5);
    if (this.shapeRequestHashmap.has(t3))
      throw new x4(_2.SUBSCRIPTION_ALREADY_EXISTS, 'Subscription with exactly the same shape requests exists. Calling code should use "getDuplicatingSubscription" to avoid establishing same subscription twice');
    this.inFlight[i8] = e5, this.shapeRequestHashmap.set(t3, i8);
  }
  subscriptionCancelled(i8) {
    delete this.inFlight[i8], this.removeSubscriptionFromHash(i8);
  }
  subscriptionDelivered(i8) {
    const { subscriptionId: e5, shapeReqToUuid: t3 } = i8;
    if (!this.inFlight[e5])
      return;
    const l7 = this.inFlight[e5];
    delete this.inFlight[e5];
    for (const n11 of l7) {
      const h8 = { uuid: t3[n11.requestId], definition: n11.definition };
      this.fulfilledSubscriptions[e5] = this.fulfilledSubscriptions[e5] ?? [], this.fulfilledSubscriptions[e5].push(h8);
    }
  }
  shapesForActiveSubscription(i8) {
    return this.fulfilledSubscriptions[i8];
  }
  getFulfilledSubscriptions() {
    return Object.keys(this.fulfilledSubscriptions);
  }
  getDuplicatingSubscription(i8) {
    const e5 = this.shapeRequestHashmap.get(p5(i8));
    return e5 ? this.inFlight[e5] ? { inFlight: e5 } : { fulfilled: e5 } : null;
  }
  async unsubscribe(i8) {
    const e5 = this.shapesForActiveSubscription(i8);
    e5 && (this.gcHandler && await this.gcHandler(e5), delete this.inFlight[i8], delete this.fulfilledSubscriptions[i8], this.removeSubscriptionFromHash(i8));
  }
  async unsubscribeAll() {
    const i8 = Object.keys(this.fulfilledSubscriptions);
    for (const e5 of i8)
      await this.unsubscribe(e5);
    return i8;
  }
  serialize() {
    return JSON.stringify(this.fulfilledSubscriptions);
  }
  setState(i8) {
    this.inFlight = {}, this.fulfilledSubscriptions = JSON.parse(i8), this.shapeRequestHashmap.clear();
    for (const [e5, t3] of Object.entries(this.fulfilledSubscriptions))
      this.shapeRequestHashmap.set(a4(t3), e5);
  }
  removeSubscriptionFromHash(i8) {
    for (const [e5, t3] of this.shapeRequestHashmap)
      if (t3 === i8) {
        this.shapeRequestHashmap.delete(e5);
        break;
      }
  }
};
function a4(s7) {
  return p5(s7.map((i8) => i8.definition));
}
function p5(s7) {
  return hash(s7);
}

// node_modules/electric-sql/dist/satellite/process.js
var import_exponential_backoff = __toESM(require_backoff(), 1);
var et = (u8, t3) => true;
var it = { delayFirstAttempt: false, startingDelay: 100, jitter: "full", maxDelay: 5e3, numOfAttempts: 100, timeMultiple: 2 };
var st = [_2.INTERNAL];
var ue2 = class {
  dbName;
  adapter;
  migrator;
  notifier;
  client;
  opts;
  _authState;
  _authStateSubscription;
  connectivityState;
  _connectivityChangeSubscription;
  _pollingInterval;
  _potentialDataChangeSubscription;
  _throttledSnapshot;
  _lastAckdRowId;
  _lastSentRowId;
  _lsn;
  relations;
  subscriptions;
  subscriptionNotifiers;
  subscriptionIdGenerator;
  shapeRequestIdGenerator;
  maxSqlParameters = 999;
  snapshotMutex = new Mutex();
  performingSnapshot = false;
  _connectRetryHandler;
  initializing;
  constructor(t3, e5, i8, s7, n11, r7) {
    this.dbName = t3, this.adapter = e5, this.migrator = i8, this.notifier = s7, this.client = n11, this.opts = r7, this._lastAckdRowId = 0, this._lastSentRowId = 0, this.relations = {}, this.subscriptions = new y4(this._garbageCollectShapeHandler.bind(this)), this._throttledSnapshot = (0, import_lodash.default)(this.mutexSnapshot.bind(this), r7.minSnapshotWindow, { leading: true, trailing: true }), this.subscriptionNotifiers = {}, this.subscriptionIdGenerator = () => A(), this.shapeRequestIdGenerator = this.subscriptionIdGenerator, this._connectRetryHandler = et, this.setClientListeners();
  }
  async mutexSnapshot() {
    const t3 = await this.snapshotMutex.acquire();
    try {
      return await this._performSnapshot();
    } finally {
      t3();
    }
  }
  async start(t3) {
    if (await this.migrator.up(), !await this._verifyTableStructure())
      throw new Error("Invalid database schema.");
    const i8 = t3.clientId && t3.clientId !== "" ? t3.clientId : await this._getClientId();
    await this._setAuthState({ clientId: i8, token: t3.token }), Object.entries({ _authStateSubscription: this._authStateSubscription, _connectivityChangeSubscription: this._connectivityChangeSubscription, _potentialDataChangeSubscription: this._potentialDataChangeSubscription }).forEach(([l7, h8]) => {
      if (h8 !== void 0)
        throw new Error(`Starting satellite process with an existing
           \`${l7}\`.
           This means there is a notifier subscription leak.`);
    });
    const n11 = this._updateAuthState.bind(this);
    this._authStateSubscription = this.notifier.subscribeToAuthStateChanges(n11);
    const r7 = ({ connectivityState: l7 }) => {
      this._connectivityStateChanged(l7);
    };
    this._connectivityChangeSubscription = this.notifier.subscribeToConnectivityStateChanges(r7), this._potentialDataChangeSubscription = this.notifier.subscribeToPotentialDataChanges(this._throttledSnapshot), this._pollingInterval = setInterval(this._throttledSnapshot, this.opts.pollingInterval), setTimeout(this._throttledSnapshot, 0), this.relations = await this._getLocalRelations(), this.checkMaxSqlParameters(), this._lastAckdRowId = Number(await this._getMeta("lastAckdRowId")), this._lastSentRowId = Number(await this._getMeta("lastSentRowId")), this.client.resetOutboundLogPositions(s2(this._lastAckdRowId), s2(this._lastSentRowId));
    const a5 = await this._getMeta("lsn");
    a5 && a5.length > 0 ? (this._lsn = b2.toBytes(a5), import_loglevel2.default.info(`retrieved lsn ${this._lsn}`)) : import_loglevel2.default.info("no lsn retrieved from store");
    const o9 = await this._getMeta("subscriptions");
    return o9 && this.subscriptions.setState(o9), { connectionPromise: this._connectWithBackoff().then(() => this._startReplication()) };
  }
  async _setAuthState(t3) {
    this._authState = t3;
  }
  async _garbageCollectShapeHandler(t3) {
    const e5 = [], i8 = [];
    e5.push({ sql: "PRAGMA defer_foreign_keys = ON" }), t3.flatMap((n11) => n11.definition.selects).map((n11) => (i8.push("main." + n11.tablename), "main." + n11.tablename)).reduce((n11, r7) => (n11.push({ sql: `DELETE FROM ${r7}` }), n11), e5);
    const s7 = [...this._disableTriggers(i8), ...e5, ...this._enableTriggers(i8)];
    await this.adapter.runInTransaction(...s7);
  }
  setClientListeners() {
    this.client.subscribeToError(this._handleClientError.bind(this)), this.client.subscribeToRelations(this._updateRelations.bind(this)), this.client.subscribeToTransactions(this._applyTransaction.bind(this)), this.client.subscribeToAck(this._handleAck.bind(this)), this.client.subscribeToOutboundEvent("started", this._throttledSnapshot.bind(this)), this.client.subscribeToSubscriptionEvents(this._handleSubscriptionData.bind(this), this._handleSubscriptionError.bind(this));
  }
  async stop() {
    return this._throttledSnapshot.cancel(), this._pollingInterval !== void 0 && (clearInterval(this._pollingInterval), this._pollingInterval = void 0), this._authStateSubscription !== void 0 && (this.notifier.unsubscribeFromAuthStateChanges(this._authStateSubscription), this._authStateSubscription = void 0), this._connectivityChangeSubscription !== void 0 && (this.notifier.unsubscribeFromConnectivityStateChanges(this._connectivityChangeSubscription), this._connectivityChangeSubscription = void 0), this._potentialDataChangeSubscription !== void 0 && (this.notifier.unsubscribeFromPotentialDataChanges(this._potentialDataChangeSubscription), this._potentialDataChangeSubscription = void 0), this._connectivityStateChanged("disconnected");
  }
  async subscribe(t3) {
    await this.initializing?.waitOn();
    const e5 = this.subscriptions.getDuplicatingSubscription(t3);
    if (e5 !== null && "inFlight" in e5)
      return { synced: this.subscriptionNotifiers[e5.inFlight].promise };
    if (e5 !== null && "fulfilled" in e5)
      return { synced: Promise.resolve() };
    const i8 = t3.map((a5) => ({ requestId: this.shapeRequestIdGenerator(), definition: a5 })), s7 = this.subscriptionIdGenerator();
    this.subscriptions.subscriptionRequested(s7, i8), this.subscriptionNotifiers[s7] = l2();
    const { subscriptionId: n11, error: r7 } = await this.client.subscribe(s7, i8);
    if (s7 !== n11)
      throw delete this.subscriptionNotifiers[s7], this.subscriptions.subscriptionCancelled(s7), new Error(`Expected SubscripeResponse for subscription id: ${s7} but got it for another id: ${n11}`);
    if (r7)
      throw delete this.subscriptionNotifiers[n11], this.subscriptions.subscriptionCancelled(n11), r7;
    return { synced: this.subscriptionNotifiers[s7].promise };
  }
  async unsubscribe(t3) {
    throw new x4(_2.INTERNAL, "unsubscribe shape not supported");
  }
  async _handleSubscriptionData(t3) {
    this.subscriptions.subscriptionDelivered(t3), t3.data && await this._applySubscriptionData(t3.data, t3.lsn);
    const { resolve: e5 } = this.subscriptionNotifiers[t3.subscriptionId];
    delete this.subscriptionNotifiers[t3.subscriptionId], e5();
  }
  async _applySubscriptionData(t3, e5) {
    const i8 = [];
    i8.push({ sql: "PRAGMA defer_foreign_keys = ON" });
    const s7 = /* @__PURE__ */ new Map(), n11 = [];
    for (const a5 of t3) {
      const o9 = new b("main", a5.relation.table);
      s7.has(o9.toString()) ? s7.get(o9.toString())?.records.push(a5.record) : s7.set(o9.toString(), { columns: a5.relation.columns.map((l7) => l7.name), records: [a5.record] });
      const c8 = a5.relation.columns.reduce((l7, h8) => (h8.primaryKey && (l7[h8.name] = a5.record[h8.name]), l7), {});
      n11.push({ namespace: "main", tablename: a5.relation.table, primaryKey: c6(c8), tags: b6(a5.tags) });
    }
    i8.push(...this._disableTriggers([...s7.keys()]));
    for (const [a5, { columns: o9, records: c8 }] of s7) {
      const l7 = `INSERT INTO ${a5} (${o9.join(", ")}) VALUES `;
      i8.push(...C4(l7, o9, c8, this.maxSqlParameters));
    }
    i8.push(...this._enableTriggers([...s7.keys()]));
    const r7 = `INSERT or REPLACE INTO ${this.opts.shadowTable.toString()} (namespace, tablename, primaryKey, tags) VALUES `;
    i8.push(...C4(r7, ["namespace", "tablename", "primaryKey", "tags"], n11, this.maxSqlParameters)), i8.push(this._setMetaStatement("subscriptions", this.subscriptions.serialize()), this.updateLsnStmt(e5));
    try {
      await this.adapter.runInTransaction(...i8);
      const a5 = t3.map((o9) => ({ qualifiedTablename: new b("main", o9.relation.table), rowids: [] }));
      this.notifier.actuallyChanged(this.dbName, a5);
    } catch (a5) {
      this._handleSubscriptionError(new x4(_2.INTERNAL, `Error applying subscription data: ${a5.message}`));
    }
  }
  async _resetClientState() {
    await this._connectivityStateChanged("disconnected");
    const e5 = this.subscriptions.getFulfilledSubscriptions().map((i8) => this.subscriptions.shapesForActiveSubscription(i8)).filter((i8) => i8 !== void 0).flatMap((i8) => i8.map((s7) => s7.definition));
    return this._lsn = void 0, await this.subscriptions.unsubscribeAll(), await this.adapter.runInTransaction(this._setMetaStatement("lsn", null), this._setMetaStatement("subscriptions", this.subscriptions.serialize())), e5;
  }
  async _reconnect(t3) {
    import_loglevel2.default.warn("reconnecting to server"), await this._connectWithBackoff(), await this._startReplication(), t3.length > 0 && this.subscribe(t3);
  }
  async _resetClientStateAndReconnect() {
    const t3 = await this._resetClientState();
    return await this._reconnect(t3);
  }
  async _handleSubscriptionError(t3, e5) {
    if (import_loglevel2.default.error("encountered a subscription error: " + t3.message), await this._resetClientState(), e5) {
      const { reject: i8 } = this.subscriptionNotifiers[e5];
      delete this.subscriptionNotifiers[e5], i8(t3);
    }
  }
  _handleClientError(t3) {
    if (this.initializing && !this.initializing.finished()) {
      if (t3.code === _2.SOCKET_ERROR) {
        import_loglevel2.default.warn(`a socket error occurred while connecting to server: ${t3.message}`);
        return;
      }
      if (t3.code === _2.AUTH_REQUIRED) {
        import_loglevel2.default.warn(`a fatal error occurred while initializing: ${t3.message}`);
        return;
      }
      throw t3;
    }
    this._connectivityStateChanged("disconnected").then(() => this._connectivityStateChanged("available"));
  }
  async _handleAck(t3, e5) {
    const i8 = c2(t3);
    await this._ack(i8, e5 == g3.REMOTE_COMMIT);
  }
  async _connectivityStateChanged(t3) {
    switch (this.connectivityState = t3, import_loglevel2.default.debug(`connectivity state changed ${t3}`), t3) {
      case "available":
        return import_loglevel2.default.warn("checking network availability and reconnecting"), this._connectWithBackoff().then(() => this._startReplication());
      case "error":
      case "disconnected": {
        import_loglevel2.default.warn("client disconnected from server"), this.client.close();
        return;
      }
      case "connected":
        return;
      default:
        throw new Error(`unexpected connectivity state: ${t3}`);
    }
  }
  async _connectWithBackoff() {
    (!this.initializing || this.initializing?.finished()) && (this.initializing = U()), await (0, import_exponential_backoff.backOff)(() => this._connect(), { ...it, retry: this._connectRetryHandler }).catch((t3) => {
      const e5 = new x4(_2.CONNECTION_FAILED_AFTER_RETRY, `Failed to connect to server after exhausting retry policy. Last error thrown by server: ${t3.message}`);
      throw this.initializing?.reject(t3), this.notifier.connectivityStateChanged(this.dbName, "disconnected"), e5;
    });
  }
  async _connect() {
    if (import_loglevel2.default.info("connecting to electric server"), !this._authState)
      throw new Error("trying to connect before authentication");
    const t3 = this._authState;
    try {
      await this.client.connect();
      const e5 = await this.client.authenticate(t3);
      if (e5.error)
        throw e5.error;
    } catch (e5) {
      throw import_loglevel2.default.debug(`server returned an error while establishing connection: ${e5.message}`), e5;
    }
  }
  async _startReplication() {
    try {
      const t3 = await this.migrator.querySchemaVersion(), e5 = this.subscriptions.getFulfilledSubscriptions(), { error: i8 } = await this.client.startReplication(this._lsn, t3, e5.length > 0 ? e5 : void 0);
      if (i8) {
        if ((i8.code == _2.INVALID_POSITION || i8.code == _2.BEHIND_WINDOW || i8.code == _2.SUBSCRIPTION_NOT_FOUND) && this.opts?.clearOnBehindWindow)
          return import_loglevel2.default.warn(`server error: ${i8.message}. resetting client state and retrying connection`), await this._resetClientStateAndReconnect();
        throw i8;
      }
      this.notifier.connectivityStateChanged(this.dbName, "connected"), this.initializing?.resolve();
    } catch (t3) {
      if (t3.code == _2.UNKNOWN_SCHEMA_VSN) {
        import_loglevel2.default.warn(g6), this.initializing?.reject(new x4(t3.code, g6)), this.notifier.connectivityStateChanged(this.dbName, "disconnected");
        return;
      } else {
        if (this.initializing?.reject(t3), !(t3 instanceof x4) || st.includes(t3.code))
          throw t3;
        return import_loglevel2.default.warn(`Couldn't start replication with reason: ${t3.message}. resetting client state and retrying`), this._resetClientStateAndReconnect();
      }
    } finally {
      this.initializing = void 0;
    }
  }
  async _verifyTableStructure() {
    const t3 = this.opts.metaTable.tablename, e5 = this.opts.oplogTable.tablename, i8 = this.opts.shadowTable.tablename, s7 = `
      SELECT count(name) as numTables FROM sqlite_master
        WHERE type='table'
        AND name IN (?, ?, ?)
    `, [{ numTables: n11 }] = await this.adapter.query({ sql: s7, args: [t3, e5, i8] });
    return n11 === 3;
  }
  async _updateAuthState({ authState: t3 }) {
    this._authState = t3;
  }
  async _performSnapshot() {
    if (this.performingSnapshot)
      throw new x4(_2.INTERNAL, "already performing snapshot");
    this.performingSnapshot = true;
    const t3 = this.opts.oplogTable, e5 = this.opts.shadowTable, i8 = new Date(), s7 = this._generateTag(i8), n11 = { sql: `
      UPDATE ${t3} SET timestamp = ?
      WHERE rowid in (
        SELECT rowid FROM ${t3}
            WHERE timestamp is NULL
            AND rowid > ?
        ORDER BY rowid ASC
        )
      RETURNING *
    `, args: [i8.toISOString(), this._lastAckdRowId] }, r7 = { sql: `
      UPDATE ${t3}
      SET clearTags = updates.tags
      FROM (
        SELECT shadow.tags as tags, min(op.rowid) as op_rowid
        FROM ${e5} AS shadow
        JOIN ${t3} as op
          ON op.namespace = shadow.namespace
            AND op.tablename = shadow.tablename
            AND op.primaryKey = shadow.primaryKey
        WHERE op.timestamp = ?
              AND op.rowid > ?
        GROUP BY op.namespace, op.tablename, op.primaryKey
      ) AS updates
      WHERE updates.op_rowid = ${t3}.rowid
    `, args: [i8.toISOString(), this._lastAckdRowId] }, a5 = { sql: `
      INSERT OR REPLACE INTO ${e5} (namespace, tablename, primaryKey, tags)
      SELECT namespace, tablename, primaryKey, ?
        FROM ${t3} AS op
        WHERE timestamp = ?
              AND rowid > ?
        GROUP BY namespace, tablename, primaryKey
        HAVING rowid = max(rowid) AND optype != 'DELETE'
    `, args: [b6([s7]), i8.toISOString(), this._lastAckdRowId] }, o9 = { sql: `
      WITH _to_be_deleted (rowid) AS (
        SELECT shadow.rowid
          FROM ${t3} AS op
          INNER JOIN ${e5} AS shadow
            ON shadow.namespace = op.namespace AND shadow.tablename = op.tablename AND shadow.primaryKey = op.primaryKey
          WHERE op.timestamp = ?
                AND op.rowid > ?
          GROUP BY op.namespace, op.tablename, op.primaryKey
          HAVING op.rowid = max(op.rowid) AND op.optype = 'DELETE'
      )

      DELETE FROM ${e5}
      WHERE rowid IN _to_be_deleted
    `, args: [i8.toISOString(), this._lastAckdRowId] }, c8 = await this.adapter.transaction((l7, h8) => {
      l7.query(n11, (C9, E5) => {
        E5.length > 0 ? C9.run(r7, (R6) => R6.run(a5, (f6) => f6.run(o9, () => h8(E5)))) : h8([]);
      });
    });
    if (c8.length > 0 && this._notifyChanges(c8), !this.client.isClosed()) {
      const { enqueued: l7 } = this.client.getOutboundLogPositions(), h8 = c2(l7);
      await this._getEntries(h8).then((C9) => this._replicateSnapshotChanges(C9));
    }
    return this.performingSnapshot = false, i8;
  }
  async _notifyChanges(t3) {
    import_loglevel2.default.info("notify changes");
    const e5 = {}, i8 = (n11, r7) => {
      const a5 = new b(r7.namespace, r7.tablename), o9 = a5.toString();
      if (o9 in n11) {
        const c8 = n11[o9];
        c8.rowids === void 0 && (c8.rowids = []), c8.rowids.push(r7.rowid);
      } else
        n11[o9] = { qualifiedTablename: a5, rowids: [r7.rowid] };
      return n11;
    }, s7 = Object.values(t3.reduce(i8, e5));
    this.notifier.actuallyChanged(this.dbName, s7);
  }
  async _replicateSnapshotChanges(t3) {
    if (this.client.isClosed())
      return;
    const e5 = V3(t3, this.relations);
    for (const i8 of e5)
      this.client.enqueueTransaction(i8);
  }
  async _apply(t3, e5) {
    const i8 = await this._getEntries(), s7 = D6(this._authState.clientId, i8, e5, t3), n11 = [];
    for (const [a5, o9] of Object.entries(s7))
      for (const c8 of Object.values(o9)) {
        const l7 = { namespace: c8.namespace, tablename: c8.tablename, primaryKey: $3(c8), tags: b6(c8.tags) };
        switch (c8.optype) {
          case p4.delete:
            n11.push(nt(c8, a5)), n11.push(this._deleteShadowTagsStatement(l7));
            break;
          default:
            n11.push(at(c8, a5)), n11.push(this._updateShadowTagsStatement(l7));
        }
      }
    return { tablenames: Object.keys(s7), statements: n11 };
  }
  async _getEntries(t3) {
    t3 === void 0 && (t3 = this._lastAckdRowId);
    const i8 = `
      SELECT * FROM ${this.opts.oplogTable.toString()}
        WHERE timestamp IS NOT NULL
          AND rowid > ?
        ORDER BY rowid ASC
    `;
    return await this.adapter.query({ sql: i8, args: [t3] });
  }
  _deleteShadowTagsStatement(t3) {
    return { sql: `
      DELETE FROM ${this.opts.shadowTable.toString()}
      WHERE namespace = ? AND
            tablename = ? AND
            primaryKey = ?;
    `, args: [t3.namespace, t3.tablename, t3.primaryKey] };
  }
  _updateShadowTagsStatement(t3) {
    return { sql: `
      INSERT or REPLACE INTO ${this.opts.shadowTable.toString()} (namespace, tablename, primaryKey, tags) VALUES
      (?, ?, ?, ?);
    `, args: [t3.namespace, t3.tablename, t3.primaryKey, t3.tags] };
  }
  _updateRelations(t3) {
    if (t3.tableType === ze.TABLE) {
      const e5 = t3.table;
      if (this.relations[e5] === void 0) {
        let i8 = 0;
        for (const n11 of Object.values(this.relations))
          n11.id > i8 && (i8 = n11.id);
        const s7 = { ...t3, id: i8 + 1 };
        this.relations[e5] = s7;
      } else {
        const i8 = this.relations[e5].id, s7 = { ...t3, id: i8 };
        this.relations[e5] = s7;
      }
    }
  }
  async _applyTransaction(t3) {
    const e5 = t3.origin, i8 = new Date(t3.commit_timestamp.toNumber()), s7 = [], n11 = [], r7 = /* @__PURE__ */ new Set();
    let a5 = /* @__PURE__ */ new Set();
    const o9 = [], c8 = t3.lsn;
    let l7 = true;
    s7.push({ sql: "PRAGMA defer_foreign_keys = ON" }), s7.push(this.updateLsnStmt(c8));
    const h8 = async (d8) => {
      const w5 = { ...t3, changes: d8 }, y6 = I3(w5, this.relations);
      l7 && (import_loglevel2.default.info(`apply incoming changes for LSN: ${b2.fromBytes(c8)}`), await this.mutexSnapshot(), l7 = false);
      const { statements: m10, tablenames: _6 } = await this._apply(y6, e5);
      y6.forEach((g9) => o9.push(g9)), m10.forEach((g9) => {
        s7.push(g9);
      }), _6.forEach((g9) => r7.add(g9));
    }, C9 = async (d8) => {
      const w5 = /* @__PURE__ */ new Set(), y6 = /* @__PURE__ */ new Map();
      d8.forEach((m10) => {
        const _6 = { sql: m10.sql };
        if (s7.push(_6), m10.migrationType === Xe.CREATE_TABLE || m10.migrationType === Xe.ALTER_ADD_COLUMN) {
          const g9 = m10.table.name;
          y6.set(g9, m10.table), r7.add(g9), m10.migrationType === Xe.CREATE_TABLE && w5.add(g9);
        }
      }), y6.forEach((m10) => {
        const _6 = rt2(m10);
        s7.push(..._6), n11.push(..._6);
      }), s7.push(...this._disableTriggers([...w5])), a5 = /* @__PURE__ */ new Set([...a5, ...w5]);
    };
    await this.maybeGarbageCollect(e5, i8);
    let E5 = [], R6 = [];
    const f6 = t3.changes;
    for (let d8 = 0; d8 < f6.length; d8++) {
      const w5 = f6[d8], y6 = (S6) => D3(S6) ? "DML" : "DDL", m10 = () => d8 == 0 || y6(f6[d8]) === y6(f6[d8 - 1]), _6 = (S6) => {
        D3(S6) ? E5.push(S6) : R6.push(S6);
      }, g9 = async (S6) => {
        S6 === "DML" ? (await h8(E5), E5 = []) : (await C9(R6), R6 = []);
      };
      if (_6(w5), !m10()) {
        const S6 = f6[d8 - 1];
        await g9(y6(S6));
      }
      if (d8 === f6.length - 1) {
        const S6 = f6[d8];
        await g9(y6(S6));
      }
    }
    const O5 = Array.from(r7), H5 = O5.filter((d8) => !a5.has(d8)), D7 = this._disableTriggers(H5).concat(s7).concat(this._enableTriggers(O5));
    t3.migrationVersion ? await this.migrator.applyIfNotAlready({ statements: D7, version: t3.migrationVersion }) : await this.adapter.runInTransaction(...D7), await this._notifyChanges(o9);
  }
  async maybeGarbageCollect(t3, e5) {
    t3 == this._authState.clientId && await this._garbageCollectOplog(e5);
  }
  _disableTriggers(t3) {
    return this._updateTriggerSettings(t3, 0);
  }
  _enableTriggers(t3) {
    return this._updateTriggerSettings(t3, 1);
  }
  _updateTriggerSettings(t3, e5) {
    const i8 = this.opts.triggersTable.toString();
    return t3.length > 0 ? [{ sql: `UPDATE ${i8} SET flag = ? WHERE ${t3.map(() => "tablename = ?").join(" OR ")}`, args: [e5, ...t3] }] : [];
  }
  async _ack(t3, e5) {
    if (t3 < this._lastAckdRowId || t3 > this._lastSentRowId && e5)
      throw new Error("Invalid position");
    const s7 = ` UPDATE ${this.opts.metaTable.toString()} SET value = ? WHERE key = ?`, n11 = [`${t3.toString()}`, e5 ? "lastAckdRowId" : "lastSentRowId"];
    e5 ? (this._lastAckdRowId = t3, await this.adapter.runInTransaction({ sql: s7, args: n11 })) : (this._lastSentRowId = t3, await this.adapter.run({ sql: s7, args: n11 }));
  }
  _setMetaStatement(t3, e5) {
    return { sql: `UPDATE ${this.opts.metaTable.toString()} SET value = ? WHERE key = ?`, args: [e5, t3] };
  }
  async _setMeta(t3, e5) {
    const i8 = this._setMetaStatement(t3, e5);
    await this.adapter.run(i8);
  }
  async _getMeta(t3) {
    const i8 = `SELECT value from ${this.opts.metaTable.toString()} WHERE key = ?`, s7 = [t3], n11 = await this.adapter.query({ sql: i8, args: s7 });
    if (n11.length !== 1)
      throw `Invalid metadata table: missing ${t3}`;
    return n11[0].value;
  }
  async _getClientId() {
    const t3 = "clientId";
    let e5 = await this._getMeta(t3);
    return e5 === "" && (e5 = A(), await this._setMeta(t3, e5)), e5;
  }
  async _getLocalTableNames() {
    const t3 = [this.opts.metaTable.tablename.toString(), this.opts.migrationsTable.tablename.toString(), this.opts.oplogTable.tablename.toString(), this.opts.triggersTable.tablename.toString(), this.opts.shadowTable.tablename.toString(), "sqlite_schema", "sqlite_sequence", "sqlite_temp_schema"], e5 = `
      SELECT name FROM sqlite_master
        WHERE type = 'table'
          AND name NOT IN (${t3.map(() => "?").join(",")})
    `;
    return await this.adapter.query({ sql: e5, args: t3 });
  }
  async _getLocalRelations() {
    const t3 = await this._getLocalTableNames(), e5 = {};
    let i8 = 0;
    const s7 = "public";
    for (const n11 of t3) {
      const r7 = n11.name, a5 = "SELECT * FROM pragma_table_info(?)", o9 = [r7], c8 = await this.adapter.query({ sql: a5, args: o9 });
      if (c8.length == 0)
        continue;
      const l7 = { id: i8++, schema: s7, table: r7, tableType: ze.TABLE, columns: [] };
      for (const h8 of c8)
        l7.columns.push({ name: h8.name.toString(), type: h8.type.toString(), isNullable: !h8.notnull.valueOf(), primaryKey: !!h8.pk.valueOf() });
      e5[`${r7}`] = l7;
    }
    return Promise.resolve(e5);
  }
  _generateTag(t3) {
    const e5 = this._authState.clientId;
    return B3(e5, t3);
  }
  async _garbageCollectOplog(t3) {
    const e5 = t3.toISOString(), s7 = `
      DELETE FROM ${this.opts.oplogTable.tablename.toString()}
      WHERE timestamp = ?;
    `;
    await this.adapter.run({ sql: s7, args: [e5] });
  }
  updateLsnStmt(t3) {
    this._lsn = t3;
    const e5 = b2.fromBytes(t3);
    return { sql: `UPDATE ${this.opts.metaTable.tablename} set value = ? WHERE key = ?`, args: [e5, "lsn"] };
  }
  async checkMaxSqlParameters() {
    const [{ version: t3 }] = await this.adapter.query({ sql: "SELECT sqlite_version() AS version" }), [e5, i8, s7] = t3.split(".").map((n11) => parseInt(n11));
    e5 === 3 && i8 >= 32 ? this.maxSqlParameters = 32766 : this.maxSqlParameters = 999;
  }
};
function nt(u8, t3) {
  const e5 = Object.entries(u8.primaryKeyCols);
  if (e5.length === 0)
    throw new Error("Can't apply delete operation. None of the columns in changes are marked as PK.");
  const i8 = e5.reduce((s7, [n11, r7]) => (s7.where.push(`${n11} = ?`), s7.values.push(r7), s7), { where: [], values: [] });
  return { sql: `DELETE FROM ${t3} WHERE ${i8.where.join(" AND ")}`, args: i8.values };
}
function at({ fullRow: u8, primaryKeyCols: t3 }, e5) {
  const i8 = Object.keys(u8), s7 = Object.values(u8);
  let n11 = `INTO ${e5}(${i8.join(", ")}) VALUES (${s7.map((a5) => "?").join(",")})`;
  const r7 = i8.filter((a5) => !(a5 in t3)).reduce((a5, o9) => (a5.where.push(`${o9} = ?`), a5.values.push(u8[o9]), a5), { where: [], values: [] });
  return r7.values.length > 0 ? (n11 = `
                INSERT ${n11} 
                ON CONFLICT DO UPDATE SET ${r7.where.join(", ")}
              `, s7.push(...r7.values)) : n11 = `INSERT OR IGNORE ${n11}`, { sql: n11, args: s7 };
}
function rt2(u8) {
  const t3 = { tableName: u8.name, namespace: "main", columns: u8.columns.map((i8) => i8.name), primary: u8.pks, foreignKeys: u8.fks.map((i8) => {
    if (i8.fkCols.length !== 1 || i8.pkCols.length !== 1)
      throw new Error("Satellite does not yet support compound foreign keys.");
    return { table: i8.pkTable, childKey: i8.fkCols[0], parentKey: i8.pkCols[0] };
  }) }, e5 = t3.namespace + "." + t3.tableName;
  return $4(e5, t3);
}

// node_modules/electric-sql/dist/migrators/builder.js
var g7 = objectType({ format: stringType(), ops: stringType().array(), protocol_version: stringType(), version: stringType() }).strict();
var n3 = O2();

// node_modules/electric-sql/dist/migrators/index.js
function o4(t3) {
  return { ...t3, statements: t3.statements.map((r7) => ({ sql: r7 })) };
}

// node_modules/electric-sql/dist/notifiers/event.js
var import_events2 = __toESM(require_events(), 1);
var import_loglevel3 = __toESM(require_loglevel(), 1);
var n5 = { authChange: "auth:changed", actualDataChange: "data:actually:changed", potentialDataChange: "data:potentially:changed", connectivityStateChange: "network:connectivity:changed" };
var o6 = new import_events2.EventEmitter();
o6.setMaxListeners(250);
var Q2 = class {
  dbName;
  attachedDbIndex;
  events;
  _changeCallbacks;
  _connectivityStatusCallbacks;
  constructor(t3, a5) {
    this.dbName = t3, this.attachedDbIndex = { byAlias: {}, byName: {} }, this.events = a5 !== void 0 ? a5 : o6, this._changeCallbacks = {}, this._connectivityStatusCallbacks = {};
  }
  attach(t3, a5) {
    const e5 = this.attachedDbIndex;
    e5.byAlias[a5] = t3, e5.byName[t3] = a5;
  }
  detach(t3) {
    const a5 = this.attachedDbIndex;
    if (t3 in a5.byAlias) {
      const e5 = a5.byAlias[t3];
      delete a5.byAlias[t3], delete a5.byName[e5];
    }
  }
  alias({ dbName: t3, changes: a5 }) {
    const e5 = this.attachedDbIndex, s7 = this.dbName;
    return a5.map(({ qualifiedTablename: i8 }) => {
      if (t3 === s7)
        return i8;
      const h8 = e5.byName[t3];
      if (h8 !== void 0)
        return i8.namespace = h8, i8;
    }).filter((i8) => i8 !== void 0);
  }
  authStateChanged(t3) {
    this._emitAuthStateChange(t3);
  }
  subscribeToAuthStateChanges(t3) {
    const a5 = n();
    return this._changeCallbacks[a5] = t3, this._subscribe(n5.authChange, t3), a5;
  }
  unsubscribeFromAuthStateChanges(t3) {
    const a5 = this._changeCallbacks[t3];
    a5 !== void 0 && (this._unsubscribe(n5.authChange, a5), delete this._changeCallbacks[t3]);
  }
  potentiallyChanged() {
    const t3 = this._getDbNames(), a5 = this._emitPotentialChange.bind(this);
    t3.forEach(a5);
  }
  actuallyChanged(t3, a5) {
    import_loglevel3.default.info("actually changed notifier"), this._hasDbName(t3) && this._emitActualChange(t3, a5);
  }
  subscribeToPotentialDataChanges(t3) {
    const a5 = n(), e5 = this._hasDbName.bind(this), s7 = (i8) => {
      e5(i8.dbName) && t3(i8);
    };
    return this._changeCallbacks[a5] = s7, this._subscribe(n5.potentialDataChange, s7), a5;
  }
  unsubscribeFromPotentialDataChanges(t3) {
    const a5 = this._changeCallbacks[t3];
    a5 !== void 0 && (this._unsubscribe(n5.potentialDataChange, a5), delete this._changeCallbacks[t3]);
  }
  subscribeToDataChanges(t3) {
    const a5 = n(), e5 = this._hasDbName.bind(this), s7 = (i8) => {
      e5(i8.dbName) && t3(i8);
    };
    return this._changeCallbacks[a5] = s7, this._subscribe(n5.actualDataChange, s7), a5;
  }
  unsubscribeFromDataChanges(t3) {
    const a5 = this._changeCallbacks[t3];
    a5 !== void 0 && (this._unsubscribe(n5.actualDataChange, a5), delete this._changeCallbacks[t3]);
  }
  connectivityStateChanged(t3, a5) {
    this._hasDbName(t3) && this._emitConnectivityStatus(t3, a5);
  }
  subscribeToConnectivityStateChanges(t3) {
    const a5 = n(), e5 = this._hasDbName.bind(this), s7 = (i8) => {
      e5(i8.dbName) && t3(i8);
    };
    return this._connectivityStatusCallbacks[a5] = s7, this._subscribe(n5.connectivityStateChange, s7), a5;
  }
  unsubscribeFromConnectivityStateChanges(t3) {
    const a5 = this._connectivityStatusCallbacks[t3];
    a5 !== void 0 && (this._unsubscribe(n5.connectivityStateChange, a5), delete this._changeCallbacks[t3]);
  }
  _getDbNames() {
    const t3 = this.attachedDbIndex;
    return [this.dbName, ...Object.keys(t3.byName)];
  }
  _hasDbName(t3) {
    const a5 = this.attachedDbIndex;
    return t3 === this.dbName || t3 in a5.byName;
  }
  _emitAuthStateChange(t3) {
    const a5 = { authState: t3 };
    return this._emit(n5.authChange, a5), a5;
  }
  _emitPotentialChange(t3) {
    const a5 = { dbName: t3 };
    return this._emit(n5.potentialDataChange, a5), a5;
  }
  _emitActualChange(t3, a5) {
    const e5 = { dbName: t3, changes: a5 };
    return this._emit(n5.actualDataChange, e5), e5;
  }
  _emitConnectivityStatus(t3, a5) {
    const e5 = { dbName: t3, connectivityState: a5 };
    return this._emit(n5.connectivityStateChange, e5), e5;
  }
  _emit(t3, a5) {
    this.events.emit(t3, a5);
  }
  _subscribe(t3, a5) {
    this.events.addListener(t3, a5);
  }
  _unsubscribe(t3, a5) {
    this.events.removeListener(t3, a5);
  }
};

// node_modules/electric-sql/dist/satellite/client.js
var import_lodash2 = __toESM(require_lodash(), 1);
var import_minimal2 = __toESM(require_minimal2(), 1);
var import_events4 = __toESM(require_events(), 1);
var import_loglevel4 = __toESM(require_loglevel(), 1);
var import_lodash3 = __toESM(require_lodash2(), 1);

// node_modules/electric-sql/dist/satellite/shapes/types.js
var o7 = "subscription_delivered";
var p7 = "subscription_error";

// node_modules/electric-sql/dist/satellite/shapes/cache.js
var import_events3 = __toESM(require_events(), 1);
var q5 = class extends import_events3.default {
  requestedSubscriptions;
  remainingShapes;
  currentShapeRequestId;
  inDelivery;
  constructor() {
    super(), this.requestedSubscriptions = {}, this.remainingShapes = /* @__PURE__ */ new Set();
  }
  isDelivering() {
    return this.inDelivery != null;
  }
  subscriptionRequest(e5) {
    const { subscriptionId: i8, shapeRequests: r7 } = e5, s7 = new Set(r7.map((n11) => n11.requestId));
    this.requestedSubscriptions[i8] = s7;
  }
  subscriptionResponse({ subscriptionId: e5 }) {
    this.requestedSubscriptions[e5] || this.internalError(_2.UNEXPECTED_SUBSCRIPTION_STATE, `Received subscribe response for unknown subscription ${e5}`, e5);
  }
  subscriptionDataBegin({ subscriptionId: e5, lsn: i8 }) {
    this.requestedSubscriptions[e5] || this.internalError(_2.UNEXPECTED_SUBSCRIPTION_STATE, `Received SatSubsDataBegin but for unknown subscription ${e5}`, e5), this.inDelivery && this.internalError(_2.UNEXPECTED_SUBSCRIPTION_STATE, `received SatSubsDataStart for subscription ${e5} but a subscription (${this.inDelivery.subscriptionId}) is already being delivered`, e5), this.remainingShapes = this.requestedSubscriptions[e5], this.inDelivery = { subscriptionId: e5, lsn: i8, transaction: [], shapeReqToUuid: {} };
  }
  subscriptionDataEnd(e5) {
    this.inDelivery || this.internalError(_2.UNEXPECTED_SUBSCRIPTION_STATE, "Received SatSubDataEnd but no subscription is being delivered"), this.remainingShapes.size > 0 && this.internalError(_2.UNEXPECTED_SUBSCRIPTION_STATE, "Received SatSubDataEnd but not all shapes have been delivered");
    const i8 = this.inDelivery, r7 = { subscriptionId: i8.subscriptionId, lsn: i8.lsn, data: i8.transaction.map((s7) => this.proccessShapeDataOperations(s7, e5)), shapeReqToUuid: i8.shapeReqToUuid };
    return this.reset(r7.subscriptionId), this.emit(o7, r7), i8;
  }
  shapeDataBegin(e5) {
    this.inDelivery || this.internalError(_2.UNEXPECTED_SUBSCRIPTION_STATE, "Received SatShapeDataBegin but no subscription is being delivered"), this.remainingShapes.size == 0 && this.internalError(_2.UNEXPECTED_SUBSCRIPTION_STATE, "Received SatShapeDataBegin but all shapes have been delivered for this subscription"), this.currentShapeRequestId && this.internalError(_2.UNEXPECTED_SUBSCRIPTION_STATE, `Received SatShapeDataBegin for shape with uuid ${e5.uuid} but a shape is already being delivered`), this.inDelivery.shapeReqToUuid[e5.requestId] && this.internalError(_2.UNEXPECTED_SUBSCRIPTION_STATE, `Received SatShapeDataBegin for shape with uuid ${e5.uuid} but shape has already been delivered`), this.inDelivery.shapeReqToUuid[e5.requestId] = e5.uuid, this.currentShapeRequestId = e5.requestId;
  }
  shapeDataEnd() {
    this.inDelivery || this.internalError(_2.UNEXPECTED_SUBSCRIPTION_STATE, "Received SatShapeDataEnd but no subscription is being delivered"), this.currentShapeRequestId || this.internalError(_2.UNEXPECTED_SUBSCRIPTION_STATE, "Received SatShapeDataEnd but no shape is being delivered"), this.remainingShapes.delete(this.currentShapeRequestId), this.currentShapeRequestId = void 0;
  }
  transaction(e5) {
    (this.remainingShapes.size == 0 || !this.inDelivery || !this.currentShapeRequestId) && this.internalError(_2.UNEXPECTED_SUBSCRIPTION_STATE, "Received SatOpLog but no shape is being delivered");
    for (const i8 of e5)
      (i8.begin || i8.commit || i8.update || i8.delete) && this.internalError(_2.UNEXPECTED_MESSAGE_TYPE, "Received begin, commit, update or delete message, but these messages are not valid in subscriptions"), this.inDelivery.transaction.push(i8);
  }
  internalError(e5, i8, r7 = this.inDelivery?.subscriptionId) {
    this.reset(r7);
    const s7 = new x4(e5, i8);
    throw this.emit(p7, s7), s7;
  }
  subscriptionError(e5) {
    this.requestedSubscriptions[e5] || this.internalError(_2.SUBSCRIPTION_NOT_FOUND, `received subscription error for unknown subscription ${e5}`, e5), this.reset(e5);
  }
  subscriptionDataError(e5, i8) {
    let r7 = j2(i8);
    throw this.inDelivery || (r7 = new x4(_2.UNEXPECTED_SUBSCRIPTION_STATE, `received subscription data error, but no subscription is being delivered: ${r7.message}`)), this.reset(e5), this.emit(p7, i8.subscriptionId, r7), r7;
  }
  reset(e5) {
    e5 && delete this.requestedSubscriptions[e5], e5 === this.inDelivery?.subscriptionId && (this.remainingShapes = /* @__PURE__ */ new Set(), this.currentShapeRequestId = void 0, this.inDelivery = void 0);
  }
  proccessShapeDataOperations(e5, i8) {
    e5.insert || this.internalError(_2.UNEXPECTED_MESSAGE_TYPE, "invalid shape data operation");
    const { relationId: r7, rowData: s7, tags: n11 } = e5.insert, a5 = i8.get(r7);
    a5 || this.internalError(_2.PROTOCOL_VIOLATION, `missing relation ${r7} for incoming operation`);
    const o9 = m8(s7, a5);
    return o9 || this.internalError(_2.PROTOCOL_VIOLATION, "INSERT operations has no data"), { relation: a5, record: o9, tags: n11 };
  }
};

// node_modules/electric-sql/dist/satellite/client.js
var rt3 = [_2.UNEXPECTED_SUBSCRIPTION_STATE, _2.SUBSCRIPTION_ERROR, _2.SUBSCRIPTION_ALREADY_EXISTS, _2.SUBSCRIPTION_ID_ALREADY_EXISTS, _2.SUBSCRIPTION_NOT_FOUND, _2.SHAPE_DELIVERY_ERROR];
var ce2 = class extends import_events4.EventEmitter {
  opts;
  socketFactory;
  socket;
  inbound;
  outbound;
  subscriptionsDataCache;
  socketHandler;
  throttledPushTransaction;
  handlerForMessageType = Object.fromEntries(Object.entries({ SatAuthResp: { handle: (t3) => this.handleAuthResp(t3), isRpc: true }, SatInStartReplicationResp: { handle: (t3) => this.handleStartResp(t3), isRpc: true }, SatInStartReplicationReq: { handle: (t3) => this.handleStartReq(t3), isRpc: false }, SatInStopReplicationReq: { handle: () => this.handleStopReq(), isRpc: false }, SatInStopReplicationResp: { handle: () => this.handleStopResp(), isRpc: true }, SatPingReq: { handle: () => this.handlePingReq(), isRpc: true }, SatPingResp: { handle: (t3) => this.handlePingResp(t3), isRpc: false }, SatRelation: { handle: (t3) => this.handleRelation(t3), isRpc: false }, SatOpLog: { handle: (t3) => this.handleTransaction(t3), isRpc: false }, SatErrorResp: { handle: (t3) => this.handleError(t3), isRpc: false }, SatSubsResp: { handle: (t3) => this.handleSubscription(t3), isRpc: true }, SatSubsDataError: { handle: (t3) => this.handleSubscriptionError(t3), isRpc: false }, SatSubsDataBegin: { handle: (t3) => this.handleSubscriptionDataBegin(t3), isRpc: false }, SatSubsDataEnd: { handle: (t3) => this.handleSubscriptionDataEnd(t3), isRpc: false }, SatShapeDataBegin: { handle: (t3) => this.handleShapeDataBegin(t3), isRpc: false }, SatShapeDataEnd: { handle: (t3) => this.handleShapeDataEnd(t3), isRpc: false }, SatUnsubsResp: { handle: (t3) => this.handleUnsubscribeResponse(t3), isRpc: true } }).map((t3) => [_3(t3[0]), t3[1]]));
  constructor(t3, i8, e5, s7) {
    super(), this.opts = { ...s3, ...s7 }, this.socketFactory = i8, this.inbound = this.resetReplication(), this.outbound = this.resetReplication(), this.subscriptionsDataCache = new q5();
  }
  resetReplication(t3, i8, e5) {
    return { authenticated: false, isReplicating: e5 || a3.STOPPED, relations: /* @__PURE__ */ new Map(), ack_lsn: i8, enqueued_lsn: t3, transactions: [] };
  }
  async connect() {
    return this.isClosed() || this.close(), new Promise((t3, i8) => {
      this.socket = this.socketFactory.create();
      const e5 = (d8) => {
        this.close(), i8(d8);
      }, s7 = () => {
        if (!this.socket)
          throw new x4(_2.UNEXPECTED_STATE, "socket got unassigned somehow");
        this.socket.removeErrorListener(e5), this.socketHandler = (d8) => this.handleIncoming(d8), this.socket.onMessage(this.socketHandler), this.socket.onError((d8) => {
          this.listenerCount("error") === 0 && (this.close(), import_loglevel4.default.error(`socket error but no listener is attached: ${d8.message}`)), this.emit("error", d8);
        }), this.socket.onClose(() => {
          this.close(), this.listenerCount("error") === 0 && import_loglevel4.default.error("socket closed but no listener is attached"), this.emit("error", new x4(_2.SOCKET_ERROR, "socket closed"));
        }), t3();
      };
      this.socket.onceError(e5), this.socket.onceConnect(s7);
      const { host: n11, port: a5, ssl: o9 } = this.opts, u8 = `${o9 ? "wss" : "ws"}://${n11}:${a5}/ws`;
      this.socket.open({ url: u8 });
    });
  }
  close() {
    this.outbound = this.resetReplication(this.outbound.enqueued_lsn, this.outbound.ack_lsn), this.inbound = this.resetReplication(this.inbound.enqueued_lsn, this.inbound.ack_lsn), this.socketHandler = void 0, this.socket !== void 0 && (this.socket.closeAndRemoveListeners(), this.socket = void 0);
  }
  isClosed() {
    return !this.socketHandler;
  }
  startReplication(t3, i8, e5) {
    if (this.inbound.isReplicating !== a3.STOPPED)
      return Promise.reject(new x4(_2.REPLICATION_ALREADY_STARTED, "replication already started"));
    let s7;
    if (!t3 || t3.length == 0) {
      if (import_loglevel4.default.info("no previous LSN, start replication from scratch"), e5 && e5.length > 0)
        return Promise.reject(new x4(_2.UNEXPECTED_SUBSCRIPTION_STATE, "Cannot start replication with subscription IDs but without previous LSN."));
      s7 = w.fromPartial({ schemaVersion: i8 });
    } else
      import_loglevel4.default.info(`starting replication with lsn: ${b2.fromBytes(t3)} subscriptions: ${e5}`), s7 = w.fromPartial({ lsn: t3, subscriptionIds: e5 });
    return this.inbound = this.resetReplication(t3, t3, a3.STARTING), this.rpc(s7);
  }
  stopReplication() {
    if (this.inbound.isReplicating !== a3.ACTIVE)
      return Promise.reject(new x4(_2.REPLICATION_NOT_STARTED, "replication not active"));
    this.inbound.isReplicating = a3.STOPPING;
    const t3 = L.fromPartial({});
    return this.rpc(t3);
  }
  authenticate({ clientId: t3, token: i8 }) {
    const e5 = [d2.fromPartial({ key: Ke.PROTO_VERSION, value: O2() })], s7 = M.fromPartial({ id: t3, token: i8, headers: e5 });
    return this.rpc(s7);
  }
  subscribeToTransactions(t3) {
    this.on("transaction", async (i8, e5) => {
      await t3(i8), e5();
    });
  }
  subscribeToRelations(t3) {
    this.on("relation", t3);
  }
  enqueueTransaction(t3) {
    if (this.outbound.isReplicating !== a3.ACTIVE)
      throw new x4(_2.REPLICATION_NOT_STARTED, "enqueuing a transaction while outbound replication has not started");
    this.outbound.transactions.push(t3), this.outbound.enqueued_lsn = t3.lsn, this.throttledPushTransaction && this.throttledPushTransaction();
  }
  pushTransactions() {
    if (this.outbound.isReplicating !== a3.ACTIVE)
      throw new x4(_2.REPLICATION_NOT_STARTED, "sending a transaction while outbound replication has not started");
    let t3;
    for (; t3 = this.outbound.transactions.shift(); ) {
      this.sendMissingRelations(t3, this.outbound);
      const i8 = this.transactionToSatOpLog(t3);
      this.sendMessage(i8), this.emit("ack_lsn", t3.lsn, g3.LOCAL_SEND);
    }
  }
  subscribeToError(t3) {
    this.on("error", t3);
  }
  unsubscribeToError(t3) {
    this.removeListener("error", t3);
  }
  subscribeToAck(t3) {
    this.on("ack_lsn", t3);
  }
  unsubscribeToAck(t3) {
    this.removeListener("ack_lsn", t3);
  }
  subscribeToOutboundEvent(t3, i8) {
    this.on("outbound_started", i8);
  }
  unsubscribeToOutboundEvent(t3, i8) {
    this.removeListener("outbound_started", i8);
  }
  subscribeToSubscriptionEvents(t3, i8) {
    this.subscriptionsDataCache.on(o7, t3), this.subscriptionsDataCache.on(p7, i8);
  }
  unsubscribeToSubscriptionEvents(t3, i8) {
    this.subscriptionsDataCache.removeListener(o7, t3), this.subscriptionsDataCache.removeListener(p7, i8);
  }
  async subscribe(t3, i8) {
    if (this.inbound.isReplicating !== a3.ACTIVE)
      return Promise.reject(new x4(_2.REPLICATION_NOT_STARTED, "replication not active"));
    const e5 = Z.fromPartial({ subscriptionId: t3, shapeRequests: G2(i8) });
    return this.subscriptionsDataCache.subscriptionRequest(e5), this.rpc(e5, "subscriptionId");
  }
  unsubscribe(t3) {
    if (this.inbound.isReplicating !== a3.ACTIVE)
      return Promise.reject(new x4(_2.REPLICATION_NOT_STARTED, "replication not active"));
    const i8 = z.fromPartial({ subscriptionIds: t3 });
    return this.rpc(i8);
  }
  sendMissingRelations(t3, i8) {
    t3.changes.forEach((e5) => {
      const s7 = e5.relation;
      if (!this.outbound.relations.has(s7.id) || !(0, import_lodash3.default)(this.outbound.relations.get(s7.id), s7)) {
        i8.relations.set(s7.id, s7);
        const n11 = V.fromPartial({ relationId: s7.id, schemaName: s7.schema, tableName: s7.table, tableType: s7.tableType, columns: s7.columns.map((a5) => m4.fromPartial({ name: a5.name, type: a5.type, isNullable: a5.isNullable })) });
        this.sendMessage(n11);
      }
    });
  }
  transactionToSatOpLog(t3) {
    const i8 = [I.fromPartial({ begin: { commitTimestamp: t3.commit_timestamp.toString(), lsn: t3.lsn } })];
    return t3.changes.forEach((e5) => {
      let s7, n11, a5;
      const o9 = this.outbound.relations.get(e5.relation.id), u8 = e5.tags;
      switch (e5.oldRecord && (n11 = A4(e5.oldRecord, o9)), e5.record && (a5 = A4(e5.record, o9)), e5.type) {
        case I2.DELETE:
          s7 = I.fromPartial({ delete: { oldRowData: n11, relationId: o9.id, tags: u8 } });
          break;
        case I2.INSERT:
          s7 = I.fromPartial({ insert: { rowData: a5, relationId: o9.id, tags: u8 } });
          break;
        case I2.UPDATE:
          s7 = I.fromPartial({ update: { rowData: a5, oldRowData: n11, relationId: o9.id, tags: u8 } });
          break;
      }
      i8.push(s7);
    }), i8.push(I.fromPartial({ commit: {} })), K2.fromPartial({ ops: i8 });
  }
  handleAuthResp(t3) {
    let i8, e5;
    return t3.$type == B.$type ? (e5 = t3.id, this.inbound.authenticated = true) : i8 = new x4(_2.AUTH_ERROR, "An internal error occurred during authentication"), { serverId: e5, error: i8 };
  }
  handleStartResp(t3) {
    if (this.inbound.isReplicating == a3.STARTING) {
      if (t3.err)
        return this.inbound.isReplicating = a3.STOPPED, { error: m5(t3.err) };
      this.inbound.isReplicating = a3.ACTIVE;
    } else
      return { error: new x4(_2.UNEXPECTED_STATE, `unexpected state ${this.inbound.isReplicating} handling 'start' response`) };
    return {};
  }
  handleStartReq(t3) {
    if (import_loglevel4.default.info(`received replication request ${JSON.stringify(t3)}`), this.outbound.isReplicating == a3.STOPPED) {
      const i8 = { ...this.outbound, ack_lsn: T2, enqueued_lsn: T2 };
      this.outbound = this.resetReplication(i8.enqueued_lsn, i8.ack_lsn, a3.ACTIVE);
      const e5 = { leading: true, trailing: true };
      this.throttledPushTransaction = (0, import_lodash2.default)(() => this.pushTransactions(), this.opts.pushPeriod, e5);
      const s7 = C2.fromPartial({});
      this.sendMessage(s7), this.emit("outbound_started", i8.enqueued_lsn);
    } else {
      const i8 = N.fromPartial({ errorType: Fe.REPLICATION_FAILED });
      this.sendMessage(i8), this.emit("error", new x4(_2.UNEXPECTED_STATE, `unexpected state ${this.outbound.isReplicating} handling 'start' request`));
    }
  }
  handleStopReq() {
    if (this.outbound.isReplicating == a3.ACTIVE) {
      this.outbound.isReplicating = a3.STOPPED, this.throttledPushTransaction && (this.throttledPushTransaction = void 0);
      const t3 = H3.fromPartial({});
      this.sendMessage(t3);
    } else {
      const t3 = N.fromPartial({ errorType: Fe.REPLICATION_FAILED });
      this.sendMessage(t3), this.emit("error", new x4(_2.UNEXPECTED_STATE, `unexpected state ${this.inbound.isReplicating} handling 'stop' request`));
    }
  }
  handleStopResp() {
    return this.inbound.isReplicating == a3.STOPPING ? (this.inbound.isReplicating = a3.STOPPED, {}) : { error: new x4(_2.UNEXPECTED_STATE, `unexpected state ${this.inbound.isReplicating} handling 'stop' response`) };
  }
  handleRelation(t3) {
    if (this.inbound.isReplicating !== a3.ACTIVE) {
      this.emit("error", new x4(_2.UNEXPECTED_STATE, `unexpected state ${this.inbound.isReplicating} handling 'relation' message`));
      return;
    }
    const i8 = { id: t3.relationId, schema: t3.schemaName, table: t3.tableName, tableType: t3.tableType, columns: t3.columns.map((e5) => ({ name: e5.name, type: e5.type, isNullable: e5.isNullable, primaryKey: e5.primaryKey })) };
    this.inbound.relations.set(i8.id, i8), this.emit("relation", i8);
  }
  handleTransaction(t3) {
    if (!this.subscriptionsDataCache.isDelivering())
      this.processOpLogMessage(t3);
    else
      try {
        this.subscriptionsDataCache.transaction(t3.ops);
      } catch (i8) {
        import_loglevel4.default.info(`Error applying transaction message for subs ${JSON.stringify(i8)}`);
      }
  }
  handlePingReq() {
    import_loglevel4.default.info(`respond to ping with last ack ${this.inbound.ack_lsn ? b2.fromBytes(this.inbound.ack_lsn) : "NULL"}`);
    const t3 = A2.fromPartial({ lsn: this.inbound.ack_lsn });
    this.sendMessage(t3);
  }
  handlePingResp(t3) {
    t3.lsn && (this.outbound.ack_lsn = t3.lsn, this.emit("ack_lsn", t3.lsn, g3.REMOTE_COMMIT));
  }
  handleError(t3) {
    this.emit("error", x5(t3));
  }
  handleSubscription(t3) {
    if (t3.err) {
      const i8 = V2(t3.err);
      return this.subscriptionsDataCache.subscriptionError(t3.subscriptionId), { subscriptionId: t3.subscriptionId, error: i8 };
    } else
      return this.subscriptionsDataCache.subscriptionResponse(t3), { subscriptionId: t3.subscriptionId };
  }
  handleSubscriptionError(t3) {
    this.subscriptionsDataCache.subscriptionDataError(t3.subscriptionId, t3);
  }
  handleSubscriptionDataBegin(t3) {
    this.subscriptionsDataCache.subscriptionDataBegin(t3);
  }
  handleSubscriptionDataEnd(t3) {
    this.subscriptionsDataCache.subscriptionDataEnd(this.inbound.relations);
  }
  handleShapeDataBegin(t3) {
    this.subscriptionsDataCache.shapeDataBegin(t3);
  }
  handleShapeDataEnd(t3) {
    this.subscriptionsDataCache.shapeDataEnd();
  }
  handleUnsubscribeResponse(t3) {
    return {};
  }
  handleIncoming(t3) {
    let i8 = false;
    try {
      const e5 = ut(t3);
      import_loglevel4.default.getLevel() <= 1 && import_loglevel4.default.debug(`[proto] recv: ${K3(e5)}`);
      const s7 = this.handlerForMessageType[e5.$type], n11 = s7.handle(e5);
      (i8 = s7.isRpc) && this.emit("rpc_response", n11);
    } catch (e5) {
      if (e5 instanceof x4)
        i8 ? this.emit("rpc_error", e5) : rt3.includes(e5.code) || this.emit("error", e5);
      else
        throw e5;
    }
  }
  processOpLogMessage(t3) {
    const i8 = this.inbound;
    t3.ops.map((e5) => {
      if (e5.begin) {
        const n11 = { commit_timestamp: e5.begin.commitTimestamp, lsn: e5.begin.lsn, changes: [], origin: e5.begin.origin };
        i8.transactions.push(n11);
      }
      const s7 = i8.transactions.length - 1;
      if (e5.commit) {
        const { commit_timestamp: n11, lsn: a5, changes: o9, origin: u8 } = i8.transactions[s7], d8 = { commit_timestamp: n11, lsn: a5, changes: o9, origin: u8 };
        this.emit("transaction", d8, () => this.inbound.ack_lsn = d8.lsn), i8.transactions.splice(s7);
      }
      if (e5.insert) {
        const n11 = e5.insert.relationId, a5 = i8.relations.get(n11);
        if (!a5)
          throw new x4(_2.PROTOCOL_VIOLATION, `missing relation ${e5.insert.relationId} for incoming operation`);
        const o9 = { relation: a5, type: I2.INSERT, record: m8(e5.insert.rowData, a5), tags: e5.insert.tags };
        i8.transactions[s7].changes.push(o9);
      }
      if (e5.update) {
        const n11 = e5.update.relationId, a5 = i8.relations.get(n11);
        if (!a5)
          throw new x4(_2.PROTOCOL_VIOLATION, "missing relation for incoming operation");
        const o9 = { relation: a5, type: I2.UPDATE, record: m8(e5.update.rowData, a5), oldRecord: m8(e5.update.oldRowData, a5), tags: e5.update.tags };
        i8.transactions[s7].changes.push(o9);
      }
      if (e5.delete) {
        const n11 = e5.delete.relationId, a5 = i8.relations.get(n11);
        if (!a5)
          throw new x4(_2.PROTOCOL_VIOLATION, "missing relation for incoming operation");
        const o9 = { relation: a5, type: I2.DELETE, oldRecord: m8(e5.delete.oldRowData, a5), tags: e5.delete.tags };
        i8.transactions[s7].changes.push(o9);
      }
      if (e5.migrate) {
        const n11 = i8.transactions[s7];
        n11.migrationVersion = e5.migrate.version, e5.migrate.stmts.forEach((o9) => {
          const u8 = { table: e5.migrate.table, migrationType: o9.type, sql: o9.sql };
          n11.changes.push(u8);
        });
      }
    });
  }
  sendMessage(t3) {
    if (import_loglevel4.default.getLevel() <= 1 && import_loglevel4.default.debug(`[proto] send: ${K3(t3)}`), !this.socket || this.isClosed())
      throw new x4(_2.UNEXPECTED_STATE, "trying to send message, but client is closed");
    const i8 = w2(t3.$type);
    if (i8 == null)
      throw new x4(_2.UNEXPECTED_MESSAGE_TYPE, `${t3.$type})`);
    const e5 = H4(t3), s7 = i8.encode(t3, import_minimal2.default.Writer.create()).finish(), n11 = new Uint8Array(e5.length + s7.length);
    n11.set(e5, 0), n11.set(s7, 1), this.socket.write(n11);
  }
  async rpc(t3, i8) {
    let e5;
    return new Promise((s7, n11) => {
      e5 = setTimeout(() => {
        import_loglevel4.default.error(`${t3.$type}`);
        const o9 = new x4(_2.TIMEOUT, `${t3.$type}`);
        return n11(o9);
      }, this.opts.timeout);
      const a5 = (o9) => n11(o9);
      if (this.once("rpc_error", a5), i8) {
        const o9 = (u8) => {
          if (u8[i8] === t3[i8])
            return this.removeListener("rpc_error", a5), s7(u8);
          this.once("rpc_response", o9);
        };
        this.once("rpc_response", o9);
      } else
        this.once("rpc_response", (o9) => {
          this.removeListener("rpc_error", a5), s7(o9);
        });
      this.sendMessage(t3);
    }).finally(() => clearTimeout(e5));
  }
  resetOutboundLogPositions(t3, i8) {
    this.outbound = this.resetReplication(t3, i8);
  }
  getOutboundLogPositions() {
    return { ack: this.outbound.ack_lsn ?? T2, enqueued: this.outbound.enqueued_lsn ?? T2 };
  }
};
function A4(l7, t3) {
  let i8 = 0;
  const e5 = new Uint8Array(ot(t3.columns.length)), s7 = t3.columns.reduce((n11, a5) => (l7[a5.name] != null ? n11.push(lt(l7[a5.name])) : (n11.push(pt()), i6(e5, i8)), i8 = i8 + 1, n11), []);
  return p.fromPartial({ nullsBitmask: e5, values: s7 });
}
function m8(l7, t3) {
  if (l7 != null)
    return Object.fromEntries(t3.columns.map((i8, e5) => {
      let s7;
      return b5(l7.nullsBitmask, e5) == 1 ? s7 = null : s7 = ct(l7.values[e5], i8), [i8.name, s7];
    }));
}
function ot(l7) {
  const t3 = l7 % 8;
  return t3 == 0 ? l7 / 8 : 1 + (l7 - t3) / 8;
}
function ct(l7, t3) {
  switch (t3.type.toUpperCase()) {
    case "CHAR":
    case "TEXT":
    case "UUID":
    case "VARCHAR":
      return x2.text(l7);
    case "FLOAT4":
    case "FLOAT8":
    case "INT":
    case "INT2":
    case "INT4":
    case "INT8":
    case "INTEGER":
      return Number(x2.text(l7));
  }
  throw new x4(_2.UNKNOWN_DATA_TYPE, `can't deserialize ${t3.type}`);
}
function lt(l7) {
  return v2.text(l7);
}
function pt() {
  return v2.text("");
}
function ut(l7) {
  const t3 = l7[0], i8 = B2(t3), e5 = w2(i8);
  if (e5 == null)
    throw new x4(_2.UNEXPECTED_MESSAGE_TYPE, `${t3})`);
  return e5.decode(l7.subarray(1));
}

// node_modules/electric-sql/dist/satellite/registry.js
var C6 = class {
  satellites;
  startingPromises;
  stoppingPromises;
  constructor() {
    this.satellites = {}, this.startingPromises = {}, this.stoppingPromises = {};
  }
  async ensureStarted(t3, i8, s7, n11, r7, e5, o9) {
    const a5 = this.stoppingPromises[t3];
    if (a5 !== void 0)
      return a5.then(() => this.ensureStarted(t3, i8, s7, n11, r7, e5, o9));
    const l7 = this.startingPromises, p10 = l7[t3];
    if (p10 !== void 0)
      return p10;
    const m10 = this.satellites, g9 = m10[t3];
    if (g9 !== void 0)
      return g9;
    const f6 = this.startProcess(t3, i8, s7, n11, r7, e5).then((u8) => (delete l7[t3], m10[t3] = u8, u8));
    return l7[t3] = f6, f6;
  }
  async ensureAlreadyStarted(t3) {
    const i8 = this.startingPromises[t3];
    if (i8 !== void 0)
      return i8;
    const s7 = this.satellites[t3];
    if (s7 !== void 0)
      return s7;
    throw new Error(`Satellite not running for db: ${t3}`);
  }
  async stop(t3, i8 = true) {
    if (i8) {
      const o9 = this.stop.bind(this), a5 = this.startingPromises[t3];
      if (a5 !== void 0)
        return a5.then((l7) => o9(t3));
    }
    const s7 = this.stoppingPromises, n11 = s7[t3];
    if (n11 !== void 0)
      return n11;
    const r7 = this.satellites, e5 = r7[t3];
    if (e5 !== void 0) {
      const o9 = e5.stop().then(() => {
        delete r7[t3], delete s7[t3];
      });
      return s7[t3] = o9, o9;
    }
  }
  async stopAll(t3 = true) {
    const i8 = this.stop.bind(this), s7 = Object.keys(this.satellites).map((e5) => i8(e5)), n11 = Object.values(this.stoppingPromises);
    let r7 = s7.concat(n11);
    if (t3) {
      const e5 = Object.entries(this.startingPromises).map(([o9, c8]) => c8.then(() => i8(o9)));
      r7 = r7.concat(e5);
    }
    await Promise.all(r7);
  }
};
var v6 = class extends C6 {
  async startProcess(t3, i8, s7, n11, r7, e5) {
    const o9 = p3(e5);
    if (o9.length > 0)
      throw Error(`invalid config: ${o9}`);
    const c8 = { ...s3, host: e5.replication.host, port: e5.replication.port, ssl: e5.replication.ssl }, a5 = new ce2(t3, r7, n11, c8), l7 = new ue2(t3, i8, s7, n11, a5, r2);
    return await l7.start(e5.auth), l7;
  }
};
var K4 = new v6();

// node_modules/electric-sql/dist/util/debug/index.js
var import_loglevel5 = __toESM(require_loglevel(), 1);
var l6 = (e5 = "TRACE") => {
  import_loglevel5.default.setLevel(e5);
};

// node_modules/electric-sql/dist/electric/namespace.js
var p8 = class {
  adapter;
  notifier;
  _isConnected;
  get isConnected() {
    return this._isConnected;
  }
  constructor(t3, e5) {
    this.adapter = t3, this.notifier = e5, this._isConnected = false, this.notifier.subscribeToConnectivityStateChanges(({ connectivityState: i8 }) => {
      this.setIsConnected(i8);
    });
  }
  setIsConnected(t3) {
    this._isConnected = t3 === "connected";
  }
  potentiallyChanged() {
    this.notifier.potentiallyChanged();
  }
};

// node_modules/electric-sql/dist/client/validation/errors/invalidArgumentError.js
var e3 = class extends Error {
  constructor(t3) {
    super(t3), Object.setPrototypeOf(this, e3.prototype), this.message = t3;
  }
};

// node_modules/electric-sql/dist/client/validation/validation.js
function s6(n11) {
  Object.keys(n11).forEach((t3) => {
    const e5 = n11[t3];
    e5 === void 0 ? delete n11[t3] : typeof e5 == "object" && !Array.isArray(e5) && e5 !== null && s6(e5);
  });
}
function u7(n11, t3) {
  const e5 = t3.parse(n11);
  return s6(e5), e5;
}
function d5(n11) {
  const t3 = objectType({ create: anyType().optional() }).strict();
  try {
    return t3.parse(n11);
  } catch (e5) {
    throw e5 instanceof ZodError && e5.issues.some((o9) => o9.code === "unrecognized_keys") ? new e3("Unsupported operation. Currently, only nested `create` operation is supported on create query.") : e5;
  }
}
function i7(n11) {
  const t3 = objectType({ update: anyType().optional(), updateMany: anyType().optional() }).strict();
  try {
    return t3.parse(n11);
  } catch (e5) {
    throw e5 instanceof ZodError && e5.issues.some((o9) => o9.code === "unrecognized_keys") ? new e3("Unsupported operation. Currently, only nested `update` and `updateMany` operations are supported on an update query.") : e5;
  }
}
function y5(n11) {
  const t3 = n11, e5 = (c8) => c8.unwrap().omit({ _count: true }).optional(), o9 = { select: e5(t3.shape.select) };
  return t3.shape.include && (o9.include = e5(t3.shape.include)), t3.merge(objectType(o9));
}

// node_modules/electric-sql/dist/client/model/builder.js
var import_squel = __toESM(require_squel(), 1);
var import_lodash4 = __toESM(require_lodash3(), 1);
var import_loglevel6 = __toESM(require_loglevel(), 1);
var f5 = import_squel.default.useFlavour("postgres");
var oe2 = class {
  constructor(e5, r7, s7) {
    this._tableName = e5;
    this._fields = r7;
    this.shapeManager = s7;
  }
  create(e5) {
    const r7 = f5.insert().into(this._tableName).setFields(e5.data);
    return this.returnAllFields(r7);
  }
  createMany(e5) {
    const r7 = f5.insert().into(this._tableName).setFieldsRows(e5.data);
    return e5.skipDuplicates ? r7.onConflict() : r7;
  }
  findUnique(e5) {
    return this.findWhere({ ...e5, take: 2 }, true);
  }
  findFirst(e5) {
    return this.findWhere({ ...e5, take: 1 });
  }
  findMany(e5) {
    return this.findWhere(e5);
  }
  findWithoutAutoSelect(e5) {
    return this.findWhere(e5, false, false);
  }
  update(e5) {
    return this.updateInternal(e5, true);
  }
  updateMany(e5) {
    return this.updateInternal(e5);
  }
  delete(e5) {
    return this.deleteInternal(e5, true);
  }
  deleteMany(e5) {
    return this.deleteInternal(e5);
  }
  deleteInternal(e5, r7 = false) {
    const s7 = import_squel.default.delete().from(this._tableName), t3 = e5.where, i8 = this.getFields(t3, r7);
    return p9(i8, t3, s7);
  }
  updateInternal(e5, r7 = false) {
    const s7 = Object.entries(e5.data).find((u8) => {
      const [d8, c8] = u8;
      return typeof c8 == "object" && c8 !== null;
    });
    if (s7)
      throw new e3(`Unsupported value ${JSON.stringify(s7[1])} for field "${s7[0]}" in update query.`);
    const t3 = f5.update().table(this._tableName).setFields(e5.data), i8 = this.returnAllFields(t3), a5 = e5.where, o9 = this.getFields(a5, r7);
    return p9(o9, a5, i8);
  }
  findWhere(e5, r7 = false, s7 = true) {
    if ("cursor" in e5 && typeof e5.cursor < "u")
      throw new e3("Unsupported cursor argument.");
    const t3 = e5.where, i8 = this.getFields(t3, r7);
    this.shapeManager.hasBeenSubscribed(this._tableName) || import_loglevel6.default.debug("Reading from unsynced table " + this._tableName);
    const a5 = f5.select().from(this._tableName), o9 = this.addFieldSelection.bind(this, e5, s7 ? i8 : []), u8 = p9.bind(null, i8, t3), d8 = W3.bind(null, e5), c8 = P3.bind(null, e5), k3 = _5.bind(null, e5), m10 = this.addOrderBy.bind(this, e5);
    return (0, import_lodash4.default)(o9, u8, d8, c8, k3, m10)(a5);
  }
  addFieldSelection(e5, r7, s7) {
    typeof e5.select > "u" && (e5.select = {}, this._fields.forEach((o9) => {
      e5.select[o9] = true;
    }));
    const t3 = v7(e5.select);
    if (t3.length == 0)
      throw new e3(`The \`select\` statement for type ${this._tableName} needs at least one truthy value.`);
    const i8 = t3.find((o9) => !this._fields.includes(o9));
    if (i8)
      throw new e3(`Cannot select field ${i8} on table ${this._tableName}. Use 'include' to fetch related objects.`);
    const a5 = r7.filter((o9) => this._fields.includes(o9)).concat(t3);
    return s7.fields(a5);
  }
  addOrderBy(e5, r7) {
    return typeof e5.orderBy > "u" ? r7 : (Array.isArray(e5.orderBy) ? e5.orderBy : [e5.orderBy]).reduce((t3, i8) => {
      const a5 = Object.keys(i8);
      if (a5.length > 1)
        throw new e3("Argument 'orderBy' can have at most one field per 'OrderByInput' object. Consider providing several 'OrderByInput' objects in an array.");
      if (a5.length === 0)
        return t3;
      const o9 = a5[0], u8 = i8[o9];
      if (typeof u8 == "object" && u8 !== null)
        throw new e3(`Ordering query results based on the '${o9}' related object(s) is not yet supported`);
      const d8 = u8 === "asc";
      return t3.order(o9, d8);
    }, r7);
  }
  getFields(e5, r7 = false) {
    const t3 = Object.keys(typeof e5 < "u" ? e5 : {});
    if (r7 && t3.length == 0)
      throw new e3(`Argument \`where\` for query on ${this._tableName} type requires at least one argument.`);
    return t3;
  }
  returnAllFields(e5) {
    return this._fields.reduce((r7, s7) => r7.returning(s7), e5);
  }
};
function p9(n11, e5, r7) {
  return n11.reduce((s7, t3) => {
    const i8 = e5[t3];
    return b8(i8, t3).reduce((o9, u8) => o9.where(u8.sql, ...u8.args ?? []), s7);
  }, r7);
}
function b8(n11, e5) {
  if (n11 === null)
    return [{ sql: `${e5} IS NULL` }];
  if (e5 === "AND" || e5 === "OR" || e5 === "NOT")
    return [F4(e5, n11)];
  if (typeof n11 == "object") {
    const r7 = { in: anyType().array().optional(), not: anyType().optional(), notIn: anyType().optional(), lt: anyType().optional(), lte: anyType().optional(), gt: anyType().optional(), gte: anyType().optional(), startsWith: stringType().optional(), endsWith: stringType().optional(), contains: stringType().optional() }, s7 = { in: q6.bind(null), not: O4.bind(null), notIn: A5.bind(null), lt: B4.bind(null), lte: j4.bind(null), gt: S4.bind(null), gte: $5.bind(null), startsWith: Q3.bind(null), endsWith: N5.bind(null), contains: M2.bind(null) }, i8 = objectType(r7).strict().refine((o9) => Object.keys(r7).some((u8) => u8 in o9), "Please provide at least one filter.").parse(n11), a5 = [];
    return Object.entries(s7).forEach((o9) => {
      const [u8, d8] = o9;
      if (u8 in i8) {
        const c8 = d8(e5, i8[u8]);
        a5.push(c8);
      }
    }), a5;
  } else
    return [{ sql: `${e5} = ?`, args: [n11] }];
}
function g8(n11, e5) {
  const r7 = n11.map((t3) => t3.sql).join(` ${e5} `), s7 = n11.map((t3) => t3.args).reduce((t3, i8) => (t3 ?? []).concat(i8 ?? []));
  return { sql: r7, args: s7 };
}
function F4(n11, e5) {
  const s7 = (Array.isArray(e5) ? e5 : [e5]).map((t3) => {
    const a5 = Object.keys(t3).reduce((o9, u8) => {
      const d8 = t3[u8], c8 = b8(d8, u8);
      return o9.concat(c8);
    }, []);
    return g8(a5, "AND");
  });
  if (n11 === "NOT") {
    const t3 = s7.map(({ sql: i8, args: a5 }) => ({ sql: s7.length > 1 ? `(NOT ${i8})` : `NOT ${i8}`, args: a5 }));
    return g8(t3, "AND");
  } else
    return g8(s7, n11);
}
function q6(n11, e5) {
  return { sql: `${n11} IN ?`, args: [e5] };
}
function A5(n11, e5) {
  return { sql: `${n11} NOT IN ?`, args: [e5] };
}
function O4(n11, e5) {
  return e5 === null ? { sql: `${n11} IS NOT NULL` } : { sql: `${n11} != ?`, args: [e5] };
}
function B4(n11, e5) {
  return { sql: `${n11} < ?`, args: [e5] };
}
function j4(n11, e5) {
  return { sql: `${n11} <= ?`, args: [e5] };
}
function S4(n11, e5) {
  return { sql: `${n11} > ?`, args: [e5] };
}
function $5(n11, e5) {
  return { sql: `${n11} >= ?`, args: [e5] };
}
function Q3(n11, e5) {
  return { sql: `${n11} LIKE ?`, args: [`${e5}%`] };
}
function N5(n11, e5) {
  return { sql: `${n11} LIKE ?`, args: [`%${e5}`] };
}
function M2(n11, e5) {
  return { sql: `${n11} LIKE ?`, args: [`%${e5}%`] };
}
function P3(n11, e5) {
  return typeof n11.skip > "u" ? e5 : e5.offset(n11.skip);
}
function W3(n11, e5) {
  return typeof n11.take > "u" ? e5 : e5.limit(n11.take);
}
function _5(n11, e5) {
  return typeof n11.distinct > "u" ? e5 : e5.distinct(...n11.distinct);
}
function v7(n11) {
  return Object.keys(n11).filter((e5) => n11[e5]);
}

// node_modules/electric-sql/dist/client/execution/transactionalDB.js
var n6 = class {
  constructor(e5) {
    this._tx = e5;
  }
  run(e5, r7, t3) {
    this._tx.run({ sql: e5.toString() }, (o9, i8) => {
      typeof r7 < "u" && r7(new n6(o9), i8);
    }, t3);
  }
  query(e5, r7, t3, o9) {
    this._tx.query({ sql: e5.toString() }, (i8, d8) => {
      if (typeof t3 < "u") {
        const u8 = d8.map((m10) => r7.parse(m10));
        t3(new n6(i8), u8);
      }
    }, o9);
  }
  raw(e5, r7, t3) {
    this._tx.query(e5, (o9, i8) => {
      typeof r7 < "u" && r7(new n6(o9), i8);
    }, t3);
  }
};

// node_modules/electric-sql/dist/client/execution/nonTransactionalDB.js
var q7 = class {
  constructor(n11) {
    this._adapter = n11;
  }
  run(n11, i8, e5) {
    this._adapter.run({ sql: n11.toString() }).then((t3) => {
      if (typeof i8 < "u")
        try {
          i8(this, t3);
        } catch (r7) {
          typeof e5 < "u" && e5(r7);
        }
    }).catch((t3) => {
      typeof e5 < "u" && e5(t3);
    });
  }
  query(n11, i8, e5, t3) {
    this._adapter.query({ sql: n11.toString() }).then((r7) => {
      try {
        const d8 = r7.map((o9) => i8.parse(o9));
        e5(this, d8);
      } catch (d8) {
        typeof t3 < "u" && t3(d8);
      }
    }).catch((r7) => {
      typeof t3 < "u" && t3(r7);
    });
  }
  raw(n11, i8, e5) {
    this._adapter.query(n11).then((t3) => {
      typeof i8 < "u" && i8(this, t3);
    }).catch((t3) => {
      typeof e5 < "u" && e5(t3);
    });
  }
};

// node_modules/electric-sql/dist/client/execution/executor.js
var v8 = class {
  constructor(r7, t3) {
    this._adapter = r7;
    this._notifier = t3;
  }
  async runInTransaction(r7, t3 = true) {
    const o9 = r7.map((i8) => ({ sql: i8.toString() })), e5 = this._adapter.runInTransaction(...o9);
    return e5.then((i8) => {
      t3 && this._notifier.potentiallyChanged();
    }), e5;
  }
  async transaction(r7, t3 = true) {
    return await this._adapter.transaction((o9, e5) => r7(new n6(o9), (i8) => {
      t3 && this._notifier.potentiallyChanged(), e5(i8);
    }, () => {
    }));
  }
  async execute(r7, t3 = true) {
    return new Promise((o9, e5) => {
      r7(new q7(this._adapter), (i8) => {
        t3 && this._notifier.potentiallyChanged(), o9(i8);
      }, e5);
    });
  }
};

// node_modules/electric-sql/dist/client/validation/errors/messages.js
var r3 = "Provided input is not unique, query has several results.";
function t2(e5) {
  return `${e5} failed because the record was not found.`;
}

// node_modules/electric-sql/dist/client/model/model.js
var B5 = class {
  constructor(t3, n11) {
    this.result = t3;
    this.tablenames = n11;
  }
};

// node_modules/electric-sql/dist/client/util/continuationHelpers.js
function n7(o9, e5, i8) {
  if (e5.length === 0)
    i8();
  else {
    const [r7, ...t3] = e5;
    o9(r7, () => {
      n7(o9, t3, i8);
    });
  }
}

// node_modules/electric-sql/dist/client/util/functions.js
function e4(n11) {
  return typeof n11 < "u" && n11 !== null;
}

// node_modules/electric-sql/dist/client/model/table.js
var import_lodash5 = __toESM(require_lodash4(), 1);
var import_lodash6 = __toESM(require_lodash5(), 1);

// node_modules/object.hasown/index.mjs
var import_call_bind = __toESM(require_call_bind(), 1);
var import_polyfill = __toESM(require_polyfill(), 1);
var import_polyfill2 = __toESM(require_polyfill(), 1);
var import_implementation = __toESM(require_implementation2(), 1);
var import_shim = __toESM(require_shim(), 1);
var object_default = (0, import_call_bind.default)((0, import_polyfill.default)(), null);

// node_modules/electric-sql/dist/client/model/table.js
var Le2 = class {
  constructor(e5, a5, i8, t3, n11) {
    this.tableName = e5;
    this._dbDescription = n11;
    this._builder = new oe2(e5, this._dbDescription.getFields(e5), t3), this._executor = new v8(a5, i8), this._shapeManager = t3, this._qualifiedTableName = new b("main", e5), this._tables = /* @__PURE__ */ new Map();
    const d8 = this._dbDescription.getTableDescription(e5);
    this._schema = d8.modelSchema, this.createSchema = y5(d8.createSchema), this.createManySchema = d8.createManySchema, this.findUniqueSchema = d8.findUniqueSchema, this.findSchema = d8.findSchema, this.updateSchema = y5(d8.updateSchema), this.updateManySchema = d8.updateManySchema, this.upsertSchema = d8.upsertSchema, this.deleteSchema = d8.deleteSchema, this.deleteManySchema = d8.deleteManySchema, this.syncSchema = d8.findSchema.pick({ include: true });
  }
  _builder;
  _executor;
  _shapeManager;
  _qualifiedTableName;
  _tables;
  _schema;
  createSchema;
  createManySchema;
  findUniqueSchema;
  findSchema;
  updateSchema;
  updateManySchema;
  upsertSchema;
  deleteSchema;
  deleteManySchema;
  syncSchema;
  setTables(e5) {
    this._tables = e5;
  }
  getIncludedTables(e5) {
    const a5 = e5.include ?? {}, i8 = Object.keys(a5), t3 = /* @__PURE__ */ new Set([this]);
    return i8.forEach((n11) => {
      const d8 = this._dbDescription.getRelatedTable(this.tableName, n11), l7 = this._tables.get(d8), r7 = t3.add(l7), s7 = a5[n11];
      if (typeof s7 == "object" && !Array.isArray(s7) && s7 !== null)
        return l7.getIncludedTables(s7).forEach((c8) => r7.add(c8)), r7;
      if (typeof s7 == "boolean")
        return r7;
      throw new Error(`Unexpected value in include tree for syncShape: ${JSON.stringify(s7)}`);
    }), t3;
  }
  sync(e5) {
    const a5 = this.syncSchema.parse(e5 ?? {}), n11 = { tables: Array.from(this.getIncludedTables(a5)).map((d8) => d8.tableName) };
    return this._shapeManager.sync(n11);
  }
  async create(e5) {
    return this._executor.transaction((a5, i8, t3) => this._create(e5, a5, i8, t3));
  }
  async createMany(e5) {
    return this._executor.execute(this._createMany.bind(this, e5));
  }
  async findUnique(e5) {
    return this._executor.execute((a5, i8, t3) => this._findUnique(e5, a5, i8, t3), false);
  }
  liveUnique(e5) {
    return this.makeLiveResult(() => this.findUnique(e5), e5);
  }
  async findFirst(e5) {
    return this._executor.execute((a5, i8, t3) => this._findFirst(e5, a5, i8, t3), false);
  }
  liveFirst(e5) {
    return this.makeLiveResult(() => this.findFirst(e5), e5 ?? {});
  }
  async findMany(e5) {
    return this._executor.execute((a5, i8, t3) => this._findMany(e5, a5, i8, t3), false);
  }
  liveMany(e5) {
    return this.makeLiveResult(() => this.findMany(e5), e5 ?? {});
  }
  async update(e5) {
    return this._executor.transaction((a5, i8, t3) => this._update(e5, a5, i8, t3));
  }
  async updateMany(e5) {
    return this._executor.execute(this._updateMany.bind(this, e5));
  }
  async upsert(e5) {
    return this._executor.transaction((a5, i8, t3) => this._upsert(e5, a5, i8, t3));
  }
  async delete(e5) {
    return this._executor.transaction((a5, i8, t3) => this._delete(e5, a5, i8, t3));
  }
  async deleteMany(e5) {
    return this._executor.execute(this._deleteMany.bind(this, e5));
  }
  forEachRelation(e5, a5, i8) {
    const t3 = this._dbDescription.getRelations(this.tableName);
    n7((n11, d8) => {
      object_default(e5, n11.relationField) ? a5(n11, d8) : d8();
    }, t3, i8);
  }
  forEachOutgoingRelation(e5, a5, i8) {
    this.forEachRelation(e5, (t3, n11) => {
      t3.isOutgoingRelation() ? a5(t3, n11) : n11();
    }, i8);
  }
  _create(e5, a5, i8, t3) {
    const n11 = u7(e5, this.createSchema), d8 = n11.data;
    this.forEachOutgoingRelation(d8, (l7, r7) => {
      const { fromField: s7, toField: u8, relationField: c8, relatedTable: o9 } = l7, p10 = d5(d8[c8]).create;
      this._tables.get(o9)._create({ data: p10 }, a5, (h8) => {
        delete d8[c8], d8[s7] = h8[u8], r7();
      }, t3);
    }, () => {
      const l7 = this._dbDescription.getIncomingRelations(this.tableName);
      let r7 = (c8, o9) => o9();
      const s7 = (c8, o9) => {
        const { relationField: p10, relatedTable: y6, relationName: h8 } = c8;
        delete d8[p10];
        const S6 = r7;
        r7 = (T9, q9) => {
          const x6 = this._tables.get(y6), { fromField: M3, toField: O5 } = this._dbDescription.getRelation(y6, h8);
          o9[M3] = T9[O5], x6._create({ data: o9 }, a5, () => {
            S6(T9, q9);
          }, t3);
        };
      };
      l7.forEach((c8) => {
        const { relationField: o9 } = c8;
        if (object_default(d8, o9)) {
          const p10 = d5(d8[o9]).create;
          Array.isArray(p10) ? p10.forEach(s7.bind(this, c8)) : s7(c8, p10);
        }
      });
      const u8 = this._builder.create({ ...n11, data: d8 });
      a5.query(u8, this._schema, (c8, o9) => {
        o9.length !== 1 && t3("Wrong amount of objects were created.");
        const p10 = o9[0];
        r7(p10, () => {
          this._findUniqueWithoutAutoSelect({ where: d8, select: n11.select, ...e4(n11.include) && { include: n11.include } }, c8, i8, t3, "Create");
        });
      }, t3);
    });
  }
  _createMany(e5, a5, i8, t3) {
    const n11 = u7(e5, this.createManySchema), d8 = this._builder.createMany(n11);
    a5.run(d8, (l7, { rowsAffected: r7 }) => {
      i8({ count: r7 });
    }, t3);
  }
  _findUnique(e5, a5, i8, t3) {
    const n11 = u7(e5, this.findUniqueSchema), d8 = this._builder.findUnique(n11);
    a5.query(d8, this._schema, (l7, r7) => {
      if (r7.length > 1)
        throw new e3(r3);
      return r7.length === 1 ? this.fetchIncludes(r7, n11.include, a5, (s7) => {
        i8(s7[0]);
      }, t3) : i8(null);
    }, t3);
  }
  _findFirst(e5, a5, i8, t3) {
    const n11 = u7(e5 ?? {}, this.findSchema), d8 = this._builder.findFirst(n11);
    a5.query(d8, this._schema, (l7, r7) => r7.length == 0 ? i8(null) : this.fetchIncludes([r7[0]], n11.include, a5, (s7) => {
      i8(s7[0]);
    }, t3), t3);
  }
  joinObjects(e5, a5, i8, t3, n11, d8) {
    return e5.map((l7) => {
      const r7 = a5.filter((s7) => l7[i8] == s7[t3]);
      if (r7.length === 0)
        return l7;
      if (d8 === "one") {
        if (r7.length > 1)
          throw TypeError(`Relation on field '${n11}' is one-to-one but found several related objects: ` + JSON.stringify(r7));
        const [s7] = r7;
        return Object.assign(l7, { [n11]: s7 });
      } else
        return Object.assign(l7, { [n11]: r7 });
    });
  }
  fetchRelated(e5, a5, i8, t3, n11, d8, l7, r7, s7, u8) {
    const c8 = this._tables.get(a5), o9 = l7 === true ? {} : l7, p10 = typeof o9.where > "u" ? {} : o9.where, y6 = e5.map((h8) => h8[i8]);
    c8._findMany({ ...o9, where: { ...p10, [t3]: { in: y6 } } }, r7, (h8) => {
      const S6 = this.joinObjects(e5, h8, i8, t3, n11, d8);
      s7(S6);
    }, u8);
  }
  fetchInclude(e5, a5, i8, t3, n11, d8) {
    if (i8 === false)
      return n11([]);
    if (a5.isIncomingRelation()) {
      const { fromField: l7, toField: r7 } = a5.getOppositeRelation(this._dbDescription);
      this.fetchRelated(e5, a5.relatedTable, r7, l7, a5.relationField, a5.relatedObjects, i8, t3, n11, d8);
    } else {
      const { fromField: l7, toField: r7, relationField: s7, relatedObjects: u8, relatedTable: c8 } = a5;
      this.fetchRelated(e5, c8, l7, r7, s7, u8, i8, t3, n11, d8);
    }
  }
  fetchIncludes(e5, a5, i8, t3, n11) {
    if (typeof a5 > "u" || e5.length === 0)
      return t3(e5);
    {
      const d8 = Object.keys(a5);
      let l7 = [];
      n7((r7, s7) => {
        if (!this._dbDescription.hasRelationForField(this.tableName, r7))
          throw new e3("Unexpected field `" + r7 + "` in `include` argument.");
        const u8 = this._dbDescription.getRelationName(this.tableName, r7), c8 = this._dbDescription.getRelation(this.tableName, u8);
        this.fetchInclude(e5, c8, a5[r7], i8, (o9) => {
          l7 = l7.concat(o9), s7();
        }, n11);
      }, d8, () => {
        t3(l7);
      });
    }
  }
  _findMany(e5, a5, i8, t3) {
    const n11 = u7(e5 ?? {}, this.findSchema), d8 = this._builder.findMany(n11);
    a5.query(d8, this._schema, (l7, r7) => {
      this.fetchIncludes(r7, n11.include, a5, i8, t3);
    }, t3);
  }
  _findUniqueWithoutAutoSelect(e5, a5, i8, t3, n11) {
    const d8 = this._builder.findWithoutAutoSelect(e5);
    a5.query(d8, this._schema, (l7, r7) => {
      if (r7.length === 0)
        throw new e3(t2(n11));
      if (r7.length > 1)
        throw new e3(r3);
      this.fetchIncludes(r7, e5.include, a5, (s7) => {
        const [u8] = s7;
        i8(u8);
      }, t3);
    }, t3);
  }
  updateRelatedObject(e5, a5, i8, t3, n11, d8, l7, r7, s7 = "update") {
    if (typeof e5 > "u")
      l7();
    else {
      const u8 = this._tables.get(a5);
      if (s7 === "update") {
        const c8 = n11 ? e5.where : { ...e5.where, [t3]: i8 };
        u8._update({ data: e5.data, where: c8 }, d8, l7, r7);
      } else
        u8._updateMany({ data: e5.data, where: { ...e5.where, [t3]: i8 } }, d8, l7, r7);
    }
  }
  updateFKs(e5, a5, i8, t3, n11) {
    const d8 = (0, import_lodash6.default)(a5, (s7, u8) => e5[u8] === s7), r7 = Object.keys(d8).filter((s7) => this._dbDescription.getRelationsPointingAtField(this.tableName, s7).length > 0);
    n7((s7, u8) => {
      const c8 = this._dbDescription.getRelationsPointingAtField(this.tableName, s7);
      n7((o9, p10) => {
        const y6 = o9.relatedTable, { fromField: h8 } = o9.getOppositeRelation(this._dbDescription);
        this._tables.get(y6)._updateMany({ data: { [h8]: a5[s7] }, where: { [h8]: e5[s7] } }, i8, p10, t3);
      }, c8, u8);
    }, r7, n11);
  }
  updateManyRelatedObjectsFromIncomingRelation(e5, a5, i8, t3, n11, d8, l7) {
    const { fromField: r7, toField: s7 } = this._dbDescription.getRelation(e5, a5), u8 = i8[s7], c8 = Array.isArray(t3) ? t3 : typeof t3 > "u" ? [] : [t3];
    n7((o9, p10) => {
      this.updateRelatedObject(o9, e5, u8, r7, true, n11, p10, d8, "updateMany");
    }, c8, l7);
  }
  updateRelatedObjectFromIncomingRelation(e5, a5, i8, t3, n11, d8, l7) {
    const { relatedObjects: r7 } = this._dbDescription.getRelation(this.tableName, a5), { fromField: s7, toField: u8 } = this._dbDescription.getRelation(e5, a5), c8 = i8[u8];
    if (r7 === "many") {
      const o9 = Array.isArray(t3) ? t3 : typeof t3 > "u" ? [] : [t3];
      n7((p10, y6) => {
        this.updateRelatedObject(p10, e5, c8, s7, true, n11, (h8) => {
          const S6 = h8;
          if (S6[s7] !== c8)
            throw new e3(`Nested update cannot update an unrelated object.
Related object has field ${s7} === ${c8}
but the object identified by ${JSON.stringify(p10)} has ${s7} === ${S6[s7]}`);
          y6();
        }, d8);
      }, o9, l7);
    } else {
      const o9 = typeof t3 > "u" ? void 0 : { data: t3, where: { [u8]: c8 } };
      this.updateRelatedObject(o9, e5, c8, s7, true, n11, l7, d8);
    }
  }
  updateRelatedObjectFromOutgoingRelation(e5, a5, i8, t3, n11, d8, l7) {
    const { fromField: r7, toField: s7 } = e5, u8 = a5[r7], c8 = typeof i8 > "u" ? void 0 : { data: i8 };
    this.updateRelatedObject(c8, t3, u8, s7, false, n11, d8, l7);
  }
  _update(e5, a5, i8, t3) {
    const n11 = u7(e5, this.updateSchema);
    this._findUnique({ where: n11.where }, a5, (d8) => {
      const l7 = d8;
      if (d8 === null)
        throw new e3(t2("Update"));
      const r7 = this._dbDescription.getFields(this.tableName), s7 = (0, import_lodash5.default)(n11.data, r7), u8 = Object.keys(s7), c8 = { ...n11, data: s7 }, o9 = (p10, y6) => {
        const h8 = y6[0];
        this.updateFKs(d8, h8, p10, t3, () => {
          this.updateRelatedObjects(n11, l7, p10, s7, t3, i8);
        });
      };
      if (u8.length > 0) {
        const p10 = this._builder.update(c8);
        a5.query(p10, this._schema, o9, t3);
      } else
        o9(a5, [l7]);
    }, t3);
  }
  updateRelatedObjects(e5, a5, i8, t3, n11, d8) {
    this.forEachRelation(e5.data, (l7, r7) => {
      const { relationField: s7, relatedTable: u8, relationName: c8 } = l7, o9 = e5.data, p10 = i7(o9[s7]), y6 = p10.update;
      l7.isOutgoingRelation() ? this.updateRelatedObjectFromOutgoingRelation(l7, a5, y6, u8, i8, (h8) => {
        const T9 = h8[l7.toField];
        t3[l7.fromField] = T9, r7();
      }, n11) : this.updateRelatedObjectFromIncomingRelation(u8, c8, a5, y6, i8, n11, () => {
        const h8 = p10.updateMany;
        this.updateManyRelatedObjectsFromIncomingRelation(u8, c8, a5, h8, i8, n11, r7);
      });
    }, () => {
      this._findUniqueWithoutAutoSelect({ where: { ...e5.where, ...t3 }, select: e5.select, ...e4(e5.include) && { include: e5.include } }, i8, d8, n11, "Update");
    });
  }
  _updateMany(e5, a5, i8, t3) {
    const n11 = u7(e5, this.updateManySchema), d8 = this._builder.updateMany(n11);
    a5.run(d8, (l7, { rowsAffected: r7 }) => i8({ count: r7 }), t3);
  }
  _upsert(e5, a5, i8, t3) {
    const n11 = u7(e5, this.upsertSchema);
    this._findUnique({ where: e5.where }, a5, (d8) => d8 === null ? this._create({ data: n11.create, select: n11.select, ...e4(n11.include) && { include: n11.include } }, a5, i8, t3) : this._update({ data: n11.update, where: n11.where, select: n11.select, ...e4(n11.include) && { include: n11.include } }, a5, i8, t3), t3);
  }
  _delete(e5, a5, i8, t3) {
    const n11 = u7(e5, this.deleteSchema);
    this._findUniqueWithoutAutoSelect(n11, a5, (d8) => {
      const l7 = this._builder.delete(n11);
      a5.run(l7, () => i8(d8), t3);
    }, t3, "Delete");
  }
  _deleteMany(e5, a5, i8, t3) {
    const n11 = u7(e5 ?? {}, this.deleteManySchema), d8 = this._builder.deleteMany(n11);
    a5.run(d8, (l7, { rowsAffected: r7 }) => {
      i8({ count: r7 });
    }, t3);
  }
  makeLiveResult(e5, a5) {
    const i8 = [...this.getIncludedTables(a5)].map((n11) => n11._qualifiedTableName), t3 = () => e5().then((n11) => new B5(n11, i8));
    return t3.sourceQuery = a5, t3;
  }
};
function K5(I5, e5) {
  return I5.query(e5);
}
function Ee2(I5, e5) {
  const a5 = async () => {
    const i8 = S2(e5.sql), t3 = await K5(I5, e5);
    return new B5(t3, i8);
  };
  return a5.sourceQuery = e5, a5;
}

// node_modules/electric-sql/dist/client/model/shapes.js
var r4 = class {
  tablesPreviouslySubscribed;
  constructor() {
    this.tablesPreviouslySubscribed = /* @__PURE__ */ new Set();
  }
  hasBeenSubscribed(e5) {
    return this.tablesPreviouslySubscribed.has(e5);
  }
};
var n8 = class extends r4 {
  satellite;
  constructor(e5) {
    super(), this.satellite = e5;
  }
  async sync(e5) {
    const s7 = { selects: e5.tables.map((a5) => ({ tablename: a5 })) };
    return { synced: (await this.satellite.subscribe([s7])).synced.then(() => {
      e5.tables.forEach((a5) => this.tablesPreviouslySubscribed.add(a5));
    }) };
  }
  hasBeenSubscribed(e5) {
    return this.tablesPreviouslySubscribed.has(e5);
  }
};

// node_modules/electric-sql/dist/client/model/client.js
var n9 = class extends p8 {
  constructor(l7, e5, a5, r7) {
    super(e5, a5);
    this.db = l7;
    this._satellite = r7;
  }
  _satellite;
  get satellite() {
    return this._satellite;
  }
  static create(l7, e5, a5, r7) {
    const s7 = l7.extendedTables, o9 = new n8(r7), c8 = (t3) => new Le2(t3, e5, a5, o9, l7), i8 = Object.fromEntries(Object.keys(s7).map((t3) => [t3, c8(t3)]));
    Object.keys(i8).forEach((t3) => {
      i8[t3].setTables(new Map(Object.entries(i8)));
    });
    const m10 = { ...i8, raw: K5.bind(null, e5), liveRaw: Ee2.bind(null, e5) };
    return new n9(m10, e5, a5, r7);
  }
};

// node_modules/electric-sql/dist/electric/index.js
var T8 = async (i8, o9, t3, m10, a5, r7) => {
  l6(a5.debug ? "TRACE" : "WARN");
  const s7 = g5(a5), f6 = r7?.migrator || new q4(t3, o9.migrations), c8 = r7?.notifier || new Q2(i8), e5 = await (r7?.registry || K4).ensureStarted(i8, t3, f6, c8, m10, s7), n11 = n9.create(o9, t3, c8, e5);
  return e5.connectivityState !== void 0 && n11.setIsConnected(e5.connectivityState), n11;
};

// node_modules/electric-sql/dist/sockets/web.js
var v9 = class {
  create() {
    return new n10();
  }
};
var n10 = class {
  socket;
  connectCallbacks = [];
  errorCallbacks = [];
  onceErrorCallbacks = [];
  errorListener = () => {
    for (const t3 of this.errorCallbacks)
      t3(new x4(_2.SOCKET_ERROR, "socket error"));
    let e5;
    for (; e5 = this.onceErrorCallbacks.pop(); )
      e5(new x4(_2.SOCKET_ERROR, "socket error"));
  };
  connectListener = () => {
    let e5;
    for (; e5 = this.connectCallbacks.pop(); )
      e5();
  };
  messageListener;
  closeListener;
  open(e5) {
    if (this.socket)
      throw new x4(_2.INTERNAL, "trying to open a socket before closing existing socket");
    return this.socket = new WebSocket(e5.url), this.socket.binaryType = "arraybuffer", this.socket.addEventListener("open", this.connectListener), this.socket.addEventListener("error", this.errorListener), this;
  }
  write(e5) {
    return this.socket?.send(e5), this;
  }
  closeAndRemoveListeners() {
    return this.socket?.removeEventListener("error", this.errorListener), this.messageListener && this.socket?.removeEventListener("message", this.messageListener), this.closeListener && this.socket?.removeEventListener("close", this.closeListener), this.socket?.close(), this.socket = void 0, this;
  }
  onMessage(e5) {
    if (this.messageListener)
      throw new x4(_2.INTERNAL, "socket does not support multiple message listeners");
    this.messageListener = (t3) => {
      const o9 = new Uint8Array(t3.data);
      e5(o9);
    }, this.socket?.addEventListener("message", this.messageListener);
  }
  onError(e5) {
    this.errorCallbacks.push(e5);
  }
  onClose(e5) {
    if (this.closeListener)
      throw new x4(_2.INTERNAL, "socket does not support multiple close listeners");
    this.closeListener = e5, this.socket?.addEventListener("close", this.closeListener);
  }
  onceConnect(e5) {
    this.connectCallbacks.push(e5);
  }
  onceError(e5) {
    this.onceErrorCallbacks.push(e5);
  }
  removeErrorListener(e5) {
    const t3 = this.errorCallbacks.indexOf(e5);
    t3 >= 0 && this.errorCallbacks.splice(t3, 1);
    const o9 = this.onceErrorCallbacks.indexOf(e5);
    o9 >= 0 && this.onceErrorCallbacks.splice(o9, 1);
  }
};

// node_modules/electric-sql/dist/drivers/wa-sqlite/index.js
var S5 = async (e5, a5, c8, t3) => {
  const o9 = e5.name, i8 = t3?.adapter || new D5(e5), n11 = t3?.socketFactory || new v9();
  return await T8(o9, a5, i8, n11, c8, t3);
};

// node_modules/electric-sql/dist/auth/insecure.js
function d6(n11) {
  return `${r5({ alg: "none" })}.${r5(n11)}.`;
}
function r5(n11) {
  const e5 = JSON.stringify(n11);
  return c7(e5).replace(/\+/g, "-").replace(/\//, "_").replace(/=+$/, "");
}
function c7(n11) {
  const e5 = new TextEncoder().encode(n11), t3 = Array.from(e5, (i8) => String.fromCodePoint(i8)).join("");
  return btoa(t3);
}

// src/auth.ts
var dummyUserId = i2();
var authToken = () => {
  const claims = { "user_id": dummyUserId };
  return d6(claims);
};

// src/config.ts
var DEBUG_MODE = false;
var ELECTRIC_URL = "ws://localhost:5133";

// node_modules/electric-sql/dist/client/model/schema.js
var import_lodash7 = __toESM(require_lodash6(), 1);
var import_lodash8 = __toESM(require_lodash7(), 1);
var import_lodash9 = __toESM(require_lodash8(), 1);
var C8 = class {
  constructor(e5, t3) {
    this.tables = e5;
    this.migrations = t3;
    this.extendedTables = this.extend(e5), this.incomingRelationsIndex = this.indexIncomingRelations();
  }
  extendedTables;
  incomingRelationsIndex;
  extend(e5) {
    return (0, import_lodash7.default)(e5, (t3) => {
      const [a5, n11] = (0, import_lodash8.default)(t3.relations, (i8) => i8.isIncomingRelation());
      return { ...t3, incomingRelations: a5, outgoingRelations: n11 };
    });
  }
  indexIncomingRelations() {
    const e5 = Object.keys(this.extendedTables), t3 = (n11) => {
      const i8 = this.getIncomingRelations(n11);
      return (0, import_lodash9.default)(i8, (l7) => l7.getOppositeRelation(this).toField);
    }, a5 = {};
    return e5.forEach((n11) => {
      a5[n11] = t3(n11);
    }), a5;
  }
  getTableDescription(e5) {
    return this.extendedTables[e5];
  }
  getFields(e5) {
    return this.extendedTables[e5].fields;
  }
  hasRelationForField(e5, t3) {
    return this.getRelations(e5).some((a5) => a5.relationField === t3);
  }
  getRelationName(e5, t3) {
    return this.getRelations(e5).find((a5) => a5.relationField === t3).relationName;
  }
  getRelation(e5, t3) {
    return this.getRelations(e5).find((a5) => a5.relationName === t3);
  }
  getRelatedTable(e5, t3) {
    const a5 = this.getRelationName(e5, t3);
    return this.getRelation(e5, a5).relatedTable;
  }
  getRelations(e5) {
    return this.extendedTables[e5].relations;
  }
  getOutgoingRelations(e5) {
    return this.extendedTables[e5].outgoingRelations;
  }
  getIncomingRelations(e5) {
    return this.extendedTables[e5].incomingRelations;
  }
  getRelationsPointingAtField(e5, t3) {
    const n11 = this.incomingRelationsIndex[e5][t3];
    return typeof n11 > "u" ? [] : n11;
  }
};

// src/generated/client/migrations.ts
var migrations_default = [
  {
    "statements": [
      'CREATE TABLE "items" (\n  "value" TEXT NOT NULL,\n  CONSTRAINT "items_pkey" PRIMARY KEY ("value")\n) WITHOUT ROWID;\n',
      "\n    -- Toggles for turning the triggers on and off\n    INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.items', 1);\n    ",
      "\n    /* Triggers for table items */\n  \n    -- ensures primary key is immutable\n    DROP TRIGGER IF EXISTS update_ensure_main_items_primarykey;\n    ",
      "\n    CREATE TRIGGER update_ensure_main_items_primarykey\n      BEFORE UPDATE ON main.items\n    BEGIN\n      SELECT\n        CASE\n          WHEN old.value != new.value THEN\n		RAISE (ABORT, 'cannot change the value of column value as it belongs to the primary key')\n        END;\n    END;\n    ",
      "\n    -- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\n    DROP TRIGGER IF EXISTS insert_main_items_into_oplog;\n    ",
      "\n    CREATE TRIGGER insert_main_items_into_oplog\n       AFTER INSERT ON main.items\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'items', 'INSERT', json_object('value', new.value), json_object('value', new.value), NULL, NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS update_main_items_into_oplog;\n    ",
      "\n    CREATE TRIGGER update_main_items_into_oplog\n       AFTER UPDATE ON main.items\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'items', 'UPDATE', json_object('value', new.value), json_object('value', new.value), json_object('value', old.value), NULL);\n    END;\n    ",
      "\n    DROP TRIGGER IF EXISTS delete_main_items_into_oplog;\n    ",
      "\n    CREATE TRIGGER delete_main_items_into_oplog\n       AFTER DELETE ON main.items\n       WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items')\n    BEGIN\n      INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n      VALUES ('main', 'items', 'DELETE', json_object('value', old.value), NULL, json_object('value', old.value), NULL);\n    END;\n    "
    ],
    "version": "20230829161628_875"
  }
];

// src/generated/client/index.ts
var ItemsScalarFieldEnumSchema = z2.enum(["value"]);
var QueryModeSchema = z2.enum(["default", "insensitive"]);
var SortOrderSchema = z2.enum(["asc", "desc"]);
var TransactionIsolationLevelSchema = z2.enum(["ReadUncommitted", "ReadCommitted", "RepeatableRead", "Serializable"]);
var ItemsSchema = z2.object({
  value: z2.string()
});
var ItemsSelectSchema = z2.object({
  value: z2.boolean().optional()
}).strict();
var ItemsWhereInputSchema = z2.object({
  AND: z2.union([z2.lazy(() => ItemsWhereInputSchema), z2.lazy(() => ItemsWhereInputSchema).array()]).optional(),
  OR: z2.lazy(() => ItemsWhereInputSchema).array().optional(),
  NOT: z2.union([z2.lazy(() => ItemsWhereInputSchema), z2.lazy(() => ItemsWhereInputSchema).array()]).optional(),
  value: z2.union([z2.lazy(() => StringFilterSchema), z2.string()]).optional()
}).strict();
var ItemsOrderByWithRelationInputSchema = z2.object({
  value: z2.lazy(() => SortOrderSchema).optional()
}).strict();
var ItemsWhereUniqueInputSchema = z2.object({
  value: z2.string().optional()
}).strict();
var ItemsOrderByWithAggregationInputSchema = z2.object({
  value: z2.lazy(() => SortOrderSchema).optional(),
  _count: z2.lazy(() => ItemsCountOrderByAggregateInputSchema).optional(),
  _max: z2.lazy(() => ItemsMaxOrderByAggregateInputSchema).optional(),
  _min: z2.lazy(() => ItemsMinOrderByAggregateInputSchema).optional()
}).strict();
var ItemsScalarWhereWithAggregatesInputSchema = z2.object({
  AND: z2.union([z2.lazy(() => ItemsScalarWhereWithAggregatesInputSchema), z2.lazy(() => ItemsScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z2.lazy(() => ItemsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z2.union([z2.lazy(() => ItemsScalarWhereWithAggregatesInputSchema), z2.lazy(() => ItemsScalarWhereWithAggregatesInputSchema).array()]).optional(),
  value: z2.union([z2.lazy(() => StringWithAggregatesFilterSchema), z2.string()]).optional()
}).strict();
var ItemsCreateInputSchema = z2.object({
  value: z2.string()
}).strict();
var ItemsUncheckedCreateInputSchema = z2.object({
  value: z2.string()
}).strict();
var ItemsUpdateInputSchema = z2.object({
  value: z2.union([z2.string(), z2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ItemsUncheckedUpdateInputSchema = z2.object({
  value: z2.union([z2.string(), z2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ItemsCreateManyInputSchema = z2.object({
  value: z2.string()
}).strict();
var ItemsUpdateManyMutationInputSchema = z2.object({
  value: z2.union([z2.string(), z2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ItemsUncheckedUpdateManyInputSchema = z2.object({
  value: z2.union([z2.string(), z2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var StringFilterSchema = z2.object({
  equals: z2.string().optional(),
  in: z2.string().array().optional(),
  notIn: z2.string().array().optional(),
  lt: z2.string().optional(),
  lte: z2.string().optional(),
  gt: z2.string().optional(),
  gte: z2.string().optional(),
  contains: z2.string().optional(),
  startsWith: z2.string().optional(),
  endsWith: z2.string().optional(),
  mode: z2.lazy(() => QueryModeSchema).optional(),
  not: z2.union([z2.string(), z2.lazy(() => NestedStringFilterSchema)]).optional()
}).strict();
var ItemsCountOrderByAggregateInputSchema = z2.object({
  value: z2.lazy(() => SortOrderSchema).optional()
}).strict();
var ItemsMaxOrderByAggregateInputSchema = z2.object({
  value: z2.lazy(() => SortOrderSchema).optional()
}).strict();
var ItemsMinOrderByAggregateInputSchema = z2.object({
  value: z2.lazy(() => SortOrderSchema).optional()
}).strict();
var StringWithAggregatesFilterSchema = z2.object({
  equals: z2.string().optional(),
  in: z2.string().array().optional(),
  notIn: z2.string().array().optional(),
  lt: z2.string().optional(),
  lte: z2.string().optional(),
  gt: z2.string().optional(),
  gte: z2.string().optional(),
  contains: z2.string().optional(),
  startsWith: z2.string().optional(),
  endsWith: z2.string().optional(),
  mode: z2.lazy(() => QueryModeSchema).optional(),
  not: z2.union([z2.string(), z2.lazy(() => NestedStringWithAggregatesFilterSchema)]).optional(),
  _count: z2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z2.lazy(() => NestedStringFilterSchema).optional(),
  _max: z2.lazy(() => NestedStringFilterSchema).optional()
}).strict();
var StringFieldUpdateOperationsInputSchema = z2.object({
  set: z2.string().optional()
}).strict();
var NestedStringFilterSchema = z2.object({
  equals: z2.string().optional(),
  in: z2.string().array().optional(),
  notIn: z2.string().array().optional(),
  lt: z2.string().optional(),
  lte: z2.string().optional(),
  gt: z2.string().optional(),
  gte: z2.string().optional(),
  contains: z2.string().optional(),
  startsWith: z2.string().optional(),
  endsWith: z2.string().optional(),
  not: z2.union([z2.string(), z2.lazy(() => NestedStringFilterSchema)]).optional()
}).strict();
var NestedStringWithAggregatesFilterSchema = z2.object({
  equals: z2.string().optional(),
  in: z2.string().array().optional(),
  notIn: z2.string().array().optional(),
  lt: z2.string().optional(),
  lte: z2.string().optional(),
  gt: z2.string().optional(),
  gte: z2.string().optional(),
  contains: z2.string().optional(),
  startsWith: z2.string().optional(),
  endsWith: z2.string().optional(),
  not: z2.union([z2.string(), z2.lazy(() => NestedStringWithAggregatesFilterSchema)]).optional(),
  _count: z2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z2.lazy(() => NestedStringFilterSchema).optional(),
  _max: z2.lazy(() => NestedStringFilterSchema).optional()
}).strict();
var NestedIntFilterSchema = z2.object({
  equals: z2.number().optional(),
  in: z2.number().array().optional(),
  notIn: z2.number().array().optional(),
  lt: z2.number().optional(),
  lte: z2.number().optional(),
  gt: z2.number().optional(),
  gte: z2.number().optional(),
  not: z2.union([z2.number(), z2.lazy(() => NestedIntFilterSchema)]).optional()
}).strict();
var ItemsFindFirstArgsSchema = z2.object({
  select: ItemsSelectSchema.optional(),
  where: ItemsWhereInputSchema.optional(),
  orderBy: z2.union([ItemsOrderByWithRelationInputSchema.array(), ItemsOrderByWithRelationInputSchema]).optional(),
  cursor: ItemsWhereUniqueInputSchema.optional(),
  take: z2.number().optional(),
  skip: z2.number().optional(),
  distinct: ItemsScalarFieldEnumSchema.array().optional()
}).strict();
var ItemsFindFirstOrThrowArgsSchema = z2.object({
  select: ItemsSelectSchema.optional(),
  where: ItemsWhereInputSchema.optional(),
  orderBy: z2.union([ItemsOrderByWithRelationInputSchema.array(), ItemsOrderByWithRelationInputSchema]).optional(),
  cursor: ItemsWhereUniqueInputSchema.optional(),
  take: z2.number().optional(),
  skip: z2.number().optional(),
  distinct: ItemsScalarFieldEnumSchema.array().optional()
}).strict();
var ItemsFindManyArgsSchema = z2.object({
  select: ItemsSelectSchema.optional(),
  where: ItemsWhereInputSchema.optional(),
  orderBy: z2.union([ItemsOrderByWithRelationInputSchema.array(), ItemsOrderByWithRelationInputSchema]).optional(),
  cursor: ItemsWhereUniqueInputSchema.optional(),
  take: z2.number().optional(),
  skip: z2.number().optional(),
  distinct: ItemsScalarFieldEnumSchema.array().optional()
}).strict();
var ItemsAggregateArgsSchema = z2.object({
  where: ItemsWhereInputSchema.optional(),
  orderBy: z2.union([ItemsOrderByWithRelationInputSchema.array(), ItemsOrderByWithRelationInputSchema]).optional(),
  cursor: ItemsWhereUniqueInputSchema.optional(),
  take: z2.number().optional(),
  skip: z2.number().optional()
}).strict();
var ItemsGroupByArgsSchema = z2.object({
  where: ItemsWhereInputSchema.optional(),
  orderBy: z2.union([ItemsOrderByWithAggregationInputSchema.array(), ItemsOrderByWithAggregationInputSchema]).optional(),
  by: ItemsScalarFieldEnumSchema.array(),
  having: ItemsScalarWhereWithAggregatesInputSchema.optional(),
  take: z2.number().optional(),
  skip: z2.number().optional()
}).strict();
var ItemsFindUniqueArgsSchema = z2.object({
  select: ItemsSelectSchema.optional(),
  where: ItemsWhereUniqueInputSchema
}).strict();
var ItemsFindUniqueOrThrowArgsSchema = z2.object({
  select: ItemsSelectSchema.optional(),
  where: ItemsWhereUniqueInputSchema
}).strict();
var ItemsCreateArgsSchema = z2.object({
  select: ItemsSelectSchema.optional(),
  data: z2.union([ItemsCreateInputSchema, ItemsUncheckedCreateInputSchema])
}).strict();
var ItemsUpsertArgsSchema = z2.object({
  select: ItemsSelectSchema.optional(),
  where: ItemsWhereUniqueInputSchema,
  create: z2.union([ItemsCreateInputSchema, ItemsUncheckedCreateInputSchema]),
  update: z2.union([ItemsUpdateInputSchema, ItemsUncheckedUpdateInputSchema])
}).strict();
var ItemsCreateManyArgsSchema = z2.object({
  data: ItemsCreateManyInputSchema.array(),
  skipDuplicates: z2.boolean().optional()
}).strict();
var ItemsDeleteArgsSchema = z2.object({
  select: ItemsSelectSchema.optional(),
  where: ItemsWhereUniqueInputSchema
}).strict();
var ItemsUpdateArgsSchema = z2.object({
  select: ItemsSelectSchema.optional(),
  data: z2.union([ItemsUpdateInputSchema, ItemsUncheckedUpdateInputSchema]),
  where: ItemsWhereUniqueInputSchema
}).strict();
var ItemsUpdateManyArgsSchema = z2.object({
  data: z2.union([ItemsUpdateManyMutationInputSchema, ItemsUncheckedUpdateManyInputSchema]),
  where: ItemsWhereInputSchema.optional()
}).strict();
var ItemsDeleteManyArgsSchema = z2.object({
  where: ItemsWhereInputSchema.optional()
}).strict();
var tableSchemas = {
  items: {
    fields: ["value"],
    relations: [],
    modelSchema: ItemsCreateInputSchema.partial().or(ItemsUncheckedCreateInputSchema.partial()),
    createSchema: ItemsCreateArgsSchema,
    createManySchema: ItemsCreateManyArgsSchema,
    findUniqueSchema: ItemsFindUniqueArgsSchema,
    findSchema: ItemsFindFirstArgsSchema,
    updateSchema: ItemsUpdateArgsSchema,
    updateManySchema: ItemsUpdateManyArgsSchema,
    upsertSchema: ItemsUpsertArgsSchema,
    deleteSchema: ItemsDeleteArgsSchema,
    deleteManySchema: ItemsDeleteManyArgsSchema
  }
};
var schema = new C8(tableSchemas, migrations_default);

// src/toolbar/index.tsx
var import_react10 = __toESM(require_react());

// src/toolbar/logo.svg
var logo_default2 = 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg"%0A    viewBox="0 0 264 264"%0A    width="132"%0A    height="132">%0A  <path d="M136.992 53.1244C137.711 52.4029 138.683 52 139.692 52H200L114.008 138.089C113.289 138.811 112.317 139.213 111.308 139.213H51L136.992 53.1244Z"%0A      fill="%2300D2A0"%0A  />%0A  <path d="M126.416 141.125C126.416 140.066 127.275 139.204 128.331 139.204H200L126.416 213V141.125Z"%0A      fill="%2300D2A0"%0A  />%0A</svg>%0A';

// src/toolbar/index.tsx
var import_react11 = __toESM(require_react());
var import_client5 = __toESM(require_client());

// src/toolbar/tabs.tsx
var import_react9 = __toESM(require_react());

// src/toolbar/tabs/LocalDBTab.tsx
var import_react5 = __toESM(require_react());
function LocalDBTab() {
  return /* @__PURE__ */ import_react5.default.createElement("button", null, "RESET DB");
}

// src/toolbar/tabs/DDLXTab.tsx
var import_react6 = __toESM(require_react());
function DDLXTab() {
  return /* @__PURE__ */ import_react6.default.createElement("div", { className: "Toolbar-tab" }, "DDLX");
}

// src/toolbar/tabs/ShapesTab.tsx
var import_react7 = __toESM(require_react());
function ShapesTab() {
  return /* @__PURE__ */ import_react7.default.createElement("div", null, "Shapes");
}

// src/toolbar/tabs/XTermTab.tsx
var import_react8 = __toESM(require_react());

// node_modules/xterm-for-react/dist/bundle.js
var LIB = function(e5) {
  var t3 = {};
  function r7(i8) {
    if (t3[i8])
      return t3[i8].exports;
    var n11 = t3[i8] = { i: i8, l: false, exports: {} };
    return e5[i8].call(n11.exports, n11, n11.exports, r7), n11.l = true, n11.exports;
  }
  return r7.m = e5, r7.c = t3, r7.d = function(e6, t4, i8) {
    r7.o(e6, t4) || Object.defineProperty(e6, t4, { enumerable: true, get: i8 });
  }, r7.r = function(e6) {
    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e6, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e6, "__esModule", { value: true });
  }, r7.t = function(e6, t4) {
    if (1 & t4 && (e6 = r7(e6)), 8 & t4)
      return e6;
    if (4 & t4 && "object" == typeof e6 && e6 && e6.__esModule)
      return e6;
    var i8 = /* @__PURE__ */ Object.create(null);
    if (r7.r(i8), Object.defineProperty(i8, "default", { enumerable: true, value: e6 }), 2 & t4 && "string" != typeof e6)
      for (var n11 in e6)
        r7.d(i8, n11, function(t5) {
          return e6[t5];
        }.bind(null, n11));
    return i8;
  }, r7.n = function(e6) {
    var t4 = e6 && e6.__esModule ? function() {
      return e6.default;
    } : function() {
      return e6;
    };
    return r7.d(t4, "a", t4), t4;
  }, r7.o = function(e6, t4) {
    return Object.prototype.hasOwnProperty.call(e6, t4);
  }, r7.p = "", r7(r7.s = 70);
}([function(e5, t3, r7) {
  e5.exports = r7(64)();
}, function(e5, t3, r7) {
  (function(t4) {
    var r8 = function(e6) {
      return e6 && e6.Math == Math && e6;
    };
    e5.exports = r8("object" == typeof globalThis && globalThis) || r8("object" == typeof window && window) || r8("object" == typeof self && self) || r8("object" == typeof t4 && t4) || Function("return this")();
  }).call(this, r7(31));
}, function(e5, t3) {
  e5.exports = function(e6) {
    try {
      return !!e6();
    } catch (e7) {
      return true;
    }
  };
}, function(e5, t3) {
  var r7 = {}.hasOwnProperty;
  e5.exports = function(e6, t4) {
    return r7.call(e6, t4);
  };
}, function(e5, t3, r7) {
  var i8 = r7(2);
  e5.exports = !i8(function() {
    return 7 != Object.defineProperty({}, 1, { get: function() {
      return 7;
    } })[1];
  });
}, function(e5, t3) {
  e5.exports = function(e6) {
    return "object" == typeof e6 ? null !== e6 : "function" == typeof e6;
  };
}, function(e5, t3, r7) {
  var i8 = r7(4), n11 = r7(17), o9 = r7(11);
  e5.exports = i8 ? function(e6, t4, r8) {
    return n11.f(e6, t4, o9(1, r8));
  } : function(e6, t4, r8) {
    return e6[t4] = r8, e6;
  };
}, function(e5, t3, r7) {
  "use strict";
  e5.exports = r7(62);
}, function(e5, t3, r7) {
  var i8 = r7(12), n11 = r7(14);
  e5.exports = function(e6) {
    return i8(n11(e6));
  };
}, function(e5, t3, r7) {
  var i8 = r7(1), n11 = r7(6);
  e5.exports = function(e6, t4) {
    try {
      n11(i8, e6, t4);
    } catch (r8) {
      i8[e6] = t4;
    }
    return t4;
  };
}, function(e5, t3, r7) {
  var i8 = r7(4), n11 = r7(32), o9 = r7(11), s7 = r7(8), a5 = r7(15), c8 = r7(3), l7 = r7(16), h8 = Object.getOwnPropertyDescriptor;
  t3.f = i8 ? h8 : function(e6, t4) {
    if (e6 = s7(e6), t4 = a5(t4, true), l7)
      try {
        return h8(e6, t4);
      } catch (e7) {
      }
    if (c8(e6, t4))
      return o9(!n11.f.call(e6, t4), e6[t4]);
  };
}, function(e5, t3) {
  e5.exports = function(e6, t4) {
    return { enumerable: !(1 & e6), configurable: !(2 & e6), writable: !(4 & e6), value: t4 };
  };
}, function(e5, t3, r7) {
  var i8 = r7(2), n11 = r7(13), o9 = "".split;
  e5.exports = i8(function() {
    return !Object("z").propertyIsEnumerable(0);
  }) ? function(e6) {
    return "String" == n11(e6) ? o9.call(e6, "") : Object(e6);
  } : Object;
}, function(e5, t3) {
  var r7 = {}.toString;
  e5.exports = function(e6) {
    return r7.call(e6).slice(8, -1);
  };
}, function(e5, t3) {
  e5.exports = function(e6) {
    if (null == e6)
      throw TypeError("Can't call method on " + e6);
    return e6;
  };
}, function(e5, t3, r7) {
  var i8 = r7(5);
  e5.exports = function(e6, t4) {
    if (!i8(e6))
      return e6;
    var r8, n11;
    if (t4 && "function" == typeof (r8 = e6.toString) && !i8(n11 = r8.call(e6)))
      return n11;
    if ("function" == typeof (r8 = e6.valueOf) && !i8(n11 = r8.call(e6)))
      return n11;
    if (!t4 && "function" == typeof (r8 = e6.toString) && !i8(n11 = r8.call(e6)))
      return n11;
    throw TypeError("Can't convert object to primitive value");
  };
}, function(e5, t3, r7) {
  var i8 = r7(4), n11 = r7(2), o9 = r7(33);
  e5.exports = !i8 && !n11(function() {
    return 7 != Object.defineProperty(o9("div"), "a", { get: function() {
      return 7;
    } }).a;
  });
}, function(e5, t3, r7) {
  var i8 = r7(4), n11 = r7(16), o9 = r7(18), s7 = r7(15), a5 = Object.defineProperty;
  t3.f = i8 ? a5 : function(e6, t4, r8) {
    if (o9(e6), t4 = s7(t4, true), o9(r8), n11)
      try {
        return a5(e6, t4, r8);
      } catch (e7) {
      }
    if ("get" in r8 || "set" in r8)
      throw TypeError("Accessors not supported");
    return "value" in r8 && (e6[t4] = r8.value), e6;
  };
}, function(e5, t3, r7) {
  var i8 = r7(5);
  e5.exports = function(e6) {
    if (!i8(e6))
      throw TypeError(String(e6) + " is not an object");
    return e6;
  };
}, function(e5, t3, r7) {
  var i8 = r7(20), n11 = Function.toString;
  "function" != typeof i8.inspectSource && (i8.inspectSource = function(e6) {
    return n11.call(e6);
  }), e5.exports = i8.inspectSource;
}, function(e5, t3, r7) {
  var i8 = r7(1), n11 = r7(9), o9 = i8["__core-js_shared__"] || n11("__core-js_shared__", {});
  e5.exports = o9;
}, function(e5, t3, r7) {
  var i8 = r7(38), n11 = r7(20);
  (e5.exports = function(e6, t4) {
    return n11[e6] || (n11[e6] = void 0 !== t4 ? t4 : {});
  })("versions", []).push({ version: "3.6.5", mode: i8 ? "pure" : "global", copyright: "\xA9 2020 Denis Pushkarev (zloirock.ru)" });
}, function(e5, t3) {
  var r7 = 0, i8 = Math.random();
  e5.exports = function(e6) {
    return "Symbol(" + String(void 0 === e6 ? "" : e6) + ")_" + (++r7 + i8).toString(36);
  };
}, function(e5, t3) {
  e5.exports = {};
}, function(e5, t3, r7) {
  var i8 = r7(25), n11 = Math.min;
  e5.exports = function(e6) {
    return e6 > 0 ? n11(i8(e6), 9007199254740991) : 0;
  };
}, function(e5, t3) {
  var r7 = Math.ceil, i8 = Math.floor;
  e5.exports = function(e6) {
    return isNaN(e6 = +e6) ? 0 : (e6 > 0 ? i8 : r7)(e6);
  };
}, function(e5, t3, r7) {
  "use strict";
  var i8 = r7(50).forEach, n11 = r7(58), o9 = r7(59), s7 = n11("forEach"), a5 = o9("forEach");
  e5.exports = s7 && a5 ? [].forEach : function(e6) {
    return i8(this, e6, arguments.length > 1 ? arguments[1] : void 0);
  };
}, function(e5, t3, r7) {
  var i8 = r7(2);
  e5.exports = !!Object.getOwnPropertySymbols && !i8(function() {
    return !String(Symbol());
  });
}, function(e5, t3, r7) {
  window, e5.exports = function(e6) {
    var t4 = {};
    function r8(i8) {
      if (t4[i8])
        return t4[i8].exports;
      var n11 = t4[i8] = { i: i8, l: false, exports: {} };
      return e6[i8].call(n11.exports, n11, n11.exports, r8), n11.l = true, n11.exports;
    }
    return r8.m = e6, r8.c = t4, r8.d = function(e7, t5, i8) {
      r8.o(e7, t5) || Object.defineProperty(e7, t5, { enumerable: true, get: i8 });
    }, r8.r = function(e7) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e7, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e7, "__esModule", { value: true });
    }, r8.t = function(e7, t5) {
      if (1 & t5 && (e7 = r8(e7)), 8 & t5)
        return e7;
      if (4 & t5 && "object" == typeof e7 && e7 && e7.__esModule)
        return e7;
      var i8 = /* @__PURE__ */ Object.create(null);
      if (r8.r(i8), Object.defineProperty(i8, "default", { enumerable: true, value: e7 }), 2 & t5 && "string" != typeof e7)
        for (var n11 in e7)
          r8.d(i8, n11, function(t6) {
            return e7[t6];
          }.bind(null, n11));
      return i8;
    }, r8.n = function(e7) {
      var t5 = e7 && e7.__esModule ? function() {
        return e7.default;
      } : function() {
        return e7;
      };
      return r8.d(t5, "a", t5), t5;
    }, r8.o = function(e7, t5) {
      return Object.prototype.hasOwnProperty.call(e7, t5);
    }, r8.p = "", r8(r8.s = 32);
  }([function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = function() {
      function e7() {
        this._listeners = [], this._disposed = false;
      }
      return Object.defineProperty(e7.prototype, "event", { get: function() {
        var e8 = this;
        return this._event || (this._event = function(t5) {
          return e8._listeners.push(t5), { dispose: function() {
            if (!e8._disposed) {
              for (var r9 = 0; r9 < e8._listeners.length; r9++)
                if (e8._listeners[r9] === t5)
                  return void e8._listeners.splice(r9, 1);
            }
          } };
        }), this._event;
      }, enumerable: true, configurable: true }), e7.prototype.fire = function(e8, t5) {
        for (var r9 = [], i9 = 0; i9 < this._listeners.length; i9++)
          r9.push(this._listeners[i9]);
        for (i9 = 0; i9 < r9.length; i9++)
          r9[i9].call(void 0, e8, t5);
      }, e7.prototype.dispose = function() {
        this._listeners && (this._listeners.length = 0), this._disposed = true;
      }, e7;
    }();
    t4.EventEmitter = i8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(14);
    t4.IBufferService = i8.createDecorator("BufferService"), t4.ICoreMouseService = i8.createDecorator("CoreMouseService"), t4.ICoreService = i8.createDecorator("CoreService"), t4.ICharsetService = i8.createDecorator("CharsetService"), t4.IDirtyRowService = i8.createDecorator("DirtyRowService"), t4.IInstantiationService = i8.createDecorator("InstantiationService"), t4.ILogService = i8.createDecorator("LogService"), t4.IOptionsService = i8.createDecorator("OptionsService"), t4.IUnicodeService = i8.createDecorator("UnicodeService");
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = function() {
      function e7() {
        this._disposables = [], this._isDisposed = false;
      }
      return e7.prototype.dispose = function() {
        this._isDisposed = true, this._disposables.forEach(function(e8) {
          return e8.dispose();
        }), this._disposables.length = 0;
      }, e7.prototype.register = function(e8) {
        this._disposables.push(e8);
      }, e7.prototype.unregister = function(e8) {
        var t5 = this._disposables.indexOf(e8);
        -1 !== t5 && this._disposables.splice(t5, 1);
      }, e7;
    }();
    t4.Disposable = i8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true }), t4.DEFAULT_COLOR = 256, t4.DEFAULT_ATTR = 256 | t4.DEFAULT_COLOR << 9, t4.CHAR_DATA_ATTR_INDEX = 0, t4.CHAR_DATA_CHAR_INDEX = 1, t4.CHAR_DATA_WIDTH_INDEX = 2, t4.CHAR_DATA_CODE_INDEX = 3, t4.NULL_CELL_CHAR = "", t4.NULL_CELL_WIDTH = 1, t4.NULL_CELL_CODE = 0, t4.WHITESPACE_CELL_CHAR = " ", t4.WHITESPACE_CELL_WIDTH = 1, t4.WHITESPACE_CELL_CODE = 32;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(14);
    t4.ICharSizeService = i8.createDecorator("CharSizeService"), t4.ICoreBrowserService = i8.createDecorator("CoreBrowserService"), t4.IMouseService = i8.createDecorator("MouseService"), t4.IRenderService = i8.createDecorator("RenderService"), t4.ISelectionService = i8.createDecorator("SelectionService"), t4.ISoundService = i8.createDecorator("SoundService");
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    });
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(7), s7 = r8(3), a5 = function(e7) {
      function t5() {
        var t6 = null !== e7 && e7.apply(this, arguments) || this;
        return t6.content = 0, t6.fg = 0, t6.bg = 0, t6.combinedData = "", t6;
      }
      return n11(t5, e7), t5.fromCharData = function(e8) {
        var r9 = new t5();
        return r9.setFromCharData(e8), r9;
      }, t5.prototype.isCombined = function() {
        return 2097152 & this.content;
      }, t5.prototype.getWidth = function() {
        return this.content >> 22;
      }, t5.prototype.getChars = function() {
        return 2097152 & this.content ? this.combinedData : 2097151 & this.content ? o9.stringFromCodePoint(2097151 & this.content) : "";
      }, t5.prototype.getCode = function() {
        return this.isCombined() ? this.combinedData.charCodeAt(this.combinedData.length - 1) : 2097151 & this.content;
      }, t5.prototype.setFromCharData = function(e8) {
        this.fg = e8[s7.CHAR_DATA_ATTR_INDEX], this.bg = 0;
        var t6 = false;
        if (e8[s7.CHAR_DATA_CHAR_INDEX].length > 2)
          t6 = true;
        else if (2 === e8[s7.CHAR_DATA_CHAR_INDEX].length) {
          var r9 = e8[s7.CHAR_DATA_CHAR_INDEX].charCodeAt(0);
          if (55296 <= r9 && r9 <= 56319) {
            var i9 = e8[s7.CHAR_DATA_CHAR_INDEX].charCodeAt(1);
            56320 <= i9 && i9 <= 57343 ? this.content = 1024 * (r9 - 55296) + i9 - 56320 + 65536 | e8[s7.CHAR_DATA_WIDTH_INDEX] << 22 : t6 = true;
          } else
            t6 = true;
        } else
          this.content = e8[s7.CHAR_DATA_CHAR_INDEX].charCodeAt(0) | e8[s7.CHAR_DATA_WIDTH_INDEX] << 22;
        t6 && (this.combinedData = e8[s7.CHAR_DATA_CHAR_INDEX], this.content = 2097152 | e8[s7.CHAR_DATA_WIDTH_INDEX] << 22);
      }, t5.prototype.getAsCharData = function() {
        return [this.fg, this.getChars(), this.getWidth(), this.getCode()];
      }, t5;
    }(r8(6).AttributeData);
    t4.CellData = a5;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = function() {
      function e7() {
        this.fg = 0, this.bg = 0;
      }
      return e7.toColorRGB = function(e8) {
        return [e8 >>> 16 & 255, e8 >>> 8 & 255, 255 & e8];
      }, e7.fromColorRGB = function(e8) {
        return (255 & e8[0]) << 16 | (255 & e8[1]) << 8 | 255 & e8[2];
      }, e7.prototype.clone = function() {
        var t5 = new e7();
        return t5.fg = this.fg, t5.bg = this.bg, t5;
      }, e7.prototype.isInverse = function() {
        return 67108864 & this.fg;
      }, e7.prototype.isBold = function() {
        return 134217728 & this.fg;
      }, e7.prototype.isUnderline = function() {
        return 268435456 & this.fg;
      }, e7.prototype.isBlink = function() {
        return 536870912 & this.fg;
      }, e7.prototype.isInvisible = function() {
        return 1073741824 & this.fg;
      }, e7.prototype.isItalic = function() {
        return 67108864 & this.bg;
      }, e7.prototype.isDim = function() {
        return 134217728 & this.bg;
      }, e7.prototype.getFgColorMode = function() {
        return 50331648 & this.fg;
      }, e7.prototype.getBgColorMode = function() {
        return 50331648 & this.bg;
      }, e7.prototype.isFgRGB = function() {
        return 50331648 == (50331648 & this.fg);
      }, e7.prototype.isBgRGB = function() {
        return 50331648 == (50331648 & this.bg);
      }, e7.prototype.isFgPalette = function() {
        return 16777216 == (50331648 & this.fg) || 33554432 == (50331648 & this.fg);
      }, e7.prototype.isBgPalette = function() {
        return 16777216 == (50331648 & this.bg) || 33554432 == (50331648 & this.bg);
      }, e7.prototype.isFgDefault = function() {
        return 0 == (50331648 & this.fg);
      }, e7.prototype.isBgDefault = function() {
        return 0 == (50331648 & this.bg);
      }, e7.prototype.isAttributeDefault = function() {
        return 0 === this.fg && 0 === this.bg;
      }, e7.prototype.getFgColor = function() {
        switch (50331648 & this.fg) {
          case 16777216:
          case 33554432:
            return 255 & this.fg;
          case 50331648:
            return 16777215 & this.fg;
          default:
            return -1;
        }
      }, e7.prototype.getBgColor = function() {
        switch (50331648 & this.bg) {
          case 16777216:
          case 33554432:
            return 255 & this.bg;
          case 50331648:
            return 16777215 & this.bg;
          default:
            return -1;
        }
      }, e7;
    }();
    t4.AttributeData = i8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true }), t4.stringFromCodePoint = function(e7) {
      return e7 > 65535 ? (e7 -= 65536, String.fromCharCode(55296 + (e7 >> 10)) + String.fromCharCode(e7 % 1024 + 56320)) : String.fromCharCode(e7);
    }, t4.utf32ToString = function(e7, t5, r9) {
      void 0 === t5 && (t5 = 0), void 0 === r9 && (r9 = e7.length);
      for (var i9 = "", n12 = t5; n12 < r9; ++n12) {
        var o9 = e7[n12];
        o9 > 65535 ? (o9 -= 65536, i9 += String.fromCharCode(55296 + (o9 >> 10)) + String.fromCharCode(o9 % 1024 + 56320)) : i9 += String.fromCharCode(o9);
      }
      return i9;
    };
    var i8 = function() {
      function e7() {
        this._interim = 0;
      }
      return e7.prototype.clear = function() {
        this._interim = 0;
      }, e7.prototype.decode = function(e8, t5) {
        var r9 = e8.length;
        if (!r9)
          return 0;
        var i9 = 0, n12 = 0;
        this._interim && (56320 <= (a5 = e8.charCodeAt(n12++)) && a5 <= 57343 ? t5[i9++] = 1024 * (this._interim - 55296) + a5 - 56320 + 65536 : (t5[i9++] = this._interim, t5[i9++] = a5), this._interim = 0);
        for (var o9 = n12; o9 < r9; ++o9) {
          var s7 = e8.charCodeAt(o9);
          if (55296 <= s7 && s7 <= 56319) {
            if (++o9 >= r9)
              return this._interim = s7, i9;
            var a5;
            56320 <= (a5 = e8.charCodeAt(o9)) && a5 <= 57343 ? t5[i9++] = 1024 * (s7 - 55296) + a5 - 56320 + 65536 : (t5[i9++] = s7, t5[i9++] = a5);
          } else
            t5[i9++] = s7;
        }
        return i9;
      }, e7;
    }();
    t4.StringToUtf32 = i8;
    var n11 = function() {
      function e7() {
        this.interim = new Uint8Array(3);
      }
      return e7.prototype.clear = function() {
        this.interim.fill(0);
      }, e7.prototype.decode = function(e8, t5) {
        var r9 = e8.length;
        if (!r9)
          return 0;
        var i9, n12, o9, s7, a5 = 0, c8 = 0, l7 = 0;
        if (this.interim[0]) {
          var h8 = false, u8 = this.interim[0];
          u8 &= 192 == (224 & u8) ? 31 : 224 == (240 & u8) ? 15 : 7;
          for (var f6 = 0, _6 = void 0; (_6 = 63 & this.interim[++f6]) && f6 < 4; )
            u8 <<= 6, u8 |= _6;
          for (var d8 = 192 == (224 & this.interim[0]) ? 2 : 224 == (240 & this.interim[0]) ? 3 : 4, p10 = d8 - f6; l7 < p10; ) {
            if (l7 >= r9)
              return 0;
            if (128 != (192 & (_6 = e8[l7++]))) {
              l7--, h8 = true;
              break;
            }
            this.interim[f6++] = _6, u8 <<= 6, u8 |= 63 & _6;
          }
          h8 || (2 === d8 ? u8 < 128 ? l7-- : t5[a5++] = u8 : 3 === d8 ? u8 < 2048 || u8 >= 55296 && u8 <= 57343 || (t5[a5++] = u8) : u8 < 65536 || u8 > 1114111 || (t5[a5++] = u8)), this.interim.fill(0);
        }
        for (var v10 = r9 - 4, y6 = l7; y6 < r9; ) {
          for (; !(!(y6 < v10) || 128 & (i9 = e8[y6]) || 128 & (n12 = e8[y6 + 1]) || 128 & (o9 = e8[y6 + 2]) || 128 & (s7 = e8[y6 + 3])); )
            t5[a5++] = i9, t5[a5++] = n12, t5[a5++] = o9, t5[a5++] = s7, y6 += 4;
          if ((i9 = e8[y6++]) < 128)
            t5[a5++] = i9;
          else if (192 == (224 & i9)) {
            if (y6 >= r9)
              return this.interim[0] = i9, a5;
            if (128 != (192 & (n12 = e8[y6++]))) {
              y6--;
              continue;
            }
            if ((c8 = (31 & i9) << 6 | 63 & n12) < 128) {
              y6--;
              continue;
            }
            t5[a5++] = c8;
          } else if (224 == (240 & i9)) {
            if (y6 >= r9)
              return this.interim[0] = i9, a5;
            if (128 != (192 & (n12 = e8[y6++]))) {
              y6--;
              continue;
            }
            if (y6 >= r9)
              return this.interim[0] = i9, this.interim[1] = n12, a5;
            if (128 != (192 & (o9 = e8[y6++]))) {
              y6--;
              continue;
            }
            if ((c8 = (15 & i9) << 12 | (63 & n12) << 6 | 63 & o9) < 2048 || c8 >= 55296 && c8 <= 57343)
              continue;
            t5[a5++] = c8;
          } else if (240 == (248 & i9)) {
            if (y6 >= r9)
              return this.interim[0] = i9, a5;
            if (128 != (192 & (n12 = e8[y6++]))) {
              y6--;
              continue;
            }
            if (y6 >= r9)
              return this.interim[0] = i9, this.interim[1] = n12, a5;
            if (128 != (192 & (o9 = e8[y6++]))) {
              y6--;
              continue;
            }
            if (y6 >= r9)
              return this.interim[0] = i9, this.interim[1] = n12, this.interim[2] = o9, a5;
            if (128 != (192 & (s7 = e8[y6++]))) {
              y6--;
              continue;
            }
            if ((c8 = (7 & i9) << 18 | (63 & n12) << 12 | (63 & o9) << 6 | 63 & s7) < 65536 || c8 > 1114111)
              continue;
            t5[a5++] = c8;
          }
        }
        return a5;
      }, e7;
    }();
    t4.Utf8ToUtf32 = n11;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true }), t4.addDisposableDomListener = function(e7, t5, r9, i8) {
      e7.addEventListener(t5, r9, i8);
      var n11 = false;
      return { dispose: function() {
        n11 || (n11 = true, e7.removeEventListener(t5, r9, i8));
      } };
    };
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true }), t4.INVERTED_DEFAULT_COLOR = 257, t4.DIM_OPACITY = 0.5, t4.CHAR_ATLAS_CELL_SPACING = 1;
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11, o9, s7;
    function a5(e7) {
      var t5 = e7.toString(16);
      return t5.length < 2 ? "0" + t5 : t5;
    }
    function c8(e7, t5) {
      return e7 < t5 ? (t5 + 0.05) / (e7 + 0.05) : (e7 + 0.05) / (t5 + 0.05);
    }
    Object.defineProperty(t4, "__esModule", { value: true }), function(e7) {
      e7.toCss = function(e8, t5, r9, i9) {
        return void 0 !== i9 ? "#" + a5(e8) + a5(t5) + a5(r9) + a5(i9) : "#" + a5(e8) + a5(t5) + a5(r9);
      }, e7.toRgba = function(e8, t5, r9, i9) {
        return void 0 === i9 && (i9 = 255), (e8 << 24 | t5 << 16 | r9 << 8 | i9) >>> 0;
      };
    }(i8 = t4.channels || (t4.channels = {})), (n11 = t4.color || (t4.color = {})).blend = function(e7, t5) {
      var r9 = (255 & t5.rgba) / 255;
      if (1 === r9)
        return { css: t5.css, rgba: t5.rgba };
      var n12 = t5.rgba >> 24 & 255, o10 = t5.rgba >> 16 & 255, s8 = t5.rgba >> 8 & 255, a6 = e7.rgba >> 24 & 255, c9 = e7.rgba >> 16 & 255, l7 = e7.rgba >> 8 & 255, h8 = a6 + Math.round((n12 - a6) * r9), u8 = c9 + Math.round((o10 - c9) * r9), f6 = l7 + Math.round((s8 - l7) * r9);
      return { css: i8.toCss(h8, u8, f6), rgba: i8.toRgba(h8, u8, f6) };
    }, n11.ensureContrastRatio = function(e7, t5, r9) {
      var i9 = s7.ensureContrastRatio(e7.rgba, t5.rgba, r9);
      if (i9)
        return s7.toColor(i9 >> 24 & 255, i9 >> 16 & 255, i9 >> 8 & 255);
    }, n11.opaque = function(e7) {
      var t5 = (255 | e7.rgba) >>> 0, r9 = s7.toChannels(t5), n12 = r9[0], o10 = r9[1], a6 = r9[2];
      return { css: i8.toCss(n12, o10, a6), rgba: t5 };
    }, (t4.css || (t4.css = {})).toColor = function(e7) {
      return { css: e7, rgba: (parseInt(e7.slice(1), 16) << 8 | 255) >>> 0 };
    }, function(e7) {
      function t5(e8, t6, r9) {
        var i9 = e8 / 255, n12 = t6 / 255, o10 = r9 / 255;
        return 0.2126 * (i9 <= 0.03928 ? i9 / 12.92 : Math.pow((i9 + 0.055) / 1.055, 2.4)) + 0.7152 * (n12 <= 0.03928 ? n12 / 12.92 : Math.pow((n12 + 0.055) / 1.055, 2.4)) + 0.0722 * (o10 <= 0.03928 ? o10 / 12.92 : Math.pow((o10 + 0.055) / 1.055, 2.4));
      }
      e7.relativeLuminance = function(e8) {
        return t5(e8 >> 16 & 255, e8 >> 8 & 255, 255 & e8);
      }, e7.relativeLuminance2 = t5;
    }(o9 = t4.rgb || (t4.rgb = {})), function(e7) {
      function t5(e8, t6, r10) {
        for (var i9 = e8 >> 24 & 255, n12 = e8 >> 16 & 255, s8 = e8 >> 8 & 255, a6 = t6 >> 24 & 255, l7 = t6 >> 16 & 255, h8 = t6 >> 8 & 255, u8 = c8(o9.relativeLuminance2(a6, h8, l7), o9.relativeLuminance2(i9, n12, s8)); u8 < r10 && (a6 > 0 || l7 > 0 || h8 > 0); )
          a6 -= Math.max(0, Math.ceil(0.1 * a6)), l7 -= Math.max(0, Math.ceil(0.1 * l7)), h8 -= Math.max(0, Math.ceil(0.1 * h8)), u8 = c8(o9.relativeLuminance2(a6, h8, l7), o9.relativeLuminance2(i9, n12, s8));
        return (a6 << 24 | l7 << 16 | h8 << 8 | 255) >>> 0;
      }
      function r9(e8, t6, r10) {
        for (var i9 = e8 >> 24 & 255, n12 = e8 >> 16 & 255, s8 = e8 >> 8 & 255, a6 = t6 >> 24 & 255, l7 = t6 >> 16 & 255, h8 = t6 >> 8 & 255, u8 = c8(o9.relativeLuminance2(a6, h8, l7), o9.relativeLuminance2(i9, n12, s8)); u8 < r10 && (a6 < 255 || l7 < 255 || h8 < 255); )
          a6 = Math.min(255, a6 + Math.ceil(0.1 * (255 - a6))), l7 = Math.min(255, l7 + Math.ceil(0.1 * (255 - l7))), h8 = Math.min(255, h8 + Math.ceil(0.1 * (255 - h8))), u8 = c8(o9.relativeLuminance2(a6, h8, l7), o9.relativeLuminance2(i9, n12, s8));
        return (a6 << 24 | l7 << 16 | h8 << 8 | 255) >>> 0;
      }
      e7.ensureContrastRatio = function(e8, i9, n12) {
        var s8 = o9.relativeLuminance(e8 >> 8), a6 = o9.relativeLuminance(i9 >> 8);
        if (c8(s8, a6) < n12)
          return a6 < s8 ? t5(e8, i9, n12) : r9(e8, i9, n12);
      }, e7.reduceLuminance = t5, e7.increaseLuminance = r9, e7.toChannels = function(e8) {
        return [e8 >> 24 & 255, e8 >> 16 & 255, e8 >> 8 & 255, 255 & e8];
      }, e7.toColor = function(e8, t6, r10) {
        return { css: i8.toCss(e8, t6, r10), rgba: i8.toRgba(e8, t6, r10) };
      };
    }(s7 = t4.rgba || (t4.rgba = {})), t4.toPaddedHex = a5, t4.contrastRatio = c8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = "undefined" == typeof navigator, n11 = i8 ? "node" : navigator.userAgent, o9 = i8 ? "node" : navigator.platform;
    function s7(e7, t5) {
      return e7.indexOf(t5) >= 0;
    }
    t4.isFirefox = !!~n11.indexOf("Firefox"), t4.isSafari = /^((?!chrome|android).)*safari/i.test(n11), t4.isMac = s7(["Macintosh", "MacIntel", "MacPPC", "Mac68K"], o9), t4.isIpad = "iPad" === o9, t4.isIphone = "iPhone" === o9, t4.isWindows = s7(["Windows", "Win16", "Win32", "WinCE"], o9), t4.isLinux = o9.indexOf("Linux") >= 0;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true }), function(e7) {
      e7.NUL = "\0", e7.SOH = "", e7.STX = "", e7.ETX = "", e7.EOT = "", e7.ENQ = "", e7.ACK = "", e7.BEL = "\x07", e7.BS = "\b", e7.HT = "	", e7.LF = "\n", e7.VT = "\v", e7.FF = "\f", e7.CR = "\r", e7.SO = "", e7.SI = "", e7.DLE = "", e7.DC1 = "", e7.DC2 = "", e7.DC3 = "", e7.DC4 = "", e7.NAK = "", e7.SYN = "", e7.ETB = "", e7.CAN = "", e7.EM = "", e7.SUB = "", e7.ESC = "\x1B", e7.FS = "", e7.GS = "", e7.RS = "", e7.US = "", e7.SP = " ", e7.DEL = "\x7F";
    }(t4.C0 || (t4.C0 = {})), function(e7) {
      e7.PAD = "\x80", e7.HOP = "\x81", e7.BPH = "\x82", e7.NBH = "\x83", e7.IND = "\x84", e7.NEL = "\x85", e7.SSA = "\x86", e7.ESA = "\x87", e7.HTS = "\x88", e7.HTJ = "\x89", e7.VTS = "\x8A", e7.PLD = "\x8B", e7.PLU = "\x8C", e7.RI = "\x8D", e7.SS2 = "\x8E", e7.SS3 = "\x8F", e7.DCS = "\x90", e7.PU1 = "\x91", e7.PU2 = "\x92", e7.STS = "\x93", e7.CCH = "\x94", e7.MW = "\x95", e7.SPA = "\x96", e7.EPA = "\x97", e7.SOS = "\x98", e7.SGCI = "\x99", e7.SCI = "\x9A", e7.CSI = "\x9B", e7.ST = "\x9C", e7.OSC = "\x9D", e7.PM = "\x9E", e7.APC = "\x9F";
    }(t4.C1 || (t4.C1 = {}));
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(3), n11 = r8(9), o9 = r8(23), s7 = r8(6), a5 = r8(26), c8 = r8(10), l7 = function() {
      function e7(e8, t5, r9, i9, n12, o10, s8, a6) {
        this._container = e8, this._alpha = i9, this._colors = n12, this._rendererId = o10, this._bufferService = s8, this._optionsService = a6, this._scaledCharWidth = 0, this._scaledCharHeight = 0, this._scaledCellWidth = 0, this._scaledCellHeight = 0, this._scaledCharLeft = 0, this._scaledCharTop = 0, this._currentGlyphIdentifier = { chars: "", code: 0, bg: 0, fg: 0, bold: false, dim: false, italic: false }, this._canvas = document.createElement("canvas"), this._canvas.classList.add("xterm-" + t5 + "-layer"), this._canvas.style.zIndex = r9.toString(), this._initCanvas(), this._container.appendChild(this._canvas);
      }
      return e7.prototype.dispose = function() {
        var e8;
        this._container.removeChild(this._canvas), null === (e8 = this._charAtlas) || void 0 === e8 || e8.dispose();
      }, e7.prototype._initCanvas = function() {
        this._ctx = a5.throwIfFalsy(this._canvas.getContext("2d", { alpha: this._alpha })), this._alpha || this._clearAll();
      }, e7.prototype.onOptionsChanged = function() {
      }, e7.prototype.onBlur = function() {
      }, e7.prototype.onFocus = function() {
      }, e7.prototype.onCursorMove = function() {
      }, e7.prototype.onGridChanged = function(e8, t5) {
      }, e7.prototype.onSelectionChanged = function(e8, t5, r9) {
        void 0 === r9 && (r9 = false);
      }, e7.prototype.setColors = function(e8) {
        this._refreshCharAtlas(e8);
      }, e7.prototype._setTransparency = function(e8) {
        if (e8 !== this._alpha) {
          var t5 = this._canvas;
          this._alpha = e8, this._canvas = this._canvas.cloneNode(), this._initCanvas(), this._container.replaceChild(this._canvas, t5), this._refreshCharAtlas(this._colors), this.onGridChanged(0, this._bufferService.rows - 1);
        }
      }, e7.prototype._refreshCharAtlas = function(e8) {
        this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0 || (this._charAtlas = o9.acquireCharAtlas(this._optionsService.options, this._rendererId, e8, this._scaledCharWidth, this._scaledCharHeight), this._charAtlas.warmUp());
      }, e7.prototype.resize = function(e8) {
        this._scaledCellWidth = e8.scaledCellWidth, this._scaledCellHeight = e8.scaledCellHeight, this._scaledCharWidth = e8.scaledCharWidth, this._scaledCharHeight = e8.scaledCharHeight, this._scaledCharLeft = e8.scaledCharLeft, this._scaledCharTop = e8.scaledCharTop, this._canvas.width = e8.scaledCanvasWidth, this._canvas.height = e8.scaledCanvasHeight, this._canvas.style.width = e8.canvasWidth + "px", this._canvas.style.height = e8.canvasHeight + "px", this._alpha || this._clearAll(), this._refreshCharAtlas(this._colors);
      }, e7.prototype._fillCells = function(e8, t5, r9, i9) {
        this._ctx.fillRect(e8 * this._scaledCellWidth, t5 * this._scaledCellHeight, r9 * this._scaledCellWidth, i9 * this._scaledCellHeight);
      }, e7.prototype._fillBottomLineAtCells = function(e8, t5, r9) {
        void 0 === r9 && (r9 = 1), this._ctx.fillRect(e8 * this._scaledCellWidth, (t5 + 1) * this._scaledCellHeight - window.devicePixelRatio - 1, r9 * this._scaledCellWidth, window.devicePixelRatio);
      }, e7.prototype._fillLeftLineAtCell = function(e8, t5, r9) {
        this._ctx.fillRect(e8 * this._scaledCellWidth, t5 * this._scaledCellHeight, window.devicePixelRatio * r9, this._scaledCellHeight);
      }, e7.prototype._strokeRectAtCell = function(e8, t5, r9, i9) {
        this._ctx.lineWidth = window.devicePixelRatio, this._ctx.strokeRect(e8 * this._scaledCellWidth + window.devicePixelRatio / 2, t5 * this._scaledCellHeight + window.devicePixelRatio / 2, r9 * this._scaledCellWidth - window.devicePixelRatio, i9 * this._scaledCellHeight - window.devicePixelRatio);
      }, e7.prototype._clearAll = function() {
        this._alpha ? this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height) : (this._ctx.fillStyle = this._colors.background.css, this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height));
      }, e7.prototype._clearCells = function(e8, t5, r9, i9) {
        this._alpha ? this._ctx.clearRect(e8 * this._scaledCellWidth, t5 * this._scaledCellHeight, r9 * this._scaledCellWidth, i9 * this._scaledCellHeight) : (this._ctx.fillStyle = this._colors.background.css, this._ctx.fillRect(e8 * this._scaledCellWidth, t5 * this._scaledCellHeight, r9 * this._scaledCellWidth, i9 * this._scaledCellHeight));
      }, e7.prototype._fillCharTrueColor = function(e8, t5, r9) {
        this._ctx.font = this._getFont(false, false), this._ctx.textBaseline = "middle", this._clipRow(r9), this._ctx.fillText(e8.getChars(), t5 * this._scaledCellWidth + this._scaledCharLeft, r9 * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight / 2);
      }, e7.prototype._drawChars = function(e8, t5, r9) {
        var o10, s8, a6 = this._getContrastColor(e8);
        a6 || e8.isFgRGB() || e8.isBgRGB() ? this._drawUncachedChars(e8, t5, r9, a6) : (e8.isInverse() ? (o10 = e8.isBgDefault() ? n11.INVERTED_DEFAULT_COLOR : e8.getBgColor(), s8 = e8.isFgDefault() ? n11.INVERTED_DEFAULT_COLOR : e8.getFgColor()) : (s8 = e8.isBgDefault() ? i8.DEFAULT_COLOR : e8.getBgColor(), o10 = e8.isFgDefault() ? i8.DEFAULT_COLOR : e8.getFgColor()), o10 += this._optionsService.options.drawBoldTextInBrightColors && e8.isBold() && o10 < 8 ? 8 : 0, this._currentGlyphIdentifier.chars = e8.getChars() || i8.WHITESPACE_CELL_CHAR, this._currentGlyphIdentifier.code = e8.getCode() || i8.WHITESPACE_CELL_CODE, this._currentGlyphIdentifier.bg = s8, this._currentGlyphIdentifier.fg = o10, this._currentGlyphIdentifier.bold = !!e8.isBold(), this._currentGlyphIdentifier.dim = !!e8.isDim(), this._currentGlyphIdentifier.italic = !!e8.isItalic(), this._charAtlas && this._charAtlas.draw(this._ctx, this._currentGlyphIdentifier, t5 * this._scaledCellWidth + this._scaledCharLeft, r9 * this._scaledCellHeight + this._scaledCharTop) || this._drawUncachedChars(e8, t5, r9));
      }, e7.prototype._drawUncachedChars = function(e8, t5, r9, i9) {
        if (this._ctx.save(), this._ctx.font = this._getFont(!!e8.isBold(), !!e8.isItalic()), this._ctx.textBaseline = "middle", e8.isInverse())
          if (i9)
            this._ctx.fillStyle = i9.css;
          else if (e8.isBgDefault())
            this._ctx.fillStyle = c8.color.opaque(this._colors.background).css;
          else if (e8.isBgRGB())
            this._ctx.fillStyle = "rgb(" + s7.AttributeData.toColorRGB(e8.getBgColor()).join(",") + ")";
          else {
            var o10 = e8.getBgColor();
            this._optionsService.options.drawBoldTextInBrightColors && e8.isBold() && o10 < 8 && (o10 += 8), this._ctx.fillStyle = this._colors.ansi[o10].css;
          }
        else if (i9)
          this._ctx.fillStyle = i9.css;
        else if (e8.isFgDefault())
          this._ctx.fillStyle = this._colors.foreground.css;
        else if (e8.isFgRGB())
          this._ctx.fillStyle = "rgb(" + s7.AttributeData.toColorRGB(e8.getFgColor()).join(",") + ")";
        else {
          var a6 = e8.getFgColor();
          this._optionsService.options.drawBoldTextInBrightColors && e8.isBold() && a6 < 8 && (a6 += 8), this._ctx.fillStyle = this._colors.ansi[a6].css;
        }
        this._clipRow(r9), e8.isDim() && (this._ctx.globalAlpha = n11.DIM_OPACITY), this._ctx.fillText(e8.getChars(), t5 * this._scaledCellWidth + this._scaledCharLeft, r9 * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight / 2), this._ctx.restore();
      }, e7.prototype._clipRow = function(e8) {
        this._ctx.beginPath(), this._ctx.rect(0, e8 * this._scaledCellHeight, this._bufferService.cols * this._scaledCellWidth, this._scaledCellHeight), this._ctx.clip();
      }, e7.prototype._getFont = function(e8, t5) {
        return (t5 ? "italic" : "") + " " + (e8 ? this._optionsService.options.fontWeightBold : this._optionsService.options.fontWeight) + " " + this._optionsService.options.fontSize * window.devicePixelRatio + "px " + this._optionsService.options.fontFamily;
      }, e7.prototype._getContrastColor = function(e8) {
        if (1 !== this._optionsService.options.minimumContrastRatio) {
          var t5 = this._colors.contrastCache.getColor(e8.bg, e8.fg);
          if (void 0 !== t5)
            return t5 || void 0;
          var r9 = e8.getFgColor(), i9 = e8.getFgColorMode(), n12 = e8.getBgColor(), o10 = e8.getBgColorMode(), s8 = !!e8.isInverse(), a6 = !!e8.isInverse();
          if (s8) {
            var l8 = r9;
            r9 = n12, n12 = l8;
            var h8 = i9;
            i9 = o10, o10 = h8;
          }
          var u8 = this._resolveBackgroundRgba(o10, n12, s8), f6 = this._resolveForegroundRgba(i9, r9, s8, a6), _6 = c8.rgba.ensureContrastRatio(u8, f6, this._optionsService.options.minimumContrastRatio);
          if (_6) {
            var d8 = { css: c8.channels.toCss(_6 >> 24 & 255, _6 >> 16 & 255, _6 >> 8 & 255), rgba: _6 };
            return this._colors.contrastCache.setColor(e8.bg, e8.fg, d8), d8;
          }
          this._colors.contrastCache.setColor(e8.bg, e8.fg, null);
        }
      }, e7.prototype._resolveBackgroundRgba = function(e8, t5, r9) {
        switch (e8) {
          case 16777216:
          case 33554432:
            return this._colors.ansi[t5].rgba;
          case 50331648:
            return t5 << 8;
          case 0:
          default:
            return r9 ? this._colors.foreground.rgba : this._colors.background.rgba;
        }
      }, e7.prototype._resolveForegroundRgba = function(e8, t5, r9, i9) {
        switch (e8) {
          case 16777216:
          case 33554432:
            return this._optionsService.options.drawBoldTextInBrightColors && i9 && t5 < 8 && (t5 += 8), this._colors.ansi[t5].rgba;
          case 50331648:
            return t5 << 8;
          case 0:
          default:
            return r9 ? this._colors.background.rgba : this._colors.foreground.rgba;
        }
      }, e7;
    }();
    t4.BaseRenderLayer = l7;
  }, function(e6, t4, r8) {
    "use strict";
    function i8(e7, t5, r9) {
      t5.di$target === t5 ? t5.di$dependencies.push({ id: e7, index: r9 }) : (t5.di$dependencies = [{ id: e7, index: r9 }], t5.di$target = t5);
    }
    Object.defineProperty(t4, "__esModule", { value: true }), t4.serviceRegistry = /* @__PURE__ */ new Map(), t4.getServiceDependencies = function(e7) {
      return e7.di$dependencies || [];
    }, t4.createDecorator = function(e7) {
      if (t4.serviceRegistry.has(e7))
        return t4.serviceRegistry.get(e7);
      var r9 = function(e8, t5, n11) {
        if (3 !== arguments.length)
          throw new Error("@IServiceName-decorator can only be used to decorate a parameter");
        i8(r9, e8, n11);
      };
      return r9.toString = function() {
        return e7;
      }, t4.serviceRegistry.set(e7, r9), r9;
    };
  }, function(e6, t4, r8) {
    "use strict";
    function i8(e7, t5, r9, i9) {
      if (void 0 === r9 && (r9 = 0), void 0 === i9 && (i9 = e7.length), r9 >= e7.length)
        return e7;
      r9 = (e7.length + r9) % e7.length, i9 = i9 >= e7.length ? e7.length : (e7.length + i9) % e7.length;
      for (var n11 = r9; n11 < i9; ++n11)
        e7[n11] = t5;
      return e7;
    }
    Object.defineProperty(t4, "__esModule", { value: true }), t4.fill = function(e7, t5, r9, n11) {
      return e7.fill ? e7.fill(t5, r9, n11) : i8(e7, t5, r9, n11);
    }, t4.fillFallback = i8, t4.concat = function(e7, t5) {
      var r9 = new e7.constructor(e7.length + t5.length);
      return r9.set(e7), r9.set(t5, e7.length), r9;
    };
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(7), n11 = r8(3), o9 = r8(5), s7 = r8(6);
    t4.DEFAULT_ATTR_DATA = Object.freeze(new s7.AttributeData());
    var a5 = function() {
      function e7(e8, t5, r9) {
        void 0 === r9 && (r9 = false), this.isWrapped = r9, this._combined = {}, this._data = new Uint32Array(3 * e8);
        for (var i9 = t5 || o9.CellData.fromCharData([0, n11.NULL_CELL_CHAR, n11.NULL_CELL_WIDTH, n11.NULL_CELL_CODE]), s8 = 0; s8 < e8; ++s8)
          this.setCell(s8, i9);
        this.length = e8;
      }
      return e7.prototype.get = function(e8) {
        var t5 = this._data[3 * e8 + 0], r9 = 2097151 & t5;
        return [this._data[3 * e8 + 1], 2097152 & t5 ? this._combined[e8] : r9 ? i8.stringFromCodePoint(r9) : "", t5 >> 22, 2097152 & t5 ? this._combined[e8].charCodeAt(this._combined[e8].length - 1) : r9];
      }, e7.prototype.set = function(e8, t5) {
        this._data[3 * e8 + 1] = t5[n11.CHAR_DATA_ATTR_INDEX], t5[n11.CHAR_DATA_CHAR_INDEX].length > 1 ? (this._combined[e8] = t5[1], this._data[3 * e8 + 0] = 2097152 | e8 | t5[n11.CHAR_DATA_WIDTH_INDEX] << 22) : this._data[3 * e8 + 0] = t5[n11.CHAR_DATA_CHAR_INDEX].charCodeAt(0) | t5[n11.CHAR_DATA_WIDTH_INDEX] << 22;
      }, e7.prototype.getWidth = function(e8) {
        return this._data[3 * e8 + 0] >> 22;
      }, e7.prototype.hasWidth = function(e8) {
        return 12582912 & this._data[3 * e8 + 0];
      }, e7.prototype.getFg = function(e8) {
        return this._data[3 * e8 + 1];
      }, e7.prototype.getBg = function(e8) {
        return this._data[3 * e8 + 2];
      }, e7.prototype.hasContent = function(e8) {
        return 4194303 & this._data[3 * e8 + 0];
      }, e7.prototype.getCodePoint = function(e8) {
        var t5 = this._data[3 * e8 + 0];
        return 2097152 & t5 ? this._combined[e8].charCodeAt(this._combined[e8].length - 1) : 2097151 & t5;
      }, e7.prototype.isCombined = function(e8) {
        return 2097152 & this._data[3 * e8 + 0];
      }, e7.prototype.getString = function(e8) {
        var t5 = this._data[3 * e8 + 0];
        return 2097152 & t5 ? this._combined[e8] : 2097151 & t5 ? i8.stringFromCodePoint(2097151 & t5) : "";
      }, e7.prototype.loadCell = function(e8, t5) {
        var r9 = 3 * e8;
        return t5.content = this._data[r9 + 0], t5.fg = this._data[r9 + 1], t5.bg = this._data[r9 + 2], 2097152 & t5.content && (t5.combinedData = this._combined[e8]), t5;
      }, e7.prototype.setCell = function(e8, t5) {
        2097152 & t5.content && (this._combined[e8] = t5.combinedData), this._data[3 * e8 + 0] = t5.content, this._data[3 * e8 + 1] = t5.fg, this._data[3 * e8 + 2] = t5.bg;
      }, e7.prototype.setCellFromCodePoint = function(e8, t5, r9, i9, n12) {
        this._data[3 * e8 + 0] = t5 | r9 << 22, this._data[3 * e8 + 1] = i9, this._data[3 * e8 + 2] = n12;
      }, e7.prototype.addCodepointToCell = function(e8, t5) {
        var r9 = this._data[3 * e8 + 0];
        2097152 & r9 ? this._combined[e8] += i8.stringFromCodePoint(t5) : (2097151 & r9 ? (this._combined[e8] = i8.stringFromCodePoint(2097151 & r9) + i8.stringFromCodePoint(t5), r9 &= -2097152, r9 |= 2097152) : r9 = t5 | 1 << 22, this._data[3 * e8 + 0] = r9);
      }, e7.prototype.insertCells = function(e8, t5, r9, i9) {
        if ((e8 %= this.length) && 2 === this.getWidth(e8 - 1) && this.setCellFromCodePoint(e8 - 1, 0, 1, (null == i9 ? void 0 : i9.fg) || 0, (null == i9 ? void 0 : i9.bg) || 0), t5 < this.length - e8) {
          for (var n12 = new o9.CellData(), s8 = this.length - e8 - t5 - 1; s8 >= 0; --s8)
            this.setCell(e8 + t5 + s8, this.loadCell(e8 + s8, n12));
          for (s8 = 0; s8 < t5; ++s8)
            this.setCell(e8 + s8, r9);
        } else
          for (s8 = e8; s8 < this.length; ++s8)
            this.setCell(s8, r9);
        2 === this.getWidth(this.length - 1) && this.setCellFromCodePoint(this.length - 1, 0, 1, (null == i9 ? void 0 : i9.fg) || 0, (null == i9 ? void 0 : i9.bg) || 0);
      }, e7.prototype.deleteCells = function(e8, t5, r9, i9) {
        if (e8 %= this.length, t5 < this.length - e8) {
          for (var n12 = new o9.CellData(), s8 = 0; s8 < this.length - e8 - t5; ++s8)
            this.setCell(e8 + s8, this.loadCell(e8 + t5 + s8, n12));
          for (s8 = this.length - t5; s8 < this.length; ++s8)
            this.setCell(s8, r9);
        } else
          for (s8 = e8; s8 < this.length; ++s8)
            this.setCell(s8, r9);
        e8 && 2 === this.getWidth(e8 - 1) && this.setCellFromCodePoint(e8 - 1, 0, 1, (null == i9 ? void 0 : i9.fg) || 0, (null == i9 ? void 0 : i9.bg) || 0), 0 !== this.getWidth(e8) || this.hasContent(e8) || this.setCellFromCodePoint(e8, 0, 1, (null == i9 ? void 0 : i9.fg) || 0, (null == i9 ? void 0 : i9.bg) || 0);
      }, e7.prototype.replaceCells = function(e8, t5, r9, i9) {
        for (e8 && 2 === this.getWidth(e8 - 1) && this.setCellFromCodePoint(e8 - 1, 0, 1, (null == i9 ? void 0 : i9.fg) || 0, (null == i9 ? void 0 : i9.bg) || 0), t5 < this.length && 2 === this.getWidth(t5 - 1) && this.setCellFromCodePoint(t5, 0, 1, (null == i9 ? void 0 : i9.fg) || 0, (null == i9 ? void 0 : i9.bg) || 0); e8 < t5 && e8 < this.length; )
          this.setCell(e8++, r9);
      }, e7.prototype.resize = function(e8, t5) {
        if (e8 !== this.length) {
          if (e8 > this.length) {
            var r9 = new Uint32Array(3 * e8);
            this.length && (3 * e8 < this._data.length ? r9.set(this._data.subarray(0, 3 * e8)) : r9.set(this._data)), this._data = r9;
            for (var i9 = this.length; i9 < e8; ++i9)
              this.setCell(i9, t5);
          } else if (e8) {
            (r9 = new Uint32Array(3 * e8)).set(this._data.subarray(0, 3 * e8)), this._data = r9;
            var n12 = Object.keys(this._combined);
            for (i9 = 0; i9 < n12.length; i9++) {
              var o10 = parseInt(n12[i9], 10);
              o10 >= e8 && delete this._combined[o10];
            }
          } else
            this._data = new Uint32Array(0), this._combined = {};
          this.length = e8;
        }
      }, e7.prototype.fill = function(e8) {
        this._combined = {};
        for (var t5 = 0; t5 < this.length; ++t5)
          this.setCell(t5, e8);
      }, e7.prototype.copyFrom = function(e8) {
        for (var t5 in this.length !== e8.length ? this._data = new Uint32Array(e8._data) : this._data.set(e8._data), this.length = e8.length, this._combined = {}, e8._combined)
          this._combined[t5] = e8._combined[t5];
        this.isWrapped = e8.isWrapped;
      }, e7.prototype.clone = function() {
        var t5 = new e7(0);
        for (var r9 in t5._data = new Uint32Array(this._data), t5.length = this.length, this._combined)
          t5._combined[r9] = this._combined[r9];
        return t5.isWrapped = this.isWrapped, t5;
      }, e7.prototype.getTrimmedLength = function() {
        for (var e8 = this.length - 1; e8 >= 0; --e8)
          if (4194303 & this._data[3 * e8 + 0])
            return e8 + (this._data[3 * e8 + 0] >> 22);
        return 0;
      }, e7.prototype.copyCellsFrom = function(e8, t5, r9, i9, n12) {
        var o10 = e8._data;
        if (n12)
          for (var s8 = i9 - 1; s8 >= 0; s8--)
            for (var a6 = 0; a6 < 3; a6++)
              this._data[3 * (r9 + s8) + a6] = o10[3 * (t5 + s8) + a6];
        else
          for (s8 = 0; s8 < i9; s8++)
            for (a6 = 0; a6 < 3; a6++)
              this._data[3 * (r9 + s8) + a6] = o10[3 * (t5 + s8) + a6];
        var c8 = Object.keys(e8._combined);
        for (a6 = 0; a6 < c8.length; a6++) {
          var l7 = parseInt(c8[a6], 10);
          l7 >= t5 && (this._combined[l7 - t5 + r9] = e8._combined[l7]);
        }
      }, e7.prototype.translateToString = function(e8, t5, r9) {
        void 0 === e8 && (e8 = false), void 0 === t5 && (t5 = 0), void 0 === r9 && (r9 = this.length), e8 && (r9 = Math.min(r9, this.getTrimmedLength()));
        for (var o10 = ""; t5 < r9; ) {
          var s8 = this._data[3 * t5 + 0], a6 = 2097151 & s8;
          o10 += 2097152 & s8 ? this._combined[t5] : a6 ? i8.stringFromCodePoint(a6) : n11.WHITESPACE_CELL_CHAR, t5 += s8 >> 22 || 1;
        }
        return o10;
      }, e7;
    }();
    t4.BufferLine = a5;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true }), t4.promptLabel = "Terminal input", t4.tooMuchOutput = "Too much output to announce, navigate to rows manually to read";
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true }), t4.CHARSETS = {}, t4.DEFAULT_CHARSET = t4.CHARSETS.B, t4.CHARSETS[0] = { "`": "\u25C6", a: "\u2592", b: "\u2409", c: "\u240C", d: "\u240D", e: "\u240A", f: "\xB0", g: "\xB1", h: "\u2424", i: "\u240B", j: "\u2518", k: "\u2510", l: "\u250C", m: "\u2514", n: "\u253C", o: "\u23BA", p: "\u23BB", q: "\u2500", r: "\u23BC", s: "\u23BD", t: "\u251C", u: "\u2524", v: "\u2534", w: "\u252C", x: "\u2502", y: "\u2264", z: "\u2265", "{": "\u03C0", "|": "\u2260", "}": "\xA3", "~": "\xB7" }, t4.CHARSETS.A = { "#": "\xA3" }, t4.CHARSETS.B = null, t4.CHARSETS[4] = { "#": "\xA3", "@": "\xBE", "[": "ij", "\\": "\xBD", "]": "|", "{": "\xA8", "|": "f", "}": "\xBC", "~": "\xB4" }, t4.CHARSETS.C = t4.CHARSETS[5] = { "[": "\xC4", "\\": "\xD6", "]": "\xC5", "^": "\xDC", "`": "\xE9", "{": "\xE4", "|": "\xF6", "}": "\xE5", "~": "\xFC" }, t4.CHARSETS.R = { "#": "\xA3", "@": "\xE0", "[": "\xB0", "\\": "\xE7", "]": "\xA7", "{": "\xE9", "|": "\xF9", "}": "\xE8", "~": "\xA8" }, t4.CHARSETS.Q = { "@": "\xE0", "[": "\xE2", "\\": "\xE7", "]": "\xEA", "^": "\xEE", "`": "\xF4", "{": "\xE9", "|": "\xF9", "}": "\xE8", "~": "\xFB" }, t4.CHARSETS.K = { "@": "\xA7", "[": "\xC4", "\\": "\xD6", "]": "\xDC", "{": "\xE4", "|": "\xF6", "}": "\xFC", "~": "\xDF" }, t4.CHARSETS.Y = { "#": "\xA3", "@": "\xA7", "[": "\xB0", "\\": "\xE7", "]": "\xE9", "`": "\xF9", "{": "\xE0", "|": "\xF2", "}": "\xE8", "~": "\xEC" }, t4.CHARSETS.E = t4.CHARSETS[6] = { "@": "\xC4", "[": "\xC6", "\\": "\xD8", "]": "\xC5", "^": "\xDC", "`": "\xE4", "{": "\xE6", "|": "\xF8", "}": "\xE5", "~": "\xFC" }, t4.CHARSETS.Z = { "#": "\xA3", "@": "\xA7", "[": "\xA1", "\\": "\xD1", "]": "\xBF", "{": "\xB0", "|": "\xF1", "}": "\xE7" }, t4.CHARSETS.H = t4.CHARSETS[7] = { "@": "\xC9", "[": "\xC4", "\\": "\xD6", "]": "\xC5", "^": "\xDC", "`": "\xE9", "{": "\xE4", "|": "\xF6", "}": "\xE5", "~": "\xFC" }, t4.CHARSETS["="] = { "#": "\xF9", "@": "\xE0", "[": "\xE9", "\\": "\xE7", "]": "\xEA", "^": "\xEE", _: "\xE8", "`": "\xF4", "{": "\xE4", "|": "\xF6", "}": "\xFC", "~": "\xFB" };
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = function() {
      function e7(e8, t5) {
        if (void 0 === e8 && (e8 = 32), void 0 === t5 && (t5 = 32), this.maxLength = e8, this.maxSubParamsLength = t5, t5 > 256)
          throw new Error("maxSubParamsLength must not be greater than 256");
        this.params = new Int32Array(e8), this.length = 0, this._subParams = new Int32Array(t5), this._subParamsLength = 0, this._subParamsIdx = new Uint16Array(e8), this._rejectDigits = false, this._rejectSubDigits = false, this._digitIsSub = false;
      }
      return e7.fromArray = function(t5) {
        var r9 = new e7();
        if (!t5.length)
          return r9;
        for (var i9 = t5[0] instanceof Array ? 1 : 0; i9 < t5.length; ++i9) {
          var n11 = t5[i9];
          if (n11 instanceof Array)
            for (var o9 = 0; o9 < n11.length; ++o9)
              r9.addSubParam(n11[o9]);
          else
            r9.addParam(n11);
        }
        return r9;
      }, e7.prototype.clone = function() {
        var t5 = new e7(this.maxLength, this.maxSubParamsLength);
        return t5.params.set(this.params), t5.length = this.length, t5._subParams.set(this._subParams), t5._subParamsLength = this._subParamsLength, t5._subParamsIdx.set(this._subParamsIdx), t5._rejectDigits = this._rejectDigits, t5._rejectSubDigits = this._rejectSubDigits, t5._digitIsSub = this._digitIsSub, t5;
      }, e7.prototype.toArray = function() {
        for (var e8 = [], t5 = 0; t5 < this.length; ++t5) {
          e8.push(this.params[t5]);
          var r9 = this._subParamsIdx[t5] >> 8, i9 = 255 & this._subParamsIdx[t5];
          i9 - r9 > 0 && e8.push(Array.prototype.slice.call(this._subParams, r9, i9));
        }
        return e8;
      }, e7.prototype.reset = function() {
        this.length = 0, this._subParamsLength = 0, this._rejectDigits = false, this._rejectSubDigits = false, this._digitIsSub = false;
      }, e7.prototype.addParam = function(e8) {
        if (this._digitIsSub = false, this.length >= this.maxLength)
          this._rejectDigits = true;
        else {
          if (e8 < -1)
            throw new Error("values lesser than -1 are not allowed");
          this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength, this.params[this.length++] = e8 > 2147483647 ? 2147483647 : e8;
        }
      }, e7.prototype.addSubParam = function(e8) {
        if (this._digitIsSub = true, this.length)
          if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength)
            this._rejectSubDigits = true;
          else {
            if (e8 < -1)
              throw new Error("values lesser than -1 are not allowed");
            this._subParams[this._subParamsLength++] = e8 > 2147483647 ? 2147483647 : e8, this._subParamsIdx[this.length - 1]++;
          }
      }, e7.prototype.hasSubParams = function(e8) {
        return (255 & this._subParamsIdx[e8]) - (this._subParamsIdx[e8] >> 8) > 0;
      }, e7.prototype.getSubParams = function(e8) {
        var t5 = this._subParamsIdx[e8] >> 8, r9 = 255 & this._subParamsIdx[e8];
        return r9 - t5 > 0 ? this._subParams.subarray(t5, r9) : null;
      }, e7.prototype.getSubParamsAll = function() {
        for (var e8 = {}, t5 = 0; t5 < this.length; ++t5) {
          var r9 = this._subParamsIdx[t5] >> 8, i9 = 255 & this._subParamsIdx[t5];
          i9 - r9 > 0 && (e8[t5] = this._subParams.slice(r9, i9));
        }
        return e8;
      }, e7.prototype.addDigit = function(e8) {
        var t5;
        if (!(this._rejectDigits || !(t5 = this._digitIsSub ? this._subParamsLength : this.length) || this._digitIsSub && this._rejectSubDigits)) {
          var r9 = this._digitIsSub ? this._subParams : this.params, i9 = r9[t5 - 1];
          r9[t5 - 1] = ~i9 ? Math.min(10 * i9 + e8, 2147483647) : e8;
        }
      }, e7;
    }();
    t4.Params = i8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(21), n11 = r8(7), o9 = function() {
      function e7() {
        this._state = 0, this._id = -1, this._handlers = /* @__PURE__ */ Object.create(null), this._handlerFb = function() {
        };
      }
      return e7.prototype.addHandler = function(e8, t5) {
        void 0 === this._handlers[e8] && (this._handlers[e8] = []);
        var r9 = this._handlers[e8];
        return r9.push(t5), { dispose: function() {
          var e9 = r9.indexOf(t5);
          -1 !== e9 && r9.splice(e9, 1);
        } };
      }, e7.prototype.setHandler = function(e8, t5) {
        this._handlers[e8] = [t5];
      }, e7.prototype.clearHandler = function(e8) {
        this._handlers[e8] && delete this._handlers[e8];
      }, e7.prototype.setHandlerFallback = function(e8) {
        this._handlerFb = e8;
      }, e7.prototype.dispose = function() {
        this._handlers = /* @__PURE__ */ Object.create(null), this._handlerFb = function() {
        };
      }, e7.prototype.reset = function() {
        2 === this._state && this.end(false), this._id = -1, this._state = 0;
      }, e7.prototype._start = function() {
        var e8 = this._handlers[this._id];
        if (e8)
          for (var t5 = e8.length - 1; t5 >= 0; t5--)
            e8[t5].start();
        else
          this._handlerFb(this._id, "START");
      }, e7.prototype._put = function(e8, t5, r9) {
        var i9 = this._handlers[this._id];
        if (i9)
          for (var o10 = i9.length - 1; o10 >= 0; o10--)
            i9[o10].put(e8, t5, r9);
        else
          this._handlerFb(this._id, "PUT", n11.utf32ToString(e8, t5, r9));
      }, e7.prototype._end = function(e8) {
        var t5 = this._handlers[this._id];
        if (t5) {
          for (var r9 = t5.length - 1; r9 >= 0 && false === t5[r9].end(e8); r9--)
            ;
          for (r9--; r9 >= 0; r9--)
            t5[r9].end(false);
        } else
          this._handlerFb(this._id, "END", e8);
      }, e7.prototype.start = function() {
        this.reset(), this._id = -1, this._state = 1;
      }, e7.prototype.put = function(e8, t5, r9) {
        if (3 !== this._state) {
          if (1 === this._state)
            for (; t5 < r9; ) {
              var i9 = e8[t5++];
              if (59 === i9) {
                this._state = 2, this._start();
                break;
              }
              if (i9 < 48 || 57 < i9)
                return void (this._state = 3);
              -1 === this._id && (this._id = 0), this._id = 10 * this._id + i9 - 48;
            }
          2 === this._state && r9 - t5 > 0 && this._put(e8, t5, r9);
        }
      }, e7.prototype.end = function(e8) {
        0 !== this._state && (3 !== this._state && (1 === this._state && this._start(), this._end(e8)), this._id = -1, this._state = 0);
      }, e7;
    }();
    t4.OscParser = o9;
    var s7 = function() {
      function e7(e8) {
        this._handler = e8, this._data = "", this._hitLimit = false;
      }
      return e7.prototype.start = function() {
        this._data = "", this._hitLimit = false;
      }, e7.prototype.put = function(e8, t5, r9) {
        this._hitLimit || (this._data += n11.utf32ToString(e8, t5, r9), this._data.length > i8.PAYLOAD_LIMIT && (this._data = "", this._hitLimit = true));
      }, e7.prototype.end = function(e8) {
        var t5;
        return this._hitLimit ? t5 = false : e8 && (t5 = this._handler(this._data)), this._data = "", this._hitLimit = false, t5;
      }, e7;
    }();
    t4.OscHandler = s7;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true }), t4.PAYLOAD_LIMIT = 1e7;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(7), n11 = r8(19), o9 = r8(21), s7 = [], a5 = function() {
      function e7() {
        this._handlers = /* @__PURE__ */ Object.create(null), this._active = s7, this._ident = 0, this._handlerFb = function() {
        };
      }
      return e7.prototype.dispose = function() {
        this._handlers = /* @__PURE__ */ Object.create(null), this._handlerFb = function() {
        };
      }, e7.prototype.addHandler = function(e8, t5) {
        void 0 === this._handlers[e8] && (this._handlers[e8] = []);
        var r9 = this._handlers[e8];
        return r9.push(t5), { dispose: function() {
          var e9 = r9.indexOf(t5);
          -1 !== e9 && r9.splice(e9, 1);
        } };
      }, e7.prototype.setHandler = function(e8, t5) {
        this._handlers[e8] = [t5];
      }, e7.prototype.clearHandler = function(e8) {
        this._handlers[e8] && delete this._handlers[e8];
      }, e7.prototype.setHandlerFallback = function(e8) {
        this._handlerFb = e8;
      }, e7.prototype.reset = function() {
        this._active.length && this.unhook(false), this._active = s7, this._ident = 0;
      }, e7.prototype.hook = function(e8, t5) {
        if (this.reset(), this._ident = e8, this._active = this._handlers[e8] || s7, this._active.length)
          for (var r9 = this._active.length - 1; r9 >= 0; r9--)
            this._active[r9].hook(t5);
        else
          this._handlerFb(this._ident, "HOOK", t5);
      }, e7.prototype.put = function(e8, t5, r9) {
        if (this._active.length)
          for (var n12 = this._active.length - 1; n12 >= 0; n12--)
            this._active[n12].put(e8, t5, r9);
        else
          this._handlerFb(this._ident, "PUT", i8.utf32ToString(e8, t5, r9));
      }, e7.prototype.unhook = function(e8) {
        if (this._active.length) {
          for (var t5 = this._active.length - 1; t5 >= 0 && false === this._active[t5].unhook(e8); t5--)
            ;
          for (t5--; t5 >= 0; t5--)
            this._active[t5].unhook(false);
        } else
          this._handlerFb(this._ident, "UNHOOK", e8);
        this._active = s7, this._ident = 0;
      }, e7;
    }();
    t4.DcsParser = a5;
    var c8 = function() {
      function e7(e8) {
        this._handler = e8, this._data = "", this._hitLimit = false;
      }
      return e7.prototype.hook = function(e8) {
        this._params = e8.clone(), this._data = "", this._hitLimit = false;
      }, e7.prototype.put = function(e8, t5, r9) {
        this._hitLimit || (this._data += i8.utf32ToString(e8, t5, r9), this._data.length > o9.PAYLOAD_LIMIT && (this._data = "", this._hitLimit = true));
      }, e7.prototype.unhook = function(e8) {
        var t5;
        return this._hitLimit ? t5 = false : e8 && (t5 = this._handler(this._data, this._params ? this._params : new n11.Params())), this._params = void 0, this._data = "", this._hitLimit = false, t5;
      }, e7;
    }();
    t4.DcsHandler = c8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(24), n11 = r8(42), o9 = [];
    t4.acquireCharAtlas = function(e7, t5, r9, s7, a5) {
      for (var c8 = i8.generateConfig(s7, a5, e7, r9), l7 = 0; l7 < o9.length; l7++) {
        var h8 = (u8 = o9[l7]).ownedBy.indexOf(t5);
        if (h8 >= 0) {
          if (i8.configEquals(u8.config, c8))
            return u8.atlas;
          1 === u8.ownedBy.length ? (u8.atlas.dispose(), o9.splice(l7, 1)) : u8.ownedBy.splice(h8, 1);
          break;
        }
      }
      for (l7 = 0; l7 < o9.length; l7++) {
        var u8 = o9[l7];
        if (i8.configEquals(u8.config, c8))
          return u8.ownedBy.push(t5), u8.atlas;
      }
      var f6 = { atlas: new n11.DynamicCharAtlas(document, c8), config: c8, ownedBy: [t5] };
      return o9.push(f6), f6.atlas;
    }, t4.removeTerminalFromCache = function(e7) {
      for (var t5 = 0; t5 < o9.length; t5++) {
        var r9 = o9[t5].ownedBy.indexOf(e7);
        if (-1 !== r9) {
          1 === o9[t5].ownedBy.length ? (o9[t5].atlas.dispose(), o9.splice(t5, 1)) : o9[t5].ownedBy.splice(r9, 1);
          break;
        }
      }
    };
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(3);
    t4.generateConfig = function(e7, t5, r9, i9) {
      var n11 = { foreground: i9.foreground, background: i9.background, cursor: void 0, cursorAccent: void 0, selection: void 0, ansi: i9.ansi.slice(0, 16) };
      return { devicePixelRatio: window.devicePixelRatio, scaledCharWidth: e7, scaledCharHeight: t5, fontFamily: r9.fontFamily, fontSize: r9.fontSize, fontWeight: r9.fontWeight, fontWeightBold: r9.fontWeightBold, allowTransparency: r9.allowTransparency, colors: n11 };
    }, t4.configEquals = function(e7, t5) {
      for (var r9 = 0; r9 < e7.colors.ansi.length; r9++)
        if (e7.colors.ansi[r9].rgba !== t5.colors.ansi[r9].rgba)
          return false;
      return e7.devicePixelRatio === t5.devicePixelRatio && e7.fontFamily === t5.fontFamily && e7.fontSize === t5.fontSize && e7.fontWeight === t5.fontWeight && e7.fontWeightBold === t5.fontWeightBold && e7.allowTransparency === t5.allowTransparency && e7.scaledCharWidth === t5.scaledCharWidth && e7.scaledCharHeight === t5.scaledCharHeight && e7.colors.foreground === t5.colors.foreground && e7.colors.background === t5.colors.background;
    }, t4.is256Color = function(e7) {
      return e7 < i8.DEFAULT_COLOR;
    };
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(10), n11 = r8(44), o9 = i8.css.toColor("#ffffff"), s7 = i8.css.toColor("#000000"), a5 = i8.css.toColor("#ffffff"), c8 = i8.css.toColor("#000000"), l7 = { css: "rgba(255, 255, 255, 0.3)", rgba: 4294967117 };
    t4.DEFAULT_ANSI_COLORS = function() {
      for (var e7 = [i8.css.toColor("#2e3436"), i8.css.toColor("#cc0000"), i8.css.toColor("#4e9a06"), i8.css.toColor("#c4a000"), i8.css.toColor("#3465a4"), i8.css.toColor("#75507b"), i8.css.toColor("#06989a"), i8.css.toColor("#d3d7cf"), i8.css.toColor("#555753"), i8.css.toColor("#ef2929"), i8.css.toColor("#8ae234"), i8.css.toColor("#fce94f"), i8.css.toColor("#729fcf"), i8.css.toColor("#ad7fa8"), i8.css.toColor("#34e2e2"), i8.css.toColor("#eeeeec")], t5 = [0, 95, 135, 175, 215, 255], r9 = 0; r9 < 216; r9++) {
        var n12 = t5[r9 / 36 % 6 | 0], o10 = t5[r9 / 6 % 6 | 0], s8 = t5[r9 % 6];
        e7.push({ css: i8.channels.toCss(n12, o10, s8), rgba: i8.channels.toRgba(n12, o10, s8) });
      }
      for (r9 = 0; r9 < 24; r9++) {
        var a6 = 8 + 10 * r9;
        e7.push({ css: i8.channels.toCss(a6, a6, a6), rgba: i8.channels.toRgba(a6, a6, a6) });
      }
      return e7;
    }();
    var h8 = function() {
      function e7(e8, r9) {
        this.allowTransparency = r9;
        var h9 = e8.createElement("canvas");
        h9.width = 1, h9.height = 1;
        var u8 = h9.getContext("2d");
        if (!u8)
          throw new Error("Could not get rendering context");
        this._ctx = u8, this._ctx.globalCompositeOperation = "copy", this._litmusColor = this._ctx.createLinearGradient(0, 0, 1, 1), this._contrastCache = new n11.ColorContrastCache(), this.colors = { foreground: o9, background: s7, cursor: a5, cursorAccent: c8, selection: l7, selectionOpaque: i8.color.blend(s7, l7), ansi: t4.DEFAULT_ANSI_COLORS.slice(), contrastCache: this._contrastCache };
      }
      return e7.prototype.onOptionsChange = function(e8) {
        "minimumContrastRatio" === e8 && this._contrastCache.clear();
      }, e7.prototype.setTheme = function(e8) {
        void 0 === e8 && (e8 = {}), this.colors.foreground = this._parseColor(e8.foreground, o9), this.colors.background = this._parseColor(e8.background, s7), this.colors.cursor = this._parseColor(e8.cursor, a5, true), this.colors.cursorAccent = this._parseColor(e8.cursorAccent, c8, true), this.colors.selection = this._parseColor(e8.selection, l7, true), this.colors.selectionOpaque = i8.color.blend(this.colors.background, this.colors.selection), this.colors.ansi[0] = this._parseColor(e8.black, t4.DEFAULT_ANSI_COLORS[0]), this.colors.ansi[1] = this._parseColor(e8.red, t4.DEFAULT_ANSI_COLORS[1]), this.colors.ansi[2] = this._parseColor(e8.green, t4.DEFAULT_ANSI_COLORS[2]), this.colors.ansi[3] = this._parseColor(e8.yellow, t4.DEFAULT_ANSI_COLORS[3]), this.colors.ansi[4] = this._parseColor(e8.blue, t4.DEFAULT_ANSI_COLORS[4]), this.colors.ansi[5] = this._parseColor(e8.magenta, t4.DEFAULT_ANSI_COLORS[5]), this.colors.ansi[6] = this._parseColor(e8.cyan, t4.DEFAULT_ANSI_COLORS[6]), this.colors.ansi[7] = this._parseColor(e8.white, t4.DEFAULT_ANSI_COLORS[7]), this.colors.ansi[8] = this._parseColor(e8.brightBlack, t4.DEFAULT_ANSI_COLORS[8]), this.colors.ansi[9] = this._parseColor(e8.brightRed, t4.DEFAULT_ANSI_COLORS[9]), this.colors.ansi[10] = this._parseColor(e8.brightGreen, t4.DEFAULT_ANSI_COLORS[10]), this.colors.ansi[11] = this._parseColor(e8.brightYellow, t4.DEFAULT_ANSI_COLORS[11]), this.colors.ansi[12] = this._parseColor(e8.brightBlue, t4.DEFAULT_ANSI_COLORS[12]), this.colors.ansi[13] = this._parseColor(e8.brightMagenta, t4.DEFAULT_ANSI_COLORS[13]), this.colors.ansi[14] = this._parseColor(e8.brightCyan, t4.DEFAULT_ANSI_COLORS[14]), this.colors.ansi[15] = this._parseColor(e8.brightWhite, t4.DEFAULT_ANSI_COLORS[15]), this._contrastCache.clear();
      }, e7.prototype._parseColor = function(e8, t5, r9) {
        if (void 0 === r9 && (r9 = this.allowTransparency), void 0 === e8)
          return t5;
        if (this._ctx.fillStyle = this._litmusColor, this._ctx.fillStyle = e8, "string" != typeof this._ctx.fillStyle)
          return console.warn("Color: " + e8 + " is invalid using fallback " + t5.css), t5;
        this._ctx.fillRect(0, 0, 1, 1);
        var n12 = this._ctx.getImageData(0, 0, 1, 1).data;
        if (255 !== n12[3]) {
          if (!r9)
            return console.warn("Color: " + e8 + " is using transparency, but allowTransparency is false. Using fallback " + t5.css + "."), t5;
          var o10 = this._ctx.fillStyle.substring(5, this._ctx.fillStyle.length - 1).split(",").map(function(e9) {
            return Number(e9);
          }), s8 = o10[0], a6 = o10[1], c9 = o10[2], l8 = o10[3], h9 = Math.round(255 * l8);
          return { rgba: i8.channels.toRgba(s8, a6, c9, h9), css: e8 };
        }
        return { css: this._ctx.fillStyle, rgba: i8.channels.toRgba(n12[0], n12[1], n12[2], n12[3]) };
      }, e7;
    }();
    t4.ColorManager = h8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true }), t4.throwIfFalsy = function(e7) {
      if (!e7)
        throw new Error("value must not be falsy");
      return e7;
    };
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    });
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(6), s7 = r8(3), a5 = r8(5), c8 = function(e7) {
      function t5(t6, r9, i9) {
        var n12 = e7.call(this) || this;
        return n12.content = 0, n12.combinedData = "", n12.fg = t6.fg, n12.bg = t6.bg, n12.combinedData = r9, n12._width = i9, n12;
      }
      return n11(t5, e7), t5.prototype.isCombined = function() {
        return 2097152;
      }, t5.prototype.getWidth = function() {
        return this._width;
      }, t5.prototype.getChars = function() {
        return this.combinedData;
      }, t5.prototype.getCode = function() {
        return 2097151;
      }, t5.prototype.setFromCharData = function(e8) {
        throw new Error("not implemented");
      }, t5.prototype.getAsCharData = function() {
        return [this.fg, this.getChars(), this.getWidth(), this.getCode()];
      }, t5;
    }(o9.AttributeData);
    t4.JoinedCellData = c8;
    var l7 = function() {
      function e7(e8) {
        this._bufferService = e8, this._characterJoiners = [], this._nextCharacterJoinerId = 0, this._workCell = new a5.CellData();
      }
      return e7.prototype.registerCharacterJoiner = function(e8) {
        var t5 = { id: this._nextCharacterJoinerId++, handler: e8 };
        return this._characterJoiners.push(t5), t5.id;
      }, e7.prototype.deregisterCharacterJoiner = function(e8) {
        for (var t5 = 0; t5 < this._characterJoiners.length; t5++)
          if (this._characterJoiners[t5].id === e8)
            return this._characterJoiners.splice(t5, 1), true;
        return false;
      }, e7.prototype.getJoinedCharacters = function(e8) {
        if (0 === this._characterJoiners.length)
          return [];
        var t5 = this._bufferService.buffer.lines.get(e8);
        if (!t5 || 0 === t5.length)
          return [];
        for (var r9 = [], i9 = t5.translateToString(true), n12 = 0, o10 = 0, a6 = 0, c9 = t5.getFg(0), l8 = t5.getBg(0), h8 = 0; h8 < t5.getTrimmedLength(); h8++)
          if (t5.loadCell(h8, this._workCell), 0 !== this._workCell.getWidth()) {
            if (this._workCell.fg !== c9 || this._workCell.bg !== l8) {
              if (h8 - n12 > 1)
                for (var u8 = this._getJoinedRanges(i9, a6, o10, t5, n12), f6 = 0; f6 < u8.length; f6++)
                  r9.push(u8[f6]);
              n12 = h8, a6 = o10, c9 = this._workCell.fg, l8 = this._workCell.bg;
            }
            o10 += this._workCell.getChars().length || s7.WHITESPACE_CELL_CHAR.length;
          }
        if (this._bufferService.cols - n12 > 1)
          for (u8 = this._getJoinedRanges(i9, a6, o10, t5, n12), f6 = 0; f6 < u8.length; f6++)
            r9.push(u8[f6]);
        return r9;
      }, e7.prototype._getJoinedRanges = function(t5, r9, i9, n12, o10) {
        for (var s8 = t5.substring(r9, i9), a6 = this._characterJoiners[0].handler(s8), c9 = 1; c9 < this._characterJoiners.length; c9++)
          for (var l8 = this._characterJoiners[c9].handler(s8), h8 = 0; h8 < l8.length; h8++)
            e7._mergeRanges(a6, l8[h8]);
        return this._stringRangesToCellRanges(a6, n12, o10), a6;
      }, e7.prototype._stringRangesToCellRanges = function(e8, t5, r9) {
        var i9 = 0, n12 = false, o10 = 0, a6 = e8[i9];
        if (a6) {
          for (var c9 = r9; c9 < this._bufferService.cols; c9++) {
            var l8 = t5.getWidth(c9), h8 = t5.getString(c9).length || s7.WHITESPACE_CELL_CHAR.length;
            if (0 !== l8) {
              if (!n12 && a6[0] <= o10 && (a6[0] = c9, n12 = true), a6[1] <= o10) {
                if (a6[1] = c9, !(a6 = e8[++i9]))
                  break;
                a6[0] <= o10 ? (a6[0] = c9, n12 = true) : n12 = false;
              }
              o10 += h8;
            }
          }
          a6 && (a6[1] = this._bufferService.cols);
        }
      }, e7._mergeRanges = function(e8, t5) {
        for (var r9 = false, i9 = 0; i9 < e8.length; i9++) {
          var n12 = e8[i9];
          if (r9) {
            if (t5[1] <= n12[0])
              return e8[i9 - 1][1] = t5[1], e8;
            if (t5[1] <= n12[1])
              return e8[i9 - 1][1] = Math.max(t5[1], n12[1]), e8.splice(i9, 1), e8;
            e8.splice(i9, 1), i9--;
          } else {
            if (t5[1] <= n12[0])
              return e8.splice(i9, 0, t5), e8;
            if (t5[1] <= n12[1])
              return n12[0] = Math.min(t5[0], n12[0]), e8;
            t5[0] < n12[1] && (n12[0] = Math.min(t5[0], n12[0]), r9 = true);
          }
        }
        return r9 ? e8[e8.length - 1][1] = t5[1] : e8.push(t5), e8;
      }, e7;
    }();
    t4.CharacterJoinerRegistry = l7;
  }, function(e6, t4, r8) {
    "use strict";
    function i8(e7, t5) {
      var r9 = t5.getBoundingClientRect();
      return [e7.clientX - r9.left, e7.clientY - r9.top];
    }
    Object.defineProperty(t4, "__esModule", { value: true }), t4.getCoordsRelativeToElement = i8, t4.getCoords = function(e7, t5, r9, n11, o9, s7, a5, c8) {
      if (o9) {
        var l7 = i8(e7, t5);
        if (l7)
          return l7[0] = Math.ceil((l7[0] + (c8 ? s7 / 2 : 0)) / s7), l7[1] = Math.ceil(l7[1] / a5), l7[0] = Math.min(Math.max(l7[0], 1), r9 + (c8 ? 1 : 0)), l7[1] = Math.min(Math.max(l7[1], 1), n11), l7;
      }
    }, t4.getRawByteCoords = function(e7) {
      if (e7)
        return { x: e7[0] + 32, y: e7[1] + 32 };
    };
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = function() {
      function e7(e8) {
        this._renderCallback = e8;
      }
      return e7.prototype.dispose = function() {
        this._animationFrame && (window.cancelAnimationFrame(this._animationFrame), this._animationFrame = void 0);
      }, e7.prototype.refresh = function(e8, t5, r9) {
        var i9 = this;
        this._rowCount = r9, e8 = void 0 !== e8 ? e8 : 0, t5 = void 0 !== t5 ? t5 : this._rowCount - 1, this._rowStart = void 0 !== this._rowStart ? Math.min(this._rowStart, e8) : e8, this._rowEnd = void 0 !== this._rowEnd ? Math.max(this._rowEnd, t5) : t5, this._animationFrame || (this._animationFrame = window.requestAnimationFrame(function() {
          return i9._innerRefresh();
        }));
      }, e7.prototype._innerRefresh = function() {
        void 0 !== this._rowStart && void 0 !== this._rowEnd && void 0 !== this._rowCount && (this._rowStart = Math.max(this._rowStart, 0), this._rowEnd = Math.min(this._rowEnd, this._rowCount - 1), this._renderCallback(this._rowStart, this._rowEnd), this._rowStart = void 0, this._rowEnd = void 0, this._animationFrame = void 0);
      }, e7;
    }();
    t4.RenderDebouncer = i8;
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    });
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = function(e7) {
      function t5() {
        var t6 = null !== e7 && e7.apply(this, arguments) || this;
        return t6._currentDevicePixelRatio = window.devicePixelRatio, t6;
      }
      return n11(t5, e7), t5.prototype.setListener = function(e8) {
        var t6 = this;
        this._listener && this.clearListener(), this._listener = e8, this._outerListener = function() {
          t6._listener && (t6._listener(window.devicePixelRatio, t6._currentDevicePixelRatio), t6._updateDpr());
        }, this._updateDpr();
      }, t5.prototype.dispose = function() {
        e7.prototype.dispose.call(this), this.clearListener();
      }, t5.prototype._updateDpr = function() {
        this._resolutionMediaMatchList && this._outerListener && (this._resolutionMediaMatchList.removeListener(this._outerListener), this._currentDevicePixelRatio = window.devicePixelRatio, this._resolutionMediaMatchList = window.matchMedia("screen and (resolution: " + window.devicePixelRatio + "dppx)"), this._resolutionMediaMatchList.addListener(this._outerListener));
      }, t5.prototype.clearListener = function() {
        this._resolutionMediaMatchList && this._listener && this._outerListener && (this._resolutionMediaMatchList.removeListener(this._outerListener), this._resolutionMediaMatchList = void 0, this._listener = void 0, this._outerListener = void 0);
      }, t5;
    }(r8(2).Disposable);
    t4.ScreenDprMonitor = o9;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true }), t4.clone = function e7(t5, r9) {
      if (void 0 === r9 && (r9 = 5), "object" != typeof t5)
        return t5;
      var i8 = Array.isArray(t5) ? [] : {};
      for (var n11 in t5)
        i8[n11] = r9 <= 1 ? t5[n11] : t5[n11] ? e7(t5[n11], r9 - 1) : t5[n11];
      return i8;
    };
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(5), n11 = r8(33), o9 = r8(17), s7 = r8(0), a5 = r8(81), c8 = function() {
      function e7(e8) {
        this._core = new n11.Terminal(e8), this._addonManager = new a5.AddonManager();
      }
      return Object.defineProperty(e7.prototype, "onCursorMove", { get: function() {
        return this._core.onCursorMove;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onLineFeed", { get: function() {
        return this._core.onLineFeed;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onSelectionChange", { get: function() {
        return this._core.onSelectionChange;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onData", { get: function() {
        return this._core.onData;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onBinary", { get: function() {
        return this._core.onBinary;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onTitleChange", { get: function() {
        return this._core.onTitleChange;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onScroll", { get: function() {
        return this._core.onScroll;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onKey", { get: function() {
        return this._core.onKey;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onRender", { get: function() {
        return this._core.onRender;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onResize", { get: function() {
        return this._core.onResize;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "element", { get: function() {
        return this._core.element;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "parser", { get: function() {
        return this._parser || (this._parser = new f6(this._core)), this._parser;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "unicode", { get: function() {
        return new _6(this._core);
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "textarea", { get: function() {
        return this._core.textarea;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "rows", { get: function() {
        return this._core.rows;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "cols", { get: function() {
        return this._core.cols;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "buffer", { get: function() {
        return new h8(this._core.buffers);
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "markers", { get: function() {
        return this._core.markers;
      }, enumerable: true, configurable: true }), e7.prototype.blur = function() {
        this._core.blur();
      }, e7.prototype.focus = function() {
        this._core.focus();
      }, e7.prototype.resize = function(e8, t5) {
        this._verifyIntegers(e8, t5), this._core.resize(e8, t5);
      }, e7.prototype.open = function(e8) {
        this._core.open(e8);
      }, e7.prototype.attachCustomKeyEventHandler = function(e8) {
        this._core.attachCustomKeyEventHandler(e8);
      }, e7.prototype.registerLinkMatcher = function(e8, t5, r9) {
        return this._core.registerLinkMatcher(e8, t5, r9);
      }, e7.prototype.deregisterLinkMatcher = function(e8) {
        this._core.deregisterLinkMatcher(e8);
      }, e7.prototype.registerLinkProvider = function(e8) {
        return this._core.registerLinkProvider(e8);
      }, e7.prototype.registerCharacterJoiner = function(e8) {
        return this._core.registerCharacterJoiner(e8);
      }, e7.prototype.deregisterCharacterJoiner = function(e8) {
        this._core.deregisterCharacterJoiner(e8);
      }, e7.prototype.registerMarker = function(e8) {
        return this._verifyIntegers(e8), this._core.addMarker(e8);
      }, e7.prototype.addMarker = function(e8) {
        return this.registerMarker(e8);
      }, e7.prototype.hasSelection = function() {
        return this._core.hasSelection();
      }, e7.prototype.select = function(e8, t5, r9) {
        this._verifyIntegers(e8, t5, r9), this._core.select(e8, t5, r9);
      }, e7.prototype.getSelection = function() {
        return this._core.getSelection();
      }, e7.prototype.getSelectionPosition = function() {
        return this._core.getSelectionPosition();
      }, e7.prototype.clearSelection = function() {
        this._core.clearSelection();
      }, e7.prototype.selectAll = function() {
        this._core.selectAll();
      }, e7.prototype.selectLines = function(e8, t5) {
        this._verifyIntegers(e8, t5), this._core.selectLines(e8, t5);
      }, e7.prototype.dispose = function() {
        this._addonManager.dispose(), this._core.dispose();
      }, e7.prototype.scrollLines = function(e8) {
        this._verifyIntegers(e8), this._core.scrollLines(e8);
      }, e7.prototype.scrollPages = function(e8) {
        this._verifyIntegers(e8), this._core.scrollPages(e8);
      }, e7.prototype.scrollToTop = function() {
        this._core.scrollToTop();
      }, e7.prototype.scrollToBottom = function() {
        this._core.scrollToBottom();
      }, e7.prototype.scrollToLine = function(e8) {
        this._verifyIntegers(e8), this._core.scrollToLine(e8);
      }, e7.prototype.clear = function() {
        this._core.clear();
      }, e7.prototype.write = function(e8, t5) {
        this._core.write(e8, t5);
      }, e7.prototype.writeUtf8 = function(e8, t5) {
        this._core.write(e8, t5);
      }, e7.prototype.writeln = function(e8, t5) {
        this._core.write(e8), this._core.write("\r\n", t5);
      }, e7.prototype.paste = function(e8) {
        this._core.paste(e8);
      }, e7.prototype.getOption = function(e8) {
        return this._core.optionsService.getOption(e8);
      }, e7.prototype.setOption = function(e8, t5) {
        this._core.optionsService.setOption(e8, t5);
      }, e7.prototype.refresh = function(e8, t5) {
        this._verifyIntegers(e8, t5), this._core.refresh(e8, t5);
      }, e7.prototype.reset = function() {
        this._core.reset();
      }, e7.prototype.loadAddon = function(e8) {
        return this._addonManager.loadAddon(this, e8);
      }, Object.defineProperty(e7, "strings", { get: function() {
        return o9;
      }, enumerable: true, configurable: true }), e7.prototype._verifyIntegers = function() {
        for (var e8 = [], t5 = 0; t5 < arguments.length; t5++)
          e8[t5] = arguments[t5];
        e8.forEach(function(e9) {
          if (e9 === 1 / 0 || isNaN(e9) || e9 % 1 != 0)
            throw new Error("This API only accepts integers");
        });
      }, e7;
    }();
    t4.Terminal = c8;
    var l7 = function() {
      function e7(e8, t5) {
        this._buffer = e8, this.type = t5;
      }
      return e7.prototype.init = function(e8) {
        return this._buffer = e8, this;
      }, Object.defineProperty(e7.prototype, "cursorY", { get: function() {
        return this._buffer.y;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "cursorX", { get: function() {
        return this._buffer.x;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "viewportY", { get: function() {
        return this._buffer.ydisp;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "baseY", { get: function() {
        return this._buffer.ybase;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "length", { get: function() {
        return this._buffer.lines.length;
      }, enumerable: true, configurable: true }), e7.prototype.getLine = function(e8) {
        var t5 = this._buffer.lines.get(e8);
        if (t5)
          return new u8(t5);
      }, e7.prototype.getNullCell = function() {
        return new i8.CellData();
      }, e7;
    }(), h8 = function() {
      function e7(e8) {
        var t5 = this;
        this._buffers = e8, this._onBufferChange = new s7.EventEmitter(), this._normal = new l7(this._buffers.normal, "normal"), this._alternate = new l7(this._buffers.alt, "alternate"), this._buffers.onBufferActivate(function() {
          return t5._onBufferChange.fire(t5.active);
        });
      }
      return Object.defineProperty(e7.prototype, "onBufferChange", { get: function() {
        return this._onBufferChange.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "active", { get: function() {
        if (this._buffers.active === this._buffers.normal)
          return this.normal;
        if (this._buffers.active === this._buffers.alt)
          return this.alternate;
        throw new Error("Active buffer is neither normal nor alternate");
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "normal", { get: function() {
        return this._normal.init(this._buffers.normal);
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "alternate", { get: function() {
        return this._alternate.init(this._buffers.alt);
      }, enumerable: true, configurable: true }), e7;
    }(), u8 = function() {
      function e7(e8) {
        this._line = e8;
      }
      return Object.defineProperty(e7.prototype, "isWrapped", { get: function() {
        return this._line.isWrapped;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "length", { get: function() {
        return this._line.length;
      }, enumerable: true, configurable: true }), e7.prototype.getCell = function(e8, t5) {
        if (!(e8 < 0 || e8 >= this._line.length))
          return t5 ? (this._line.loadCell(e8, t5), t5) : this._line.loadCell(e8, new i8.CellData());
      }, e7.prototype.translateToString = function(e8, t5, r9) {
        return this._line.translateToString(e8, t5, r9);
      }, e7;
    }(), f6 = function() {
      function e7(e8) {
        this._core = e8;
      }
      return e7.prototype.registerCsiHandler = function(e8, t5) {
        return this._core.addCsiHandler(e8, function(e9) {
          return t5(e9.toArray());
        });
      }, e7.prototype.addCsiHandler = function(e8, t5) {
        return this.registerCsiHandler(e8, t5);
      }, e7.prototype.registerDcsHandler = function(e8, t5) {
        return this._core.addDcsHandler(e8, function(e9, r9) {
          return t5(e9, r9.toArray());
        });
      }, e7.prototype.addDcsHandler = function(e8, t5) {
        return this.registerDcsHandler(e8, t5);
      }, e7.prototype.registerEscHandler = function(e8, t5) {
        return this._core.addEscHandler(e8, t5);
      }, e7.prototype.addEscHandler = function(e8, t5) {
        return this.registerEscHandler(e8, t5);
      }, e7.prototype.registerOscHandler = function(e8, t5) {
        return this._core.addOscHandler(e8, t5);
      }, e7.prototype.addOscHandler = function(e8, t5) {
        return this.registerOscHandler(e8, t5);
      }, e7;
    }(), _6 = function() {
      function e7(e8) {
        this._core = e8;
      }
      return e7.prototype.register = function(e8) {
        this._core.unicodeService.register(e8);
      }, Object.defineProperty(e7.prototype, "versions", { get: function() {
        return this._core.unicodeService.versions;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "activeVersion", { get: function() {
        return this._core.unicodeService.activeVersion;
      }, set: function(e8) {
        this._core.unicodeService.activeVersion = e8;
      }, enumerable: true, configurable: true }), e7;
    }();
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    });
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(34), s7 = r8(35), a5 = r8(36), c8 = r8(12), l7 = r8(37), h8 = r8(39), u8 = r8(49), f6 = r8(50), _6 = r8(11), d8 = r8(8), p10 = r8(17), v10 = r8(53), y6 = r8(54), g9 = r8(55), b9 = r8(56), m10 = r8(58), S6 = r8(0), C9 = r8(16), w5 = r8(59), E5 = r8(25), L2 = r8(60), x6 = r8(1), A6 = r8(61), R6 = r8(4), k3 = r8(62), T9 = r8(63), O5 = r8(2), D7 = r8(69), M3 = r8(70), P4 = r8(71), H5 = r8(72), I5 = r8(73), B7 = r8(74), F5 = r8(75), j5 = r8(76), W4 = r8(77), q9 = r8(78), N6 = r8(80), U3 = "undefined" != typeof window ? window.document : null, z3 = function(e7) {
      function t5(t6) {
        void 0 === t6 && (t6 = {});
        var r9 = e7.call(this) || this;
        return r9.browser = _6, r9.mouseEvents = 0, r9._keyDownHandled = false, r9._blankLine = null, r9._onCursorMove = new S6.EventEmitter(), r9._onData = new S6.EventEmitter(), r9._onBinary = new S6.EventEmitter(), r9._onKey = new S6.EventEmitter(), r9._onLineFeed = new S6.EventEmitter(), r9._onRender = new S6.EventEmitter(), r9._onResize = new S6.EventEmitter(), r9._onScroll = new S6.EventEmitter(), r9._onSelectionChange = new S6.EventEmitter(), r9._onTitleChange = new S6.EventEmitter(), r9._onFocus = new S6.EventEmitter(), r9._onBlur = new S6.EventEmitter(), r9.onA11yCharEmitter = new S6.EventEmitter(), r9.onA11yTabEmitter = new S6.EventEmitter(), r9._instantiationService = new I5.InstantiationService(), r9.optionsService = new A6.OptionsService(t6), r9._instantiationService.setService(x6.IOptionsService, r9.optionsService), r9._bufferService = r9._instantiationService.createInstance(T9.BufferService), r9._instantiationService.setService(x6.IBufferService, r9._bufferService), r9._logService = r9._instantiationService.createInstance(P4.LogService), r9._instantiationService.setService(x6.ILogService, r9._logService), r9._coreService = r9._instantiationService.createInstance(M3.CoreService, function() {
          return r9.scrollToBottom();
        }), r9._instantiationService.setService(x6.ICoreService, r9._coreService), r9._coreService.onData(function(e8) {
          return r9._onData.fire(e8);
        }), r9._coreService.onBinary(function(e8) {
          return r9._onBinary.fire(e8);
        }), r9._coreMouseService = r9._instantiationService.createInstance(B7.CoreMouseService), r9._instantiationService.setService(x6.ICoreMouseService, r9._coreMouseService), r9._dirtyRowService = r9._instantiationService.createInstance(H5.DirtyRowService), r9._instantiationService.setService(x6.IDirtyRowService, r9._dirtyRowService), r9.unicodeService = r9._instantiationService.createInstance(q9.UnicodeService), r9._instantiationService.setService(x6.IUnicodeService, r9.unicodeService), r9._charsetService = r9._instantiationService.createInstance(N6.CharsetService), r9._instantiationService.setService(x6.ICharsetService, r9._charsetService), r9._setupOptionsListeners(), r9._setup(), r9._writeBuffer = new F5.WriteBuffer(function(e8) {
          return r9._inputHandler.parse(e8);
        }), r9;
      }
      return n11(t5, e7), Object.defineProperty(t5.prototype, "options", { get: function() {
        return this.optionsService.options;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "cols", { get: function() {
        return this._bufferService.cols;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "rows", { get: function() {
        return this._bufferService.rows;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onCursorMove", { get: function() {
        return this._onCursorMove.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onData", { get: function() {
        return this._onData.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onBinary", { get: function() {
        return this._onBinary.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onKey", { get: function() {
        return this._onKey.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onLineFeed", { get: function() {
        return this._onLineFeed.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onRender", { get: function() {
        return this._onRender.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onResize", { get: function() {
        return this._onResize.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onScroll", { get: function() {
        return this._onScroll.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onSelectionChange", { get: function() {
        return this._onSelectionChange.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onTitleChange", { get: function() {
        return this._onTitleChange.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onFocus", { get: function() {
        return this._onFocus.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onBlur", { get: function() {
        return this._onBlur.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onA11yChar", { get: function() {
        return this.onA11yCharEmitter.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onA11yTab", { get: function() {
        return this.onA11yTabEmitter.event;
      }, enumerable: true, configurable: true }), t5.prototype.dispose = function() {
        var t6, r9, i9, n12;
        this._isDisposed || (e7.prototype.dispose.call(this), null === (t6 = this._windowsMode) || void 0 === t6 || t6.dispose(), this._windowsMode = void 0, null === (r9 = this._renderService) || void 0 === r9 || r9.dispose(), this._customKeyEventHandler = null, this.write = function() {
        }, null === (n12 = null === (i9 = this.element) || void 0 === i9 ? void 0 : i9.parentNode) || void 0 === n12 || n12.removeChild(this.element));
      }, t5.prototype._setup = function() {
        var e8 = this;
        this._customKeyEventHandler = null, this.insertMode = false, this.bracketedPasteMode = false, this._userScrolling = false, this._inputHandler ? this._inputHandler.reset() : (this._inputHandler = new l7.InputHandler(this, this._bufferService, this._charsetService, this._coreService, this._dirtyRowService, this._logService, this.optionsService, this._coreMouseService, this.unicodeService, this._instantiationService), this._inputHandler.onRequestBell(function() {
          return e8.bell();
        }), this._inputHandler.onRequestRefreshRows(function(t6, r9) {
          return e8.refresh(t6, r9);
        }), this._inputHandler.onRequestReset(function() {
          return e8.reset();
        }), this._inputHandler.onCursorMove(function() {
          return e8._onCursorMove.fire();
        }), this._inputHandler.onLineFeed(function() {
          return e8._onLineFeed.fire();
        }), this.register(this._inputHandler)), this.linkifier || (this.linkifier = new u8.Linkifier(this._bufferService, this._logService, this.optionsService, this.unicodeService)), this.linkifier2 || (this.linkifier2 = new j5.Linkifier2(this._bufferService)), this.options.windowsMode && this._enableWindowsMode();
      }, t5.prototype._enableWindowsMode = function() {
        var e8 = this;
        if (!this._windowsMode) {
          var t6 = [];
          t6.push(this.onLineFeed(w5.updateWindowsModeWrappedState.bind(null, this._bufferService))), t6.push(this.addCsiHandler({ final: "H" }, function() {
            return w5.updateWindowsModeWrappedState(e8._bufferService), false;
          })), this._windowsMode = { dispose: function() {
            t6.forEach(function(e9) {
              return e9.dispose();
            });
          } };
        }
      }, Object.defineProperty(t5.prototype, "buffer", { get: function() {
        return this.buffers.active;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "buffers", { get: function() {
        return this._bufferService.buffers;
      }, enumerable: true, configurable: true }), t5.prototype.focus = function() {
        this.textarea && this.textarea.focus({ preventScroll: true });
      }, t5.prototype._setupOptionsListeners = function() {
        var e8 = this;
        this.optionsService.onOptionChange(function(t6) {
          var r9, i9, n12, o10, s8;
          switch (t6) {
            case "fontFamily":
            case "fontSize":
              null === (r9 = e8._renderService) || void 0 === r9 || r9.clear(), null === (i9 = e8._charSizeService) || void 0 === i9 || i9.measure();
              break;
            case "cursorBlink":
            case "cursorStyle":
              e8.refresh(e8.buffer.y, e8.buffer.y);
              break;
            case "drawBoldTextInBrightColors":
            case "letterSpacing":
            case "lineHeight":
            case "fontWeight":
            case "fontWeightBold":
            case "minimumContrastRatio":
              e8._renderService && (e8._renderService.clear(), e8._renderService.onResize(e8.cols, e8.rows), e8.refresh(0, e8.rows - 1));
              break;
            case "rendererType":
              e8._renderService && (e8._renderService.setRenderer(e8._createRenderer()), e8._renderService.onResize(e8.cols, e8.rows));
              break;
            case "scrollback":
              e8.buffers.resize(e8.cols, e8.rows), null === (n12 = e8.viewport) || void 0 === n12 || n12.syncScrollArea();
              break;
            case "screenReaderMode":
              e8.optionsService.options.screenReaderMode ? !e8._accessibilityManager && e8._renderService && (e8._accessibilityManager = new g9.AccessibilityManager(e8, e8._renderService)) : (null === (o10 = e8._accessibilityManager) || void 0 === o10 || o10.dispose(), e8._accessibilityManager = null);
              break;
            case "tabStopWidth":
              e8.buffers.setupTabStops();
              break;
            case "theme":
              e8._setTheme(e8.optionsService.options.theme);
              break;
            case "windowsMode":
              e8.optionsService.options.windowsMode ? e8._enableWindowsMode() : (null === (s8 = e8._windowsMode) || void 0 === s8 || s8.dispose(), e8._windowsMode = void 0);
          }
        });
      }, t5.prototype._onTextAreaFocus = function(e8) {
        this.sendFocus && this._coreService.triggerDataEvent(c8.C0.ESC + "[I"), this.updateCursorStyle(e8), this.element.classList.add("focus"), this.showCursor(), this._onFocus.fire();
      }, t5.prototype.blur = function() {
        return this.textarea.blur();
      }, t5.prototype._onTextAreaBlur = function() {
        this.textarea.value = "", this.refresh(this.buffer.y, this.buffer.y), this.sendFocus && this._coreService.triggerDataEvent(c8.C0.ESC + "[O"), this.element.classList.remove("focus"), this._onBlur.fire();
      }, t5.prototype._initGlobal = function() {
        var e8 = this;
        this._bindKeys(), this.register(d8.addDisposableDomListener(this.element, "copy", function(t7) {
          e8.hasSelection() && a5.copyHandler(t7, e8._selectionService);
        }));
        var t6 = function(t7) {
          return a5.handlePasteEvent(t7, e8.textarea, e8.bracketedPasteMode, e8._coreService);
        };
        this.register(d8.addDisposableDomListener(this.textarea, "paste", t6)), this.register(d8.addDisposableDomListener(this.element, "paste", t6)), _6.isFirefox ? this.register(d8.addDisposableDomListener(this.element, "mousedown", function(t7) {
          2 === t7.button && a5.rightClickHandler(t7, e8.textarea, e8.screenElement, e8._selectionService, e8.options.rightClickSelectsWord);
        })) : this.register(d8.addDisposableDomListener(this.element, "contextmenu", function(t7) {
          a5.rightClickHandler(t7, e8.textarea, e8.screenElement, e8._selectionService, e8.options.rightClickSelectsWord);
        })), _6.isLinux && this.register(d8.addDisposableDomListener(this.element, "auxclick", function(t7) {
          1 === t7.button && a5.moveTextAreaUnderMouseCursor(t7, e8.textarea, e8.screenElement);
        }));
      }, t5.prototype._bindKeys = function() {
        var e8 = this;
        this.register(d8.addDisposableDomListener(this.textarea, "keyup", function(t6) {
          return e8._keyUp(t6);
        }, true)), this.register(d8.addDisposableDomListener(this.textarea, "keydown", function(t6) {
          return e8._keyDown(t6);
        }, true)), this.register(d8.addDisposableDomListener(this.textarea, "keypress", function(t6) {
          return e8._keyPress(t6);
        }, true)), this.register(d8.addDisposableDomListener(this.textarea, "compositionstart", function() {
          return e8._compositionHelper.compositionstart();
        })), this.register(d8.addDisposableDomListener(this.textarea, "compositionupdate", function(t6) {
          return e8._compositionHelper.compositionupdate(t6);
        })), this.register(d8.addDisposableDomListener(this.textarea, "compositionend", function() {
          return e8._compositionHelper.compositionend();
        })), this.register(this.onRender(function() {
          return e8._compositionHelper.updateCompositionElements();
        })), this.register(this.onRender(function(t6) {
          return e8._queueLinkification(t6.start, t6.end);
        }));
      }, t5.prototype.open = function(e8) {
        var t6 = this;
        if (!e8)
          throw new Error("Terminal requires a parent element.");
        U3.body.contains(e8) || this._logService.debug("Terminal.open was called on an element that was not attached to the DOM"), this._document = e8.ownerDocument, this.element = this._document.createElement("div"), this.element.dir = "ltr", this.element.classList.add("terminal"), this.element.classList.add("xterm"), this.element.setAttribute("tabindex", "0"), e8.appendChild(this.element);
        var r9 = U3.createDocumentFragment();
        this._viewportElement = U3.createElement("div"), this._viewportElement.classList.add("xterm-viewport"), r9.appendChild(this._viewportElement), this._viewportScrollArea = U3.createElement("div"), this._viewportScrollArea.classList.add("xterm-scroll-area"), this._viewportElement.appendChild(this._viewportScrollArea), this.screenElement = U3.createElement("div"), this.screenElement.classList.add("xterm-screen"), this._helperContainer = U3.createElement("div"), this._helperContainer.classList.add("xterm-helpers"), this.screenElement.appendChild(this._helperContainer), r9.appendChild(this.screenElement), this.textarea = U3.createElement("textarea"), this.textarea.classList.add("xterm-helper-textarea"), this.textarea.setAttribute("aria-label", p10.promptLabel), this.textarea.setAttribute("aria-multiline", "false"), this.textarea.setAttribute("autocorrect", "off"), this.textarea.setAttribute("autocapitalize", "off"), this.textarea.setAttribute("spellcheck", "false"), this.textarea.tabIndex = 0, this.register(d8.addDisposableDomListener(this.textarea, "focus", function(e9) {
          return t6._onTextAreaFocus(e9);
        })), this.register(d8.addDisposableDomListener(this.textarea, "blur", function() {
          return t6._onTextAreaBlur();
        })), this._helperContainer.appendChild(this.textarea);
        var i9 = this._instantiationService.createInstance(W4.CoreBrowserService, this.textarea);
        this._instantiationService.setService(R6.ICoreBrowserService, i9), this._charSizeService = this._instantiationService.createInstance(k3.CharSizeService, this._document, this._helperContainer), this._instantiationService.setService(R6.ICharSizeService, this._charSizeService), this._compositionView = U3.createElement("div"), this._compositionView.classList.add("composition-view"), this._compositionHelper = this._instantiationService.createInstance(o9.CompositionHelper, this.textarea, this._compositionView), this._helperContainer.appendChild(this._compositionView), this.element.appendChild(r9), this._theme = this.options.theme || this._theme, this.options.theme = void 0, this._colorManager = new E5.ColorManager(U3, this.options.allowTransparency), this.optionsService.onOptionChange(function(e9) {
          return t6._colorManager.onOptionsChange(e9);
        }), this._colorManager.setTheme(this._theme);
        var n12 = this._createRenderer();
        this._renderService = this._instantiationService.createInstance(L2.RenderService, n12, this.rows, this.screenElement), this._instantiationService.setService(R6.IRenderService, this._renderService), this._renderService.onRender(function(e9) {
          return t6._onRender.fire(e9);
        }), this.onResize(function(e9) {
          return t6._renderService.resize(e9.cols, e9.rows);
        }), this._soundService = this._instantiationService.createInstance(v10.SoundService), this._instantiationService.setService(R6.ISoundService, this._soundService), this._mouseService = this._instantiationService.createInstance(D7.MouseService), this._instantiationService.setService(R6.IMouseService, this._mouseService), this.viewport = this._instantiationService.createInstance(s7.Viewport, function(e9, r10) {
          return t6.scrollLines(e9, r10);
        }, this._viewportElement, this._viewportScrollArea), this.viewport.onThemeChange(this._colorManager.colors), this.register(this.viewport), this.register(this.onCursorMove(function() {
          return t6._renderService.onCursorMove();
        })), this.register(this.onResize(function() {
          return t6._renderService.onResize(t6.cols, t6.rows);
        })), this.register(this.onBlur(function() {
          return t6._renderService.onBlur();
        })), this.register(this.onFocus(function() {
          return t6._renderService.onFocus();
        })), this.register(this._renderService.onDimensionsChange(function() {
          return t6.viewport.syncScrollArea();
        })), this._selectionService = this._instantiationService.createInstance(f6.SelectionService, function(e9, r10) {
          return t6.scrollLines(e9, r10);
        }, this.element, this.screenElement), this._instantiationService.setService(R6.ISelectionService, this._selectionService), this.register(this._selectionService.onSelectionChange(function() {
          return t6._onSelectionChange.fire();
        })), this.register(this._selectionService.onRedrawRequest(function(e9) {
          return t6._renderService.onSelectionChanged(e9.start, e9.end, e9.columnSelectMode);
        })), this.register(this._selectionService.onLinuxMouseSelection(function(e9) {
          t6.textarea.value = e9, t6.textarea.focus(), t6.textarea.select();
        })), this.register(this.onScroll(function() {
          t6.viewport.syncScrollArea(), t6._selectionService.refresh();
        })), this.register(d8.addDisposableDomListener(this._viewportElement, "scroll", function() {
          return t6._selectionService.refresh();
        })), this._mouseZoneManager = this._instantiationService.createInstance(y6.MouseZoneManager, this.element, this.screenElement), this.register(this._mouseZoneManager), this.register(this.onScroll(function() {
          return t6._mouseZoneManager.clearAll();
        })), this.linkifier.attachToDom(this.element, this._mouseZoneManager), this.linkifier2.attachToDom(this.element, this._mouseService, this._renderService), this.register(d8.addDisposableDomListener(this.element, "mousedown", function(e9) {
          return t6._selectionService.onMouseDown(e9);
        })), this.mouseEvents ? (this._selectionService.disable(), this.element.classList.add("enable-mouse-events")) : this._selectionService.enable(), this.options.screenReaderMode && (this._accessibilityManager = new g9.AccessibilityManager(this, this._renderService)), this._charSizeService.measure(), this.refresh(0, this.rows - 1), this._initGlobal(), this.bindMouse();
      }, t5.prototype._createRenderer = function() {
        switch (this.options.rendererType) {
          case "canvas":
            return this._instantiationService.createInstance(h8.Renderer, this._colorManager.colors, this.screenElement, this.linkifier, this.linkifier2);
          case "dom":
            return this._instantiationService.createInstance(b9.DomRenderer, this._colorManager.colors, this.element, this.screenElement, this._viewportElement, this.linkifier, this.linkifier2);
          default:
            throw new Error('Unrecognized rendererType "' + this.options.rendererType + '"');
        }
      }, t5.prototype._setTheme = function(e8) {
        var t6, r9, i9;
        this._theme = e8, null === (t6 = this._colorManager) || void 0 === t6 || t6.setTheme(e8), null === (r9 = this._renderService) || void 0 === r9 || r9.setColors(this._colorManager.colors), null === (i9 = this.viewport) || void 0 === i9 || i9.onThemeChange(this._colorManager.colors);
      }, t5.prototype.bindMouse = function() {
        var e8 = this, t6 = this, r9 = this.element;
        function i9(e9) {
          var r10, i10, n13 = t6._mouseService.getRawByteCoords(e9, t6.screenElement, t6.cols, t6.rows);
          if (!n13)
            return false;
          switch (e9.overrideType || e9.type) {
            case "mousemove":
              i10 = 32, void 0 === e9.buttons ? (r10 = 3, void 0 !== e9.button && (r10 = e9.button < 3 ? e9.button : 3)) : r10 = 1 & e9.buttons ? 0 : 4 & e9.buttons ? 1 : 2 & e9.buttons ? 2 : 3;
              break;
            case "mouseup":
              i10 = 0, r10 = e9.button < 3 ? e9.button : 3;
              break;
            case "mousedown":
              i10 = 1, r10 = e9.button < 3 ? e9.button : 3;
              break;
            case "wheel":
              0 !== e9.deltaY && (i10 = e9.deltaY < 0 ? 0 : 1), r10 = 4;
              break;
            default:
              return false;
          }
          return !(void 0 === i10 || void 0 === r10 || r10 > 4) && t6._coreMouseService.triggerMouseEvent({ col: n13.x - 33, row: n13.y - 33, button: r10, action: i10, ctrl: e9.ctrlKey, alt: e9.altKey, shift: e9.shiftKey });
        }
        var n12 = { mouseup: null, wheel: null, mousedrag: null, mousemove: null }, o10 = function(t7) {
          return i9(t7), t7.buttons || (e8._document.removeEventListener("mouseup", n12.mouseup), n12.mousedrag && e8._document.removeEventListener("mousemove", n12.mousedrag)), e8.cancel(t7);
        }, s8 = function(t7) {
          return i9(t7), t7.preventDefault(), e8.cancel(t7);
        }, a6 = function(e9) {
          e9.buttons && i9(e9);
        }, l8 = function(e9) {
          e9.buttons || i9(e9);
        };
        this._coreMouseService.onProtocolChange(function(t7) {
          e8.mouseEvents = t7, t7 ? ("debug" === e8.optionsService.options.logLevel && e8._logService.debug("Binding to mouse events:", e8._coreMouseService.explainEvents(t7)), e8.element.classList.add("enable-mouse-events"), e8._selectionService.disable()) : (e8._logService.debug("Unbinding from mouse events."), e8.element.classList.remove("enable-mouse-events"), e8._selectionService.enable()), 8 & t7 ? n12.mousemove || (r9.addEventListener("mousemove", l8), n12.mousemove = l8) : (r9.removeEventListener("mousemove", n12.mousemove), n12.mousemove = null), 16 & t7 ? n12.wheel || (r9.addEventListener("wheel", s8), n12.wheel = s8) : (r9.removeEventListener("wheel", n12.wheel), n12.wheel = null), 2 & t7 ? n12.mouseup || (n12.mouseup = o10) : (e8._document.removeEventListener("mouseup", n12.mouseup), n12.mouseup = null), 4 & t7 ? n12.mousedrag || (n12.mousedrag = a6) : (e8._document.removeEventListener("mousemove", n12.mousedrag), n12.mousedrag = null);
        }), this._coreMouseService.activeProtocol = this._coreMouseService.activeProtocol, this.register(d8.addDisposableDomListener(r9, "mousedown", function(t7) {
          if (t7.preventDefault(), e8.focus(), e8.mouseEvents && !e8._selectionService.shouldForceSelection(t7))
            return i9(t7), n12.mouseup && e8._document.addEventListener("mouseup", n12.mouseup), n12.mousedrag && e8._document.addEventListener("mousemove", n12.mousedrag), e8.cancel(t7);
        })), this.register(d8.addDisposableDomListener(r9, "wheel", function(t7) {
          if (n12.wheel)
            ;
          else if (!e8.buffer.hasScrollback) {
            var r10 = e8.viewport.getLinesScrolled(t7);
            if (0 === r10)
              return;
            for (var i10 = c8.C0.ESC + (e8._coreService.decPrivateModes.applicationCursorKeys ? "O" : "[") + (t7.deltaY < 0 ? "A" : "B"), o11 = "", s9 = 0; s9 < Math.abs(r10); s9++)
              o11 += i10;
            e8._coreService.triggerDataEvent(o11, true);
          }
        })), this.register(d8.addDisposableDomListener(r9, "wheel", function(t7) {
          if (!n12.wheel)
            return e8.viewport.onWheel(t7) ? void 0 : e8.cancel(t7);
        })), this.register(d8.addDisposableDomListener(r9, "touchstart", function(t7) {
          if (!e8.mouseEvents)
            return e8.viewport.onTouchStart(t7), e8.cancel(t7);
        })), this.register(d8.addDisposableDomListener(r9, "touchmove", function(t7) {
          if (!e8.mouseEvents)
            return e8.viewport.onTouchMove(t7) ? void 0 : e8.cancel(t7);
        }));
      }, t5.prototype.refresh = function(e8, t6) {
        var r9;
        null === (r9 = this._renderService) || void 0 === r9 || r9.refreshRows(e8, t6);
      }, t5.prototype._queueLinkification = function(e8, t6) {
        var r9;
        null === (r9 = this.linkifier) || void 0 === r9 || r9.linkifyRows(e8, t6);
      }, t5.prototype.updateCursorStyle = function(e8) {
        this._selectionService && this._selectionService.shouldColumnSelect(e8) ? this.element.classList.add("column-select") : this.element.classList.remove("column-select");
      }, t5.prototype.showCursor = function() {
        this._coreService.isCursorInitialized || (this._coreService.isCursorInitialized = true, this.refresh(this.buffer.y, this.buffer.y));
      }, t5.prototype.scroll = function(e8, t6) {
        var r9;
        void 0 === t6 && (t6 = false), (r9 = this._blankLine) && r9.length === this.cols && r9.getFg(0) === e8.fg && r9.getBg(0) === e8.bg || (r9 = this.buffer.getBlankLine(e8, t6), this._blankLine = r9), r9.isWrapped = t6;
        var i9 = this.buffer.ybase + this.buffer.scrollTop, n12 = this.buffer.ybase + this.buffer.scrollBottom;
        if (0 === this.buffer.scrollTop) {
          var o10 = this.buffer.lines.isFull;
          n12 === this.buffer.lines.length - 1 ? o10 ? this.buffer.lines.recycle().copyFrom(r9) : this.buffer.lines.push(r9.clone()) : this.buffer.lines.splice(n12 + 1, 0, r9.clone()), o10 ? this._userScrolling && (this.buffer.ydisp = Math.max(this.buffer.ydisp - 1, 0)) : (this.buffer.ybase++, this._userScrolling || this.buffer.ydisp++);
        } else {
          var s8 = n12 - i9 + 1;
          this.buffer.lines.shiftElements(i9 + 1, s8 - 1, -1), this.buffer.lines.set(n12, r9.clone());
        }
        this._userScrolling || (this.buffer.ydisp = this.buffer.ybase), this._dirtyRowService.markRangeDirty(this.buffer.scrollTop, this.buffer.scrollBottom), this._onScroll.fire(this.buffer.ydisp);
      }, t5.prototype.scrollLines = function(e8, t6) {
        if (e8 < 0) {
          if (0 === this.buffer.ydisp)
            return;
          this._userScrolling = true;
        } else
          e8 + this.buffer.ydisp >= this.buffer.ybase && (this._userScrolling = false);
        var r9 = this.buffer.ydisp;
        this.buffer.ydisp = Math.max(Math.min(this.buffer.ydisp + e8, this.buffer.ybase), 0), r9 !== this.buffer.ydisp && (t6 || this._onScroll.fire(this.buffer.ydisp), this.refresh(0, this.rows - 1));
      }, t5.prototype.scrollPages = function(e8) {
        this.scrollLines(e8 * (this.rows - 1));
      }, t5.prototype.scrollToTop = function() {
        this.scrollLines(-this.buffer.ydisp);
      }, t5.prototype.scrollToBottom = function() {
        this.scrollLines(this.buffer.ybase - this.buffer.ydisp);
      }, t5.prototype.scrollToLine = function(e8) {
        var t6 = e8 - this.buffer.ydisp;
        0 !== t6 && this.scrollLines(t6);
      }, t5.prototype.paste = function(e8) {
        a5.paste(e8, this.textarea, this.bracketedPasteMode, this._coreService);
      }, t5.prototype.attachCustomKeyEventHandler = function(e8) {
        this._customKeyEventHandler = e8;
      }, t5.prototype.addEscHandler = function(e8, t6) {
        return this._inputHandler.addEscHandler(e8, t6);
      }, t5.prototype.addDcsHandler = function(e8, t6) {
        return this._inputHandler.addDcsHandler(e8, t6);
      }, t5.prototype.addCsiHandler = function(e8, t6) {
        return this._inputHandler.addCsiHandler(e8, t6);
      }, t5.prototype.addOscHandler = function(e8, t6) {
        return this._inputHandler.addOscHandler(e8, t6);
      }, t5.prototype.registerLinkMatcher = function(e8, t6, r9) {
        var i9 = this.linkifier.registerLinkMatcher(e8, t6, r9);
        return this.refresh(0, this.rows - 1), i9;
      }, t5.prototype.deregisterLinkMatcher = function(e8) {
        this.linkifier.deregisterLinkMatcher(e8) && this.refresh(0, this.rows - 1);
      }, t5.prototype.registerLinkProvider = function(e8) {
        return this.linkifier2.registerLinkProvider(e8);
      }, t5.prototype.registerCharacterJoiner = function(e8) {
        var t6 = this._renderService.registerCharacterJoiner(e8);
        return this.refresh(0, this.rows - 1), t6;
      }, t5.prototype.deregisterCharacterJoiner = function(e8) {
        this._renderService.deregisterCharacterJoiner(e8) && this.refresh(0, this.rows - 1);
      }, Object.defineProperty(t5.prototype, "markers", { get: function() {
        return this.buffer.markers;
      }, enumerable: true, configurable: true }), t5.prototype.addMarker = function(e8) {
        if (this.buffer === this.buffers.normal)
          return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + e8);
      }, t5.prototype.hasSelection = function() {
        return !!this._selectionService && this._selectionService.hasSelection;
      }, t5.prototype.select = function(e8, t6, r9) {
        this._selectionService.setSelection(e8, t6, r9);
      }, t5.prototype.getSelection = function() {
        return this._selectionService ? this._selectionService.selectionText : "";
      }, t5.prototype.getSelectionPosition = function() {
        if (this._selectionService.hasSelection)
          return { startColumn: this._selectionService.selectionStart[0], startRow: this._selectionService.selectionStart[1], endColumn: this._selectionService.selectionEnd[0], endRow: this._selectionService.selectionEnd[1] };
      }, t5.prototype.clearSelection = function() {
        var e8;
        null === (e8 = this._selectionService) || void 0 === e8 || e8.clearSelection();
      }, t5.prototype.selectAll = function() {
        var e8;
        null === (e8 = this._selectionService) || void 0 === e8 || e8.selectAll();
      }, t5.prototype.selectLines = function(e8, t6) {
        var r9;
        null === (r9 = this._selectionService) || void 0 === r9 || r9.selectLines(e8, t6);
      }, t5.prototype._keyDown = function(e8) {
        if (this._keyDownHandled = false, this._customKeyEventHandler && false === this._customKeyEventHandler(e8))
          return false;
        if (!this._compositionHelper.keydown(e8))
          return this.buffer.ybase !== this.buffer.ydisp && this.scrollToBottom(), false;
        var t6 = m10.evaluateKeyboardEvent(e8, this._coreService.decPrivateModes.applicationCursorKeys, this.browser.isMac, this.options.macOptionIsMeta);
        if (this.updateCursorStyle(e8), 3 === t6.type || 2 === t6.type) {
          var r9 = this.rows - 1;
          return this.scrollLines(2 === t6.type ? -r9 : r9), this.cancel(e8, true);
        }
        return 1 === t6.type && this.selectAll(), !!this._isThirdLevelShift(this.browser, e8) || (t6.cancel && this.cancel(e8, true), !t6.key || (t6.key !== c8.C0.ETX && t6.key !== c8.C0.CR || (this.textarea.value = ""), this._onKey.fire({ key: t6.key, domEvent: e8 }), this.showCursor(), this._coreService.triggerDataEvent(t6.key, true), this.optionsService.options.screenReaderMode ? void (this._keyDownHandled = true) : this.cancel(e8, true)));
      }, t5.prototype._isThirdLevelShift = function(e8, t6) {
        var r9 = e8.isMac && !this.options.macOptionIsMeta && t6.altKey && !t6.ctrlKey && !t6.metaKey || e8.isWindows && t6.altKey && t6.ctrlKey && !t6.metaKey;
        return "keypress" === t6.type ? r9 : r9 && (!t6.keyCode || t6.keyCode > 47);
      }, t5.prototype._keyUp = function(e8) {
        this._customKeyEventHandler && false === this._customKeyEventHandler(e8) || (function(e9) {
          return 16 === e9.keyCode || 17 === e9.keyCode || 18 === e9.keyCode;
        }(e8) || this.focus(), this.updateCursorStyle(e8));
      }, t5.prototype._keyPress = function(e8) {
        var t6;
        if (this._keyDownHandled)
          return false;
        if (this._customKeyEventHandler && false === this._customKeyEventHandler(e8))
          return false;
        if (this.cancel(e8), e8.charCode)
          t6 = e8.charCode;
        else if (null === e8.which || void 0 === e8.which)
          t6 = e8.keyCode;
        else {
          if (0 === e8.which || 0 === e8.charCode)
            return false;
          t6 = e8.which;
        }
        return !(!t6 || (e8.altKey || e8.ctrlKey || e8.metaKey) && !this._isThirdLevelShift(this.browser, e8) || (t6 = String.fromCharCode(t6), this._onKey.fire({ key: t6, domEvent: e8 }), this.showCursor(), this._coreService.triggerDataEvent(t6, true), 0));
      }, t5.prototype.bell = function() {
        var e8 = this;
        this._soundBell() && this._soundService.playBellSound(), this._visualBell() && (this.element.classList.add("visual-bell-active"), clearTimeout(this._visualBellTimer), this._visualBellTimer = window.setTimeout(function() {
          e8.element.classList.remove("visual-bell-active");
        }, 200));
      }, t5.prototype.resize = function(e8, t6) {
        var r9, i9;
        isNaN(e8) || isNaN(t6) || (e8 !== this.cols || t6 !== this.rows ? (e8 < T9.MINIMUM_COLS && (e8 = T9.MINIMUM_COLS), t6 < T9.MINIMUM_ROWS && (t6 = T9.MINIMUM_ROWS), this.buffers.resize(e8, t6), this._bufferService.resize(e8, t6), this.buffers.setupTabStops(this.cols), null === (r9 = this._charSizeService) || void 0 === r9 || r9.measure(), null === (i9 = this.viewport) || void 0 === i9 || i9.syncScrollArea(true), this.refresh(0, this.rows - 1), this._onResize.fire({ cols: e8, rows: t6 })) : this._charSizeService && !this._charSizeService.hasValidSize && this._charSizeService.measure());
      }, t5.prototype.clear = function() {
        if (0 !== this.buffer.ybase || 0 !== this.buffer.y) {
          this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)), this.buffer.lines.length = 1, this.buffer.ydisp = 0, this.buffer.ybase = 0, this.buffer.y = 0;
          for (var e8 = 1; e8 < this.rows; e8++)
            this.buffer.lines.push(this.buffer.getBlankLine(C9.DEFAULT_ATTR_DATA));
          this.refresh(0, this.rows - 1), this._onScroll.fire(this.buffer.ydisp);
        }
      }, t5.prototype.is = function(e8) {
        return 0 === (this.options.termName + "").indexOf(e8);
      }, t5.prototype.handleTitle = function(e8) {
        this._onTitleChange.fire(e8);
      }, t5.prototype.reset = function() {
        var e8, t6;
        this.options.rows = this.rows, this.options.cols = this.cols;
        var r9 = this._customKeyEventHandler, i9 = this._userScrolling;
        this._setup(), this._bufferService.reset(), this._charsetService.reset(), this._coreService.reset(), this._coreMouseService.reset(), null === (e8 = this._selectionService) || void 0 === e8 || e8.reset(), this._customKeyEventHandler = r9, this._userScrolling = i9, this.refresh(0, this.rows - 1), null === (t6 = this.viewport) || void 0 === t6 || t6.syncScrollArea();
      }, t5.prototype.cancel = function(e8, t6) {
        if (this.options.cancelEvents || t6)
          return e8.preventDefault(), e8.stopPropagation(), false;
      }, t5.prototype._visualBell = function() {
        return false;
      }, t5.prototype._soundBell = function() {
        return "sound" === this.options.bellStyle;
      }, t5.prototype.write = function(e8, t6) {
        this._writeBuffer.write(e8, t6);
      }, t5.prototype.writeSync = function(e8) {
        this._writeBuffer.writeSync(e8);
      }, t5;
    }(O5.Disposable);
    t4.Terminal = z3;
  }, function(e6, t4, r8) {
    "use strict";
    var i8 = this && this.__decorate || function(e7, t5, r9, i9) {
      var n12, o10 = arguments.length, s8 = o10 < 3 ? t5 : null === i9 ? i9 = Object.getOwnPropertyDescriptor(t5, r9) : i9;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
        s8 = Reflect.decorate(e7, t5, r9, i9);
      else
        for (var a6 = e7.length - 1; a6 >= 0; a6--)
          (n12 = e7[a6]) && (s8 = (o10 < 3 ? n12(s8) : o10 > 3 ? n12(t5, r9, s8) : n12(t5, r9)) || s8);
      return o10 > 3 && s8 && Object.defineProperty(t5, r9, s8), s8;
    }, n11 = this && this.__param || function(e7, t5) {
      return function(r9, i9) {
        t5(r9, i9, e7);
      };
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(4), s7 = r8(1), a5 = function() {
      function e7(e8, t5, r9, i9, n12, o10) {
        this._textarea = e8, this._compositionView = t5, this._bufferService = r9, this._optionsService = i9, this._charSizeService = n12, this._coreService = o10, this._isComposing = false, this._isSendingComposition = false, this._compositionPosition = { start: 0, end: 0 };
      }
      return e7.prototype.compositionstart = function() {
        this._isComposing = true, this._compositionPosition.start = this._textarea.value.length, this._compositionView.textContent = "", this._compositionView.classList.add("active");
      }, e7.prototype.compositionupdate = function(e8) {
        var t5 = this;
        this._compositionView.textContent = e8.data, this.updateCompositionElements(), setTimeout(function() {
          t5._compositionPosition.end = t5._textarea.value.length;
        }, 0);
      }, e7.prototype.compositionend = function() {
        this._finalizeComposition(true);
      }, e7.prototype.keydown = function(e8) {
        if (this._isComposing || this._isSendingComposition) {
          if (229 === e8.keyCode)
            return false;
          if (16 === e8.keyCode || 17 === e8.keyCode || 18 === e8.keyCode)
            return false;
          this._finalizeComposition(false);
        }
        return 229 !== e8.keyCode || (this._handleAnyTextareaChanges(), false);
      }, e7.prototype._finalizeComposition = function(e8) {
        var t5 = this;
        if (this._compositionView.classList.remove("active"), this._isComposing = false, this._clearTextareaPosition(), e8) {
          var r9 = { start: this._compositionPosition.start, end: this._compositionPosition.end };
          this._isSendingComposition = true, setTimeout(function() {
            var e9;
            t5._isSendingComposition && (t5._isSendingComposition = false, e9 = t5._isComposing ? t5._textarea.value.substring(r9.start, r9.end) : t5._textarea.value.substring(r9.start), t5._coreService.triggerDataEvent(e9, true));
          }, 0);
        } else {
          this._isSendingComposition = false;
          var i9 = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);
          this._coreService.triggerDataEvent(i9, true);
        }
      }, e7.prototype._handleAnyTextareaChanges = function() {
        var e8 = this, t5 = this._textarea.value;
        setTimeout(function() {
          if (!e8._isComposing) {
            var r9 = e8._textarea.value.replace(t5, "");
            r9.length > 0 && e8._coreService.triggerDataEvent(r9, true);
          }
        }, 0);
      }, e7.prototype.updateCompositionElements = function(e8) {
        var t5 = this;
        if (this._isComposing) {
          if (this._bufferService.buffer.isCursorInViewport) {
            var r9 = Math.ceil(this._charSizeService.height * this._optionsService.options.lineHeight), i9 = this._bufferService.buffer.y * r9, n12 = this._bufferService.buffer.x * this._charSizeService.width;
            this._compositionView.style.left = n12 + "px", this._compositionView.style.top = i9 + "px", this._compositionView.style.height = r9 + "px", this._compositionView.style.lineHeight = r9 + "px", this._compositionView.style.fontFamily = this._optionsService.options.fontFamily, this._compositionView.style.fontSize = this._optionsService.options.fontSize + "px";
            var o10 = this._compositionView.getBoundingClientRect();
            this._textarea.style.left = n12 + "px", this._textarea.style.top = i9 + "px", this._textarea.style.width = o10.width + "px", this._textarea.style.height = o10.height + "px", this._textarea.style.lineHeight = o10.height + "px";
          }
          e8 || setTimeout(function() {
            return t5.updateCompositionElements(true);
          }, 0);
        }
      }, e7.prototype._clearTextareaPosition = function() {
        this._textarea.style.left = "", this._textarea.style.top = "";
      }, i8([n11(2, s7.IBufferService), n11(3, s7.IOptionsService), n11(4, o9.ICharSizeService), n11(5, s7.ICoreService)], e7);
    }();
    t4.CompositionHelper = a5;
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    }), o9 = this && this.__decorate || function(e7, t5, r9, i9) {
      var n12, o10 = arguments.length, s8 = o10 < 3 ? t5 : null === i9 ? i9 = Object.getOwnPropertyDescriptor(t5, r9) : i9;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
        s8 = Reflect.decorate(e7, t5, r9, i9);
      else
        for (var a6 = e7.length - 1; a6 >= 0; a6--)
          (n12 = e7[a6]) && (s8 = (o10 < 3 ? n12(s8) : o10 > 3 ? n12(t5, r9, s8) : n12(t5, r9)) || s8);
      return o10 > 3 && s8 && Object.defineProperty(t5, r9, s8), s8;
    }, s7 = this && this.__param || function(e7, t5) {
      return function(r9, i9) {
        t5(r9, i9, e7);
      };
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var a5 = r8(2), c8 = r8(8), l7 = r8(4), h8 = r8(1), u8 = function(e7) {
      function t5(t6, r9, i9, n12, o10, s8, a6) {
        var l8 = e7.call(this) || this;
        return l8._scrollLines = t6, l8._viewportElement = r9, l8._scrollArea = i9, l8._bufferService = n12, l8._optionsService = o10, l8._charSizeService = s8, l8._renderService = a6, l8.scrollBarWidth = 0, l8._currentRowHeight = 0, l8._lastRecordedBufferLength = 0, l8._lastRecordedViewportHeight = 0, l8._lastRecordedBufferHeight = 0, l8._lastTouchY = 0, l8._lastScrollTop = 0, l8._wheelPartialScroll = 0, l8._refreshAnimationFrame = null, l8._ignoreNextScrollEvent = false, l8.scrollBarWidth = l8._viewportElement.offsetWidth - l8._scrollArea.offsetWidth || 15, l8.register(c8.addDisposableDomListener(l8._viewportElement, "scroll", l8._onScroll.bind(l8))), setTimeout(function() {
          return l8.syncScrollArea();
        }, 0), l8;
      }
      return n11(t5, e7), t5.prototype.onThemeChange = function(e8) {
        this._viewportElement.style.backgroundColor = e8.background.css;
      }, t5.prototype._refresh = function(e8) {
        var t6 = this;
        if (e8)
          return this._innerRefresh(), void (null !== this._refreshAnimationFrame && cancelAnimationFrame(this._refreshAnimationFrame));
        null === this._refreshAnimationFrame && (this._refreshAnimationFrame = requestAnimationFrame(function() {
          return t6._innerRefresh();
        }));
      }, t5.prototype._innerRefresh = function() {
        if (this._charSizeService.height > 0) {
          this._currentRowHeight = this._renderService.dimensions.scaledCellHeight / window.devicePixelRatio, this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;
          var e8 = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._renderService.dimensions.canvasHeight);
          this._lastRecordedBufferHeight !== e8 && (this._lastRecordedBufferHeight = e8, this._scrollArea.style.height = this._lastRecordedBufferHeight + "px");
        }
        var t6 = this._bufferService.buffer.ydisp * this._currentRowHeight;
        this._viewportElement.scrollTop !== t6 && (this._ignoreNextScrollEvent = true, this._viewportElement.scrollTop = t6), this._refreshAnimationFrame = null;
      }, t5.prototype.syncScrollArea = function(e8) {
        if (void 0 === e8 && (e8 = false), this._lastRecordedBufferLength !== this._bufferService.buffer.lines.length)
          return this._lastRecordedBufferLength = this._bufferService.buffer.lines.length, void this._refresh(e8);
        if (this._lastRecordedViewportHeight === this._renderService.dimensions.canvasHeight) {
          var t6 = this._bufferService.buffer.ydisp * this._currentRowHeight;
          this._lastScrollTop === t6 && this._lastScrollTop === this._viewportElement.scrollTop && this._renderService.dimensions.scaledCellHeight / window.devicePixelRatio === this._currentRowHeight || this._refresh(e8);
        } else
          this._refresh(e8);
      }, t5.prototype._onScroll = function(e8) {
        if (this._lastScrollTop = this._viewportElement.scrollTop, this._viewportElement.offsetParent)
          if (this._ignoreNextScrollEvent)
            this._ignoreNextScrollEvent = false;
          else {
            var t6 = Math.round(this._lastScrollTop / this._currentRowHeight) - this._bufferService.buffer.ydisp;
            this._scrollLines(t6, true);
          }
      }, t5.prototype._bubbleScroll = function(e8, t6) {
        var r9 = this._viewportElement.scrollTop + this._lastRecordedViewportHeight;
        return !(t6 < 0 && 0 !== this._viewportElement.scrollTop || t6 > 0 && r9 < this._lastRecordedBufferHeight) || (e8.cancelable && e8.preventDefault(), false);
      }, t5.prototype.onWheel = function(e8) {
        var t6 = this._getPixelsScrolled(e8);
        return 0 !== t6 && (this._viewportElement.scrollTop += t6, this._bubbleScroll(e8, t6));
      }, t5.prototype._getPixelsScrolled = function(e8) {
        if (0 === e8.deltaY)
          return 0;
        var t6 = this._applyScrollModifier(e8.deltaY, e8);
        return e8.deltaMode === WheelEvent.DOM_DELTA_LINE ? t6 *= this._currentRowHeight : e8.deltaMode === WheelEvent.DOM_DELTA_PAGE && (t6 *= this._currentRowHeight * this._bufferService.rows), t6;
      }, t5.prototype.getLinesScrolled = function(e8) {
        if (0 === e8.deltaY)
          return 0;
        var t6 = this._applyScrollModifier(e8.deltaY, e8);
        return e8.deltaMode === WheelEvent.DOM_DELTA_PIXEL ? (t6 /= this._currentRowHeight + 0, this._wheelPartialScroll += t6, t6 = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1), this._wheelPartialScroll %= 1) : e8.deltaMode === WheelEvent.DOM_DELTA_PAGE && (t6 *= this._bufferService.rows), t6;
      }, t5.prototype._applyScrollModifier = function(e8, t6) {
        var r9 = this._optionsService.options.fastScrollModifier;
        return "alt" === r9 && t6.altKey || "ctrl" === r9 && t6.ctrlKey || "shift" === r9 && t6.shiftKey ? e8 * this._optionsService.options.fastScrollSensitivity * this._optionsService.options.scrollSensitivity : e8 * this._optionsService.options.scrollSensitivity;
      }, t5.prototype.onTouchStart = function(e8) {
        this._lastTouchY = e8.touches[0].pageY;
      }, t5.prototype.onTouchMove = function(e8) {
        var t6 = this._lastTouchY - e8.touches[0].pageY;
        return this._lastTouchY = e8.touches[0].pageY, 0 !== t6 && (this._viewportElement.scrollTop += t6, this._bubbleScroll(e8, t6));
      }, o9([s7(3, h8.IBufferService), s7(4, h8.IOptionsService), s7(5, l7.ICharSizeService), s7(6, l7.IRenderService)], t5);
    }(a5.Disposable);
    t4.Viewport = u8;
  }, function(e6, t4, r8) {
    "use strict";
    function i8(e7) {
      return e7.replace(/\r?\n/g, "\r");
    }
    function n11(e7, t5) {
      return t5 ? "\x1B[200~" + e7 + "\x1B[201~" : e7;
    }
    function o9(e7, t5, r9, o10) {
      e7 = n11(e7 = i8(e7), r9), o10.triggerDataEvent(e7, true), t5.value = "";
    }
    function s7(e7, t5, r9) {
      var i9 = r9.getBoundingClientRect(), n12 = e7.clientX - i9.left - 10, o10 = e7.clientY - i9.top - 10;
      t5.style.position = "absolute", t5.style.width = "20px", t5.style.height = "20px", t5.style.left = n12 + "px", t5.style.top = o10 + "px", t5.style.zIndex = "1000", t5.focus(), setTimeout(function() {
        t5.style.position = "", t5.style.width = "", t5.style.height = "", t5.style.left = "", t5.style.top = "", t5.style.zIndex = "";
      }, 200);
    }
    Object.defineProperty(t4, "__esModule", { value: true }), t4.prepareTextForTerminal = i8, t4.bracketTextForPaste = n11, t4.copyHandler = function(e7, t5) {
      e7.clipboardData && e7.clipboardData.setData("text/plain", t5.selectionText), e7.preventDefault();
    }, t4.handlePasteEvent = function(e7, t5, r9, i9) {
      e7.stopPropagation(), e7.clipboardData && o9(e7.clipboardData.getData("text/plain"), t5, r9, i9);
    }, t4.paste = o9, t4.moveTextAreaUnderMouseCursor = s7, t4.rightClickHandler = function(e7, t5, r9, i9, n12) {
      s7(e7, t5, r9), n12 && !i9.isClickInSelection(e7) && i9.selectWordAtCursor(e7), t5.value = i9.selectionText, t5.select();
    };
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    });
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(12), s7 = r8(18), a5 = r8(38), c8 = r8(2), l7 = r8(15), h8 = r8(7), u8 = r8(16), f6 = r8(0), _6 = r8(3), d8 = r8(5), p10 = r8(6), v10 = r8(20), y6 = r8(22), g9 = r8(4), b9 = { "(": 0, ")": 1, "*": 2, "+": 3, "-": 1, ".": 2 };
    function m10(e7, t5) {
      if (e7 > 24)
        return t5.setWinLines || false;
      switch (e7) {
        case 1:
          return !!t5.restoreWin;
        case 2:
          return !!t5.minimizeWin;
        case 3:
          return !!t5.setWinPosition;
        case 4:
          return !!t5.setWinSizePixels;
        case 5:
          return !!t5.raiseWin;
        case 6:
          return !!t5.lowerWin;
        case 7:
          return !!t5.refreshWin;
        case 8:
          return !!t5.setWinSizeChars;
        case 9:
          return !!t5.maximizeWin;
        case 10:
          return !!t5.fullscreenWin;
        case 11:
          return !!t5.getWinState;
        case 13:
          return !!t5.getWinPosition;
        case 14:
          return !!t5.getWinSizePixels;
        case 15:
          return !!t5.getScreenSizePixels;
        case 16:
          return !!t5.getCellSizePixels;
        case 18:
          return !!t5.getWinSizeChars;
        case 19:
          return !!t5.getScreenSizeChars;
        case 20:
          return !!t5.getIconTitle;
        case 21:
          return !!t5.getWinTitle;
        case 22:
          return !!t5.pushTitle;
        case 23:
          return !!t5.popTitle;
        case 24:
          return !!t5.setWinLines;
      }
      return false;
    }
    var S6 = function() {
      function e7(e8, t5, r9, i9) {
        this._bufferService = e8, this._coreService = t5, this._logService = r9, this._optionsService = i9, this._data = new Uint32Array(0);
      }
      return e7.prototype.hook = function(e8) {
        this._data = new Uint32Array(0);
      }, e7.prototype.put = function(e8, t5, r9) {
        this._data = l7.concat(this._data, e8.subarray(t5, r9));
      }, e7.prototype.unhook = function(e8) {
        if (e8) {
          var t5 = h8.utf32ToString(this._data);
          switch (this._data = new Uint32Array(0), t5) {
            case '"q':
              return this._coreService.triggerDataEvent(o9.C0.ESC + 'P1$r0"q' + o9.C0.ESC + "\\");
            case '"p':
              return this._coreService.triggerDataEvent(o9.C0.ESC + 'P1$r61;1"p' + o9.C0.ESC + "\\");
            case "r":
              var r9 = this._bufferService.buffer.scrollTop + 1 + ";" + (this._bufferService.buffer.scrollBottom + 1) + "r";
              return this._coreService.triggerDataEvent(o9.C0.ESC + "P1$r" + r9 + o9.C0.ESC + "\\");
            case "m":
              return this._coreService.triggerDataEvent(o9.C0.ESC + "P1$r0m" + o9.C0.ESC + "\\");
            case " q":
              var i9 = { block: 2, underline: 4, bar: 6 }[this._optionsService.options.cursorStyle];
              return i9 -= this._optionsService.options.cursorBlink ? 1 : 0, this._coreService.triggerDataEvent(o9.C0.ESC + "P1$r" + i9 + " q" + o9.C0.ESC + "\\");
            default:
              this._logService.debug("Unknown DCS $q %s", t5), this._coreService.triggerDataEvent(o9.C0.ESC + "P0$r" + o9.C0.ESC + "\\");
          }
        } else
          this._data = new Uint32Array(0);
      }, e7;
    }(), C9 = function(e7) {
      function t5(t6, r9, i9, n12, c9, l8, _7, p11, y7, g10, b10) {
        void 0 === b10 && (b10 = new a5.EscapeSequenceParser());
        var m11 = e7.call(this) || this;
        m11._terminal = t6, m11._bufferService = r9, m11._charsetService = i9, m11._coreService = n12, m11._dirtyRowService = c9, m11._logService = l8, m11._optionsService = _7, m11._coreMouseService = p11, m11._unicodeService = y7, m11._instantiationService = g10, m11._parser = b10, m11._parseBuffer = new Uint32Array(4096), m11._stringDecoder = new h8.StringToUtf32(), m11._utf8Decoder = new h8.Utf8ToUtf32(), m11._workCell = new d8.CellData(), m11._windowTitle = "", m11._iconName = "", m11._windowTitleStack = [], m11._iconNameStack = [], m11._curAttrData = u8.DEFAULT_ATTR_DATA.clone(), m11._eraseAttrDataInternal = u8.DEFAULT_ATTR_DATA.clone(), m11._onRequestRefreshRows = new f6.EventEmitter(), m11._onRequestReset = new f6.EventEmitter(), m11._onRequestBell = new f6.EventEmitter(), m11._onCursorMove = new f6.EventEmitter(), m11._onLineFeed = new f6.EventEmitter(), m11._onScroll = new f6.EventEmitter(), m11.register(m11._parser), m11._parser.setCsiHandlerFallback(function(e8, t7) {
          m11._logService.debug("Unknown CSI code: ", { identifier: m11._parser.identToString(e8), params: t7.toArray() });
        }), m11._parser.setEscHandlerFallback(function(e8) {
          m11._logService.debug("Unknown ESC code: ", { identifier: m11._parser.identToString(e8) });
        }), m11._parser.setExecuteHandlerFallback(function(e8) {
          m11._logService.debug("Unknown EXECUTE code: ", { code: e8 });
        }), m11._parser.setOscHandlerFallback(function(e8, t7, r10) {
          m11._logService.debug("Unknown OSC code: ", { identifier: e8, action: t7, data: r10 });
        }), m11._parser.setDcsHandlerFallback(function(e8, t7, r10) {
          "HOOK" === t7 && (r10 = r10.toArray()), m11._logService.debug("Unknown DCS code: ", { identifier: m11._parser.identToString(e8), action: t7, payload: r10 });
        }), m11._parser.setPrintHandler(function(e8, t7, r10) {
          return m11.print(e8, t7, r10);
        }), m11._parser.setCsiHandler({ final: "@" }, function(e8) {
          return m11.insertChars(e8);
        }), m11._parser.setCsiHandler({ intermediates: " ", final: "@" }, function(e8) {
          return m11.scrollLeft(e8);
        }), m11._parser.setCsiHandler({ final: "A" }, function(e8) {
          return m11.cursorUp(e8);
        }), m11._parser.setCsiHandler({ intermediates: " ", final: "A" }, function(e8) {
          return m11.scrollRight(e8);
        }), m11._parser.setCsiHandler({ final: "B" }, function(e8) {
          return m11.cursorDown(e8);
        }), m11._parser.setCsiHandler({ final: "C" }, function(e8) {
          return m11.cursorForward(e8);
        }), m11._parser.setCsiHandler({ final: "D" }, function(e8) {
          return m11.cursorBackward(e8);
        }), m11._parser.setCsiHandler({ final: "E" }, function(e8) {
          return m11.cursorNextLine(e8);
        }), m11._parser.setCsiHandler({ final: "F" }, function(e8) {
          return m11.cursorPrecedingLine(e8);
        }), m11._parser.setCsiHandler({ final: "G" }, function(e8) {
          return m11.cursorCharAbsolute(e8);
        }), m11._parser.setCsiHandler({ final: "H" }, function(e8) {
          return m11.cursorPosition(e8);
        }), m11._parser.setCsiHandler({ final: "I" }, function(e8) {
          return m11.cursorForwardTab(e8);
        }), m11._parser.setCsiHandler({ final: "J" }, function(e8) {
          return m11.eraseInDisplay(e8);
        }), m11._parser.setCsiHandler({ prefix: "?", final: "J" }, function(e8) {
          return m11.eraseInDisplay(e8);
        }), m11._parser.setCsiHandler({ final: "K" }, function(e8) {
          return m11.eraseInLine(e8);
        }), m11._parser.setCsiHandler({ prefix: "?", final: "K" }, function(e8) {
          return m11.eraseInLine(e8);
        }), m11._parser.setCsiHandler({ final: "L" }, function(e8) {
          return m11.insertLines(e8);
        }), m11._parser.setCsiHandler({ final: "M" }, function(e8) {
          return m11.deleteLines(e8);
        }), m11._parser.setCsiHandler({ final: "P" }, function(e8) {
          return m11.deleteChars(e8);
        }), m11._parser.setCsiHandler({ final: "S" }, function(e8) {
          return m11.scrollUp(e8);
        }), m11._parser.setCsiHandler({ final: "T" }, function(e8) {
          return m11.scrollDown(e8);
        }), m11._parser.setCsiHandler({ final: "X" }, function(e8) {
          return m11.eraseChars(e8);
        }), m11._parser.setCsiHandler({ final: "Z" }, function(e8) {
          return m11.cursorBackwardTab(e8);
        }), m11._parser.setCsiHandler({ final: "`" }, function(e8) {
          return m11.charPosAbsolute(e8);
        }), m11._parser.setCsiHandler({ final: "a" }, function(e8) {
          return m11.hPositionRelative(e8);
        }), m11._parser.setCsiHandler({ final: "b" }, function(e8) {
          return m11.repeatPrecedingCharacter(e8);
        }), m11._parser.setCsiHandler({ final: "c" }, function(e8) {
          return m11.sendDeviceAttributesPrimary(e8);
        }), m11._parser.setCsiHandler({ prefix: ">", final: "c" }, function(e8) {
          return m11.sendDeviceAttributesSecondary(e8);
        }), m11._parser.setCsiHandler({ final: "d" }, function(e8) {
          return m11.linePosAbsolute(e8);
        }), m11._parser.setCsiHandler({ final: "e" }, function(e8) {
          return m11.vPositionRelative(e8);
        }), m11._parser.setCsiHandler({ final: "f" }, function(e8) {
          return m11.hVPosition(e8);
        }), m11._parser.setCsiHandler({ final: "g" }, function(e8) {
          return m11.tabClear(e8);
        }), m11._parser.setCsiHandler({ final: "h" }, function(e8) {
          return m11.setMode(e8);
        }), m11._parser.setCsiHandler({ prefix: "?", final: "h" }, function(e8) {
          return m11.setModePrivate(e8);
        }), m11._parser.setCsiHandler({ final: "l" }, function(e8) {
          return m11.resetMode(e8);
        }), m11._parser.setCsiHandler({ prefix: "?", final: "l" }, function(e8) {
          return m11.resetModePrivate(e8);
        }), m11._parser.setCsiHandler({ final: "m" }, function(e8) {
          return m11.charAttributes(e8);
        }), m11._parser.setCsiHandler({ final: "n" }, function(e8) {
          return m11.deviceStatus(e8);
        }), m11._parser.setCsiHandler({ prefix: "?", final: "n" }, function(e8) {
          return m11.deviceStatusPrivate(e8);
        }), m11._parser.setCsiHandler({ intermediates: "!", final: "p" }, function(e8) {
          return m11.softReset(e8);
        }), m11._parser.setCsiHandler({ intermediates: " ", final: "q" }, function(e8) {
          return m11.setCursorStyle(e8);
        }), m11._parser.setCsiHandler({ final: "r" }, function(e8) {
          return m11.setScrollRegion(e8);
        }), m11._parser.setCsiHandler({ final: "s" }, function(e8) {
          return m11.saveCursor(e8);
        }), m11._parser.setCsiHandler({ final: "t" }, function(e8) {
          return m11.windowOptions(e8);
        }), m11._parser.setCsiHandler({ final: "u" }, function(e8) {
          return m11.restoreCursor(e8);
        }), m11._parser.setCsiHandler({ intermediates: "'", final: "}" }, function(e8) {
          return m11.insertColumns(e8);
        }), m11._parser.setCsiHandler({ intermediates: "'", final: "~" }, function(e8) {
          return m11.deleteColumns(e8);
        }), m11._parser.setExecuteHandler(o9.C0.BEL, function() {
          return m11.bell();
        }), m11._parser.setExecuteHandler(o9.C0.LF, function() {
          return m11.lineFeed();
        }), m11._parser.setExecuteHandler(o9.C0.VT, function() {
          return m11.lineFeed();
        }), m11._parser.setExecuteHandler(o9.C0.FF, function() {
          return m11.lineFeed();
        }), m11._parser.setExecuteHandler(o9.C0.CR, function() {
          return m11.carriageReturn();
        }), m11._parser.setExecuteHandler(o9.C0.BS, function() {
          return m11.backspace();
        }), m11._parser.setExecuteHandler(o9.C0.HT, function() {
          return m11.tab();
        }), m11._parser.setExecuteHandler(o9.C0.SO, function() {
          return m11.shiftOut();
        }), m11._parser.setExecuteHandler(o9.C0.SI, function() {
          return m11.shiftIn();
        }), m11._parser.setExecuteHandler(o9.C1.IND, function() {
          return m11.index();
        }), m11._parser.setExecuteHandler(o9.C1.NEL, function() {
          return m11.nextLine();
        }), m11._parser.setExecuteHandler(o9.C1.HTS, function() {
          return m11.tabSet();
        }), m11._parser.setOscHandler(0, new v10.OscHandler(function(e8) {
          m11.setTitle(e8), m11.setIconName(e8);
        })), m11._parser.setOscHandler(1, new v10.OscHandler(function(e8) {
          return m11.setIconName(e8);
        })), m11._parser.setOscHandler(2, new v10.OscHandler(function(e8) {
          return m11.setTitle(e8);
        })), m11._parser.setEscHandler({ final: "7" }, function() {
          return m11.saveCursor();
        }), m11._parser.setEscHandler({ final: "8" }, function() {
          return m11.restoreCursor();
        }), m11._parser.setEscHandler({ final: "D" }, function() {
          return m11.index();
        }), m11._parser.setEscHandler({ final: "E" }, function() {
          return m11.nextLine();
        }), m11._parser.setEscHandler({ final: "H" }, function() {
          return m11.tabSet();
        }), m11._parser.setEscHandler({ final: "M" }, function() {
          return m11.reverseIndex();
        }), m11._parser.setEscHandler({ final: "=" }, function() {
          return m11.keypadApplicationMode();
        }), m11._parser.setEscHandler({ final: ">" }, function() {
          return m11.keypadNumericMode();
        }), m11._parser.setEscHandler({ final: "c" }, function() {
          return m11.fullReset();
        }), m11._parser.setEscHandler({ final: "n" }, function() {
          return m11.setgLevel(2);
        }), m11._parser.setEscHandler({ final: "o" }, function() {
          return m11.setgLevel(3);
        }), m11._parser.setEscHandler({ final: "|" }, function() {
          return m11.setgLevel(3);
        }), m11._parser.setEscHandler({ final: "}" }, function() {
          return m11.setgLevel(2);
        }), m11._parser.setEscHandler({ final: "~" }, function() {
          return m11.setgLevel(1);
        }), m11._parser.setEscHandler({ intermediates: "%", final: "@" }, function() {
          return m11.selectDefaultCharset();
        }), m11._parser.setEscHandler({ intermediates: "%", final: "G" }, function() {
          return m11.selectDefaultCharset();
        });
        var C10 = function(e8) {
          w5._parser.setEscHandler({ intermediates: "(", final: e8 }, function() {
            return m11.selectCharset("(" + e8);
          }), w5._parser.setEscHandler({ intermediates: ")", final: e8 }, function() {
            return m11.selectCharset(")" + e8);
          }), w5._parser.setEscHandler({ intermediates: "*", final: e8 }, function() {
            return m11.selectCharset("*" + e8);
          }), w5._parser.setEscHandler({ intermediates: "+", final: e8 }, function() {
            return m11.selectCharset("+" + e8);
          }), w5._parser.setEscHandler({ intermediates: "-", final: e8 }, function() {
            return m11.selectCharset("-" + e8);
          }), w5._parser.setEscHandler({ intermediates: ".", final: e8 }, function() {
            return m11.selectCharset("." + e8);
          }), w5._parser.setEscHandler({ intermediates: "/", final: e8 }, function() {
            return m11.selectCharset("/" + e8);
          });
        }, w5 = this;
        for (var E5 in s7.CHARSETS)
          C10(E5);
        return m11._parser.setEscHandler({ intermediates: "#", final: "8" }, function() {
          return m11.screenAlignmentPattern();
        }), m11._parser.setErrorHandler(function(e8) {
          return m11._logService.error("Parsing error: ", e8), e8;
        }), m11._parser.setDcsHandler({ intermediates: "$", final: "q" }, new S6(m11._bufferService, m11._coreService, m11._logService, m11._optionsService)), m11;
      }
      return n11(t5, e7), Object.defineProperty(t5.prototype, "onRequestRefreshRows", { get: function() {
        return this._onRequestRefreshRows.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onRequestReset", { get: function() {
        return this._onRequestReset.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onRequestBell", { get: function() {
        return this._onRequestBell.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onCursorMove", { get: function() {
        return this._onCursorMove.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onLineFeed", { get: function() {
        return this._onLineFeed.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onScroll", { get: function() {
        return this._onScroll.event;
      }, enumerable: true, configurable: true }), t5.prototype.dispose = function() {
        e7.prototype.dispose.call(this);
      }, t5.prototype.parse = function(e8) {
        var t6 = this._bufferService.buffer, r9 = t6.x, i9 = t6.y;
        if (this._logService.debug("parsing data", e8), this._parseBuffer.length < e8.length && this._parseBuffer.length < 131072 && (this._parseBuffer = new Uint32Array(Math.min(e8.length, 131072))), this._dirtyRowService.clearRange(), e8.length > 131072)
          for (var n12 = 0; n12 < e8.length; n12 += 131072) {
            var o10 = n12 + 131072 < e8.length ? n12 + 131072 : e8.length, s8 = "string" == typeof e8 ? this._stringDecoder.decode(e8.substring(n12, o10), this._parseBuffer) : this._utf8Decoder.decode(e8.subarray(n12, o10), this._parseBuffer);
            this._parser.parse(this._parseBuffer, s8);
          }
        else
          s8 = "string" == typeof e8 ? this._stringDecoder.decode(e8, this._parseBuffer) : this._utf8Decoder.decode(e8, this._parseBuffer), this._parser.parse(this._parseBuffer, s8);
        (t6 = this._bufferService.buffer).x === r9 && t6.y === i9 || this._onCursorMove.fire(), this._onRequestRefreshRows.fire(this._dirtyRowService.start, this._dirtyRowService.end);
      }, t5.prototype.print = function(e8, t6, r9) {
        var i9, n12, o10 = this._bufferService.buffer, s8 = this._charsetService.charset, a6 = this._optionsService.options.screenReaderMode, c9 = this._bufferService.cols, l8 = this._coreService.decPrivateModes.wraparound, u9 = this._terminal.insertMode, f7 = this._curAttrData, d9 = o10.lines.get(o10.y + o10.ybase);
        this._dirtyRowService.markDirty(o10.y), o10.x && r9 - t6 > 0 && 2 === d9.getWidth(o10.x - 1) && d9.setCellFromCodePoint(o10.x - 1, 0, 1, f7.fg, f7.bg);
        for (var p11 = t6; p11 < r9; ++p11) {
          if (i9 = e8[p11], n12 = this._unicodeService.wcwidth(i9), i9 < 127 && s8) {
            var v11 = s8[String.fromCharCode(i9)];
            v11 && (i9 = v11.charCodeAt(0));
          }
          if (a6 && this._terminal.onA11yCharEmitter.fire(h8.stringFromCodePoint(i9)), n12 || !o10.x) {
            if (o10.x + n12 - 1 >= c9) {
              if (l8)
                o10.x = 0, o10.y++, o10.y === o10.scrollBottom + 1 ? (o10.y--, this._terminal.scroll(this._eraseAttrData(), true)) : (o10.y >= this._bufferService.rows && (o10.y = this._bufferService.rows - 1), o10.lines.get(o10.y).isWrapped = true), d9 = o10.lines.get(o10.y + o10.ybase);
              else if (o10.x = c9 - 1, 2 === n12)
                continue;
            }
            if (u9 && (d9.insertCells(o10.x, n12, o10.getNullCell(f7), f7), 2 === d9.getWidth(c9 - 1) && d9.setCellFromCodePoint(c9 - 1, _6.NULL_CELL_CODE, _6.NULL_CELL_WIDTH, f7.fg, f7.bg)), d9.setCellFromCodePoint(o10.x++, i9, n12, f7.fg, f7.bg), n12 > 0)
              for (; --n12; )
                d9.setCellFromCodePoint(o10.x++, 0, 0, f7.fg, f7.bg);
          } else
            d9.getWidth(o10.x - 1) ? d9.addCodepointToCell(o10.x - 1, i9) : d9.addCodepointToCell(o10.x - 2, i9);
        }
        r9 - t6 > 0 && (d9.loadCell(o10.x - 1, this._workCell), 2 === this._workCell.getWidth() || this._workCell.getCode() > 65535 ? this._parser.precedingCodepoint = 0 : this._workCell.isCombined() ? this._parser.precedingCodepoint = this._workCell.getChars().charCodeAt(0) : this._parser.precedingCodepoint = this._workCell.content), o10.x < c9 && r9 - t6 > 0 && 0 === d9.getWidth(o10.x) && !d9.hasContent(o10.x) && d9.setCellFromCodePoint(o10.x, 0, 1, f7.fg, f7.bg), this._dirtyRowService.markDirty(o10.y);
      }, t5.prototype.addCsiHandler = function(e8, t6) {
        var r9 = this;
        return "t" !== e8.final || e8.prefix || e8.intermediates ? this._parser.addCsiHandler(e8, t6) : this._parser.addCsiHandler(e8, function(e9) {
          return !m10(e9.params[0], r9._optionsService.options.windowOptions) || t6(e9);
        });
      }, t5.prototype.addDcsHandler = function(e8, t6) {
        return this._parser.addDcsHandler(e8, new y6.DcsHandler(t6));
      }, t5.prototype.addEscHandler = function(e8, t6) {
        return this._parser.addEscHandler(e8, t6);
      }, t5.prototype.addOscHandler = function(e8, t6) {
        return this._parser.addOscHandler(e8, new v10.OscHandler(t6));
      }, t5.prototype.bell = function() {
        this._onRequestBell.fire();
      }, t5.prototype.lineFeed = function() {
        var e8 = this._bufferService.buffer;
        this._dirtyRowService.markDirty(e8.y), this._optionsService.options.convertEol && (e8.x = 0), e8.y++, e8.y === e8.scrollBottom + 1 ? (e8.y--, this._terminal.scroll(this._eraseAttrData())) : e8.y >= this._bufferService.rows && (e8.y = this._bufferService.rows - 1), e8.x >= this._bufferService.cols && e8.x--, this._dirtyRowService.markDirty(e8.y), this._onLineFeed.fire();
      }, t5.prototype.carriageReturn = function() {
        this._bufferService.buffer.x = 0;
      }, t5.prototype.backspace = function() {
        this._restrictCursor(), this._bufferService.buffer.x > 0 && this._bufferService.buffer.x--;
      }, t5.prototype.tab = function() {
        if (!(this._bufferService.buffer.x >= this._bufferService.cols)) {
          var e8 = this._bufferService.buffer.x;
          this._bufferService.buffer.x = this._bufferService.buffer.nextStop(), this._optionsService.options.screenReaderMode && this._terminal.onA11yTabEmitter.fire(this._bufferService.buffer.x - e8);
        }
      }, t5.prototype.shiftOut = function() {
        this._charsetService.setgLevel(1);
      }, t5.prototype.shiftIn = function() {
        this._charsetService.setgLevel(0);
      }, t5.prototype._restrictCursor = function() {
        this._bufferService.buffer.x = Math.min(this._bufferService.cols - 1, Math.max(0, this._bufferService.buffer.x)), this._bufferService.buffer.y = this._coreService.decPrivateModes.origin ? Math.min(this._bufferService.buffer.scrollBottom, Math.max(this._bufferService.buffer.scrollTop, this._bufferService.buffer.y)) : Math.min(this._bufferService.rows - 1, Math.max(0, this._bufferService.buffer.y)), this._dirtyRowService.markDirty(this._bufferService.buffer.y);
      }, t5.prototype._setCursor = function(e8, t6) {
        this._dirtyRowService.markDirty(this._bufferService.buffer.y), this._coreService.decPrivateModes.origin ? (this._bufferService.buffer.x = e8, this._bufferService.buffer.y = this._bufferService.buffer.scrollTop + t6) : (this._bufferService.buffer.x = e8, this._bufferService.buffer.y = t6), this._restrictCursor(), this._dirtyRowService.markDirty(this._bufferService.buffer.y);
      }, t5.prototype._moveCursor = function(e8, t6) {
        this._restrictCursor(), this._setCursor(this._bufferService.buffer.x + e8, this._bufferService.buffer.y + t6);
      }, t5.prototype.cursorUp = function(e8) {
        var t6 = this._bufferService.buffer.y - this._bufferService.buffer.scrollTop;
        t6 >= 0 ? this._moveCursor(0, -Math.min(t6, e8.params[0] || 1)) : this._moveCursor(0, -(e8.params[0] || 1));
      }, t5.prototype.cursorDown = function(e8) {
        var t6 = this._bufferService.buffer.scrollBottom - this._bufferService.buffer.y;
        t6 >= 0 ? this._moveCursor(0, Math.min(t6, e8.params[0] || 1)) : this._moveCursor(0, e8.params[0] || 1);
      }, t5.prototype.cursorForward = function(e8) {
        this._moveCursor(e8.params[0] || 1, 0);
      }, t5.prototype.cursorBackward = function(e8) {
        this._moveCursor(-(e8.params[0] || 1), 0);
      }, t5.prototype.cursorNextLine = function(e8) {
        this.cursorDown(e8), this._bufferService.buffer.x = 0;
      }, t5.prototype.cursorPrecedingLine = function(e8) {
        this.cursorUp(e8), this._bufferService.buffer.x = 0;
      }, t5.prototype.cursorCharAbsolute = function(e8) {
        this._setCursor((e8.params[0] || 1) - 1, this._bufferService.buffer.y);
      }, t5.prototype.cursorPosition = function(e8) {
        this._setCursor(e8.length >= 2 ? (e8.params[1] || 1) - 1 : 0, (e8.params[0] || 1) - 1);
      }, t5.prototype.charPosAbsolute = function(e8) {
        this._setCursor((e8.params[0] || 1) - 1, this._bufferService.buffer.y);
      }, t5.prototype.hPositionRelative = function(e8) {
        this._moveCursor(e8.params[0] || 1, 0);
      }, t5.prototype.linePosAbsolute = function(e8) {
        this._setCursor(this._bufferService.buffer.x, (e8.params[0] || 1) - 1);
      }, t5.prototype.vPositionRelative = function(e8) {
        this._moveCursor(0, e8.params[0] || 1);
      }, t5.prototype.hVPosition = function(e8) {
        this.cursorPosition(e8);
      }, t5.prototype.tabClear = function(e8) {
        var t6 = e8.params[0];
        0 === t6 ? delete this._bufferService.buffer.tabs[this._bufferService.buffer.x] : 3 === t6 && (this._bufferService.buffer.tabs = {});
      }, t5.prototype.cursorForwardTab = function(e8) {
        if (!(this._bufferService.buffer.x >= this._bufferService.cols))
          for (var t6 = e8.params[0] || 1; t6--; )
            this._bufferService.buffer.x = this._bufferService.buffer.nextStop();
      }, t5.prototype.cursorBackwardTab = function(e8) {
        if (!(this._bufferService.buffer.x >= this._bufferService.cols))
          for (var t6 = e8.params[0] || 1, r9 = this._bufferService.buffer; t6--; )
            r9.x = r9.prevStop();
      }, t5.prototype._eraseInBufferLine = function(e8, t6, r9, i9) {
        void 0 === i9 && (i9 = false);
        var n12 = this._bufferService.buffer.lines.get(this._bufferService.buffer.ybase + e8);
        n12.replaceCells(t6, r9, this._bufferService.buffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i9 && (n12.isWrapped = false);
      }, t5.prototype._resetBufferLine = function(e8) {
        var t6 = this._bufferService.buffer.lines.get(this._bufferService.buffer.ybase + e8);
        t6.fill(this._bufferService.buffer.getNullCell(this._eraseAttrData())), t6.isWrapped = false;
      }, t5.prototype.eraseInDisplay = function(e8) {
        var t6;
        switch (this._restrictCursor(), e8.params[0]) {
          case 0:
            for (t6 = this._bufferService.buffer.y, this._dirtyRowService.markDirty(t6), this._eraseInBufferLine(t6++, this._bufferService.buffer.x, this._bufferService.cols, 0 === this._bufferService.buffer.x); t6 < this._bufferService.rows; t6++)
              this._resetBufferLine(t6);
            this._dirtyRowService.markDirty(t6);
            break;
          case 1:
            for (t6 = this._bufferService.buffer.y, this._dirtyRowService.markDirty(t6), this._eraseInBufferLine(t6, 0, this._bufferService.buffer.x + 1, true), this._bufferService.buffer.x + 1 >= this._bufferService.cols && (this._bufferService.buffer.lines.get(t6 + 1).isWrapped = false); t6--; )
              this._resetBufferLine(t6);
            this._dirtyRowService.markDirty(0);
            break;
          case 2:
            for (t6 = this._bufferService.rows, this._dirtyRowService.markDirty(t6 - 1); t6--; )
              this._resetBufferLine(t6);
            this._dirtyRowService.markDirty(0);
            break;
          case 3:
            var r9 = this._bufferService.buffer.lines.length - this._bufferService.rows;
            r9 > 0 && (this._bufferService.buffer.lines.trimStart(r9), this._bufferService.buffer.ybase = Math.max(this._bufferService.buffer.ybase - r9, 0), this._bufferService.buffer.ydisp = Math.max(this._bufferService.buffer.ydisp - r9, 0), this._onScroll.fire(0));
        }
      }, t5.prototype.eraseInLine = function(e8) {
        switch (this._restrictCursor(), e8.params[0]) {
          case 0:
            this._eraseInBufferLine(this._bufferService.buffer.y, this._bufferService.buffer.x, this._bufferService.cols);
            break;
          case 1:
            this._eraseInBufferLine(this._bufferService.buffer.y, 0, this._bufferService.buffer.x + 1);
            break;
          case 2:
            this._eraseInBufferLine(this._bufferService.buffer.y, 0, this._bufferService.cols);
        }
        this._dirtyRowService.markDirty(this._bufferService.buffer.y);
      }, t5.prototype.insertLines = function(e8) {
        this._restrictCursor();
        var t6 = e8.params[0] || 1, r9 = this._bufferService.buffer;
        if (!(r9.y > r9.scrollBottom || r9.y < r9.scrollTop)) {
          for (var i9 = r9.y + r9.ybase, n12 = this._bufferService.rows - 1 - r9.scrollBottom, o10 = this._bufferService.rows - 1 + r9.ybase - n12 + 1; t6--; )
            r9.lines.splice(o10 - 1, 1), r9.lines.splice(i9, 0, r9.getBlankLine(this._eraseAttrData()));
          this._dirtyRowService.markRangeDirty(r9.y, r9.scrollBottom), r9.x = 0;
        }
      }, t5.prototype.deleteLines = function(e8) {
        this._restrictCursor();
        var t6 = e8.params[0] || 1, r9 = this._bufferService.buffer;
        if (!(r9.y > r9.scrollBottom || r9.y < r9.scrollTop)) {
          var i9, n12 = r9.y + r9.ybase;
          for (i9 = this._bufferService.rows - 1 - r9.scrollBottom, i9 = this._bufferService.rows - 1 + r9.ybase - i9; t6--; )
            r9.lines.splice(n12, 1), r9.lines.splice(i9, 0, r9.getBlankLine(this._eraseAttrData()));
          this._dirtyRowService.markRangeDirty(r9.y, r9.scrollBottom), r9.x = 0;
        }
      }, t5.prototype.insertChars = function(e8) {
        this._restrictCursor();
        var t6 = this._bufferService.buffer.lines.get(this._bufferService.buffer.y + this._bufferService.buffer.ybase);
        t6 && (t6.insertCells(this._bufferService.buffer.x, e8.params[0] || 1, this._bufferService.buffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), this._dirtyRowService.markDirty(this._bufferService.buffer.y));
      }, t5.prototype.deleteChars = function(e8) {
        this._restrictCursor();
        var t6 = this._bufferService.buffer.lines.get(this._bufferService.buffer.y + this._bufferService.buffer.ybase);
        t6 && (t6.deleteCells(this._bufferService.buffer.x, e8.params[0] || 1, this._bufferService.buffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), this._dirtyRowService.markDirty(this._bufferService.buffer.y));
      }, t5.prototype.scrollUp = function(e8) {
        for (var t6 = e8.params[0] || 1, r9 = this._bufferService.buffer; t6--; )
          r9.lines.splice(r9.ybase + r9.scrollTop, 1), r9.lines.splice(r9.ybase + r9.scrollBottom, 0, r9.getBlankLine(this._eraseAttrData()));
        this._dirtyRowService.markRangeDirty(r9.scrollTop, r9.scrollBottom);
      }, t5.prototype.scrollDown = function(e8) {
        for (var t6 = e8.params[0] || 1, r9 = this._bufferService.buffer; t6--; )
          r9.lines.splice(r9.ybase + r9.scrollBottom, 1), r9.lines.splice(r9.ybase + r9.scrollTop, 0, r9.getBlankLine(u8.DEFAULT_ATTR_DATA));
        this._dirtyRowService.markRangeDirty(r9.scrollTop, r9.scrollBottom);
      }, t5.prototype.scrollLeft = function(e8) {
        var t6 = this._bufferService.buffer;
        if (!(t6.y > t6.scrollBottom || t6.y < t6.scrollTop)) {
          for (var r9 = e8.params[0] || 1, i9 = t6.scrollTop; i9 <= t6.scrollBottom; ++i9) {
            var n12 = t6.lines.get(t6.ybase + i9);
            n12.deleteCells(0, r9, t6.getNullCell(this._eraseAttrData()), this._eraseAttrData()), n12.isWrapped = false;
          }
          this._dirtyRowService.markRangeDirty(t6.scrollTop, t6.scrollBottom);
        }
      }, t5.prototype.scrollRight = function(e8) {
        var t6 = this._bufferService.buffer;
        if (!(t6.y > t6.scrollBottom || t6.y < t6.scrollTop)) {
          for (var r9 = e8.params[0] || 1, i9 = t6.scrollTop; i9 <= t6.scrollBottom; ++i9) {
            var n12 = t6.lines.get(t6.ybase + i9);
            n12.insertCells(0, r9, t6.getNullCell(this._eraseAttrData()), this._eraseAttrData()), n12.isWrapped = false;
          }
          this._dirtyRowService.markRangeDirty(t6.scrollTop, t6.scrollBottom);
        }
      }, t5.prototype.insertColumns = function(e8) {
        var t6 = this._bufferService.buffer;
        if (!(t6.y > t6.scrollBottom || t6.y < t6.scrollTop)) {
          for (var r9 = e8.params[0] || 1, i9 = t6.scrollTop; i9 <= t6.scrollBottom; ++i9) {
            var n12 = this._bufferService.buffer.lines.get(t6.ybase + i9);
            n12.insertCells(t6.x, r9, t6.getNullCell(this._eraseAttrData()), this._eraseAttrData()), n12.isWrapped = false;
          }
          this._dirtyRowService.markRangeDirty(t6.scrollTop, t6.scrollBottom);
        }
      }, t5.prototype.deleteColumns = function(e8) {
        var t6 = this._bufferService.buffer;
        if (!(t6.y > t6.scrollBottom || t6.y < t6.scrollTop)) {
          for (var r9 = e8.params[0] || 1, i9 = t6.scrollTop; i9 <= t6.scrollBottom; ++i9) {
            var n12 = t6.lines.get(t6.ybase + i9);
            n12.deleteCells(t6.x, r9, t6.getNullCell(this._eraseAttrData()), this._eraseAttrData()), n12.isWrapped = false;
          }
          this._dirtyRowService.markRangeDirty(t6.scrollTop, t6.scrollBottom);
        }
      }, t5.prototype.eraseChars = function(e8) {
        this._restrictCursor();
        var t6 = this._bufferService.buffer.lines.get(this._bufferService.buffer.y + this._bufferService.buffer.ybase);
        t6 && (t6.replaceCells(this._bufferService.buffer.x, this._bufferService.buffer.x + (e8.params[0] || 1), this._bufferService.buffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), this._dirtyRowService.markDirty(this._bufferService.buffer.y));
      }, t5.prototype.repeatPrecedingCharacter = function(e8) {
        if (this._parser.precedingCodepoint) {
          for (var t6 = e8.params[0] || 1, r9 = new Uint32Array(t6), i9 = 0; i9 < t6; ++i9)
            r9[i9] = this._parser.precedingCodepoint;
          this.print(r9, 0, r9.length);
        }
      }, t5.prototype.sendDeviceAttributesPrimary = function(e8) {
        e8.params[0] > 0 || (this._terminal.is("xterm") || this._terminal.is("rxvt-unicode") || this._terminal.is("screen") ? this._coreService.triggerDataEvent(o9.C0.ESC + "[?1;2c") : this._terminal.is("linux") && this._coreService.triggerDataEvent(o9.C0.ESC + "[?6c"));
      }, t5.prototype.sendDeviceAttributesSecondary = function(e8) {
        e8.params[0] > 0 || (this._terminal.is("xterm") ? this._coreService.triggerDataEvent(o9.C0.ESC + "[>0;276;0c") : this._terminal.is("rxvt-unicode") ? this._coreService.triggerDataEvent(o9.C0.ESC + "[>85;95;0c") : this._terminal.is("linux") ? this._coreService.triggerDataEvent(e8.params[0] + "c") : this._terminal.is("screen") && this._coreService.triggerDataEvent(o9.C0.ESC + "[>83;40003;0c"));
      }, t5.prototype.setMode = function(e8) {
        for (var t6 = 0; t6 < e8.length; t6++)
          switch (e8.params[t6]) {
            case 4:
              this._terminal.insertMode = true;
          }
      }, t5.prototype.setModePrivate = function(e8) {
        for (var t6, r9, i9 = 0; i9 < e8.length; i9++)
          switch (e8.params[i9]) {
            case 1:
              this._coreService.decPrivateModes.applicationCursorKeys = true;
              break;
            case 2:
              this._charsetService.setgCharset(0, s7.DEFAULT_CHARSET), this._charsetService.setgCharset(1, s7.DEFAULT_CHARSET), this._charsetService.setgCharset(2, s7.DEFAULT_CHARSET), this._charsetService.setgCharset(3, s7.DEFAULT_CHARSET);
              break;
            case 3:
              this._optionsService.options.windowOptions.setWinLines && (this._terminal.resize(132, this._bufferService.rows), this._onRequestReset.fire());
              break;
            case 6:
              this._coreService.decPrivateModes.origin = true, this._setCursor(0, 0);
              break;
            case 7:
              this._coreService.decPrivateModes.wraparound = true;
              break;
            case 12:
              break;
            case 66:
              this._logService.debug("Serial port requested application keypad."), this._coreService.decPrivateModes.applicationKeypad = true, null === (t6 = this._terminal.viewport) || void 0 === t6 || t6.syncScrollArea();
              break;
            case 9:
              this._coreMouseService.activeProtocol = "X10";
              break;
            case 1e3:
              this._coreMouseService.activeProtocol = "VT200";
              break;
            case 1002:
              this._coreMouseService.activeProtocol = "DRAG";
              break;
            case 1003:
              this._coreMouseService.activeProtocol = "ANY";
              break;
            case 1004:
              this._terminal.sendFocus = true;
              break;
            case 1005:
              this._logService.debug("DECSET 1005 not supported (see #2507)");
              break;
            case 1006:
              this._coreMouseService.activeEncoding = "SGR";
              break;
            case 1015:
              this._logService.debug("DECSET 1015 not supported (see #2507)");
              break;
            case 25:
              this._coreService.isCursorHidden = false;
              break;
            case 1048:
              this.saveCursor();
              break;
            case 1049:
              this.saveCursor();
            case 47:
            case 1047:
              this._bufferService.buffers.activateAltBuffer(this._eraseAttrData()), this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1), null === (r9 = this._terminal.viewport) || void 0 === r9 || r9.syncScrollArea(), this._terminal.showCursor();
              break;
            case 2004:
              this._terminal.bracketedPasteMode = true;
          }
      }, t5.prototype.resetMode = function(e8) {
        for (var t6 = 0; t6 < e8.length; t6++)
          switch (e8.params[t6]) {
            case 4:
              this._terminal.insertMode = false;
          }
      }, t5.prototype.resetModePrivate = function(e8) {
        for (var t6, r9, i9 = 0; i9 < e8.length; i9++)
          switch (e8.params[i9]) {
            case 1:
              this._coreService.decPrivateModes.applicationCursorKeys = false;
              break;
            case 3:
              this._optionsService.options.windowOptions.setWinLines && (this._terminal.resize(80, this._bufferService.rows), this._onRequestReset.fire());
              break;
            case 6:
              this._coreService.decPrivateModes.origin = false, this._setCursor(0, 0);
              break;
            case 7:
              this._coreService.decPrivateModes.wraparound = false;
              break;
            case 12:
              break;
            case 66:
              this._logService.debug("Switching back to normal keypad."), this._coreService.decPrivateModes.applicationKeypad = false, null === (t6 = this._terminal.viewport) || void 0 === t6 || t6.syncScrollArea();
              break;
            case 9:
            case 1e3:
            case 1002:
            case 1003:
              this._coreMouseService.activeProtocol = "NONE";
              break;
            case 1004:
              this._terminal.sendFocus = false;
              break;
            case 1005:
              this._logService.debug("DECRST 1005 not supported (see #2507)");
              break;
            case 1006:
              this._coreMouseService.activeEncoding = "DEFAULT";
              break;
            case 1015:
              this._logService.debug("DECRST 1015 not supported (see #2507)");
              break;
            case 25:
              this._coreService.isCursorHidden = true;
              break;
            case 1048:
              this.restoreCursor();
              break;
            case 1049:
            case 47:
            case 1047:
              this._bufferService.buffers.activateNormalBuffer(), 1049 === e8.params[i9] && this.restoreCursor(), this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1), null === (r9 = this._terminal.viewport) || void 0 === r9 || r9.syncScrollArea(), this._terminal.showCursor();
              break;
            case 2004:
              this._terminal.bracketedPasteMode = false;
          }
      }, t5.prototype._extractColor = function(e8, t6, r9) {
        var i9 = [0, 0, -1, 0, 0, 0], n12 = 0, o10 = 0;
        do {
          if (i9[o10 + n12] = e8.params[t6 + o10], e8.hasSubParams(t6 + o10)) {
            var s8 = e8.getSubParams(t6 + o10), a6 = 0;
            do {
              5 === i9[1] && (n12 = 1), i9[o10 + a6 + 1 + n12] = s8[a6];
            } while (++a6 < s8.length && a6 + o10 + 1 + n12 < i9.length);
            break;
          }
          if (5 === i9[1] && o10 + n12 >= 2 || 2 === i9[1] && o10 + n12 >= 5)
            break;
          i9[1] && (n12 = 1);
        } while (++o10 + t6 < e8.length && o10 + n12 < i9.length);
        for (a6 = 2; a6 < i9.length; ++a6)
          -1 === i9[a6] && (i9[a6] = 0);
        return 38 === i9[0] ? 2 === i9[1] ? (r9.fg |= 50331648, r9.fg &= -16777216, r9.fg |= p10.AttributeData.fromColorRGB([i9[3], i9[4], i9[5]])) : 5 === i9[1] && (r9.fg &= -50331904, r9.fg |= 33554432 | 255 & i9[3]) : 48 === i9[0] && (2 === i9[1] ? (r9.bg |= 50331648, r9.bg &= -16777216, r9.bg |= p10.AttributeData.fromColorRGB([i9[3], i9[4], i9[5]])) : 5 === i9[1] && (r9.bg &= -50331904, r9.bg |= 33554432 | 255 & i9[3])), o10;
      }, t5.prototype.charAttributes = function(e8) {
        if (1 === e8.length && 0 === e8.params[0])
          return this._curAttrData.fg = u8.DEFAULT_ATTR_DATA.fg, void (this._curAttrData.bg = u8.DEFAULT_ATTR_DATA.bg);
        for (var t6, r9 = e8.length, i9 = this._curAttrData, n12 = 0; n12 < r9; n12++)
          (t6 = e8.params[n12]) >= 30 && t6 <= 37 ? (i9.fg &= -50331904, i9.fg |= 16777216 | t6 - 30) : t6 >= 40 && t6 <= 47 ? (i9.bg &= -50331904, i9.bg |= 16777216 | t6 - 40) : t6 >= 90 && t6 <= 97 ? (i9.fg &= -50331904, i9.fg |= 16777224 | t6 - 90) : t6 >= 100 && t6 <= 107 ? (i9.bg &= -50331904, i9.bg |= 16777224 | t6 - 100) : 0 === t6 ? (i9.fg = u8.DEFAULT_ATTR_DATA.fg, i9.bg = u8.DEFAULT_ATTR_DATA.bg) : 1 === t6 ? i9.fg |= 134217728 : 3 === t6 ? i9.bg |= 67108864 : 4 === t6 ? i9.fg |= 268435456 : 5 === t6 ? i9.fg |= 536870912 : 7 === t6 ? i9.fg |= 67108864 : 8 === t6 ? i9.fg |= 1073741824 : 2 === t6 ? i9.bg |= 134217728 : 22 === t6 ? (i9.fg &= -134217729, i9.bg &= -134217729) : 23 === t6 ? i9.bg &= -67108865 : 24 === t6 ? i9.fg &= -268435457 : 25 === t6 ? i9.fg &= -536870913 : 27 === t6 ? i9.fg &= -67108865 : 28 === t6 ? i9.fg &= -1073741825 : 39 === t6 ? (i9.fg &= -67108864, i9.fg |= 16777215 & u8.DEFAULT_ATTR_DATA.fg) : 49 === t6 ? (i9.bg &= -67108864, i9.bg |= 16777215 & u8.DEFAULT_ATTR_DATA.bg) : 38 === t6 || 48 === t6 ? n12 += this._extractColor(e8, n12, i9) : 100 === t6 ? (i9.fg &= -67108864, i9.fg |= 16777215 & u8.DEFAULT_ATTR_DATA.fg, i9.bg &= -67108864, i9.bg |= 16777215 & u8.DEFAULT_ATTR_DATA.bg) : this._logService.debug("Unknown SGR attribute: %d.", t6);
      }, t5.prototype.deviceStatus = function(e8) {
        switch (e8.params[0]) {
          case 5:
            this._coreService.triggerDataEvent(o9.C0.ESC + "[0n");
            break;
          case 6:
            var t6 = this._bufferService.buffer.y + 1, r9 = this._bufferService.buffer.x + 1;
            this._coreService.triggerDataEvent(o9.C0.ESC + "[" + t6 + ";" + r9 + "R");
        }
      }, t5.prototype.deviceStatusPrivate = function(e8) {
        switch (e8.params[0]) {
          case 6:
            var t6 = this._bufferService.buffer.y + 1, r9 = this._bufferService.buffer.x + 1;
            this._coreService.triggerDataEvent(o9.C0.ESC + "[?" + t6 + ";" + r9 + "R");
        }
      }, t5.prototype.softReset = function(e8) {
        var t6;
        this._coreService.isCursorHidden = false, this._terminal.insertMode = false, null === (t6 = this._terminal.viewport) || void 0 === t6 || t6.syncScrollArea(), this._bufferService.buffer.scrollTop = 0, this._bufferService.buffer.scrollBottom = this._bufferService.rows - 1, this._curAttrData = u8.DEFAULT_ATTR_DATA.clone(), this._coreService.reset(), this._charsetService.reset(), this._bufferService.buffer.savedX = 0, this._bufferService.buffer.savedY = this._bufferService.buffer.ybase, this._bufferService.buffer.savedCurAttrData.fg = this._curAttrData.fg, this._bufferService.buffer.savedCurAttrData.bg = this._curAttrData.bg, this._bufferService.buffer.savedCharset = this._charsetService.charset, this._coreService.decPrivateModes.origin = false;
      }, t5.prototype.setCursorStyle = function(e8) {
        var t6 = e8.params[0] || 1;
        switch (t6) {
          case 1:
          case 2:
            this._optionsService.options.cursorStyle = "block";
            break;
          case 3:
          case 4:
            this._optionsService.options.cursorStyle = "underline";
            break;
          case 5:
          case 6:
            this._optionsService.options.cursorStyle = "bar";
        }
        var r9 = t6 % 2 == 1;
        this._optionsService.options.cursorBlink = r9;
      }, t5.prototype.setScrollRegion = function(e8) {
        var t6, r9 = e8.params[0] || 1;
        (e8.length < 2 || (t6 = e8.params[1]) > this._bufferService.rows || 0 === t6) && (t6 = this._bufferService.rows), t6 > r9 && (this._bufferService.buffer.scrollTop = r9 - 1, this._bufferService.buffer.scrollBottom = t6 - 1, this._setCursor(0, 0));
      }, t5.prototype.windowOptions = function(e8) {
        if (m10(e8.params[0], this._optionsService.options.windowOptions)) {
          var t6 = e8.length > 1 ? e8.params[1] : 0, r9 = this._instantiationService.getService(g9.IRenderService);
          switch (e8.params[0]) {
            case 14:
              if (r9 && 2 !== t6) {
                console.log(r9.dimensions);
                var i9 = r9.dimensions.scaledCanvasWidth.toFixed(0), n12 = r9.dimensions.scaledCanvasHeight.toFixed(0);
                this._coreService.triggerDataEvent(o9.C0.ESC + "[4;" + n12 + ";" + i9 + "t");
              }
              break;
            case 16:
              r9 && (i9 = r9.dimensions.scaledCellWidth.toFixed(0), n12 = r9.dimensions.scaledCellHeight.toFixed(0), this._coreService.triggerDataEvent(o9.C0.ESC + "[6;" + n12 + ";" + i9 + "t"));
              break;
            case 18:
              this._bufferService && this._coreService.triggerDataEvent(o9.C0.ESC + "[8;" + this._bufferService.rows + ";" + this._bufferService.cols + "t");
              break;
            case 22:
              0 !== t6 && 2 !== t6 || (this._windowTitleStack.push(this._windowTitle), this._windowTitleStack.length > 10 && this._windowTitleStack.shift()), 0 !== t6 && 1 !== t6 || (this._iconNameStack.push(this._iconName), this._iconNameStack.length > 10 && this._iconNameStack.shift());
              break;
            case 23:
              0 !== t6 && 2 !== t6 || this._windowTitleStack.length && this.setTitle(this._windowTitleStack.pop()), 0 !== t6 && 1 !== t6 || this._iconNameStack.length && this.setIconName(this._iconNameStack.pop());
          }
        }
      }, t5.prototype.saveCursor = function(e8) {
        this._bufferService.buffer.savedX = this._bufferService.buffer.x, this._bufferService.buffer.savedY = this._bufferService.buffer.ybase + this._bufferService.buffer.y, this._bufferService.buffer.savedCurAttrData.fg = this._curAttrData.fg, this._bufferService.buffer.savedCurAttrData.bg = this._curAttrData.bg, this._bufferService.buffer.savedCharset = this._charsetService.charset;
      }, t5.prototype.restoreCursor = function(e8) {
        this._bufferService.buffer.x = this._bufferService.buffer.savedX || 0, this._bufferService.buffer.y = Math.max(this._bufferService.buffer.savedY - this._bufferService.buffer.ybase, 0), this._curAttrData.fg = this._bufferService.buffer.savedCurAttrData.fg, this._curAttrData.bg = this._bufferService.buffer.savedCurAttrData.bg, this._charsetService.charset = this._savedCharset, this._bufferService.buffer.savedCharset && (this._charsetService.charset = this._bufferService.buffer.savedCharset), this._restrictCursor();
      }, t5.prototype.setTitle = function(e8) {
        this._windowTitle = e8, this._terminal.handleTitle(e8);
      }, t5.prototype.setIconName = function(e8) {
        this._iconName = e8;
      }, t5.prototype.nextLine = function() {
        this._bufferService.buffer.x = 0, this.index();
      }, t5.prototype.keypadApplicationMode = function() {
        var e8;
        this._logService.debug("Serial port requested application keypad."), this._coreService.decPrivateModes.applicationKeypad = true, null === (e8 = this._terminal.viewport) || void 0 === e8 || e8.syncScrollArea();
      }, t5.prototype.keypadNumericMode = function() {
        var e8;
        this._logService.debug("Switching back to normal keypad."), this._coreService.decPrivateModes.applicationKeypad = false, null === (e8 = this._terminal.viewport) || void 0 === e8 || e8.syncScrollArea();
      }, t5.prototype.selectDefaultCharset = function() {
        this._charsetService.setgLevel(0), this._charsetService.setgCharset(0, s7.DEFAULT_CHARSET);
      }, t5.prototype.selectCharset = function(e8) {
        2 === e8.length ? "/" !== e8[0] && this._charsetService.setgCharset(b9[e8[0]], s7.CHARSETS[e8[1]] || s7.DEFAULT_CHARSET) : this.selectDefaultCharset();
      }, t5.prototype.index = function() {
        this._restrictCursor();
        var e8 = this._bufferService.buffer;
        this._bufferService.buffer.y++, e8.y === e8.scrollBottom + 1 ? (e8.y--, this._terminal.scroll(this._eraseAttrData())) : e8.y >= this._bufferService.rows && (e8.y = this._bufferService.rows - 1), this._restrictCursor();
      }, t5.prototype.tabSet = function() {
        this._bufferService.buffer.tabs[this._bufferService.buffer.x] = true;
      }, t5.prototype.reverseIndex = function() {
        this._restrictCursor();
        var e8 = this._bufferService.buffer;
        if (e8.y === e8.scrollTop) {
          var t6 = e8.scrollBottom - e8.scrollTop;
          e8.lines.shiftElements(e8.y + e8.ybase, t6, 1), e8.lines.set(e8.y + e8.ybase, e8.getBlankLine(this._eraseAttrData())), this._dirtyRowService.markRangeDirty(e8.scrollTop, e8.scrollBottom);
        } else
          e8.y--, this._restrictCursor();
      }, t5.prototype.fullReset = function() {
        this._parser.reset(), this._onRequestReset.fire();
      }, t5.prototype.reset = function() {
        this._curAttrData = u8.DEFAULT_ATTR_DATA.clone(), this._eraseAttrDataInternal = u8.DEFAULT_ATTR_DATA.clone();
      }, t5.prototype._eraseAttrData = function() {
        return this._eraseAttrDataInternal.bg &= -67108864, this._eraseAttrDataInternal.bg |= 67108863 & this._curAttrData.bg, this._eraseAttrDataInternal;
      }, t5.prototype.setgLevel = function(e8) {
        this._charsetService.setgLevel(e8);
      }, t5.prototype.screenAlignmentPattern = function() {
        var e8 = new d8.CellData();
        e8.content = 1 << 22 | "E".charCodeAt(0), e8.fg = this._curAttrData.fg, e8.bg = this._curAttrData.bg;
        var t6 = this._bufferService.buffer;
        this._setCursor(0, 0);
        for (var r9 = 0; r9 < this._bufferService.rows; ++r9) {
          var i9 = t6.y + t6.ybase + r9;
          t6.lines.get(i9).fill(e8), t6.lines.get(i9).isWrapped = false;
        }
        this._dirtyRowService.markAllDirty(), this._setCursor(0, 0);
      }, t5;
    }(c8.Disposable);
    t4.InputHandler = C9;
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    });
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(2), s7 = r8(15), a5 = r8(19), c8 = r8(20), l7 = r8(22), h8 = function() {
      function e7(e8) {
        this.table = new Uint8Array(e8);
      }
      return e7.prototype.setDefault = function(e8, t5) {
        s7.fill(this.table, e8 << 4 | t5);
      }, e7.prototype.add = function(e8, t5, r9, i9) {
        this.table[t5 << 8 | e8] = r9 << 4 | i9;
      }, e7.prototype.addMany = function(e8, t5, r9, i9) {
        for (var n12 = 0; n12 < e8.length; n12++)
          this.table[t5 << 8 | e8[n12]] = r9 << 4 | i9;
      }, e7;
    }();
    t4.TransitionTable = h8, t4.VT500_TRANSITION_TABLE = function() {
      var e7 = new h8(4095), t5 = Array.apply(null, Array(256)).map(function(e8, t6) {
        return t6;
      }), r9 = function(e8, r10) {
        return t5.slice(e8, r10);
      }, i9 = r9(32, 127), n12 = r9(0, 24);
      n12.push(25), n12.push.apply(n12, r9(28, 32));
      var o10, s8 = r9(0, 14);
      for (o10 in e7.setDefault(1, 0), e7.addMany(i9, 0, 2, 0), s8)
        e7.addMany([24, 26, 153, 154], o10, 3, 0), e7.addMany(r9(128, 144), o10, 3, 0), e7.addMany(r9(144, 152), o10, 3, 0), e7.add(156, o10, 0, 0), e7.add(27, o10, 11, 1), e7.add(157, o10, 4, 8), e7.addMany([152, 158, 159], o10, 0, 7), e7.add(155, o10, 11, 3), e7.add(144, o10, 11, 9);
      return e7.addMany(n12, 0, 3, 0), e7.addMany(n12, 1, 3, 1), e7.add(127, 1, 0, 1), e7.addMany(n12, 8, 0, 8), e7.addMany(n12, 3, 3, 3), e7.add(127, 3, 0, 3), e7.addMany(n12, 4, 3, 4), e7.add(127, 4, 0, 4), e7.addMany(n12, 6, 3, 6), e7.addMany(n12, 5, 3, 5), e7.add(127, 5, 0, 5), e7.addMany(n12, 2, 3, 2), e7.add(127, 2, 0, 2), e7.add(93, 1, 4, 8), e7.addMany(i9, 8, 5, 8), e7.add(127, 8, 5, 8), e7.addMany([156, 27, 24, 26, 7], 8, 6, 0), e7.addMany(r9(28, 32), 8, 0, 8), e7.addMany([88, 94, 95], 1, 0, 7), e7.addMany(i9, 7, 0, 7), e7.addMany(n12, 7, 0, 7), e7.add(156, 7, 0, 0), e7.add(127, 7, 0, 7), e7.add(91, 1, 11, 3), e7.addMany(r9(64, 127), 3, 7, 0), e7.addMany(r9(48, 60), 3, 8, 4), e7.addMany([60, 61, 62, 63], 3, 9, 4), e7.addMany(r9(48, 60), 4, 8, 4), e7.addMany(r9(64, 127), 4, 7, 0), e7.addMany([60, 61, 62, 63], 4, 0, 6), e7.addMany(r9(32, 64), 6, 0, 6), e7.add(127, 6, 0, 6), e7.addMany(r9(64, 127), 6, 0, 0), e7.addMany(r9(32, 48), 3, 9, 5), e7.addMany(r9(32, 48), 5, 9, 5), e7.addMany(r9(48, 64), 5, 0, 6), e7.addMany(r9(64, 127), 5, 7, 0), e7.addMany(r9(32, 48), 4, 9, 5), e7.addMany(r9(32, 48), 1, 9, 2), e7.addMany(r9(32, 48), 2, 9, 2), e7.addMany(r9(48, 127), 2, 10, 0), e7.addMany(r9(48, 80), 1, 10, 0), e7.addMany(r9(81, 88), 1, 10, 0), e7.addMany([89, 90, 92], 1, 10, 0), e7.addMany(r9(96, 127), 1, 10, 0), e7.add(80, 1, 11, 9), e7.addMany(n12, 9, 0, 9), e7.add(127, 9, 0, 9), e7.addMany(r9(28, 32), 9, 0, 9), e7.addMany(r9(32, 48), 9, 9, 12), e7.addMany(r9(48, 60), 9, 8, 10), e7.addMany([60, 61, 62, 63], 9, 9, 10), e7.addMany(n12, 11, 0, 11), e7.addMany(r9(32, 128), 11, 0, 11), e7.addMany(r9(28, 32), 11, 0, 11), e7.addMany(n12, 10, 0, 10), e7.add(127, 10, 0, 10), e7.addMany(r9(28, 32), 10, 0, 10), e7.addMany(r9(48, 60), 10, 8, 10), e7.addMany([60, 61, 62, 63], 10, 0, 11), e7.addMany(r9(32, 48), 10, 9, 12), e7.addMany(n12, 12, 0, 12), e7.add(127, 12, 0, 12), e7.addMany(r9(28, 32), 12, 0, 12), e7.addMany(r9(32, 48), 12, 9, 12), e7.addMany(r9(48, 64), 12, 0, 11), e7.addMany(r9(64, 127), 12, 12, 13), e7.addMany(r9(64, 127), 10, 12, 13), e7.addMany(r9(64, 127), 9, 12, 13), e7.addMany(n12, 13, 13, 13), e7.addMany(i9, 13, 13, 13), e7.add(127, 13, 0, 13), e7.addMany([27, 156, 24, 26], 13, 14, 0), e7.add(160, 0, 2, 0), e7.add(160, 8, 5, 8), e7.add(160, 6, 0, 6), e7.add(160, 11, 0, 11), e7.add(160, 13, 13, 13), e7;
    }();
    var u8 = function(e7) {
      function r9(r10) {
        void 0 === r10 && (r10 = t4.VT500_TRANSITION_TABLE);
        var i9 = e7.call(this) || this;
        return i9._transitions = r10, i9.initialState = 0, i9.currentState = i9.initialState, i9._params = new a5.Params(), i9._params.addParam(0), i9._collect = 0, i9.precedingCodepoint = 0, i9._printHandlerFb = function(e8, t5, r11) {
        }, i9._executeHandlerFb = function(e8) {
        }, i9._csiHandlerFb = function(e8, t5) {
        }, i9._escHandlerFb = function(e8) {
        }, i9._errorHandlerFb = function(e8) {
          return e8;
        }, i9._printHandler = i9._printHandlerFb, i9._executeHandlers = /* @__PURE__ */ Object.create(null), i9._csiHandlers = /* @__PURE__ */ Object.create(null), i9._escHandlers = /* @__PURE__ */ Object.create(null), i9._oscParser = new c8.OscParser(), i9._dcsParser = new l7.DcsParser(), i9._errorHandler = i9._errorHandlerFb, i9.setEscHandler({ final: "\\" }, function() {
        }), i9;
      }
      return n11(r9, e7), r9.prototype._identifier = function(e8, t5) {
        void 0 === t5 && (t5 = [64, 126]);
        var r10 = 0;
        if (e8.prefix) {
          if (e8.prefix.length > 1)
            throw new Error("only one byte as prefix supported");
          if ((r10 = e8.prefix.charCodeAt(0)) && 60 > r10 || r10 > 63)
            throw new Error("prefix must be in range 0x3c .. 0x3f");
        }
        if (e8.intermediates) {
          if (e8.intermediates.length > 2)
            throw new Error("only two bytes as intermediates are supported");
          for (var i9 = 0; i9 < e8.intermediates.length; ++i9) {
            var n12 = e8.intermediates.charCodeAt(i9);
            if (32 > n12 || n12 > 47)
              throw new Error("intermediate must be in range 0x20 .. 0x2f");
            r10 <<= 8, r10 |= n12;
          }
        }
        if (1 !== e8.final.length)
          throw new Error("final must be a single byte");
        var o10 = e8.final.charCodeAt(0);
        if (t5[0] > o10 || o10 > t5[1])
          throw new Error("final must be in range " + t5[0] + " .. " + t5[1]);
        return (r10 <<= 8) | o10;
      }, r9.prototype.identToString = function(e8) {
        for (var t5 = []; e8; )
          t5.push(String.fromCharCode(255 & e8)), e8 >>= 8;
        return t5.reverse().join("");
      }, r9.prototype.dispose = function() {
        this._csiHandlers = /* @__PURE__ */ Object.create(null), this._executeHandlers = /* @__PURE__ */ Object.create(null), this._escHandlers = /* @__PURE__ */ Object.create(null), this._oscParser.dispose(), this._dcsParser.dispose();
      }, r9.prototype.setPrintHandler = function(e8) {
        this._printHandler = e8;
      }, r9.prototype.clearPrintHandler = function() {
        this._printHandler = this._printHandlerFb;
      }, r9.prototype.addEscHandler = function(e8, t5) {
        var r10 = this._identifier(e8, [48, 126]);
        void 0 === this._escHandlers[r10] && (this._escHandlers[r10] = []);
        var i9 = this._escHandlers[r10];
        return i9.push(t5), { dispose: function() {
          var e9 = i9.indexOf(t5);
          -1 !== e9 && i9.splice(e9, 1);
        } };
      }, r9.prototype.setEscHandler = function(e8, t5) {
        this._escHandlers[this._identifier(e8, [48, 126])] = [t5];
      }, r9.prototype.clearEscHandler = function(e8) {
        this._escHandlers[this._identifier(e8, [48, 126])] && delete this._escHandlers[this._identifier(e8, [48, 126])];
      }, r9.prototype.setEscHandlerFallback = function(e8) {
        this._escHandlerFb = e8;
      }, r9.prototype.setExecuteHandler = function(e8, t5) {
        this._executeHandlers[e8.charCodeAt(0)] = t5;
      }, r9.prototype.clearExecuteHandler = function(e8) {
        this._executeHandlers[e8.charCodeAt(0)] && delete this._executeHandlers[e8.charCodeAt(0)];
      }, r9.prototype.setExecuteHandlerFallback = function(e8) {
        this._executeHandlerFb = e8;
      }, r9.prototype.addCsiHandler = function(e8, t5) {
        var r10 = this._identifier(e8);
        void 0 === this._csiHandlers[r10] && (this._csiHandlers[r10] = []);
        var i9 = this._csiHandlers[r10];
        return i9.push(t5), { dispose: function() {
          var e9 = i9.indexOf(t5);
          -1 !== e9 && i9.splice(e9, 1);
        } };
      }, r9.prototype.setCsiHandler = function(e8, t5) {
        this._csiHandlers[this._identifier(e8)] = [t5];
      }, r9.prototype.clearCsiHandler = function(e8) {
        this._csiHandlers[this._identifier(e8)] && delete this._csiHandlers[this._identifier(e8)];
      }, r9.prototype.setCsiHandlerFallback = function(e8) {
        this._csiHandlerFb = e8;
      }, r9.prototype.addDcsHandler = function(e8, t5) {
        return this._dcsParser.addHandler(this._identifier(e8), t5);
      }, r9.prototype.setDcsHandler = function(e8, t5) {
        this._dcsParser.setHandler(this._identifier(e8), t5);
      }, r9.prototype.clearDcsHandler = function(e8) {
        this._dcsParser.clearHandler(this._identifier(e8));
      }, r9.prototype.setDcsHandlerFallback = function(e8) {
        this._dcsParser.setHandlerFallback(e8);
      }, r9.prototype.addOscHandler = function(e8, t5) {
        return this._oscParser.addHandler(e8, t5);
      }, r9.prototype.setOscHandler = function(e8, t5) {
        this._oscParser.setHandler(e8, t5);
      }, r9.prototype.clearOscHandler = function(e8) {
        this._oscParser.clearHandler(e8);
      }, r9.prototype.setOscHandlerFallback = function(e8) {
        this._oscParser.setHandlerFallback(e8);
      }, r9.prototype.setErrorHandler = function(e8) {
        this._errorHandler = e8;
      }, r9.prototype.clearErrorHandler = function() {
        this._errorHandler = this._errorHandlerFb;
      }, r9.prototype.reset = function() {
        this.currentState = this.initialState, this._oscParser.reset(), this._dcsParser.reset(), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0;
      }, r9.prototype.parse = function(e8, t5) {
        for (var r10 = 0, i9 = 0, n12 = this.currentState, o10 = this._oscParser, s8 = this._dcsParser, a6 = this._collect, c9 = this._params, l8 = this._transitions.table, h9 = 0; h9 < t5; ++h9) {
          switch ((i9 = l8[n12 << 8 | ((r10 = e8[h9]) < 160 ? r10 : 160)]) >> 4) {
            case 2:
              for (var u9 = h9 + 1; ; ++u9) {
                if (u9 >= t5 || (r10 = e8[u9]) < 32 || r10 > 126 && r10 < 160) {
                  this._printHandler(e8, h9, u9), h9 = u9 - 1;
                  break;
                }
                if (++u9 >= t5 || (r10 = e8[u9]) < 32 || r10 > 126 && r10 < 160) {
                  this._printHandler(e8, h9, u9), h9 = u9 - 1;
                  break;
                }
                if (++u9 >= t5 || (r10 = e8[u9]) < 32 || r10 > 126 && r10 < 160) {
                  this._printHandler(e8, h9, u9), h9 = u9 - 1;
                  break;
                }
                if (++u9 >= t5 || (r10 = e8[u9]) < 32 || r10 > 126 && r10 < 160) {
                  this._printHandler(e8, h9, u9), h9 = u9 - 1;
                  break;
                }
              }
              break;
            case 3:
              this._executeHandlers[r10] ? this._executeHandlers[r10]() : this._executeHandlerFb(r10), this.precedingCodepoint = 0;
              break;
            case 0:
              break;
            case 1:
              if (this._errorHandler({ position: h9, code: r10, currentState: n12, collect: a6, params: c9, abort: false }).abort)
                return;
              break;
            case 7:
              for (var f6 = this._csiHandlers[a6 << 8 | r10], _6 = f6 ? f6.length - 1 : -1; _6 >= 0 && false === f6[_6](c9); _6--)
                ;
              _6 < 0 && this._csiHandlerFb(a6 << 8 | r10, c9), this.precedingCodepoint = 0;
              break;
            case 8:
              do {
                switch (r10) {
                  case 59:
                    c9.addParam(0);
                    break;
                  case 58:
                    c9.addSubParam(-1);
                    break;
                  default:
                    c9.addDigit(r10 - 48);
                }
              } while (++h9 < t5 && (r10 = e8[h9]) > 47 && r10 < 60);
              h9--;
              break;
            case 9:
              a6 <<= 8, a6 |= r10;
              break;
            case 10:
              for (var d8 = this._escHandlers[a6 << 8 | r10], p10 = d8 ? d8.length - 1 : -1; p10 >= 0 && false === d8[p10](); p10--)
                ;
              p10 < 0 && this._escHandlerFb(a6 << 8 | r10), this.precedingCodepoint = 0;
              break;
            case 11:
              c9.reset(), c9.addParam(0), a6 = 0;
              break;
            case 12:
              s8.hook(a6 << 8 | r10, c9);
              break;
            case 13:
              for (var v10 = h9 + 1; ; ++v10)
                if (v10 >= t5 || 24 === (r10 = e8[v10]) || 26 === r10 || 27 === r10 || r10 > 127 && r10 < 160) {
                  s8.put(e8, h9, v10), h9 = v10 - 1;
                  break;
                }
              break;
            case 14:
              s8.unhook(24 !== r10 && 26 !== r10), 27 === r10 && (i9 |= 1), c9.reset(), c9.addParam(0), a6 = 0, this.precedingCodepoint = 0;
              break;
            case 4:
              o10.start();
              break;
            case 5:
              for (var y6 = h9 + 1; ; y6++)
                if (y6 >= t5 || (r10 = e8[y6]) < 32 || r10 > 127 && r10 <= 159) {
                  o10.put(e8, h9, y6), h9 = y6 - 1;
                  break;
                }
              break;
            case 6:
              o10.end(24 !== r10 && 26 !== r10), 27 === r10 && (i9 |= 1), c9.reset(), c9.addParam(0), a6 = 0, this.precedingCodepoint = 0;
          }
          n12 = 15 & i9;
        }
        this._collect = a6, this.currentState = n12;
      }, r9;
    }(o9.Disposable);
    t4.EscapeSequenceParser = u8;
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    }), o9 = this && this.__decorate || function(e7, t5, r9, i9) {
      var n12, o10 = arguments.length, s8 = o10 < 3 ? t5 : null === i9 ? i9 = Object.getOwnPropertyDescriptor(t5, r9) : i9;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
        s8 = Reflect.decorate(e7, t5, r9, i9);
      else
        for (var a6 = e7.length - 1; a6 >= 0; a6--)
          (n12 = e7[a6]) && (s8 = (o10 < 3 ? n12(s8) : o10 > 3 ? n12(t5, r9, s8) : n12(t5, r9)) || s8);
      return o10 > 3 && s8 && Object.defineProperty(t5, r9, s8), s8;
    }, s7 = this && this.__param || function(e7, t5) {
      return function(r9, i9) {
        t5(r9, i9, e7);
      };
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var a5 = r8(40), c8 = r8(46), l7 = r8(47), h8 = r8(48), u8 = r8(27), f6 = r8(2), _6 = r8(4), d8 = r8(1), p10 = r8(23), v10 = r8(0), y6 = 1, g9 = function(e7) {
      function t5(t6, r9, i9, n12, o10, s8, f7, _7, d9) {
        var p11 = e7.call(this) || this;
        p11._colors = t6, p11._screenElement = r9, p11.linkifier = i9, p11.linkifier2 = n12, p11._bufferService = o10, p11._charSizeService = s8, p11._optionsService = f7, p11.coreService = _7, p11.coreBrowserService = d9, p11._id = y6++, p11._onRequestRefreshRows = new v10.EventEmitter();
        var g10 = p11._optionsService.options.allowTransparency;
        return p11._characterJoinerRegistry = new u8.CharacterJoinerRegistry(p11._bufferService), p11._renderLayers = [new a5.TextRenderLayer(p11._screenElement, 0, p11._colors, p11._characterJoinerRegistry, g10, p11._id, p11._bufferService, f7), new c8.SelectionRenderLayer(p11._screenElement, 1, p11._colors, p11._id, p11._bufferService, f7), new h8.LinkRenderLayer(p11._screenElement, 2, p11._colors, p11._id, i9, n12, p11._bufferService, f7), new l7.CursorRenderLayer(p11._screenElement, 3, p11._colors, p11._id, p11._onRequestRefreshRows, p11._bufferService, f7, _7, d9)], p11.dimensions = { scaledCharWidth: 0, scaledCharHeight: 0, scaledCellWidth: 0, scaledCellHeight: 0, scaledCharLeft: 0, scaledCharTop: 0, scaledCanvasWidth: 0, scaledCanvasHeight: 0, canvasWidth: 0, canvasHeight: 0, actualCellWidth: 0, actualCellHeight: 0 }, p11._devicePixelRatio = window.devicePixelRatio, p11._updateDimensions(), p11.onOptionsChanged(), p11;
      }
      return n11(t5, e7), Object.defineProperty(t5.prototype, "onRequestRefreshRows", { get: function() {
        return this._onRequestRefreshRows.event;
      }, enumerable: true, configurable: true }), t5.prototype.dispose = function() {
        e7.prototype.dispose.call(this), this._renderLayers.forEach(function(e8) {
          return e8.dispose();
        }), p10.removeTerminalFromCache(this._id);
      }, t5.prototype.onDevicePixelRatioChange = function() {
        this._devicePixelRatio !== window.devicePixelRatio && (this._devicePixelRatio = window.devicePixelRatio, this.onResize(this._bufferService.cols, this._bufferService.rows));
      }, t5.prototype.setColors = function(e8) {
        var t6 = this;
        this._colors = e8, this._renderLayers.forEach(function(e9) {
          e9.setColors(t6._colors), e9.reset();
        });
      }, t5.prototype.onResize = function(e8, t6) {
        var r9 = this;
        this._updateDimensions(), this._renderLayers.forEach(function(e9) {
          return e9.resize(r9.dimensions);
        }), this._screenElement.style.width = this.dimensions.canvasWidth + "px", this._screenElement.style.height = this.dimensions.canvasHeight + "px";
      }, t5.prototype.onCharSizeChanged = function() {
        this.onResize(this._bufferService.cols, this._bufferService.rows);
      }, t5.prototype.onBlur = function() {
        this._runOperation(function(e8) {
          return e8.onBlur();
        });
      }, t5.prototype.onFocus = function() {
        this._runOperation(function(e8) {
          return e8.onFocus();
        });
      }, t5.prototype.onSelectionChanged = function(e8, t6, r9) {
        void 0 === r9 && (r9 = false), this._runOperation(function(i9) {
          return i9.onSelectionChanged(e8, t6, r9);
        });
      }, t5.prototype.onCursorMove = function() {
        this._runOperation(function(e8) {
          return e8.onCursorMove();
        });
      }, t5.prototype.onOptionsChanged = function() {
        this._runOperation(function(e8) {
          return e8.onOptionsChanged();
        });
      }, t5.prototype.clear = function() {
        this._runOperation(function(e8) {
          return e8.reset();
        });
      }, t5.prototype._runOperation = function(e8) {
        this._renderLayers.forEach(function(t6) {
          return e8(t6);
        });
      }, t5.prototype.renderRows = function(e8, t6) {
        this._renderLayers.forEach(function(r9) {
          return r9.onGridChanged(e8, t6);
        });
      }, t5.prototype._updateDimensions = function() {
        this._charSizeService.hasValidSize && (this.dimensions.scaledCharWidth = Math.floor(this._charSizeService.width * window.devicePixelRatio), this.dimensions.scaledCharHeight = Math.ceil(this._charSizeService.height * window.devicePixelRatio), this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._optionsService.options.lineHeight), this.dimensions.scaledCharTop = 1 === this._optionsService.options.lineHeight ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2), this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._optionsService.options.letterSpacing), this.dimensions.scaledCharLeft = Math.floor(this._optionsService.options.letterSpacing / 2), this.dimensions.scaledCanvasHeight = this._bufferService.rows * this.dimensions.scaledCellHeight, this.dimensions.scaledCanvasWidth = this._bufferService.cols * this.dimensions.scaledCellWidth, this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio), this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio), this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._bufferService.rows, this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._bufferService.cols);
      }, t5.prototype.registerCharacterJoiner = function(e8) {
        return this._characterJoinerRegistry.registerCharacterJoiner(e8);
      }, t5.prototype.deregisterCharacterJoiner = function(e8) {
        return this._characterJoinerRegistry.deregisterCharacterJoiner(e8);
      }, o9([s7(4, d8.IBufferService), s7(5, _6.ICharSizeService), s7(6, d8.IOptionsService), s7(7, d8.ICoreService), s7(8, _6.ICoreBrowserService)], t5);
    }(f6.Disposable);
    t4.Renderer = g9;
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    });
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(41), s7 = r8(13), a5 = r8(6), c8 = r8(3), l7 = r8(27), h8 = r8(5), u8 = function(e7) {
      function t5(t6, r9, i9, n12, s8, a6, c9, l8) {
        var u9 = e7.call(this, t6, "text", r9, s8, i9, a6, c9, l8) || this;
        return u9.bufferService = c9, u9.optionsService = l8, u9._characterWidth = 0, u9._characterFont = "", u9._characterOverlapCache = {}, u9._workCell = new h8.CellData(), u9._state = new o9.GridCache(), u9._characterJoinerRegistry = n12, u9;
      }
      return n11(t5, e7), t5.prototype.resize = function(t6) {
        e7.prototype.resize.call(this, t6);
        var r9 = this._getFont(false, false);
        this._characterWidth === t6.scaledCharWidth && this._characterFont === r9 || (this._characterWidth = t6.scaledCharWidth, this._characterFont = r9, this._characterOverlapCache = {}), this._state.clear(), this._state.resize(this._bufferService.cols, this._bufferService.rows);
      }, t5.prototype.reset = function() {
        this._state.clear(), this._clearAll();
      }, t5.prototype._forEachCell = function(e8, t6, r9, i9) {
        for (var n12 = e8; n12 <= t6; n12++)
          for (var o10 = n12 + this._bufferService.buffer.ydisp, s8 = this._bufferService.buffer.lines.get(o10), a6 = r9 ? r9.getJoinedCharacters(o10) : [], h9 = 0; h9 < this._bufferService.cols; h9++) {
            s8.loadCell(h9, this._workCell);
            var u9 = this._workCell, f6 = false, _6 = h9;
            if (0 !== u9.getWidth()) {
              if (a6.length > 0 && h9 === a6[0][0]) {
                f6 = true;
                var d8 = a6.shift();
                u9 = new l7.JoinedCellData(this._workCell, s8.translateToString(true, d8[0], d8[1]), d8[1] - d8[0]), _6 = d8[1] - 1;
              }
              !f6 && this._isOverlapping(u9) && _6 < s8.length - 1 && s8.getCodePoint(_6 + 1) === c8.NULL_CELL_CODE && (u9.content &= -12582913, u9.content |= 2 << 22), i9(u9, h9, n12), h9 = _6;
            }
          }
      }, t5.prototype._drawBackground = function(e8, t6) {
        var r9 = this, i9 = this._ctx, n12 = this._bufferService.cols, o10 = 0, s8 = 0, c9 = null;
        i9.save(), this._forEachCell(e8, t6, null, function(e9, t7, l8) {
          var h9 = null;
          e9.isInverse() ? h9 = e9.isFgDefault() ? r9._colors.foreground.css : e9.isFgRGB() ? "rgb(" + a5.AttributeData.toColorRGB(e9.getFgColor()).join(",") + ")" : r9._colors.ansi[e9.getFgColor()].css : e9.isBgRGB() ? h9 = "rgb(" + a5.AttributeData.toColorRGB(e9.getBgColor()).join(",") + ")" : e9.isBgPalette() && (h9 = r9._colors.ansi[e9.getBgColor()].css), null === c9 && (o10 = t7, s8 = l8), l8 !== s8 ? (i9.fillStyle = c9 || "", r9._fillCells(o10, s8, n12 - o10, 1), o10 = t7, s8 = l8) : c9 !== h9 && (i9.fillStyle = c9 || "", r9._fillCells(o10, s8, t7 - o10, 1), o10 = t7, s8 = l8), c9 = h9;
        }), null !== c9 && (i9.fillStyle = c9, this._fillCells(o10, s8, n12 - o10, 1)), i9.restore();
      }, t5.prototype._drawForeground = function(e8, t6) {
        var r9 = this;
        this._forEachCell(e8, t6, this._characterJoinerRegistry, function(e9, t7, i9) {
          if (!e9.isInvisible() && (r9._drawChars(e9, t7, i9), e9.isUnderline())) {
            if (r9._ctx.save(), e9.isInverse())
              if (e9.isBgDefault())
                r9._ctx.fillStyle = r9._colors.background.css;
              else if (e9.isBgRGB())
                r9._ctx.fillStyle = "rgb(" + a5.AttributeData.toColorRGB(e9.getBgColor()).join(",") + ")";
              else {
                var n12 = e9.getBgColor();
                r9._optionsService.options.drawBoldTextInBrightColors && e9.isBold() && n12 < 8 && (n12 += 8), r9._ctx.fillStyle = r9._colors.ansi[n12].css;
              }
            else if (e9.isFgDefault())
              r9._ctx.fillStyle = r9._colors.foreground.css;
            else if (e9.isFgRGB())
              r9._ctx.fillStyle = "rgb(" + a5.AttributeData.toColorRGB(e9.getFgColor()).join(",") + ")";
            else {
              var o10 = e9.getFgColor();
              r9._optionsService.options.drawBoldTextInBrightColors && e9.isBold() && o10 < 8 && (o10 += 8), r9._ctx.fillStyle = r9._colors.ansi[o10].css;
            }
            r9._fillBottomLineAtCells(t7, i9, e9.getWidth()), r9._ctx.restore();
          }
        });
      }, t5.prototype.onGridChanged = function(e8, t6) {
        0 !== this._state.cache.length && (this._charAtlas && this._charAtlas.beginFrame(), this._clearCells(0, e8, this._bufferService.cols, t6 - e8 + 1), this._drawBackground(e8, t6), this._drawForeground(e8, t6));
      }, t5.prototype.onOptionsChanged = function() {
        this._setTransparency(this._optionsService.options.allowTransparency);
      }, t5.prototype._isOverlapping = function(e8) {
        if (1 !== e8.getWidth())
          return false;
        if (e8.getCode() < 256)
          return false;
        var t6 = e8.getChars();
        if (this._characterOverlapCache.hasOwnProperty(t6))
          return this._characterOverlapCache[t6];
        this._ctx.save(), this._ctx.font = this._characterFont;
        var r9 = Math.floor(this._ctx.measureText(t6).width) > this._characterWidth;
        return this._ctx.restore(), this._characterOverlapCache[t6] = r9, r9;
      }, t5;
    }(s7.BaseRenderLayer);
    t4.TextRenderLayer = u8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = function() {
      function e7() {
        this.cache = [];
      }
      return e7.prototype.resize = function(e8, t5) {
        for (var r9 = 0; r9 < e8; r9++) {
          this.cache.length <= r9 && this.cache.push([]);
          for (var i9 = this.cache[r9].length; i9 < t5; i9++)
            this.cache[r9].push(void 0);
          this.cache[r9].length = t5;
        }
        this.cache.length = e8;
      }, e7.prototype.clear = function() {
        for (var e8 = 0; e8 < this.cache.length; e8++)
          for (var t5 = 0; t5 < this.cache[e8].length; t5++)
            this.cache[e8][t5] = void 0;
      }, e7;
    }();
    t4.GridCache = i8;
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    });
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(9), s7 = r8(43), a5 = r8(25), c8 = r8(45), l7 = r8(11), h8 = r8(26), u8 = r8(10), f6 = { css: "rgba(0, 0, 0, 0)", rgba: 0 };
    function _6(e7) {
      return e7.code << 21 | e7.bg << 12 | e7.fg << 3 | (e7.bold ? 0 : 4) + (e7.dim ? 0 : 2) + (e7.italic ? 0 : 1);
    }
    t4.getGlyphCacheKey = _6;
    var d8 = function(e7) {
      function t5(t6, r9) {
        var i9 = e7.call(this) || this;
        i9._config = r9, i9._drawToCacheCount = 0, i9._glyphsWaitingOnBitmap = [], i9._bitmapCommitTimeout = null, i9._bitmap = null, i9._cacheCanvas = t6.createElement("canvas"), i9._cacheCanvas.width = 1024, i9._cacheCanvas.height = 1024, i9._cacheCtx = h8.throwIfFalsy(i9._cacheCanvas.getContext("2d", { alpha: true }));
        var n12 = t6.createElement("canvas");
        n12.width = i9._config.scaledCharWidth, n12.height = i9._config.scaledCharHeight, i9._tmpCtx = h8.throwIfFalsy(n12.getContext("2d", { alpha: i9._config.allowTransparency })), i9._width = Math.floor(1024 / i9._config.scaledCharWidth), i9._height = Math.floor(1024 / i9._config.scaledCharHeight);
        var o10 = i9._width * i9._height;
        return i9._cacheMap = new c8.LRUMap(o10), i9._cacheMap.prealloc(o10), i9;
      }
      return n11(t5, e7), t5.prototype.dispose = function() {
        null !== this._bitmapCommitTimeout && (window.clearTimeout(this._bitmapCommitTimeout), this._bitmapCommitTimeout = null);
      }, t5.prototype.beginFrame = function() {
        this._drawToCacheCount = 0;
      }, t5.prototype.draw = function(e8, t6, r9, i9) {
        if (32 === t6.code)
          return true;
        if (!this._canCache(t6))
          return false;
        var n12 = _6(t6), o10 = this._cacheMap.get(n12);
        if (null != o10)
          return this._drawFromCache(e8, o10, r9, i9), true;
        if (this._drawToCacheCount < 100) {
          var s8;
          s8 = this._cacheMap.size < this._cacheMap.capacity ? this._cacheMap.size : this._cacheMap.peek().index;
          var a6 = this._drawToCache(t6, s8);
          return this._cacheMap.set(n12, a6), this._drawFromCache(e8, a6, r9, i9), true;
        }
        return false;
      }, t5.prototype._canCache = function(e8) {
        return e8.code < 256;
      }, t5.prototype._toCoordinateX = function(e8) {
        return e8 % this._width * this._config.scaledCharWidth;
      }, t5.prototype._toCoordinateY = function(e8) {
        return Math.floor(e8 / this._width) * this._config.scaledCharHeight;
      }, t5.prototype._drawFromCache = function(e8, t6, r9, i9) {
        if (!t6.isEmpty) {
          var n12 = this._toCoordinateX(t6.index), o10 = this._toCoordinateY(t6.index);
          e8.drawImage(t6.inBitmap ? this._bitmap : this._cacheCanvas, n12, o10, this._config.scaledCharWidth, this._config.scaledCharHeight, r9, i9, this._config.scaledCharWidth, this._config.scaledCharHeight);
        }
      }, t5.prototype._getColorFromAnsiIndex = function(e8) {
        return e8 < this._config.colors.ansi.length ? this._config.colors.ansi[e8] : a5.DEFAULT_ANSI_COLORS[e8];
      }, t5.prototype._getBackgroundColor = function(e8) {
        return this._config.allowTransparency ? f6 : e8.bg === o9.INVERTED_DEFAULT_COLOR ? this._config.colors.foreground : e8.bg < 256 ? this._getColorFromAnsiIndex(e8.bg) : this._config.colors.background;
      }, t5.prototype._getForegroundColor = function(e8) {
        return e8.fg === o9.INVERTED_DEFAULT_COLOR ? u8.color.opaque(this._config.colors.background) : e8.fg < 256 ? this._getColorFromAnsiIndex(e8.fg) : this._config.colors.foreground;
      }, t5.prototype._drawToCache = function(e8, t6) {
        this._drawToCacheCount++, this._tmpCtx.save();
        var r9 = this._getBackgroundColor(e8);
        this._tmpCtx.globalCompositeOperation = "copy", this._tmpCtx.fillStyle = r9.css, this._tmpCtx.fillRect(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight), this._tmpCtx.globalCompositeOperation = "source-over";
        var i9 = e8.bold ? this._config.fontWeightBold : this._config.fontWeight, n12 = e8.italic ? "italic" : "";
        this._tmpCtx.font = n12 + " " + i9 + " " + this._config.fontSize * this._config.devicePixelRatio + "px " + this._config.fontFamily, this._tmpCtx.textBaseline = "middle", this._tmpCtx.fillStyle = this._getForegroundColor(e8).css, e8.dim && (this._tmpCtx.globalAlpha = o9.DIM_OPACITY), this._tmpCtx.fillText(e8.chars, 0, this._config.scaledCharHeight / 2), this._tmpCtx.restore();
        var s8 = this._tmpCtx.getImageData(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight), a6 = false;
        this._config.allowTransparency || (a6 = function(e9, t7) {
          for (var r10 = true, i10 = t7.rgba >>> 24, n13 = t7.rgba >>> 16 & 255, o10 = t7.rgba >>> 8 & 255, s9 = 0; s9 < e9.data.length; s9 += 4)
            e9.data[s9] === i10 && e9.data[s9 + 1] === n13 && e9.data[s9 + 2] === o10 ? e9.data[s9 + 3] = 0 : r10 = false;
          return r10;
        }(s8, r9));
        var c9 = this._toCoordinateX(t6), l8 = this._toCoordinateY(t6);
        this._cacheCtx.putImageData(s8, c9, l8);
        var h9 = { index: t6, isEmpty: a6, inBitmap: false };
        return this._addGlyphToBitmap(h9), h9;
      }, t5.prototype._addGlyphToBitmap = function(e8) {
        var t6 = this;
        !("createImageBitmap" in window) || l7.isFirefox || l7.isSafari || (this._glyphsWaitingOnBitmap.push(e8), null === this._bitmapCommitTimeout && (this._bitmapCommitTimeout = window.setTimeout(function() {
          return t6._generateBitmap();
        }, 100)));
      }, t5.prototype._generateBitmap = function() {
        var e8 = this, t6 = this._glyphsWaitingOnBitmap;
        this._glyphsWaitingOnBitmap = [], window.createImageBitmap(this._cacheCanvas).then(function(r9) {
          e8._bitmap = r9;
          for (var i9 = 0; i9 < t6.length; i9++)
            t6[i9].inBitmap = true;
        }), this._bitmapCommitTimeout = null;
      }, t5;
    }(s7.BaseCharAtlas);
    t4.DynamicCharAtlas = d8;
    var p10 = function(e7) {
      function t5(t6, r9) {
        return e7.call(this) || this;
      }
      return n11(t5, e7), t5.prototype.draw = function(e8, t6, r9, i9) {
        return false;
      }, t5;
    }(s7.BaseCharAtlas);
    t4.NoneCharAtlas = p10;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = function() {
      function e7() {
        this._didWarmUp = false;
      }
      return e7.prototype.dispose = function() {
      }, e7.prototype.warmUp = function() {
        this._didWarmUp || (this._doWarmUp(), this._didWarmUp = true);
      }, e7.prototype._doWarmUp = function() {
      }, e7.prototype.beginFrame = function() {
      }, e7;
    }();
    t4.BaseCharAtlas = i8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = function() {
      function e7() {
        this._color = {}, this._rgba = {};
      }
      return e7.prototype.clear = function() {
        this._color = {}, this._rgba = {};
      }, e7.prototype.setCss = function(e8, t5, r9) {
        this._rgba[e8] || (this._rgba[e8] = {}), this._rgba[e8][t5] = r9;
      }, e7.prototype.getCss = function(e8, t5) {
        return this._rgba[e8] ? this._rgba[e8][t5] : void 0;
      }, e7.prototype.setColor = function(e8, t5, r9) {
        this._color[e8] || (this._color[e8] = {}), this._color[e8][t5] = r9;
      }, e7.prototype.getColor = function(e8, t5) {
        return this._color[e8] ? this._color[e8][t5] : void 0;
      }, e7;
    }();
    t4.ColorContrastCache = i8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = function() {
      function e7(e8) {
        this.capacity = e8, this._map = {}, this._head = null, this._tail = null, this._nodePool = [], this.size = 0;
      }
      return e7.prototype._unlinkNode = function(e8) {
        var t5 = e8.prev, r9 = e8.next;
        e8 === this._head && (this._head = r9), e8 === this._tail && (this._tail = t5), null !== t5 && (t5.next = r9), null !== r9 && (r9.prev = t5);
      }, e7.prototype._appendNode = function(e8) {
        var t5 = this._tail;
        null !== t5 && (t5.next = e8), e8.prev = t5, e8.next = null, this._tail = e8, null === this._head && (this._head = e8);
      }, e7.prototype.prealloc = function(e8) {
        for (var t5 = this._nodePool, r9 = 0; r9 < e8; r9++)
          t5.push({ prev: null, next: null, key: null, value: null });
      }, e7.prototype.get = function(e8) {
        var t5 = this._map[e8];
        return void 0 !== t5 ? (this._unlinkNode(t5), this._appendNode(t5), t5.value) : null;
      }, e7.prototype.peekValue = function(e8) {
        var t5 = this._map[e8];
        return void 0 !== t5 ? t5.value : null;
      }, e7.prototype.peek = function() {
        var e8 = this._head;
        return null === e8 ? null : e8.value;
      }, e7.prototype.set = function(e8, t5) {
        var r9 = this._map[e8];
        if (void 0 !== r9)
          r9 = this._map[e8], this._unlinkNode(r9), r9.value = t5;
        else if (this.size >= this.capacity)
          r9 = this._head, this._unlinkNode(r9), delete this._map[r9.key], r9.key = e8, r9.value = t5, this._map[e8] = r9;
        else {
          var i9 = this._nodePool;
          i9.length > 0 ? ((r9 = i9.pop()).key = e8, r9.value = t5) : r9 = { prev: null, next: null, key: e8, value: t5 }, this._map[e8] = r9, this.size++;
        }
        this._appendNode(r9);
      }, e7;
    }();
    t4.LRUMap = i8;
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    });
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = function(e7) {
      function t5(t6, r9, i9, n12, o10, s7) {
        var a5 = e7.call(this, t6, "selection", r9, true, i9, n12, o10, s7) || this;
        return a5.bufferService = o10, a5.optionsService = s7, a5._clearState(), a5;
      }
      return n11(t5, e7), t5.prototype._clearState = function() {
        this._state = { start: void 0, end: void 0, columnSelectMode: void 0, ydisp: void 0 };
      }, t5.prototype.resize = function(t6) {
        e7.prototype.resize.call(this, t6), this._clearState();
      }, t5.prototype.reset = function() {
        this._state.start && this._state.end && (this._clearState(), this._clearAll());
      }, t5.prototype.onSelectionChanged = function(e8, t6, r9) {
        if (this._didStateChange(e8, t6, r9, this._bufferService.buffer.ydisp))
          if (this._clearAll(), e8 && t6) {
            var i9 = e8[1] - this._bufferService.buffer.ydisp, n12 = t6[1] - this._bufferService.buffer.ydisp, o10 = Math.max(i9, 0), s7 = Math.min(n12, this._bufferService.rows - 1);
            if (!(o10 >= this._bufferService.rows || s7 < 0)) {
              if (this._ctx.fillStyle = this._colors.selection.css, r9) {
                var a5 = e8[0], c8 = t6[0] - a5, l7 = s7 - o10 + 1;
                this._fillCells(a5, o10, c8, l7);
              } else {
                a5 = i9 === o10 ? e8[0] : 0;
                var h8 = o10 === s7 ? t6[0] : this._bufferService.cols;
                this._fillCells(a5, o10, h8 - a5, 1);
                var u8 = Math.max(s7 - o10 - 1, 0);
                if (this._fillCells(0, o10 + 1, this._bufferService.cols, u8), o10 !== s7) {
                  var f6 = n12 === s7 ? t6[0] : this._bufferService.cols;
                  this._fillCells(0, s7, f6, 1);
                }
              }
              this._state.start = [e8[0], e8[1]], this._state.end = [t6[0], t6[1]], this._state.columnSelectMode = r9, this._state.ydisp = this._bufferService.buffer.ydisp;
            }
          } else
            this._clearState();
      }, t5.prototype._didStateChange = function(e8, t6, r9, i9) {
        return !this._areCoordinatesEqual(e8, this._state.start) || !this._areCoordinatesEqual(t6, this._state.end) || r9 !== this._state.columnSelectMode || i9 !== this._state.ydisp;
      }, t5.prototype._areCoordinatesEqual = function(e8, t6) {
        return !(!e8 || !t6) && e8[0] === t6[0] && e8[1] === t6[1];
      }, t5;
    }(r8(13).BaseRenderLayer);
    t4.SelectionRenderLayer = o9;
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    });
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(13), s7 = r8(5), a5 = function(e7) {
      function t5(t6, r9, i9, n12, o10, a6, c9, l7, h8) {
        var u8 = e7.call(this, t6, "cursor", r9, true, i9, n12, a6, c9) || this;
        return u8._onRequestRefreshRowsEvent = o10, u8.bufferService = a6, u8.optionsService = c9, u8._coreService = l7, u8._coreBrowserService = h8, u8._cell = new s7.CellData(), u8._state = { x: 0, y: 0, isFocused: false, style: "", width: 0 }, u8._cursorRenderers = { bar: u8._renderBarCursor.bind(u8), block: u8._renderBlockCursor.bind(u8), underline: u8._renderUnderlineCursor.bind(u8) }, u8;
      }
      return n11(t5, e7), t5.prototype.resize = function(t6) {
        e7.prototype.resize.call(this, t6), this._state = { x: 0, y: 0, isFocused: false, style: "", width: 0 };
      }, t5.prototype.reset = function() {
        this._clearCursor(), this._cursorBlinkStateManager && (this._cursorBlinkStateManager.dispose(), this._cursorBlinkStateManager = void 0, this.onOptionsChanged());
      }, t5.prototype.onBlur = function() {
        this._cursorBlinkStateManager && this._cursorBlinkStateManager.pause(), this._onRequestRefreshRowsEvent.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });
      }, t5.prototype.onFocus = function() {
        this._cursorBlinkStateManager ? this._cursorBlinkStateManager.resume() : this._onRequestRefreshRowsEvent.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });
      }, t5.prototype.onOptionsChanged = function() {
        var e8, t6 = this;
        this._optionsService.options.cursorBlink ? this._cursorBlinkStateManager || (this._cursorBlinkStateManager = new c8(this._coreBrowserService.isFocused, function() {
          t6._render(true);
        })) : (null === (e8 = this._cursorBlinkStateManager) || void 0 === e8 || e8.dispose(), this._cursorBlinkStateManager = void 0), this._onRequestRefreshRowsEvent.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });
      }, t5.prototype.onCursorMove = function() {
        this._cursorBlinkStateManager && this._cursorBlinkStateManager.restartBlinkAnimation();
      }, t5.prototype.onGridChanged = function(e8, t6) {
        !this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused ? this._render(false) : this._cursorBlinkStateManager.restartBlinkAnimation();
      }, t5.prototype._render = function(e8) {
        if (this._coreService.isCursorInitialized && !this._coreService.isCursorHidden) {
          var t6 = this._bufferService.buffer.ybase + this._bufferService.buffer.y, r9 = t6 - this._bufferService.buffer.ydisp;
          if (r9 < 0 || r9 >= this._bufferService.rows)
            this._clearCursor();
          else {
            var i9 = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);
            if (this._bufferService.buffer.lines.get(t6).loadCell(i9, this._cell), void 0 !== this._cell.content) {
              if (!this._coreBrowserService.isFocused) {
                this._clearCursor(), this._ctx.save(), this._ctx.fillStyle = this._colors.cursor.css;
                var n12 = this._optionsService.options.cursorStyle;
                return n12 && "block" !== n12 ? this._cursorRenderers[n12](i9, r9, this._cell) : this._renderBlurCursor(i9, r9, this._cell), this._ctx.restore(), this._state.x = i9, this._state.y = r9, this._state.isFocused = false, this._state.style = n12, void (this._state.width = this._cell.getWidth());
              }
              if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isCursorVisible) {
                if (this._state) {
                  if (this._state.x === i9 && this._state.y === r9 && this._state.isFocused === this._coreBrowserService.isFocused && this._state.style === this._optionsService.options.cursorStyle && this._state.width === this._cell.getWidth())
                    return;
                  this._clearCursor();
                }
                this._ctx.save(), this._cursorRenderers[this._optionsService.options.cursorStyle || "block"](i9, r9, this._cell), this._ctx.restore(), this._state.x = i9, this._state.y = r9, this._state.isFocused = false, this._state.style = this._optionsService.options.cursorStyle, this._state.width = this._cell.getWidth();
              } else
                this._clearCursor();
            }
          }
        } else
          this._clearCursor();
      }, t5.prototype._clearCursor = function() {
        this._state && (this._clearCells(this._state.x, this._state.y, this._state.width, 1), this._state = { x: 0, y: 0, isFocused: false, style: "", width: 0 });
      }, t5.prototype._renderBarCursor = function(e8, t6, r9) {
        this._ctx.save(), this._ctx.fillStyle = this._colors.cursor.css, this._fillLeftLineAtCell(e8, t6, this._optionsService.options.cursorWidth), this._ctx.restore();
      }, t5.prototype._renderBlockCursor = function(e8, t6, r9) {
        this._ctx.save(), this._ctx.fillStyle = this._colors.cursor.css, this._fillCells(e8, t6, r9.getWidth(), 1), this._ctx.fillStyle = this._colors.cursorAccent.css, this._fillCharTrueColor(r9, e8, t6), this._ctx.restore();
      }, t5.prototype._renderUnderlineCursor = function(e8, t6, r9) {
        this._ctx.save(), this._ctx.fillStyle = this._colors.cursor.css, this._fillBottomLineAtCells(e8, t6), this._ctx.restore();
      }, t5.prototype._renderBlurCursor = function(e8, t6, r9) {
        this._ctx.save(), this._ctx.strokeStyle = this._colors.cursor.css, this._strokeRectAtCell(e8, t6, r9.getWidth(), 1), this._ctx.restore();
      }, t5;
    }(o9.BaseRenderLayer);
    t4.CursorRenderLayer = a5;
    var c8 = function() {
      function e7(e8, t5) {
        this._renderCallback = t5, this.isCursorVisible = true, e8 && this._restartInterval();
      }
      return Object.defineProperty(e7.prototype, "isPaused", { get: function() {
        return !(this._blinkStartTimeout || this._blinkInterval);
      }, enumerable: true, configurable: true }), e7.prototype.dispose = function() {
        this._blinkInterval && (window.clearInterval(this._blinkInterval), this._blinkInterval = void 0), this._blinkStartTimeout && (window.clearTimeout(this._blinkStartTimeout), this._blinkStartTimeout = void 0), this._animationFrame && (window.cancelAnimationFrame(this._animationFrame), this._animationFrame = void 0);
      }, e7.prototype.restartBlinkAnimation = function() {
        var e8 = this;
        this.isPaused || (this._animationTimeRestarted = Date.now(), this.isCursorVisible = true, this._animationFrame || (this._animationFrame = window.requestAnimationFrame(function() {
          e8._renderCallback(), e8._animationFrame = void 0;
        })));
      }, e7.prototype._restartInterval = function(e8) {
        var t5 = this;
        void 0 === e8 && (e8 = 600), this._blinkInterval && window.clearInterval(this._blinkInterval), this._blinkStartTimeout = window.setTimeout(function() {
          if (t5._animationTimeRestarted) {
            var e9 = 600 - (Date.now() - t5._animationTimeRestarted);
            if (t5._animationTimeRestarted = void 0, e9 > 0)
              return void t5._restartInterval(e9);
          }
          t5.isCursorVisible = false, t5._animationFrame = window.requestAnimationFrame(function() {
            t5._renderCallback(), t5._animationFrame = void 0;
          }), t5._blinkInterval = window.setInterval(function() {
            if (t5._animationTimeRestarted) {
              var e10 = 600 - (Date.now() - t5._animationTimeRestarted);
              return t5._animationTimeRestarted = void 0, void t5._restartInterval(e10);
            }
            t5.isCursorVisible = !t5.isCursorVisible, t5._animationFrame = window.requestAnimationFrame(function() {
              t5._renderCallback(), t5._animationFrame = void 0;
            });
          }, 600);
        }, e8);
      }, e7.prototype.pause = function() {
        this.isCursorVisible = true, this._blinkInterval && (window.clearInterval(this._blinkInterval), this._blinkInterval = void 0), this._blinkStartTimeout && (window.clearTimeout(this._blinkStartTimeout), this._blinkStartTimeout = void 0), this._animationFrame && (window.cancelAnimationFrame(this._animationFrame), this._animationFrame = void 0);
      }, e7.prototype.resume = function() {
        this.pause(), this._animationTimeRestarted = void 0, this._restartInterval(), this.restartBlinkAnimation();
      }, e7;
    }();
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    });
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(13), s7 = r8(9), a5 = r8(24), c8 = function(e7) {
      function t5(t6, r9, i9, n12, o10, s8, a6, c9) {
        var l7 = e7.call(this, t6, "link", r9, true, i9, n12, a6, c9) || this;
        return l7.bufferService = a6, l7.optionsService = c9, o10.onLinkHover(function(e8) {
          return l7._onLinkHover(e8);
        }), o10.onLinkLeave(function(e8) {
          return l7._onLinkLeave(e8);
        }), s8.onLinkHover(function(e8) {
          return l7._onLinkHover(e8);
        }), s8.onLinkLeave(function(e8) {
          return l7._onLinkLeave(e8);
        }), l7;
      }
      return n11(t5, e7), t5.prototype.resize = function(t6) {
        e7.prototype.resize.call(this, t6), this._state = void 0;
      }, t5.prototype.reset = function() {
        this._clearCurrentLink();
      }, t5.prototype._clearCurrentLink = function() {
        if (this._state) {
          this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);
          var e8 = this._state.y2 - this._state.y1 - 1;
          e8 > 0 && this._clearCells(0, this._state.y1 + 1, this._state.cols, e8), this._clearCells(0, this._state.y2, this._state.x2, 1), this._state = void 0;
        }
      }, t5.prototype._onLinkHover = function(e8) {
        if (e8.fg === s7.INVERTED_DEFAULT_COLOR ? this._ctx.fillStyle = this._colors.background.css : e8.fg && a5.is256Color(e8.fg) ? this._ctx.fillStyle = this._colors.ansi[e8.fg].css : this._ctx.fillStyle = this._colors.foreground.css, e8.y1 === e8.y2)
          this._fillBottomLineAtCells(e8.x1, e8.y1, e8.x2 - e8.x1);
        else {
          this._fillBottomLineAtCells(e8.x1, e8.y1, e8.cols - e8.x1);
          for (var t6 = e8.y1 + 1; t6 < e8.y2; t6++)
            this._fillBottomLineAtCells(0, t6, e8.cols);
          this._fillBottomLineAtCells(0, e8.y2, e8.x2);
        }
        this._state = e8;
      }, t5.prototype._onLinkLeave = function(e8) {
        this._clearCurrentLink();
      }, t5;
    }(o9.BaseRenderLayer);
    t4.LinkRenderLayer = c8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(0), n11 = function() {
      function e7(e8, t5, r9, n12) {
        this._bufferService = e8, this._logService = t5, this._optionsService = r9, this._unicodeService = n12, this._linkMatchers = [], this._nextLinkMatcherId = 0, this._onLinkHover = new i8.EventEmitter(), this._onLinkLeave = new i8.EventEmitter(), this._onLinkTooltip = new i8.EventEmitter(), this._rowsToLinkify = { start: void 0, end: void 0 };
      }
      return Object.defineProperty(e7.prototype, "onLinkHover", { get: function() {
        return this._onLinkHover.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onLinkLeave", { get: function() {
        return this._onLinkLeave.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onLinkTooltip", { get: function() {
        return this._onLinkTooltip.event;
      }, enumerable: true, configurable: true }), e7.prototype.attachToDom = function(e8, t5) {
        this._element = e8, this._mouseZoneManager = t5;
      }, e7.prototype.linkifyRows = function(t5, r9) {
        var i9 = this;
        this._mouseZoneManager && (void 0 === this._rowsToLinkify.start || void 0 === this._rowsToLinkify.end ? (this._rowsToLinkify.start = t5, this._rowsToLinkify.end = r9) : (this._rowsToLinkify.start = Math.min(this._rowsToLinkify.start, t5), this._rowsToLinkify.end = Math.max(this._rowsToLinkify.end, r9)), this._mouseZoneManager.clearAll(t5, r9), this._rowsTimeoutId && clearTimeout(this._rowsTimeoutId), this._rowsTimeoutId = setTimeout(function() {
          return i9._linkifyRows();
        }, e7._timeBeforeLatency));
      }, e7.prototype._linkifyRows = function() {
        this._rowsTimeoutId = void 0;
        var e8 = this._bufferService.buffer;
        if (void 0 !== this._rowsToLinkify.start && void 0 !== this._rowsToLinkify.end) {
          var t5 = e8.ydisp + this._rowsToLinkify.start;
          if (!(t5 >= e8.lines.length)) {
            for (var r9 = e8.ydisp + Math.min(this._rowsToLinkify.end, this._bufferService.rows) + 1, i9 = Math.ceil(2e3 / this._bufferService.cols), n12 = this._bufferService.buffer.iterator(false, t5, r9, i9, i9); n12.hasNext(); )
              for (var o10 = n12.next(), s7 = 0; s7 < this._linkMatchers.length; s7++)
                this._doLinkifyRow(o10.range.first, o10.content, this._linkMatchers[s7]);
            this._rowsToLinkify.start = void 0, this._rowsToLinkify.end = void 0;
          }
        } else
          this._logService.debug("_rowToLinkify was unset before _linkifyRows was called");
      }, e7.prototype.registerLinkMatcher = function(e8, t5, r9) {
        if (void 0 === r9 && (r9 = {}), !t5)
          throw new Error("handler must be defined");
        var i9 = { id: this._nextLinkMatcherId++, regex: e8, handler: t5, matchIndex: r9.matchIndex, validationCallback: r9.validationCallback, hoverTooltipCallback: r9.tooltipCallback, hoverLeaveCallback: r9.leaveCallback, willLinkActivate: r9.willLinkActivate, priority: r9.priority || 0 };
        return this._addLinkMatcherToList(i9), i9.id;
      }, e7.prototype._addLinkMatcherToList = function(e8) {
        if (0 !== this._linkMatchers.length) {
          for (var t5 = this._linkMatchers.length - 1; t5 >= 0; t5--)
            if (e8.priority <= this._linkMatchers[t5].priority)
              return void this._linkMatchers.splice(t5 + 1, 0, e8);
          this._linkMatchers.splice(0, 0, e8);
        } else
          this._linkMatchers.push(e8);
      }, e7.prototype.deregisterLinkMatcher = function(e8) {
        for (var t5 = 0; t5 < this._linkMatchers.length; t5++)
          if (this._linkMatchers[t5].id === e8)
            return this._linkMatchers.splice(t5, 1), true;
        return false;
      }, e7.prototype._doLinkifyRow = function(e8, t5, r9) {
        for (var i9, n12 = this, o10 = new RegExp(r9.regex.source, (r9.regex.flags || "") + "g"), s7 = -1, a5 = function() {
          var a6 = i9["number" != typeof r9.matchIndex ? 0 : r9.matchIndex];
          if (!a6)
            return c8._logService.debug("match found without corresponding matchIndex", i9, r9), "break";
          if (s7 = t5.indexOf(a6, s7 + 1), o10.lastIndex = s7 + a6.length, s7 < 0)
            return "break";
          var l7 = c8._bufferService.buffer.stringIndexToBufferIndex(e8, s7);
          if (l7[0] < 0)
            return "break";
          var h8 = c8._bufferService.buffer.lines.get(l7[0]);
          if (!h8)
            return "break";
          var u8 = h8.getFg(l7[1]), f6 = u8 ? u8 >> 9 & 511 : void 0;
          r9.validationCallback ? r9.validationCallback(a6, function(e9) {
            n12._rowsTimeoutId || e9 && n12._addLink(l7[1], l7[0] - n12._bufferService.buffer.ydisp, a6, r9, f6);
          }) : c8._addLink(l7[1], l7[0] - c8._bufferService.buffer.ydisp, a6, r9, f6);
        }, c8 = this; null !== (i9 = o10.exec(t5)) && "break" !== a5(); )
          ;
      }, e7.prototype._addLink = function(e8, t5, r9, i9, n12) {
        var s7 = this;
        if (this._mouseZoneManager && this._element) {
          var a5 = this._unicodeService.getStringCellWidth(r9), c8 = e8 % this._bufferService.cols, l7 = t5 + Math.floor(e8 / this._bufferService.cols), h8 = (c8 + a5) % this._bufferService.cols, u8 = l7 + Math.floor((c8 + a5) / this._bufferService.cols);
          0 === h8 && (h8 = this._bufferService.cols, u8--), this._mouseZoneManager.add(new o9(c8 + 1, l7 + 1, h8 + 1, u8 + 1, function(e9) {
            if (i9.handler)
              return i9.handler(e9, r9);
            var t6 = window.open();
            t6 ? (t6.opener = null, t6.location.href = r9) : console.warn("Opening link blocked as opener could not be cleared");
          }, function() {
            s7._onLinkHover.fire(s7._createLinkHoverEvent(c8, l7, h8, u8, n12)), s7._element.classList.add("xterm-cursor-pointer");
          }, function(e9) {
            s7._onLinkTooltip.fire(s7._createLinkHoverEvent(c8, l7, h8, u8, n12)), i9.hoverTooltipCallback && i9.hoverTooltipCallback(e9, r9, { start: { x: c8, y: l7 }, end: { x: h8, y: u8 } });
          }, function() {
            s7._onLinkLeave.fire(s7._createLinkHoverEvent(c8, l7, h8, u8, n12)), s7._element.classList.remove("xterm-cursor-pointer"), i9.hoverLeaveCallback && i9.hoverLeaveCallback();
          }, function(e9) {
            return !i9.willLinkActivate || i9.willLinkActivate(e9, r9);
          }));
        }
      }, e7.prototype._createLinkHoverEvent = function(e8, t5, r9, i9, n12) {
        return { x1: e8, y1: t5, x2: r9, y2: i9, cols: this._bufferService.cols, fg: n12 };
      }, e7._timeBeforeLatency = 200, e7;
    }();
    t4.Linkifier = n11;
    var o9 = function(e7, t5, r9, i9, n12, o10, s7, a5, c8) {
      this.x1 = e7, this.y1 = t5, this.x2 = r9, this.y2 = i9, this.clickCallback = n12, this.hoverCallback = o10, this.tooltipCallback = s7, this.leaveCallback = a5, this.willLinkActivate = c8;
    };
    t4.MouseZone = o9;
  }, function(e6, t4, r8) {
    "use strict";
    var i8 = this && this.__decorate || function(e7, t5, r9, i9) {
      var n12, o10 = arguments.length, s8 = o10 < 3 ? t5 : null === i9 ? i9 = Object.getOwnPropertyDescriptor(t5, r9) : i9;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
        s8 = Reflect.decorate(e7, t5, r9, i9);
      else
        for (var a6 = e7.length - 1; a6 >= 0; a6--)
          (n12 = e7[a6]) && (s8 = (o10 < 3 ? n12(s8) : o10 > 3 ? n12(t5, r9, s8) : n12(t5, r9)) || s8);
      return o10 > 3 && s8 && Object.defineProperty(t5, r9, s8), s8;
    }, n11 = this && this.__param || function(e7, t5) {
      return function(r9, i9) {
        t5(r9, i9, e7);
      };
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(11), s7 = r8(51), a5 = r8(5), c8 = r8(0), l7 = r8(4), h8 = r8(1), u8 = r8(28), f6 = r8(52), _6 = String.fromCharCode(160), d8 = new RegExp(_6, "g"), p10 = function() {
      function e7(e8, t5, r9, i9, n12, o10, l8, h9) {
        var u9 = this;
        this._scrollLines = e8, this._element = t5, this._screenElement = r9, this._charSizeService = i9, this._bufferService = n12, this._coreService = o10, this._mouseService = l8, this._optionsService = h9, this._dragScrollAmount = 0, this._enabled = true, this._workCell = new a5.CellData(), this._mouseDownTimeStamp = 0, this._onLinuxMouseSelection = new c8.EventEmitter(), this._onRedrawRequest = new c8.EventEmitter(), this._onSelectionChange = new c8.EventEmitter(), this._mouseMoveListener = function(e9) {
          return u9._onMouseMove(e9);
        }, this._mouseUpListener = function(e9) {
          return u9._onMouseUp(e9);
        }, this._coreService.onUserInput(function() {
          u9.hasSelection && u9.clearSelection();
        }), this._trimListener = this._bufferService.buffer.lines.onTrim(function(e9) {
          return u9._onTrim(e9);
        }), this._bufferService.buffers.onBufferActivate(function(e9) {
          return u9._onBufferActivate(e9);
        }), this.enable(), this._model = new s7.SelectionModel(this._bufferService), this._activeSelectionMode = 0;
      }
      return Object.defineProperty(e7.prototype, "onLinuxMouseSelection", { get: function() {
        return this._onLinuxMouseSelection.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onRedrawRequest", { get: function() {
        return this._onRedrawRequest.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onSelectionChange", { get: function() {
        return this._onSelectionChange.event;
      }, enumerable: true, configurable: true }), e7.prototype.dispose = function() {
        this._removeMouseDownListeners();
      }, e7.prototype.reset = function() {
        this.clearSelection();
      }, e7.prototype.disable = function() {
        this.clearSelection(), this._enabled = false;
      }, e7.prototype.enable = function() {
        this._enabled = true;
      }, Object.defineProperty(e7.prototype, "selectionStart", { get: function() {
        return this._model.finalSelectionStart;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "selectionEnd", { get: function() {
        return this._model.finalSelectionEnd;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "hasSelection", { get: function() {
        var e8 = this._model.finalSelectionStart, t5 = this._model.finalSelectionEnd;
        return !(!e8 || !t5 || e8[0] === t5[0] && e8[1] === t5[1]);
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "selectionText", { get: function() {
        var e8 = this._model.finalSelectionStart, t5 = this._model.finalSelectionEnd;
        if (!e8 || !t5)
          return "";
        var r9 = this._bufferService.buffer, i9 = [];
        if (3 === this._activeSelectionMode) {
          if (e8[0] === t5[0])
            return "";
          for (var n12 = e8[1]; n12 <= t5[1]; n12++) {
            var s8 = r9.translateBufferLineToString(n12, true, e8[0], t5[0]);
            i9.push(s8);
          }
        } else {
          var a6 = e8[1] === t5[1] ? t5[0] : void 0;
          for (i9.push(r9.translateBufferLineToString(e8[1], true, e8[0], a6)), n12 = e8[1] + 1; n12 <= t5[1] - 1; n12++) {
            var c9 = r9.lines.get(n12);
            s8 = r9.translateBufferLineToString(n12, true), c9 && c9.isWrapped ? i9[i9.length - 1] += s8 : i9.push(s8);
          }
          e8[1] !== t5[1] && (c9 = r9.lines.get(t5[1]), s8 = r9.translateBufferLineToString(t5[1], true, 0, t5[0]), c9 && c9.isWrapped ? i9[i9.length - 1] += s8 : i9.push(s8));
        }
        return i9.map(function(e9) {
          return e9.replace(d8, " ");
        }).join(o9.isWindows ? "\r\n" : "\n");
      }, enumerable: true, configurable: true }), e7.prototype.clearSelection = function() {
        this._model.clearSelection(), this._removeMouseDownListeners(), this.refresh(), this._onSelectionChange.fire();
      }, e7.prototype.refresh = function(e8) {
        var t5 = this;
        this._refreshAnimationFrame || (this._refreshAnimationFrame = window.requestAnimationFrame(function() {
          return t5._refresh();
        })), o9.isLinux && e8 && this.selectionText.length && this._onLinuxMouseSelection.fire(this.selectionText);
      }, e7.prototype._refresh = function() {
        this._refreshAnimationFrame = void 0, this._onRedrawRequest.fire({ start: this._model.finalSelectionStart, end: this._model.finalSelectionEnd, columnSelectMode: 3 === this._activeSelectionMode });
      }, e7.prototype.isClickInSelection = function(e8) {
        var t5 = this._getMouseBufferCoords(e8), r9 = this._model.finalSelectionStart, i9 = this._model.finalSelectionEnd;
        return !!(r9 && i9 && t5) && this._areCoordsInSelection(t5, r9, i9);
      }, e7.prototype._areCoordsInSelection = function(e8, t5, r9) {
        return e8[1] > t5[1] && e8[1] < r9[1] || t5[1] === r9[1] && e8[1] === t5[1] && e8[0] >= t5[0] && e8[0] < r9[0] || t5[1] < r9[1] && e8[1] === r9[1] && e8[0] < r9[0] || t5[1] < r9[1] && e8[1] === t5[1] && e8[0] >= t5[0];
      }, e7.prototype.selectWordAtCursor = function(e8) {
        var t5 = this._getMouseBufferCoords(e8);
        t5 && (this._selectWordAt(t5, false), this._model.selectionEnd = void 0, this.refresh(true));
      }, e7.prototype.selectAll = function() {
        this._model.isSelectAllActive = true, this.refresh(), this._onSelectionChange.fire();
      }, e7.prototype.selectLines = function(e8, t5) {
        this._model.clearSelection(), e8 = Math.max(e8, 0), t5 = Math.min(t5, this._bufferService.buffer.lines.length - 1), this._model.selectionStart = [0, e8], this._model.selectionEnd = [this._bufferService.cols, t5], this.refresh(), this._onSelectionChange.fire();
      }, e7.prototype._onTrim = function(e8) {
        this._model.onTrim(e8) && this.refresh();
      }, e7.prototype._getMouseBufferCoords = function(e8) {
        var t5 = this._mouseService.getCoords(e8, this._screenElement, this._bufferService.cols, this._bufferService.rows, true);
        if (t5)
          return t5[0]--, t5[1]--, t5[1] += this._bufferService.buffer.ydisp, t5;
      }, e7.prototype._getMouseEventScrollAmount = function(e8) {
        var t5 = u8.getCoordsRelativeToElement(e8, this._screenElement)[1], r9 = this._bufferService.rows * Math.ceil(this._charSizeService.height * this._optionsService.options.lineHeight);
        return t5 >= 0 && t5 <= r9 ? 0 : (t5 > r9 && (t5 -= r9), t5 = Math.min(Math.max(t5, -50), 50), (t5 /= 50) / Math.abs(t5) + Math.round(14 * t5));
      }, e7.prototype.shouldForceSelection = function(e8) {
        return o9.isMac ? e8.altKey && this._optionsService.options.macOptionClickForcesSelection : e8.shiftKey;
      }, e7.prototype.onMouseDown = function(e8) {
        if (this._mouseDownTimeStamp = e8.timeStamp, (2 !== e8.button || !this.hasSelection) && 0 === e8.button) {
          if (!this._enabled) {
            if (!this.shouldForceSelection(e8))
              return;
            e8.stopPropagation();
          }
          e8.preventDefault(), this._dragScrollAmount = 0, this._enabled && e8.shiftKey ? this._onIncrementalClick(e8) : 1 === e8.detail ? this._onSingleClick(e8) : 2 === e8.detail ? this._onDoubleClick(e8) : 3 === e8.detail && this._onTripleClick(e8), this._addMouseDownListeners(), this.refresh(true);
        }
      }, e7.prototype._addMouseDownListeners = function() {
        var e8 = this;
        this._screenElement.ownerDocument && (this._screenElement.ownerDocument.addEventListener("mousemove", this._mouseMoveListener), this._screenElement.ownerDocument.addEventListener("mouseup", this._mouseUpListener)), this._dragScrollIntervalTimer = window.setInterval(function() {
          return e8._dragScroll();
        }, 50);
      }, e7.prototype._removeMouseDownListeners = function() {
        this._screenElement.ownerDocument && (this._screenElement.ownerDocument.removeEventListener("mousemove", this._mouseMoveListener), this._screenElement.ownerDocument.removeEventListener("mouseup", this._mouseUpListener)), clearInterval(this._dragScrollIntervalTimer), this._dragScrollIntervalTimer = void 0;
      }, e7.prototype._onIncrementalClick = function(e8) {
        this._model.selectionStart && (this._model.selectionEnd = this._getMouseBufferCoords(e8));
      }, e7.prototype._onSingleClick = function(e8) {
        if (this._model.selectionStartLength = 0, this._model.isSelectAllActive = false, this._activeSelectionMode = this.shouldColumnSelect(e8) ? 3 : 0, this._model.selectionStart = this._getMouseBufferCoords(e8), this._model.selectionStart) {
          this._model.selectionEnd = void 0;
          var t5 = this._bufferService.buffer.lines.get(this._model.selectionStart[1]);
          t5 && t5.length !== this._model.selectionStart[0] && 0 === t5.hasWidth(this._model.selectionStart[0]) && this._model.selectionStart[0]++;
        }
      }, e7.prototype._onDoubleClick = function(e8) {
        var t5 = this._getMouseBufferCoords(e8);
        t5 && (this._activeSelectionMode = 1, this._selectWordAt(t5, true));
      }, e7.prototype._onTripleClick = function(e8) {
        var t5 = this._getMouseBufferCoords(e8);
        t5 && (this._activeSelectionMode = 2, this._selectLineAt(t5[1]));
      }, e7.prototype.shouldColumnSelect = function(e8) {
        return e8.altKey && !(o9.isMac && this._optionsService.options.macOptionClickForcesSelection);
      }, e7.prototype._onMouseMove = function(e8) {
        if (e8.stopImmediatePropagation(), this._model.selectionStart) {
          var t5 = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;
          if (this._model.selectionEnd = this._getMouseBufferCoords(e8), this._model.selectionEnd) {
            2 === this._activeSelectionMode ? this._model.selectionEnd[1] < this._model.selectionStart[1] ? this._model.selectionEnd[0] = 0 : this._model.selectionEnd[0] = this._bufferService.cols : 1 === this._activeSelectionMode && this._selectToWordAt(this._model.selectionEnd), this._dragScrollAmount = this._getMouseEventScrollAmount(e8), 3 !== this._activeSelectionMode && (this._dragScrollAmount > 0 ? this._model.selectionEnd[0] = this._bufferService.cols : this._dragScrollAmount < 0 && (this._model.selectionEnd[0] = 0));
            var r9 = this._bufferService.buffer;
            if (this._model.selectionEnd[1] < r9.lines.length) {
              var i9 = r9.lines.get(this._model.selectionEnd[1]);
              i9 && 0 === i9.hasWidth(this._model.selectionEnd[0]) && this._model.selectionEnd[0]++;
            }
            t5 && t5[0] === this._model.selectionEnd[0] && t5[1] === this._model.selectionEnd[1] || this.refresh(true);
          } else
            this.refresh(true);
        }
      }, e7.prototype._dragScroll = function() {
        if (this._model.selectionEnd && this._model.selectionStart && this._dragScrollAmount) {
          this._scrollLines(this._dragScrollAmount, false);
          var e8 = this._bufferService.buffer;
          this._dragScrollAmount > 0 ? (3 !== this._activeSelectionMode && (this._model.selectionEnd[0] = this._bufferService.cols), this._model.selectionEnd[1] = Math.min(e8.ydisp + this._bufferService.rows, e8.lines.length - 1)) : (3 !== this._activeSelectionMode && (this._model.selectionEnd[0] = 0), this._model.selectionEnd[1] = e8.ydisp), this.refresh();
        }
      }, e7.prototype._onMouseUp = function(e8) {
        var t5 = e8.timeStamp - this._mouseDownTimeStamp;
        if (this._removeMouseDownListeners(), this.selectionText.length <= 1 && t5 < 500) {
          if (e8.altKey && this._bufferService.buffer.ybase === this._bufferService.buffer.ydisp) {
            var r9 = this._mouseService.getCoords(e8, this._element, this._bufferService.cols, this._bufferService.rows, false);
            if (r9 && void 0 !== r9[0] && void 0 !== r9[1]) {
              var i9 = f6.moveToCellSequence(r9[0] - 1, r9[1] - 1, this._bufferService, this._coreService.decPrivateModes.applicationCursorKeys);
              this._coreService.triggerDataEvent(i9, true);
            }
          }
        } else
          this.hasSelection && this._onSelectionChange.fire();
      }, e7.prototype._onBufferActivate = function(e8) {
        var t5 = this;
        this.clearSelection(), this._trimListener.dispose(), this._trimListener = e8.activeBuffer.lines.onTrim(function(e9) {
          return t5._onTrim(e9);
        });
      }, e7.prototype._convertViewportColToCharacterIndex = function(e8, t5) {
        for (var r9 = t5[0], i9 = 0; t5[0] >= i9; i9++) {
          var n12 = e8.loadCell(i9, this._workCell).getChars().length;
          0 === this._workCell.getWidth() ? r9-- : n12 > 1 && t5[0] !== i9 && (r9 += n12 - 1);
        }
        return r9;
      }, e7.prototype.setSelection = function(e8, t5, r9) {
        this._model.clearSelection(), this._removeMouseDownListeners(), this._model.selectionStart = [e8, t5], this._model.selectionStartLength = r9, this.refresh();
      }, e7.prototype._getWordAt = function(e8, t5, r9, i9) {
        if (void 0 === r9 && (r9 = true), void 0 === i9 && (i9 = true), !(e8[0] >= this._bufferService.cols)) {
          var n12 = this._bufferService.buffer, o10 = n12.lines.get(e8[1]);
          if (o10) {
            var s8 = n12.translateBufferLineToString(e8[1], false), a6 = this._convertViewportColToCharacterIndex(o10, e8), c9 = a6, l8 = e8[0] - a6, h9 = 0, u9 = 0, f7 = 0, _7 = 0;
            if (" " === s8.charAt(a6)) {
              for (; a6 > 0 && " " === s8.charAt(a6 - 1); )
                a6--;
              for (; c9 < s8.length && " " === s8.charAt(c9 + 1); )
                c9++;
            } else {
              var d9 = e8[0], p11 = e8[0];
              0 === o10.getWidth(d9) && (h9++, d9--), 2 === o10.getWidth(p11) && (u9++, p11++);
              var v10 = o10.getString(p11).length;
              for (v10 > 1 && (_7 += v10 - 1, c9 += v10 - 1); d9 > 0 && a6 > 0 && !this._isCharWordSeparator(o10.loadCell(d9 - 1, this._workCell)); ) {
                o10.loadCell(d9 - 1, this._workCell);
                var y6 = this._workCell.getChars().length;
                0 === this._workCell.getWidth() ? (h9++, d9--) : y6 > 1 && (f7 += y6 - 1, a6 -= y6 - 1), a6--, d9--;
              }
              for (; p11 < o10.length && c9 + 1 < s8.length && !this._isCharWordSeparator(o10.loadCell(p11 + 1, this._workCell)); ) {
                o10.loadCell(p11 + 1, this._workCell);
                var g9 = this._workCell.getChars().length;
                2 === this._workCell.getWidth() ? (u9++, p11++) : g9 > 1 && (_7 += g9 - 1, c9 += g9 - 1), c9++, p11++;
              }
            }
            c9++;
            var b9 = a6 + l8 - h9 + f7, m10 = Math.min(this._bufferService.cols, c9 - a6 + h9 + u9 - f7 - _7);
            if (t5 || "" !== s8.slice(a6, c9).trim()) {
              if (r9 && 0 === b9 && 32 !== o10.getCodePoint(0)) {
                var S6 = n12.lines.get(e8[1] - 1);
                if (S6 && o10.isWrapped && 32 !== S6.getCodePoint(this._bufferService.cols - 1)) {
                  var C9 = this._getWordAt([this._bufferService.cols - 1, e8[1] - 1], false, true, false);
                  if (C9) {
                    var w5 = this._bufferService.cols - C9.start;
                    b9 -= w5, m10 += w5;
                  }
                }
              }
              if (i9 && b9 + m10 === this._bufferService.cols && 32 !== o10.getCodePoint(this._bufferService.cols - 1)) {
                var E5 = n12.lines.get(e8[1] + 1);
                if (E5 && E5.isWrapped && 32 !== E5.getCodePoint(0)) {
                  var L2 = this._getWordAt([0, e8[1] + 1], false, false, true);
                  L2 && (m10 += L2.length);
                }
              }
              return { start: b9, length: m10 };
            }
          }
        }
      }, e7.prototype._selectWordAt = function(e8, t5) {
        var r9 = this._getWordAt(e8, t5);
        if (r9) {
          for (; r9.start < 0; )
            r9.start += this._bufferService.cols, e8[1]--;
          this._model.selectionStart = [r9.start, e8[1]], this._model.selectionStartLength = r9.length;
        }
      }, e7.prototype._selectToWordAt = function(e8) {
        var t5 = this._getWordAt(e8, true);
        if (t5) {
          for (var r9 = e8[1]; t5.start < 0; )
            t5.start += this._bufferService.cols, r9--;
          if (!this._model.areSelectionValuesReversed())
            for (; t5.start + t5.length > this._bufferService.cols; )
              t5.length -= this._bufferService.cols, r9++;
          this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? t5.start : t5.start + t5.length, r9];
        }
      }, e7.prototype._isCharWordSeparator = function(e8) {
        return 0 !== e8.getWidth() && this._optionsService.options.wordSeparator.indexOf(e8.getChars()) >= 0;
      }, e7.prototype._selectLineAt = function(e8) {
        var t5 = this._bufferService.buffer.getWrappedRangeForLine(e8);
        this._model.selectionStart = [0, t5.first], this._model.selectionEnd = [this._bufferService.cols, t5.last], this._model.selectionStartLength = 0;
      }, i8([n11(3, l7.ICharSizeService), n11(4, h8.IBufferService), n11(5, h8.ICoreService), n11(6, l7.IMouseService), n11(7, h8.IOptionsService)], e7);
    }();
    t4.SelectionService = p10;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = function() {
      function e7(e8) {
        this._bufferService = e8, this.isSelectAllActive = false, this.selectionStartLength = 0;
      }
      return e7.prototype.clearSelection = function() {
        this.selectionStart = void 0, this.selectionEnd = void 0, this.isSelectAllActive = false, this.selectionStartLength = 0;
      }, Object.defineProperty(e7.prototype, "finalSelectionStart", { get: function() {
        return this.isSelectAllActive ? [0, 0] : this.selectionEnd && this.selectionStart && this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "finalSelectionEnd", { get: function() {
        if (this.isSelectAllActive)
          return [this._bufferService.cols, this._bufferService.buffer.ybase + this._bufferService.rows - 1];
        if (this.selectionStart) {
          if (!this.selectionEnd || this.areSelectionValuesReversed()) {
            var e8 = this.selectionStart[0] + this.selectionStartLength;
            return e8 > this._bufferService.cols ? [e8 % this._bufferService.cols, this.selectionStart[1] + Math.floor(e8 / this._bufferService.cols)] : [e8, this.selectionStart[1]];
          }
          return this.selectionStartLength && this.selectionEnd[1] === this.selectionStart[1] ? [Math.max(this.selectionStart[0] + this.selectionStartLength, this.selectionEnd[0]), this.selectionEnd[1]] : this.selectionEnd;
        }
      }, enumerable: true, configurable: true }), e7.prototype.areSelectionValuesReversed = function() {
        var e8 = this.selectionStart, t5 = this.selectionEnd;
        return !(!e8 || !t5) && (e8[1] > t5[1] || e8[1] === t5[1] && e8[0] > t5[0]);
      }, e7.prototype.onTrim = function(e8) {
        return this.selectionStart && (this.selectionStart[1] -= e8), this.selectionEnd && (this.selectionEnd[1] -= e8), this.selectionEnd && this.selectionEnd[1] < 0 ? (this.clearSelection(), true) : (this.selectionStart && this.selectionStart[1] < 0 && (this.selectionStart[1] = 0), false);
      }, e7;
    }();
    t4.SelectionModel = i8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(12);
    function n11(e7, t5, r9, i9) {
      var n12 = e7 - o9(r9, e7), a6 = t5 - o9(r9, t5);
      return l7(Math.abs(n12 - a6) - function(e8, t6, r10) {
        for (var i10 = 0, n13 = e8 - o9(r10, e8), a7 = t6 - o9(r10, t6), c9 = 0; c9 < Math.abs(n13 - a7); c9++) {
          var l8 = "A" === s7(e8, t6) ? -1 : 1, h8 = r10.buffer.lines.get(n13 + l8 * c9);
          h8 && h8.isWrapped && i10++;
        }
        return i10;
      }(e7, t5, r9), c8(s7(e7, t5), i9));
    }
    function o9(e7, t5) {
      for (var r9 = 0, i9 = e7.buffer.lines.get(t5), n12 = i9 && i9.isWrapped; n12 && t5 >= 0 && t5 < e7.rows; )
        r9++, n12 = (i9 = e7.buffer.lines.get(--t5)) && i9.isWrapped;
      return r9;
    }
    function s7(e7, t5) {
      return e7 > t5 ? "A" : "B";
    }
    function a5(e7, t5, r9, i9, n12, o10) {
      for (var s8 = e7, a6 = t5, c9 = ""; s8 !== r9 || a6 !== i9; )
        s8 += n12 ? 1 : -1, n12 && s8 > o10.cols - 1 ? (c9 += o10.buffer.translateBufferLineToString(a6, false, e7, s8), s8 = 0, e7 = 0, a6++) : !n12 && s8 < 0 && (c9 += o10.buffer.translateBufferLineToString(a6, false, 0, e7 + 1), e7 = s8 = o10.cols - 1, a6--);
      return c9 + o10.buffer.translateBufferLineToString(a6, false, e7, s8);
    }
    function c8(e7, t5) {
      var r9 = t5 ? "O" : "[";
      return i8.C0.ESC + r9 + e7;
    }
    function l7(e7, t5) {
      e7 = Math.floor(e7);
      for (var r9 = "", i9 = 0; i9 < e7; i9++)
        r9 += t5;
      return r9;
    }
    t4.moveToCellSequence = function(e7, t5, r9, i9) {
      var s8, h8 = r9.buffer.x, u8 = r9.buffer.y;
      if (!r9.buffer.hasScrollback)
        return function(e8, t6, r10, i10, s9, h9) {
          return 0 === n11(t6, i10, s9, h9).length ? "" : l7(a5(e8, t6, e8, t6 - o9(s9, t6), false, s9).length, c8("D", h9));
        }(h8, u8, 0, t5, r9, i9) + n11(u8, t5, r9, i9) + function(e8, t6, r10, i10, s9, h9) {
          var u9;
          u9 = n11(t6, i10, s9, h9).length > 0 ? i10 - o9(s9, i10) : t6;
          var f7 = i10, _6 = function(e9, t7, r11, i11, s10, a6) {
            var c9;
            return c9 = n11(r11, i11, s10, a6).length > 0 ? i11 - o9(s10, i11) : t7, e9 < r11 && c9 <= i11 || e9 >= r11 && c9 < i11 ? "C" : "D";
          }(e8, t6, r10, i10, s9, h9);
          return l7(a5(e8, u9, r10, f7, "C" === _6, s9).length, c8(_6, h9));
        }(h8, u8, e7, t5, r9, i9);
      if (u8 === t5)
        return s8 = h8 > e7 ? "D" : "C", l7(Math.abs(h8 - e7), c8(s8, i9));
      s8 = u8 > t5 ? "D" : "C";
      var f6 = Math.abs(u8 - t5);
      return l7(function(e8, t6) {
        return t6.cols - e8;
      }(u8 > t5 ? e7 : h8, r9) + (f6 - 1) * r9.cols + 1 + ((u8 > t5 ? h8 : e7) - 1), c8(s8, i9));
    };
  }, function(e6, t4, r8) {
    "use strict";
    var i8 = this && this.__decorate || function(e7, t5, r9, i9) {
      var n12, o10 = arguments.length, s8 = o10 < 3 ? t5 : null === i9 ? i9 = Object.getOwnPropertyDescriptor(t5, r9) : i9;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
        s8 = Reflect.decorate(e7, t5, r9, i9);
      else
        for (var a5 = e7.length - 1; a5 >= 0; a5--)
          (n12 = e7[a5]) && (s8 = (o10 < 3 ? n12(s8) : o10 > 3 ? n12(t5, r9, s8) : n12(t5, r9)) || s8);
      return o10 > 3 && s8 && Object.defineProperty(t5, r9, s8), s8;
    }, n11 = this && this.__param || function(e7, t5) {
      return function(r9, i9) {
        t5(r9, i9, e7);
      };
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(1), s7 = function() {
      function e7(e8) {
        this._optionsService = e8;
      }
      return Object.defineProperty(e7, "audioContext", { get: function() {
        if (!e7._audioContext) {
          var t5 = window.AudioContext || window.webkitAudioContext;
          if (!t5)
            return console.warn("Web Audio API is not supported by this browser. Consider upgrading to the latest version"), null;
          e7._audioContext = new t5();
        }
        return e7._audioContext;
      }, enumerable: true, configurable: true }), e7.prototype.playBellSound = function() {
        var t5 = e7.audioContext;
        if (t5) {
          var r9 = t5.createBufferSource();
          t5.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._optionsService.options.bellSound)), function(e8) {
            r9.buffer = e8, r9.connect(t5.destination), r9.start(0);
          });
        }
      }, e7.prototype._base64ToArrayBuffer = function(e8) {
        for (var t5 = window.atob(e8), r9 = t5.length, i9 = new Uint8Array(r9), n12 = 0; n12 < r9; n12++)
          i9[n12] = t5.charCodeAt(n12);
        return i9.buffer;
      }, e7.prototype._removeMimeType = function(e8) {
        return e8.split(",")[1];
      }, e7 = i8([n11(0, o9.IOptionsService)], e7);
    }();
    t4.SoundService = s7;
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    }), o9 = this && this.__decorate || function(e7, t5, r9, i9) {
      var n12, o10 = arguments.length, s8 = o10 < 3 ? t5 : null === i9 ? i9 = Object.getOwnPropertyDescriptor(t5, r9) : i9;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
        s8 = Reflect.decorate(e7, t5, r9, i9);
      else
        for (var a6 = e7.length - 1; a6 >= 0; a6--)
          (n12 = e7[a6]) && (s8 = (o10 < 3 ? n12(s8) : o10 > 3 ? n12(t5, r9, s8) : n12(t5, r9)) || s8);
      return o10 > 3 && s8 && Object.defineProperty(t5, r9, s8), s8;
    }, s7 = this && this.__param || function(e7, t5) {
      return function(r9, i9) {
        t5(r9, i9, e7);
      };
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var a5 = r8(2), c8 = r8(8), l7 = r8(4), h8 = r8(1), u8 = function(e7) {
      function t5(t6, r9, i9, n12, o10) {
        var s8 = e7.call(this) || this;
        return s8._element = t6, s8._screenElement = r9, s8._bufferService = i9, s8._mouseService = n12, s8._selectionService = o10, s8._zones = [], s8._areZonesActive = false, s8._lastHoverCoords = [void 0, void 0], s8._initialSelectionLength = 0, s8.register(c8.addDisposableDomListener(s8._element, "mousedown", function(e8) {
          return s8._onMouseDown(e8);
        })), s8._mouseMoveListener = function(e8) {
          return s8._onMouseMove(e8);
        }, s8._mouseLeaveListener = function(e8) {
          return s8._onMouseLeave(e8);
        }, s8._clickListener = function(e8) {
          return s8._onClick(e8);
        }, s8;
      }
      return n11(t5, e7), t5.prototype.dispose = function() {
        e7.prototype.dispose.call(this), this._deactivate();
      }, t5.prototype.add = function(e8) {
        this._zones.push(e8), 1 === this._zones.length && this._activate();
      }, t5.prototype.clearAll = function(e8, t6) {
        if (0 !== this._zones.length) {
          e8 && t6 || (e8 = 0, t6 = this._bufferService.rows - 1);
          for (var r9 = 0; r9 < this._zones.length; r9++) {
            var i9 = this._zones[r9];
            (i9.y1 > e8 && i9.y1 <= t6 + 1 || i9.y2 > e8 && i9.y2 <= t6 + 1 || i9.y1 < e8 && i9.y2 > t6 + 1) && (this._currentZone && this._currentZone === i9 && (this._currentZone.leaveCallback(), this._currentZone = void 0), this._zones.splice(r9--, 1));
          }
          0 === this._zones.length && this._deactivate();
        }
      }, t5.prototype._activate = function() {
        this._areZonesActive || (this._areZonesActive = true, this._element.addEventListener("mousemove", this._mouseMoveListener), this._element.addEventListener("mouseleave", this._mouseLeaveListener), this._element.addEventListener("click", this._clickListener));
      }, t5.prototype._deactivate = function() {
        this._areZonesActive && (this._areZonesActive = false, this._element.removeEventListener("mousemove", this._mouseMoveListener), this._element.removeEventListener("mouseleave", this._mouseLeaveListener), this._element.removeEventListener("click", this._clickListener));
      }, t5.prototype._onMouseMove = function(e8) {
        this._lastHoverCoords[0] === e8.pageX && this._lastHoverCoords[1] === e8.pageY || (this._onHover(e8), this._lastHoverCoords = [e8.pageX, e8.pageY]);
      }, t5.prototype._onHover = function(e8) {
        var t6 = this, r9 = this._findZoneEventAt(e8);
        r9 !== this._currentZone && (this._currentZone && (this._currentZone.leaveCallback(), this._currentZone = void 0, this._tooltipTimeout && clearTimeout(this._tooltipTimeout)), r9 && (this._currentZone = r9, r9.hoverCallback && r9.hoverCallback(e8), this._tooltipTimeout = setTimeout(function() {
          return t6._onTooltip(e8);
        }, 500)));
      }, t5.prototype._onTooltip = function(e8) {
        this._tooltipTimeout = void 0;
        var t6 = this._findZoneEventAt(e8);
        t6 && t6.tooltipCallback && t6.tooltipCallback(e8);
      }, t5.prototype._onMouseDown = function(e8) {
        if (this._initialSelectionLength = this._getSelectionLength(), this._areZonesActive) {
          var t6 = this._findZoneEventAt(e8);
          (null == t6 ? void 0 : t6.willLinkActivate(e8)) && (e8.preventDefault(), e8.stopImmediatePropagation());
        }
      }, t5.prototype._onMouseLeave = function(e8) {
        this._currentZone && (this._currentZone.leaveCallback(), this._currentZone = void 0, this._tooltipTimeout && clearTimeout(this._tooltipTimeout));
      }, t5.prototype._onClick = function(e8) {
        var t6 = this._findZoneEventAt(e8), r9 = this._getSelectionLength();
        t6 && r9 === this._initialSelectionLength && (t6.clickCallback(e8), e8.preventDefault(), e8.stopImmediatePropagation());
      }, t5.prototype._getSelectionLength = function() {
        var e8 = this._selectionService.selectionText;
        return e8 ? e8.length : 0;
      }, t5.prototype._findZoneEventAt = function(e8) {
        var t6 = this._mouseService.getCoords(e8, this._screenElement, this._bufferService.cols, this._bufferService.rows);
        if (t6)
          for (var r9 = t6[0], i9 = t6[1], n12 = 0; n12 < this._zones.length; n12++) {
            var o10 = this._zones[n12];
            if (o10.y1 === o10.y2) {
              if (i9 === o10.y1 && r9 >= o10.x1 && r9 < o10.x2)
                return o10;
            } else if (i9 === o10.y1 && r9 >= o10.x1 || i9 === o10.y2 && r9 < o10.x2 || i9 > o10.y1 && i9 < o10.y2)
              return o10;
          }
      }, o9([s7(2, h8.IBufferService), s7(3, l7.IMouseService), s7(4, l7.ISelectionService)], t5);
    }(a5.Disposable);
    t4.MouseZoneManager = u8;
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    });
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(17), s7 = r8(11), a5 = r8(29), c8 = r8(8), l7 = r8(2), h8 = r8(30), u8 = function(e7) {
      function t5(t6, r9) {
        var i9 = e7.call(this) || this;
        i9._terminal = t6, i9._renderService = r9, i9._liveRegionLineCount = 0, i9._charsToConsume = [], i9._charsToAnnounce = "", i9._accessibilityTreeRoot = document.createElement("div"), i9._accessibilityTreeRoot.classList.add("xterm-accessibility"), i9._rowContainer = document.createElement("div"), i9._rowContainer.classList.add("xterm-accessibility-tree"), i9._rowContainer.setAttribute("role", "list"), i9._rowElements = [];
        for (var n12 = 0; n12 < i9._terminal.rows; n12++)
          i9._rowElements[n12] = i9._createAccessibilityTreeNode(), i9._rowContainer.appendChild(i9._rowElements[n12]);
        return i9._topBoundaryFocusListener = function(e8) {
          return i9._onBoundaryFocus(e8, 0);
        }, i9._bottomBoundaryFocusListener = function(e8) {
          return i9._onBoundaryFocus(e8, 1);
        }, i9._rowElements[0].addEventListener("focus", i9._topBoundaryFocusListener), i9._rowElements[i9._rowElements.length - 1].addEventListener("focus", i9._bottomBoundaryFocusListener), i9._refreshRowsDimensions(), i9._accessibilityTreeRoot.appendChild(i9._rowContainer), i9._renderRowsDebouncer = new a5.RenderDebouncer(i9._renderRows.bind(i9)), i9._refreshRows(), i9._liveRegion = document.createElement("div"), i9._liveRegion.classList.add("live-region"), i9._liveRegion.setAttribute("aria-live", "assertive"), i9._accessibilityTreeRoot.appendChild(i9._liveRegion), i9._terminal.element.insertAdjacentElement("afterbegin", i9._accessibilityTreeRoot), i9.register(i9._renderRowsDebouncer), i9.register(i9._terminal.onResize(function(e8) {
          return i9._onResize(e8.rows);
        })), i9.register(i9._terminal.onRender(function(e8) {
          return i9._refreshRows(e8.start, e8.end);
        })), i9.register(i9._terminal.onScroll(function() {
          return i9._refreshRows();
        })), i9.register(i9._terminal.onA11yChar(function(e8) {
          return i9._onChar(e8);
        })), i9.register(i9._terminal.onLineFeed(function() {
          return i9._onChar("\n");
        })), i9.register(i9._terminal.onA11yTab(function(e8) {
          return i9._onTab(e8);
        })), i9.register(i9._terminal.onKey(function(e8) {
          return i9._onKey(e8.key);
        })), i9.register(i9._terminal.onBlur(function() {
          return i9._clearLiveRegion();
        })), i9.register(i9._renderService.onDimensionsChange(function() {
          return i9._refreshRowsDimensions();
        })), i9._screenDprMonitor = new h8.ScreenDprMonitor(), i9.register(i9._screenDprMonitor), i9._screenDprMonitor.setListener(function() {
          return i9._refreshRowsDimensions();
        }), i9.register(c8.addDisposableDomListener(window, "resize", function() {
          return i9._refreshRowsDimensions();
        })), i9;
      }
      return n11(t5, e7), t5.prototype.dispose = function() {
        e7.prototype.dispose.call(this), this._terminal.element.removeChild(this._accessibilityTreeRoot), this._rowElements.length = 0;
      }, t5.prototype._onBoundaryFocus = function(e8, t6) {
        var r9 = e8.target, i9 = this._rowElements[0 === t6 ? 1 : this._rowElements.length - 2];
        if (r9.getAttribute("aria-posinset") !== (0 === t6 ? "1" : "" + this._terminal.buffer.lines.length) && e8.relatedTarget === i9) {
          var n12, o10;
          if (0 === t6 ? (n12 = r9, o10 = this._rowElements.pop(), this._rowContainer.removeChild(o10)) : (n12 = this._rowElements.shift(), o10 = r9, this._rowContainer.removeChild(n12)), n12.removeEventListener("focus", this._topBoundaryFocusListener), o10.removeEventListener("focus", this._bottomBoundaryFocusListener), 0 === t6) {
            var s8 = this._createAccessibilityTreeNode();
            this._rowElements.unshift(s8), this._rowContainer.insertAdjacentElement("afterbegin", s8);
          } else
            s8 = this._createAccessibilityTreeNode(), this._rowElements.push(s8), this._rowContainer.appendChild(s8);
          this._rowElements[0].addEventListener("focus", this._topBoundaryFocusListener), this._rowElements[this._rowElements.length - 1].addEventListener("focus", this._bottomBoundaryFocusListener), this._terminal.scrollLines(0 === t6 ? -1 : 1), this._rowElements[0 === t6 ? 1 : this._rowElements.length - 2].focus(), e8.preventDefault(), e8.stopImmediatePropagation();
        }
      }, t5.prototype._onResize = function(e8) {
        this._rowElements[this._rowElements.length - 1].removeEventListener("focus", this._bottomBoundaryFocusListener);
        for (var t6 = this._rowContainer.children.length; t6 < this._terminal.rows; t6++)
          this._rowElements[t6] = this._createAccessibilityTreeNode(), this._rowContainer.appendChild(this._rowElements[t6]);
        for (; this._rowElements.length > e8; )
          this._rowContainer.removeChild(this._rowElements.pop());
        this._rowElements[this._rowElements.length - 1].addEventListener("focus", this._bottomBoundaryFocusListener), this._refreshRowsDimensions();
      }, t5.prototype._createAccessibilityTreeNode = function() {
        var e8 = document.createElement("div");
        return e8.setAttribute("role", "listitem"), e8.tabIndex = -1, this._refreshRowDimensions(e8), e8;
      }, t5.prototype._onTab = function(e8) {
        for (var t6 = 0; t6 < e8; t6++)
          this._onChar(" ");
      }, t5.prototype._onChar = function(e8) {
        var t6 = this;
        this._liveRegionLineCount < 21 && (this._charsToConsume.length > 0 ? this._charsToConsume.shift() !== e8 && (this._charsToAnnounce += e8) : this._charsToAnnounce += e8, "\n" === e8 && (this._liveRegionLineCount++, 21 === this._liveRegionLineCount && (this._liveRegion.textContent += o9.tooMuchOutput)), s7.isMac && this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode && setTimeout(function() {
          t6._accessibilityTreeRoot.appendChild(t6._liveRegion);
        }, 0));
      }, t5.prototype._clearLiveRegion = function() {
        this._liveRegion.textContent = "", this._liveRegionLineCount = 0, s7.isMac && this._liveRegion.parentNode && this._accessibilityTreeRoot.removeChild(this._liveRegion);
      }, t5.prototype._onKey = function(e8) {
        this._clearLiveRegion(), this._charsToConsume.push(e8);
      }, t5.prototype._refreshRows = function(e8, t6) {
        this._renderRowsDebouncer.refresh(e8, t6, this._terminal.rows);
      }, t5.prototype._renderRows = function(e8, t6) {
        for (var r9 = this._terminal.buffer, i9 = r9.lines.length.toString(), n12 = e8; n12 <= t6; n12++) {
          var o10 = r9.translateBufferLineToString(r9.ydisp + n12, true), s8 = (r9.ydisp + n12 + 1).toString(), a6 = this._rowElements[n12];
          a6 && (0 === o10.length ? a6.innerHTML = "&nbsp;" : a6.textContent = o10, a6.setAttribute("aria-posinset", s8), a6.setAttribute("aria-setsize", i9));
        }
        this._announceCharacters();
      }, t5.prototype._refreshRowsDimensions = function() {
        if (this._renderService.dimensions.actualCellHeight) {
          this._rowElements.length !== this._terminal.rows && this._onResize(this._terminal.rows);
          for (var e8 = 0; e8 < this._terminal.rows; e8++)
            this._refreshRowDimensions(this._rowElements[e8]);
        }
      }, t5.prototype._refreshRowDimensions = function(e8) {
        e8.style.height = this._renderService.dimensions.actualCellHeight + "px";
      }, t5.prototype._announceCharacters = function() {
        0 !== this._charsToAnnounce.length && (this._liveRegion.textContent += this._charsToAnnounce, this._charsToAnnounce = "");
      }, t5;
    }(l7.Disposable);
    t4.AccessibilityManager = u8;
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    }), o9 = this && this.__decorate || function(e7, t5, r9, i9) {
      var n12, o10 = arguments.length, s8 = o10 < 3 ? t5 : null === i9 ? i9 = Object.getOwnPropertyDescriptor(t5, r9) : i9;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
        s8 = Reflect.decorate(e7, t5, r9, i9);
      else
        for (var a6 = e7.length - 1; a6 >= 0; a6--)
          (n12 = e7[a6]) && (s8 = (o10 < 3 ? n12(s8) : o10 > 3 ? n12(t5, r9, s8) : n12(t5, r9)) || s8);
      return o10 > 3 && s8 && Object.defineProperty(t5, r9, s8), s8;
    }, s7 = this && this.__param || function(e7, t5) {
      return function(r9, i9) {
        t5(r9, i9, e7);
      };
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var a5 = r8(57), c8 = r8(9), l7 = r8(2), h8 = r8(4), u8 = r8(1), f6 = r8(0), _6 = r8(10), d8 = 1, p10 = function(e7) {
      function t5(t6, r9, i9, n12, o10, s8, c9, l8, h9) {
        var u9 = e7.call(this) || this;
        return u9._colors = t6, u9._element = r9, u9._screenElement = i9, u9._viewportElement = n12, u9._linkifier = o10, u9._linkifier2 = s8, u9._charSizeService = c9, u9._optionsService = l8, u9._bufferService = h9, u9._terminalClass = d8++, u9._rowElements = [], u9._onRequestRefreshRows = new f6.EventEmitter(), u9._rowContainer = document.createElement("div"), u9._rowContainer.classList.add("xterm-rows"), u9._rowContainer.style.lineHeight = "normal", u9._rowContainer.setAttribute("aria-hidden", "true"), u9._refreshRowElements(u9._bufferService.cols, u9._bufferService.rows), u9._selectionContainer = document.createElement("div"), u9._selectionContainer.classList.add("xterm-selection"), u9._selectionContainer.setAttribute("aria-hidden", "true"), u9.dimensions = { scaledCharWidth: 0, scaledCharHeight: 0, scaledCellWidth: 0, scaledCellHeight: 0, scaledCharLeft: 0, scaledCharTop: 0, scaledCanvasWidth: 0, scaledCanvasHeight: 0, canvasWidth: 0, canvasHeight: 0, actualCellWidth: 0, actualCellHeight: 0 }, u9._updateDimensions(), u9._injectCss(), u9._rowFactory = new a5.DomRendererRowFactory(document, u9._optionsService, u9._colors), u9._element.classList.add("xterm-dom-renderer-owner-" + u9._terminalClass), u9._screenElement.appendChild(u9._rowContainer), u9._screenElement.appendChild(u9._selectionContainer), u9._linkifier.onLinkHover(function(e8) {
          return u9._onLinkHover(e8);
        }), u9._linkifier.onLinkLeave(function(e8) {
          return u9._onLinkLeave(e8);
        }), u9._linkifier2.onLinkHover(function(e8) {
          return u9._onLinkHover(e8);
        }), u9._linkifier2.onLinkLeave(function(e8) {
          return u9._onLinkLeave(e8);
        }), u9;
      }
      return n11(t5, e7), Object.defineProperty(t5.prototype, "onRequestRefreshRows", { get: function() {
        return this._onRequestRefreshRows.event;
      }, enumerable: true, configurable: true }), t5.prototype.dispose = function() {
        this._element.classList.remove("xterm-dom-renderer-owner-" + this._terminalClass), this._screenElement.removeChild(this._rowContainer), this._screenElement.removeChild(this._selectionContainer), this._screenElement.removeChild(this._themeStyleElement), this._screenElement.removeChild(this._dimensionsStyleElement), e7.prototype.dispose.call(this);
      }, t5.prototype._updateDimensions = function() {
        var e8 = this;
        this.dimensions.scaledCharWidth = this._charSizeService.width * window.devicePixelRatio, this.dimensions.scaledCharHeight = Math.ceil(this._charSizeService.height * window.devicePixelRatio), this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._optionsService.options.letterSpacing), this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._optionsService.options.lineHeight), this.dimensions.scaledCharLeft = 0, this.dimensions.scaledCharTop = 0, this.dimensions.scaledCanvasWidth = this.dimensions.scaledCellWidth * this._bufferService.cols, this.dimensions.scaledCanvasHeight = this.dimensions.scaledCellHeight * this._bufferService.rows, this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio), this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio), this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._bufferService.cols, this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._bufferService.rows, this._rowElements.forEach(function(t7) {
          t7.style.width = e8.dimensions.canvasWidth + "px", t7.style.height = e8.dimensions.actualCellHeight + "px", t7.style.lineHeight = e8.dimensions.actualCellHeight + "px", t7.style.overflow = "hidden";
        }), this._dimensionsStyleElement || (this._dimensionsStyleElement = document.createElement("style"), this._screenElement.appendChild(this._dimensionsStyleElement));
        var t6 = this._terminalSelector + " .xterm-rows span { display: inline-block; height: 100%; vertical-align: top; width: " + this.dimensions.actualCellWidth + "px}";
        this._dimensionsStyleElement.innerHTML = t6, this._selectionContainer.style.height = this._viewportElement.style.height, this._screenElement.style.width = this.dimensions.canvasWidth + "px", this._screenElement.style.height = this.dimensions.canvasHeight + "px";
      }, t5.prototype.setColors = function(e8) {
        this._colors = e8, this._injectCss();
      }, t5.prototype._injectCss = function() {
        var e8 = this;
        this._themeStyleElement || (this._themeStyleElement = document.createElement("style"), this._screenElement.appendChild(this._themeStyleElement));
        var t6 = this._terminalSelector + " .xterm-rows { color: " + this._colors.foreground.css + "; font-family: " + this._optionsService.options.fontFamily + "; font-size: " + this._optionsService.options.fontSize + "px;}";
        t6 += this._terminalSelector + " span:not(." + a5.BOLD_CLASS + ") { font-weight: " + this._optionsService.options.fontWeight + ";}" + this._terminalSelector + " span." + a5.BOLD_CLASS + " { font-weight: " + this._optionsService.options.fontWeightBold + ";}" + this._terminalSelector + " span." + a5.ITALIC_CLASS + " { font-style: italic;}", t6 += "@keyframes blink_box_shadow_" + this._terminalClass + " { 50% {  box-shadow: none; }}", t6 += "@keyframes blink_block_" + this._terminalClass + " { 0% {  background-color: " + this._colors.cursor.css + ";  color: " + this._colors.cursorAccent.css + "; } 50% {  background-color: " + this._colors.cursorAccent.css + ";  color: " + this._colors.cursor.css + "; }}", t6 += this._terminalSelector + " .xterm-rows:not(.xterm-focus) ." + a5.CURSOR_CLASS + "." + a5.CURSOR_STYLE_BLOCK_CLASS + " { outline: 1px solid " + this._colors.cursor.css + "; outline-offset: -1px;}" + this._terminalSelector + " .xterm-rows.xterm-focus ." + a5.CURSOR_CLASS + "." + a5.CURSOR_BLINK_CLASS + ":not(." + a5.CURSOR_STYLE_BLOCK_CLASS + ") { animation: blink_box_shadow_" + this._terminalClass + " 1s step-end infinite;}" + this._terminalSelector + " .xterm-rows.xterm-focus ." + a5.CURSOR_CLASS + "." + a5.CURSOR_BLINK_CLASS + "." + a5.CURSOR_STYLE_BLOCK_CLASS + " { animation: blink_block_" + this._terminalClass + " 1s step-end infinite;}" + this._terminalSelector + " .xterm-rows.xterm-focus ." + a5.CURSOR_CLASS + "." + a5.CURSOR_STYLE_BLOCK_CLASS + " { background-color: " + this._colors.cursor.css + "; color: " + this._colors.cursorAccent.css + ";}" + this._terminalSelector + " .xterm-rows ." + a5.CURSOR_CLASS + "." + a5.CURSOR_STYLE_BAR_CLASS + " { box-shadow: " + this._optionsService.options.cursorWidth + "px 0 0 " + this._colors.cursor.css + " inset;}" + this._terminalSelector + " .xterm-rows ." + a5.CURSOR_CLASS + "." + a5.CURSOR_STYLE_UNDERLINE_CLASS + " { box-shadow: 0 -1px 0 " + this._colors.cursor.css + " inset;}", t6 += this._terminalSelector + " .xterm-selection { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}" + this._terminalSelector + " .xterm-selection div { position: absolute; background-color: " + this._colors.selection.css + ";}", this._colors.ansi.forEach(function(r9, i9) {
          t6 += e8._terminalSelector + " .xterm-fg-" + i9 + " { color: " + r9.css + "; }" + e8._terminalSelector + " .xterm-bg-" + i9 + " { background-color: " + r9.css + "; }";
        }), t6 += this._terminalSelector + " .xterm-fg-" + c8.INVERTED_DEFAULT_COLOR + " { color: " + _6.color.opaque(this._colors.background).css + "; }" + this._terminalSelector + " .xterm-bg-" + c8.INVERTED_DEFAULT_COLOR + " { background-color: " + this._colors.foreground.css + "; }", this._themeStyleElement.innerHTML = t6;
      }, t5.prototype.onDevicePixelRatioChange = function() {
        this._updateDimensions();
      }, t5.prototype._refreshRowElements = function(e8, t6) {
        for (var r9 = this._rowElements.length; r9 <= t6; r9++) {
          var i9 = document.createElement("div");
          this._rowContainer.appendChild(i9), this._rowElements.push(i9);
        }
        for (; this._rowElements.length > t6; )
          this._rowContainer.removeChild(this._rowElements.pop());
      }, t5.prototype.onResize = function(e8, t6) {
        this._refreshRowElements(e8, t6), this._updateDimensions();
      }, t5.prototype.onCharSizeChanged = function() {
        this._updateDimensions();
      }, t5.prototype.onBlur = function() {
        this._rowContainer.classList.remove("xterm-focus");
      }, t5.prototype.onFocus = function() {
        this._rowContainer.classList.add("xterm-focus");
      }, t5.prototype.onSelectionChanged = function(e8, t6, r9) {
        for (; this._selectionContainer.children.length; )
          this._selectionContainer.removeChild(this._selectionContainer.children[0]);
        if (e8 && t6) {
          var i9 = e8[1] - this._bufferService.buffer.ydisp, n12 = t6[1] - this._bufferService.buffer.ydisp, o10 = Math.max(i9, 0), s8 = Math.min(n12, this._bufferService.rows - 1);
          if (!(o10 >= this._bufferService.rows || s8 < 0)) {
            var a6 = document.createDocumentFragment();
            if (r9)
              a6.appendChild(this._createSelectionElement(o10, e8[0], t6[0], s8 - o10 + 1));
            else {
              var c9 = i9 === o10 ? e8[0] : 0, l8 = o10 === s8 ? t6[0] : this._bufferService.cols;
              a6.appendChild(this._createSelectionElement(o10, c9, l8));
              var h9 = s8 - o10 - 1;
              if (a6.appendChild(this._createSelectionElement(o10 + 1, 0, this._bufferService.cols, h9)), o10 !== s8) {
                var u9 = n12 === s8 ? t6[0] : this._bufferService.cols;
                a6.appendChild(this._createSelectionElement(s8, 0, u9));
              }
            }
            this._selectionContainer.appendChild(a6);
          }
        }
      }, t5.prototype._createSelectionElement = function(e8, t6, r9, i9) {
        void 0 === i9 && (i9 = 1);
        var n12 = document.createElement("div");
        return n12.style.height = i9 * this.dimensions.actualCellHeight + "px", n12.style.top = e8 * this.dimensions.actualCellHeight + "px", n12.style.left = t6 * this.dimensions.actualCellWidth + "px", n12.style.width = this.dimensions.actualCellWidth * (r9 - t6) + "px", n12;
      }, t5.prototype.onCursorMove = function() {
      }, t5.prototype.onOptionsChanged = function() {
        this._updateDimensions(), this._injectCss();
      }, t5.prototype.clear = function() {
        this._rowElements.forEach(function(e8) {
          return e8.innerHTML = "";
        });
      }, t5.prototype.renderRows = function(e8, t6) {
        for (var r9 = this._bufferService.buffer.ybase + this._bufferService.buffer.y, i9 = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1), n12 = this._optionsService.options.cursorBlink, o10 = e8; o10 <= t6; o10++) {
          var s8 = this._rowElements[o10];
          s8.innerHTML = "";
          var a6 = o10 + this._bufferService.buffer.ydisp, c9 = this._bufferService.buffer.lines.get(a6), l8 = this._optionsService.options.cursorStyle;
          s8.appendChild(this._rowFactory.createRow(c9, a6 === r9, l8, i9, n12, this.dimensions.actualCellWidth, this._bufferService.cols));
        }
      }, Object.defineProperty(t5.prototype, "_terminalSelector", { get: function() {
        return ".xterm-dom-renderer-owner-" + this._terminalClass;
      }, enumerable: true, configurable: true }), t5.prototype.registerCharacterJoiner = function(e8) {
        return -1;
      }, t5.prototype.deregisterCharacterJoiner = function(e8) {
        return false;
      }, t5.prototype._onLinkHover = function(e8) {
        this._setCellUnderline(e8.x1, e8.x2, e8.y1, e8.y2, e8.cols, true);
      }, t5.prototype._onLinkLeave = function(e8) {
        this._setCellUnderline(e8.x1, e8.x2, e8.y1, e8.y2, e8.cols, false);
      }, t5.prototype._setCellUnderline = function(e8, t6, r9, i9, n12, o10) {
        for (; e8 !== t6 || r9 !== i9; ) {
          var s8 = this._rowElements[r9];
          if (!s8)
            return;
          var a6 = s8.children[e8];
          a6 && (a6.style.textDecoration = o10 ? "underline" : "none"), ++e8 >= n12 && (e8 = 0, r9++);
        }
      }, o9([s7(6, h8.ICharSizeService), s7(7, u8.IOptionsService), s7(8, u8.IBufferService)], t5);
    }(l7.Disposable);
    t4.DomRenderer = p10;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(9), n11 = r8(3), o9 = r8(5), s7 = r8(10);
    t4.BOLD_CLASS = "xterm-bold", t4.DIM_CLASS = "xterm-dim", t4.ITALIC_CLASS = "xterm-italic", t4.UNDERLINE_CLASS = "xterm-underline", t4.CURSOR_CLASS = "xterm-cursor", t4.CURSOR_BLINK_CLASS = "xterm-cursor-blink", t4.CURSOR_STYLE_BLOCK_CLASS = "xterm-cursor-block", t4.CURSOR_STYLE_BAR_CLASS = "xterm-cursor-bar", t4.CURSOR_STYLE_UNDERLINE_CLASS = "xterm-cursor-underline";
    var a5 = function() {
      function e7(e8, t5, r9) {
        this._document = e8, this._optionsService = t5, this._colors = r9, this._workCell = new o9.CellData();
      }
      return e7.prototype.setColors = function(e8) {
        this._colors = e8;
      }, e7.prototype.createRow = function(e8, r9, o10, a6, l7, h8, u8) {
        for (var f6 = this._document.createDocumentFragment(), _6 = 0, d8 = Math.min(e8.length, u8) - 1; d8 >= 0; d8--)
          if (e8.loadCell(d8, this._workCell).getCode() !== n11.NULL_CELL_CODE || r9 && d8 === a6) {
            _6 = d8 + 1;
            break;
          }
        for (d8 = 0; d8 < _6; d8++) {
          e8.loadCell(d8, this._workCell);
          var p10 = this._workCell.getWidth();
          if (0 !== p10) {
            var v10 = this._document.createElement("span");
            if (p10 > 1 && (v10.style.width = h8 * p10 + "px"), r9 && d8 === a6)
              switch (v10.classList.add(t4.CURSOR_CLASS), l7 && v10.classList.add(t4.CURSOR_BLINK_CLASS), o10) {
                case "bar":
                  v10.classList.add(t4.CURSOR_STYLE_BAR_CLASS);
                  break;
                case "underline":
                  v10.classList.add(t4.CURSOR_STYLE_UNDERLINE_CLASS);
                  break;
                default:
                  v10.classList.add(t4.CURSOR_STYLE_BLOCK_CLASS);
              }
            this._workCell.isBold() && v10.classList.add(t4.BOLD_CLASS), this._workCell.isItalic() && v10.classList.add(t4.ITALIC_CLASS), this._workCell.isDim() && v10.classList.add(t4.DIM_CLASS), this._workCell.isUnderline() && v10.classList.add(t4.UNDERLINE_CLASS), this._workCell.isInvisible() ? v10.textContent = n11.WHITESPACE_CELL_CHAR : v10.textContent = this._workCell.getChars() || n11.WHITESPACE_CELL_CHAR;
            var y6 = this._workCell.getFgColor(), g9 = this._workCell.getFgColorMode(), b9 = this._workCell.getBgColor(), m10 = this._workCell.getBgColorMode(), S6 = !!this._workCell.isInverse();
            if (S6) {
              var C9 = y6;
              y6 = b9, b9 = C9;
              var w5 = g9;
              g9 = m10, m10 = w5;
            }
            switch (g9) {
              case 16777216:
              case 33554432:
                this._workCell.isBold() && y6 < 8 && this._optionsService.options.drawBoldTextInBrightColors && (y6 += 8), this._applyMinimumContrast(v10, this._colors.background, this._colors.ansi[y6]) || v10.classList.add("xterm-fg-" + y6);
                break;
              case 50331648:
                var E5 = s7.rgba.toColor(y6 >> 16 & 255, y6 >> 8 & 255, 255 & y6);
                this._applyMinimumContrast(v10, this._colors.background, E5) || this._addStyle(v10, "color:#" + c8(y6.toString(16), "0", 6));
                break;
              case 0:
              default:
                this._applyMinimumContrast(v10, this._colors.background, this._colors.foreground) || S6 && v10.classList.add("xterm-fg-" + i8.INVERTED_DEFAULT_COLOR);
            }
            switch (m10) {
              case 16777216:
              case 33554432:
                v10.classList.add("xterm-bg-" + b9);
                break;
              case 50331648:
                this._addStyle(v10, "background-color:#" + c8(b9.toString(16), "0", 6));
                break;
              case 0:
              default:
                S6 && v10.classList.add("xterm-bg-" + i8.INVERTED_DEFAULT_COLOR);
            }
            f6.appendChild(v10);
          }
        }
        return f6;
      }, e7.prototype._applyMinimumContrast = function(e8, t5, r9) {
        if (1 === this._optionsService.options.minimumContrastRatio)
          return false;
        var i9 = this._colors.contrastCache.getColor(this._workCell.bg, this._workCell.fg);
        return void 0 === i9 && (i9 = s7.color.ensureContrastRatio(t5, r9, this._optionsService.options.minimumContrastRatio), this._colors.contrastCache.setColor(this._workCell.bg, this._workCell.fg, null != i9 ? i9 : null)), !!i9 && (this._addStyle(e8, "color:" + i9.css), true);
      }, e7.prototype._addStyle = function(e8, t5) {
        e8.setAttribute("style", "" + (e8.getAttribute("style") || "") + t5 + ";");
      }, e7;
    }();
    function c8(e7, t5, r9) {
      for (; e7.length < r9; )
        e7 = t5 + e7;
      return e7;
    }
    t4.DomRendererRowFactory = a5;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(12), n11 = { 48: ["0", ")"], 49: ["1", "!"], 50: ["2", "@"], 51: ["3", "#"], 52: ["4", "$"], 53: ["5", "%"], 54: ["6", "^"], 55: ["7", "&"], 56: ["8", "*"], 57: ["9", "("], 186: [";", ":"], 187: ["=", "+"], 188: [",", "<"], 189: ["-", "_"], 190: [".", ">"], 191: ["/", "?"], 192: ["`", "~"], 219: ["[", "{"], 220: ["\\", "|"], 221: ["]", "}"], 222: ["'", '"'] };
    t4.evaluateKeyboardEvent = function(e7, t5, r9, o9) {
      var s7 = { type: 0, cancel: false, key: void 0 }, a5 = (e7.shiftKey ? 1 : 0) | (e7.altKey ? 2 : 0) | (e7.ctrlKey ? 4 : 0) | (e7.metaKey ? 8 : 0);
      switch (e7.keyCode) {
        case 0:
          "UIKeyInputUpArrow" === e7.key ? s7.key = t5 ? i8.C0.ESC + "OA" : i8.C0.ESC + "[A" : "UIKeyInputLeftArrow" === e7.key ? s7.key = t5 ? i8.C0.ESC + "OD" : i8.C0.ESC + "[D" : "UIKeyInputRightArrow" === e7.key ? s7.key = t5 ? i8.C0.ESC + "OC" : i8.C0.ESC + "[C" : "UIKeyInputDownArrow" === e7.key && (s7.key = t5 ? i8.C0.ESC + "OB" : i8.C0.ESC + "[B");
          break;
        case 8:
          if (e7.shiftKey) {
            s7.key = i8.C0.BS;
            break;
          }
          if (e7.altKey) {
            s7.key = i8.C0.ESC + i8.C0.DEL;
            break;
          }
          s7.key = i8.C0.DEL;
          break;
        case 9:
          if (e7.shiftKey) {
            s7.key = i8.C0.ESC + "[Z";
            break;
          }
          s7.key = i8.C0.HT, s7.cancel = true;
          break;
        case 13:
          s7.key = i8.C0.CR, s7.cancel = true;
          break;
        case 27:
          s7.key = i8.C0.ESC, s7.cancel = true;
          break;
        case 37:
          if (e7.metaKey)
            break;
          a5 ? (s7.key = i8.C0.ESC + "[1;" + (a5 + 1) + "D", s7.key === i8.C0.ESC + "[1;3D" && (s7.key = i8.C0.ESC + (r9 ? "b" : "[1;5D"))) : s7.key = t5 ? i8.C0.ESC + "OD" : i8.C0.ESC + "[D";
          break;
        case 39:
          if (e7.metaKey)
            break;
          a5 ? (s7.key = i8.C0.ESC + "[1;" + (a5 + 1) + "C", s7.key === i8.C0.ESC + "[1;3C" && (s7.key = i8.C0.ESC + (r9 ? "f" : "[1;5C"))) : s7.key = t5 ? i8.C0.ESC + "OC" : i8.C0.ESC + "[C";
          break;
        case 38:
          if (e7.metaKey)
            break;
          a5 ? (s7.key = i8.C0.ESC + "[1;" + (a5 + 1) + "A", r9 || s7.key !== i8.C0.ESC + "[1;3A" || (s7.key = i8.C0.ESC + "[1;5A")) : s7.key = t5 ? i8.C0.ESC + "OA" : i8.C0.ESC + "[A";
          break;
        case 40:
          if (e7.metaKey)
            break;
          a5 ? (s7.key = i8.C0.ESC + "[1;" + (a5 + 1) + "B", r9 || s7.key !== i8.C0.ESC + "[1;3B" || (s7.key = i8.C0.ESC + "[1;5B")) : s7.key = t5 ? i8.C0.ESC + "OB" : i8.C0.ESC + "[B";
          break;
        case 45:
          e7.shiftKey || e7.ctrlKey || (s7.key = i8.C0.ESC + "[2~");
          break;
        case 46:
          s7.key = a5 ? i8.C0.ESC + "[3;" + (a5 + 1) + "~" : i8.C0.ESC + "[3~";
          break;
        case 36:
          s7.key = a5 ? i8.C0.ESC + "[1;" + (a5 + 1) + "H" : t5 ? i8.C0.ESC + "OH" : i8.C0.ESC + "[H";
          break;
        case 35:
          s7.key = a5 ? i8.C0.ESC + "[1;" + (a5 + 1) + "F" : t5 ? i8.C0.ESC + "OF" : i8.C0.ESC + "[F";
          break;
        case 33:
          e7.shiftKey ? s7.type = 2 : s7.key = i8.C0.ESC + "[5~";
          break;
        case 34:
          e7.shiftKey ? s7.type = 3 : s7.key = i8.C0.ESC + "[6~";
          break;
        case 112:
          s7.key = a5 ? i8.C0.ESC + "[1;" + (a5 + 1) + "P" : i8.C0.ESC + "OP";
          break;
        case 113:
          s7.key = a5 ? i8.C0.ESC + "[1;" + (a5 + 1) + "Q" : i8.C0.ESC + "OQ";
          break;
        case 114:
          s7.key = a5 ? i8.C0.ESC + "[1;" + (a5 + 1) + "R" : i8.C0.ESC + "OR";
          break;
        case 115:
          s7.key = a5 ? i8.C0.ESC + "[1;" + (a5 + 1) + "S" : i8.C0.ESC + "OS";
          break;
        case 116:
          s7.key = a5 ? i8.C0.ESC + "[15;" + (a5 + 1) + "~" : i8.C0.ESC + "[15~";
          break;
        case 117:
          s7.key = a5 ? i8.C0.ESC + "[17;" + (a5 + 1) + "~" : i8.C0.ESC + "[17~";
          break;
        case 118:
          s7.key = a5 ? i8.C0.ESC + "[18;" + (a5 + 1) + "~" : i8.C0.ESC + "[18~";
          break;
        case 119:
          s7.key = a5 ? i8.C0.ESC + "[19;" + (a5 + 1) + "~" : i8.C0.ESC + "[19~";
          break;
        case 120:
          s7.key = a5 ? i8.C0.ESC + "[20;" + (a5 + 1) + "~" : i8.C0.ESC + "[20~";
          break;
        case 121:
          s7.key = a5 ? i8.C0.ESC + "[21;" + (a5 + 1) + "~" : i8.C0.ESC + "[21~";
          break;
        case 122:
          s7.key = a5 ? i8.C0.ESC + "[23;" + (a5 + 1) + "~" : i8.C0.ESC + "[23~";
          break;
        case 123:
          s7.key = a5 ? i8.C0.ESC + "[24;" + (a5 + 1) + "~" : i8.C0.ESC + "[24~";
          break;
        default:
          if (!e7.ctrlKey || e7.shiftKey || e7.altKey || e7.metaKey)
            if (r9 && !o9 || !e7.altKey || e7.metaKey)
              r9 && !e7.altKey && !e7.ctrlKey && e7.metaKey ? 65 === e7.keyCode && (s7.type = 1) : e7.key && !e7.ctrlKey && !e7.altKey && !e7.metaKey && e7.keyCode >= 48 && 1 === e7.key.length ? s7.key = e7.key : e7.key && e7.ctrlKey && "_" === e7.key && (s7.key = i8.C0.US);
            else {
              var c8 = n11[e7.keyCode], l7 = c8 && c8[e7.shiftKey ? 1 : 0];
              if (l7)
                s7.key = i8.C0.ESC + l7;
              else if (e7.keyCode >= 65 && e7.keyCode <= 90) {
                var h8 = e7.ctrlKey ? e7.keyCode - 64 : e7.keyCode + 32;
                s7.key = i8.C0.ESC + String.fromCharCode(h8);
              }
            }
          else
            e7.keyCode >= 65 && e7.keyCode <= 90 ? s7.key = String.fromCharCode(e7.keyCode - 64) : 32 === e7.keyCode ? s7.key = i8.C0.NUL : e7.keyCode >= 51 && e7.keyCode <= 55 ? s7.key = String.fromCharCode(e7.keyCode - 51 + 27) : 56 === e7.keyCode ? s7.key = i8.C0.DEL : 219 === e7.keyCode ? s7.key = i8.C0.ESC : 220 === e7.keyCode ? s7.key = i8.C0.FS : 221 === e7.keyCode && (s7.key = i8.C0.GS);
      }
      return s7;
    };
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(3);
    t4.updateWindowsModeWrappedState = function(e7) {
      var t5 = e7.buffer.lines.get(e7.buffer.ybase + e7.buffer.y - 1), r9 = null == t5 ? void 0 : t5.get(e7.cols - 1), n11 = e7.buffer.lines.get(e7.buffer.ybase + e7.buffer.y);
      n11 && r9 && (n11.isWrapped = r9[i8.CHAR_DATA_CODE_INDEX] !== i8.NULL_CELL_CODE && r9[i8.CHAR_DATA_CODE_INDEX] !== i8.WHITESPACE_CELL_CODE);
    };
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    }), o9 = this && this.__decorate || function(e7, t5, r9, i9) {
      var n12, o10 = arguments.length, s8 = o10 < 3 ? t5 : null === i9 ? i9 = Object.getOwnPropertyDescriptor(t5, r9) : i9;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
        s8 = Reflect.decorate(e7, t5, r9, i9);
      else
        for (var a6 = e7.length - 1; a6 >= 0; a6--)
          (n12 = e7[a6]) && (s8 = (o10 < 3 ? n12(s8) : o10 > 3 ? n12(t5, r9, s8) : n12(t5, r9)) || s8);
      return o10 > 3 && s8 && Object.defineProperty(t5, r9, s8), s8;
    }, s7 = this && this.__param || function(e7, t5) {
      return function(r9, i9) {
        t5(r9, i9, e7);
      };
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var a5 = r8(29), c8 = r8(0), l7 = r8(2), h8 = r8(30), u8 = r8(8), f6 = r8(1), _6 = r8(4), d8 = function(e7) {
      function t5(t6, r9, i9, n12, o10) {
        var s8 = e7.call(this) || this;
        if (s8._renderer = t6, s8._rowCount = r9, s8.screenElement = i9, s8.optionsService = n12, s8.charSizeService = o10, s8._isPaused = false, s8._needsFullRefresh = false, s8._canvasWidth = 0, s8._canvasHeight = 0, s8._onDimensionsChange = new c8.EventEmitter(), s8._onRender = new c8.EventEmitter(), s8._onRefreshRequest = new c8.EventEmitter(), s8._renderDebouncer = new a5.RenderDebouncer(function(e8, t7) {
          return s8._renderRows(e8, t7);
        }), s8.register(s8._renderDebouncer), s8._screenDprMonitor = new h8.ScreenDprMonitor(), s8._screenDprMonitor.setListener(function() {
          return s8.onDevicePixelRatioChange();
        }), s8.register(s8._screenDprMonitor), s8.register(n12.onOptionChange(function() {
          return s8._renderer.onOptionsChanged();
        })), s8.register(o10.onCharSizeChange(function() {
          return s8.onCharSizeChanged();
        })), s8._renderer.onRequestRefreshRows(function(e8) {
          return s8.refreshRows(e8.start, e8.end);
        }), s8.register(u8.addDisposableDomListener(window, "resize", function() {
          return s8.onDevicePixelRatioChange();
        })), "IntersectionObserver" in window) {
          var l8 = new IntersectionObserver(function(e8) {
            return s8._onIntersectionChange(e8[e8.length - 1]);
          }, { threshold: 0 });
          l8.observe(i9), s8.register({ dispose: function() {
            return l8.disconnect();
          } });
        }
        return s8;
      }
      return n11(t5, e7), Object.defineProperty(t5.prototype, "onDimensionsChange", { get: function() {
        return this._onDimensionsChange.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onRender", { get: function() {
        return this._onRender.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onRefreshRequest", { get: function() {
        return this._onRefreshRequest.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "dimensions", { get: function() {
        return this._renderer.dimensions;
      }, enumerable: true, configurable: true }), t5.prototype._onIntersectionChange = function(e8) {
        this._isPaused = 0 === e8.intersectionRatio, !this._isPaused && this._needsFullRefresh && (this.refreshRows(0, this._rowCount - 1), this._needsFullRefresh = false);
      }, t5.prototype.refreshRows = function(e8, t6) {
        this._isPaused ? this._needsFullRefresh = true : this._renderDebouncer.refresh(e8, t6, this._rowCount);
      }, t5.prototype._renderRows = function(e8, t6) {
        this._renderer.renderRows(e8, t6), this._onRender.fire({ start: e8, end: t6 });
      }, t5.prototype.resize = function(e8, t6) {
        this._rowCount = t6, this._fireOnCanvasResize();
      }, t5.prototype.changeOptions = function() {
        this._renderer.onOptionsChanged(), this.refreshRows(0, this._rowCount - 1), this._fireOnCanvasResize();
      }, t5.prototype._fireOnCanvasResize = function() {
        this._renderer.dimensions.canvasWidth === this._canvasWidth && this._renderer.dimensions.canvasHeight === this._canvasHeight || this._onDimensionsChange.fire(this._renderer.dimensions);
      }, t5.prototype.dispose = function() {
        this._renderer.dispose(), e7.prototype.dispose.call(this);
      }, t5.prototype.setRenderer = function(e8) {
        var t6 = this;
        this._renderer.dispose(), this._renderer = e8, this._renderer.onRequestRefreshRows(function(e9) {
          return t6.refreshRows(e9.start, e9.end);
        }), this.refreshRows(0, this._rowCount - 1);
      }, t5.prototype._fullRefresh = function() {
        this._isPaused ? this._needsFullRefresh = true : this.refreshRows(0, this._rowCount - 1);
      }, t5.prototype.setColors = function(e8) {
        this._renderer.setColors(e8), this._fullRefresh();
      }, t5.prototype.onDevicePixelRatioChange = function() {
        this._renderer.onDevicePixelRatioChange(), this.refreshRows(0, this._rowCount - 1);
      }, t5.prototype.onResize = function(e8, t6) {
        this._renderer.onResize(e8, t6), this._fullRefresh();
      }, t5.prototype.onCharSizeChanged = function() {
        this._renderer.onCharSizeChanged();
      }, t5.prototype.onBlur = function() {
        this._renderer.onBlur();
      }, t5.prototype.onFocus = function() {
        this._renderer.onFocus();
      }, t5.prototype.onSelectionChanged = function(e8, t6, r9) {
        this._renderer.onSelectionChanged(e8, t6, r9);
      }, t5.prototype.onCursorMove = function() {
        this._renderer.onCursorMove();
      }, t5.prototype.clear = function() {
        this._renderer.clear();
      }, t5.prototype.registerCharacterJoiner = function(e8) {
        return this._renderer.registerCharacterJoiner(e8);
      }, t5.prototype.deregisterCharacterJoiner = function(e8) {
        return this._renderer.deregisterCharacterJoiner(e8);
      }, o9([s7(3, f6.IOptionsService), s7(4, _6.ICharSizeService)], t5);
    }(l7.Disposable);
    t4.RenderService = d8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(0), n11 = r8(11), o9 = r8(31);
    t4.DEFAULT_BELL_SOUND = "data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjMyLjEwNAAAAAAAAAAAAAAA//tQxAADB8AhSmxhIIEVCSiJrDCQBTcu3UrAIwUdkRgQbFAZC1CQEwTJ9mjRvBA4UOLD8nKVOWfh+UlK3z/177OXrfOdKl7pyn3Xf//WreyTRUoAWgBgkOAGbZHBgG1OF6zM82DWbZaUmMBptgQhGjsyYqc9ae9XFz280948NMBWInljyzsNRFLPWdnZGWrddDsjK1unuSrVN9jJsK8KuQtQCtMBjCEtImISdNKJOopIpBFpNSMbIHCSRpRR5iakjTiyzLhchUUBwCgyKiweBv/7UsQbg8isVNoMPMjAAAA0gAAABEVFGmgqK////9bP/6XCykxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", t4.DEFAULT_OPTIONS = Object.freeze({ cols: 80, rows: 24, cursorBlink: false, cursorStyle: "block", cursorWidth: 1, bellSound: t4.DEFAULT_BELL_SOUND, bellStyle: "none", drawBoldTextInBrightColors: true, fastScrollModifier: "alt", fastScrollSensitivity: 5, fontFamily: "courier-new, courier, monospace", fontSize: 15, fontWeight: "normal", fontWeightBold: "bold", lineHeight: 1, letterSpacing: 0, logLevel: "info", scrollback: 1e3, scrollSensitivity: 1, screenReaderMode: false, macOptionIsMeta: false, macOptionClickForcesSelection: false, minimumContrastRatio: 1, disableStdin: false, allowTransparency: false, tabStopWidth: 8, theme: {}, rightClickSelectsWord: n11.isMac, rendererType: "canvas", windowOptions: {}, windowsMode: false, wordSeparator: " ()[]{}',\"`", convertEol: false, termName: "xterm", cancelEvents: false });
    var s7 = ["cols", "rows"], a5 = function() {
      function e7(e8) {
        var r9 = this;
        this._onOptionChange = new i8.EventEmitter(), this.options = o9.clone(t4.DEFAULT_OPTIONS), Object.keys(e8).forEach(function(t5) {
          if (t5 in r9.options) {
            var i9 = e8[t5];
            r9.options[t5] = i9;
          }
        });
      }
      return Object.defineProperty(e7.prototype, "onOptionChange", { get: function() {
        return this._onOptionChange.event;
      }, enumerable: true, configurable: true }), e7.prototype.setOption = function(e8, r9) {
        if (!(e8 in t4.DEFAULT_OPTIONS))
          throw new Error('No option with key "' + e8 + '"');
        if (-1 !== s7.indexOf(e8))
          throw new Error('Option "' + e8 + '" can only be set in the constructor');
        this.options[e8] !== r9 && (r9 = this._sanitizeAndValidateOption(e8, r9), this.options[e8] !== r9 && (this.options[e8] = r9, this._onOptionChange.fire(e8)));
      }, e7.prototype._sanitizeAndValidateOption = function(e8, r9) {
        switch (e8) {
          case "bellStyle":
          case "cursorStyle":
          case "fontWeight":
          case "fontWeightBold":
          case "rendererType":
          case "wordSeparator":
            r9 || (r9 = t4.DEFAULT_OPTIONS[e8]);
            break;
          case "cursorWidth":
            r9 = Math.floor(r9);
          case "lineHeight":
          case "tabStopWidth":
            if (r9 < 1)
              throw new Error(e8 + " cannot be less than 1, value: " + r9);
            break;
          case "minimumContrastRatio":
            r9 = Math.max(1, Math.min(21, Math.round(10 * r9) / 10));
            break;
          case "scrollback":
            if ((r9 = Math.min(r9, 4294967295)) < 0)
              throw new Error(e8 + " cannot be less than 0, value: " + r9);
            break;
          case "fastScrollSensitivity":
          case "scrollSensitivity":
            if (r9 <= 0)
              throw new Error(e8 + " cannot be less than or equal to 0, value: " + r9);
        }
        return r9;
      }, e7.prototype.getOption = function(e8) {
        if (!(e8 in t4.DEFAULT_OPTIONS))
          throw new Error('No option with key "' + e8 + '"');
        return this.options[e8];
      }, e7;
    }();
    t4.OptionsService = a5;
  }, function(e6, t4, r8) {
    "use strict";
    var i8 = this && this.__decorate || function(e7, t5, r9, i9) {
      var n12, o10 = arguments.length, s8 = o10 < 3 ? t5 : null === i9 ? i9 = Object.getOwnPropertyDescriptor(t5, r9) : i9;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
        s8 = Reflect.decorate(e7, t5, r9, i9);
      else
        for (var a6 = e7.length - 1; a6 >= 0; a6--)
          (n12 = e7[a6]) && (s8 = (o10 < 3 ? n12(s8) : o10 > 3 ? n12(t5, r9, s8) : n12(t5, r9)) || s8);
      return o10 > 3 && s8 && Object.defineProperty(t5, r9, s8), s8;
    }, n11 = this && this.__param || function(e7, t5) {
      return function(r9, i9) {
        t5(r9, i9, e7);
      };
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(1), s7 = r8(0), a5 = function() {
      function e7(e8, t5, r9) {
        this.document = e8, this.parentElement = t5, this._optionsService = r9, this.width = 0, this.height = 0, this._onCharSizeChange = new s7.EventEmitter(), this._measureStrategy = new c8(e8, t5, this._optionsService);
      }
      return Object.defineProperty(e7.prototype, "hasValidSize", { get: function() {
        return this.width > 0 && this.height > 0;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onCharSizeChange", { get: function() {
        return this._onCharSizeChange.event;
      }, enumerable: true, configurable: true }), e7.prototype.measure = function() {
        var e8 = this._measureStrategy.measure();
        e8.width === this.width && e8.height === this.height || (this.width = e8.width, this.height = e8.height, this._onCharSizeChange.fire());
      }, i8([n11(2, o9.IOptionsService)], e7);
    }();
    t4.CharSizeService = a5;
    var c8 = function() {
      function e7(e8, t5, r9) {
        this._document = e8, this._parentElement = t5, this._optionsService = r9, this._result = { width: 0, height: 0 }, this._measureElement = this._document.createElement("span"), this._measureElement.classList.add("xterm-char-measure-element"), this._measureElement.textContent = "W", this._measureElement.setAttribute("aria-hidden", "true"), this._parentElement.appendChild(this._measureElement);
      }
      return e7.prototype.measure = function() {
        this._measureElement.style.fontFamily = this._optionsService.options.fontFamily, this._measureElement.style.fontSize = this._optionsService.options.fontSize + "px";
        var e8 = this._measureElement.getBoundingClientRect();
        return 0 !== e8.width && 0 !== e8.height && (this._result.width = e8.width, this._result.height = Math.ceil(e8.height)), this._result;
      }, e7;
    }();
  }, function(e6, t4, r8) {
    "use strict";
    var i8 = this && this.__decorate || function(e7, t5, r9, i9) {
      var n12, o10 = arguments.length, s8 = o10 < 3 ? t5 : null === i9 ? i9 = Object.getOwnPropertyDescriptor(t5, r9) : i9;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
        s8 = Reflect.decorate(e7, t5, r9, i9);
      else
        for (var a6 = e7.length - 1; a6 >= 0; a6--)
          (n12 = e7[a6]) && (s8 = (o10 < 3 ? n12(s8) : o10 > 3 ? n12(t5, r9, s8) : n12(t5, r9)) || s8);
      return o10 > 3 && s8 && Object.defineProperty(t5, r9, s8), s8;
    }, n11 = this && this.__param || function(e7, t5) {
      return function(r9, i9) {
        t5(r9, i9, e7);
      };
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(1), s7 = r8(64);
    t4.MINIMUM_COLS = 2, t4.MINIMUM_ROWS = 1;
    var a5 = function() {
      function e7(e8) {
        this._optionsService = e8, this.cols = Math.max(e8.options.cols, t4.MINIMUM_COLS), this.rows = Math.max(e8.options.rows, t4.MINIMUM_ROWS), this.buffers = new s7.BufferSet(e8, this);
      }
      return Object.defineProperty(e7.prototype, "buffer", { get: function() {
        return this.buffers.active;
      }, enumerable: true, configurable: true }), e7.prototype.resize = function(e8, t5) {
        this.cols = e8, this.rows = t5;
      }, e7.prototype.reset = function() {
        this.buffers = new s7.BufferSet(this._optionsService, this);
      }, i8([n11(0, o9.IOptionsService)], e7);
    }();
    t4.BufferService = a5;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(65), n11 = r8(0), o9 = function() {
      function e7(e8, t5) {
        this.optionsService = e8, this.bufferService = t5, this._onBufferActivate = new n11.EventEmitter(), this._normal = new i8.Buffer(true, e8, t5), this._normal.fillViewportRows(), this._alt = new i8.Buffer(false, e8, t5), this._activeBuffer = this._normal, this.setupTabStops();
      }
      return Object.defineProperty(e7.prototype, "onBufferActivate", { get: function() {
        return this._onBufferActivate.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "alt", { get: function() {
        return this._alt;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "active", { get: function() {
        return this._activeBuffer;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "normal", { get: function() {
        return this._normal;
      }, enumerable: true, configurable: true }), e7.prototype.activateNormalBuffer = function() {
        this._activeBuffer !== this._normal && (this._normal.x = this._alt.x, this._normal.y = this._alt.y, this._alt.clear(), this._activeBuffer = this._normal, this._onBufferActivate.fire({ activeBuffer: this._normal, inactiveBuffer: this._alt }));
      }, e7.prototype.activateAltBuffer = function(e8) {
        this._activeBuffer !== this._alt && (this._alt.fillViewportRows(e8), this._alt.x = this._normal.x, this._alt.y = this._normal.y, this._activeBuffer = this._alt, this._onBufferActivate.fire({ activeBuffer: this._alt, inactiveBuffer: this._normal }));
      }, e7.prototype.resize = function(e8, t5) {
        this._normal.resize(e8, t5), this._alt.resize(e8, t5);
      }, e7.prototype.setupTabStops = function(e8) {
        this._normal.setupTabStops(e8), this._alt.setupTabStops(e8);
      }, e7;
    }();
    t4.BufferSet = o9;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(66), n11 = r8(16), o9 = r8(5), s7 = r8(3), a5 = r8(67), c8 = r8(68), l7 = r8(18);
    t4.MAX_BUFFER_SIZE = 4294967295;
    var h8 = function() {
      function e7(e8, t5, r9) {
        this._hasScrollback = e8, this._optionsService = t5, this._bufferService = r9, this.ydisp = 0, this.ybase = 0, this.y = 0, this.x = 0, this.savedY = 0, this.savedX = 0, this.savedCurAttrData = n11.DEFAULT_ATTR_DATA.clone(), this.savedCharset = l7.DEFAULT_CHARSET, this.markers = [], this._nullCell = o9.CellData.fromCharData([0, s7.NULL_CELL_CHAR, s7.NULL_CELL_WIDTH, s7.NULL_CELL_CODE]), this._whitespaceCell = o9.CellData.fromCharData([0, s7.WHITESPACE_CELL_CHAR, s7.WHITESPACE_CELL_WIDTH, s7.WHITESPACE_CELL_CODE]), this._cols = this._bufferService.cols, this._rows = this._bufferService.rows, this.lines = new i8.CircularList(this._getCorrectBufferLength(this._rows)), this.scrollTop = 0, this.scrollBottom = this._rows - 1, this.setupTabStops();
      }
      return e7.prototype.getNullCell = function(e8) {
        return e8 ? (this._nullCell.fg = e8.fg, this._nullCell.bg = e8.bg) : (this._nullCell.fg = 0, this._nullCell.bg = 0), this._nullCell;
      }, e7.prototype.getWhitespaceCell = function(e8) {
        return e8 ? (this._whitespaceCell.fg = e8.fg, this._whitespaceCell.bg = e8.bg) : (this._whitespaceCell.fg = 0, this._whitespaceCell.bg = 0), this._whitespaceCell;
      }, e7.prototype.getBlankLine = function(e8, t5) {
        return new n11.BufferLine(this._bufferService.cols, this.getNullCell(e8), t5);
      }, Object.defineProperty(e7.prototype, "hasScrollback", { get: function() {
        return this._hasScrollback && this.lines.maxLength > this._rows;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "isCursorInViewport", { get: function() {
        var e8 = this.ybase + this.y - this.ydisp;
        return e8 >= 0 && e8 < this._rows;
      }, enumerable: true, configurable: true }), e7.prototype._getCorrectBufferLength = function(e8) {
        if (!this._hasScrollback)
          return e8;
        var r9 = e8 + this._optionsService.options.scrollback;
        return r9 > t4.MAX_BUFFER_SIZE ? t4.MAX_BUFFER_SIZE : r9;
      }, e7.prototype.fillViewportRows = function(e8) {
        if (0 === this.lines.length) {
          void 0 === e8 && (e8 = n11.DEFAULT_ATTR_DATA);
          for (var t5 = this._rows; t5--; )
            this.lines.push(this.getBlankLine(e8));
        }
      }, e7.prototype.clear = function() {
        this.ydisp = 0, this.ybase = 0, this.y = 0, this.x = 0, this.lines = new i8.CircularList(this._getCorrectBufferLength(this._rows)), this.scrollTop = 0, this.scrollBottom = this._rows - 1, this.setupTabStops();
      }, e7.prototype.resize = function(e8, t5) {
        var r9 = this.getNullCell(n11.DEFAULT_ATTR_DATA), i9 = this._getCorrectBufferLength(t5);
        if (i9 > this.lines.maxLength && (this.lines.maxLength = i9), this.lines.length > 0) {
          if (this._cols < e8)
            for (var o10 = 0; o10 < this.lines.length; o10++)
              this.lines.get(o10).resize(e8, r9);
          var s8 = 0;
          if (this._rows < t5)
            for (var a6 = this._rows; a6 < t5; a6++)
              this.lines.length < t5 + this.ybase && (this._optionsService.options.windowsMode ? this.lines.push(new n11.BufferLine(e8, r9)) : this.ybase > 0 && this.lines.length <= this.ybase + this.y + s8 + 1 ? (this.ybase--, s8++, this.ydisp > 0 && this.ydisp--) : this.lines.push(new n11.BufferLine(e8, r9)));
          else
            for (a6 = this._rows; a6 > t5; a6--)
              this.lines.length > t5 + this.ybase && (this.lines.length > this.ybase + this.y + 1 ? this.lines.pop() : (this.ybase++, this.ydisp++));
          if (i9 < this.lines.maxLength) {
            var c9 = this.lines.length - i9;
            c9 > 0 && (this.lines.trimStart(c9), this.ybase = Math.max(this.ybase - c9, 0), this.ydisp = Math.max(this.ydisp - c9, 0), this.savedY = Math.max(this.savedY - c9, 0)), this.lines.maxLength = i9;
          }
          this.x = Math.min(this.x, e8 - 1), this.y = Math.min(this.y, t5 - 1), s8 && (this.y += s8), this.savedX = Math.min(this.savedX, e8 - 1), this.scrollTop = 0;
        }
        if (this.scrollBottom = t5 - 1, this._isReflowEnabled && (this._reflow(e8, t5), this._cols > e8))
          for (o10 = 0; o10 < this.lines.length; o10++)
            this.lines.get(o10).resize(e8, r9);
        this._cols = e8, this._rows = t5;
      }, Object.defineProperty(e7.prototype, "_isReflowEnabled", { get: function() {
        return this._hasScrollback && !this._optionsService.options.windowsMode;
      }, enumerable: true, configurable: true }), e7.prototype._reflow = function(e8, t5) {
        this._cols !== e8 && (e8 > this._cols ? this._reflowLarger(e8, t5) : this._reflowSmaller(e8, t5));
      }, e7.prototype._reflowLarger = function(e8, t5) {
        var r9 = a5.reflowLargerGetLinesToRemove(this.lines, this._cols, e8, this.ybase + this.y, this.getNullCell(n11.DEFAULT_ATTR_DATA));
        if (r9.length > 0) {
          var i9 = a5.reflowLargerCreateNewLayout(this.lines, r9);
          a5.reflowLargerApplyNewLayout(this.lines, i9.layout), this._reflowLargerAdjustViewport(e8, t5, i9.countRemoved);
        }
      }, e7.prototype._reflowLargerAdjustViewport = function(e8, t5, r9) {
        for (var i9 = this.getNullCell(n11.DEFAULT_ATTR_DATA), o10 = r9; o10-- > 0; )
          0 === this.ybase ? (this.y > 0 && this.y--, this.lines.length < t5 && this.lines.push(new n11.BufferLine(e8, i9))) : (this.ydisp === this.ybase && this.ydisp--, this.ybase--);
        this.savedY = Math.max(this.savedY - r9, 0);
      }, e7.prototype._reflowSmaller = function(e8, t5) {
        for (var r9 = this.getNullCell(n11.DEFAULT_ATTR_DATA), i9 = [], o10 = 0, s8 = this.lines.length - 1; s8 >= 0; s8--) {
          var c9 = this.lines.get(s8);
          if (!(!c9 || !c9.isWrapped && c9.getTrimmedLength() <= e8)) {
            for (var l8 = [c9]; c9.isWrapped && s8 > 0; )
              c9 = this.lines.get(--s8), l8.unshift(c9);
            var h9 = this.ybase + this.y;
            if (!(h9 >= s8 && h9 < s8 + l8.length)) {
              var u9, f6 = l8[l8.length - 1].getTrimmedLength(), _6 = a5.reflowSmallerGetNewLineLengths(l8, this._cols, e8), d8 = _6.length - l8.length;
              u9 = 0 === this.ybase && this.y !== this.lines.length - 1 ? Math.max(0, this.y - this.lines.maxLength + d8) : Math.max(0, this.lines.length - this.lines.maxLength + d8);
              for (var p10 = [], v10 = 0; v10 < d8; v10++) {
                var y6 = this.getBlankLine(n11.DEFAULT_ATTR_DATA, true);
                p10.push(y6);
              }
              p10.length > 0 && (i9.push({ start: s8 + l8.length + o10, newLines: p10 }), o10 += p10.length), l8.push.apply(l8, p10);
              var g9 = _6.length - 1, b9 = _6[g9];
              0 === b9 && (b9 = _6[--g9]);
              for (var m10 = l8.length - d8 - 1, S6 = f6; m10 >= 0; ) {
                var C9 = Math.min(S6, b9);
                if (l8[g9].copyCellsFrom(l8[m10], S6 - C9, b9 - C9, C9, true), 0 == (b9 -= C9) && (b9 = _6[--g9]), 0 == (S6 -= C9)) {
                  m10--;
                  var w5 = Math.max(m10, 0);
                  S6 = a5.getWrappedLineTrimmedLength(l8, w5, this._cols);
                }
              }
              for (v10 = 0; v10 < l8.length; v10++)
                _6[v10] < e8 && l8[v10].setCell(_6[v10], r9);
              for (var E5 = d8 - u9; E5-- > 0; )
                0 === this.ybase ? this.y < t5 - 1 ? (this.y++, this.lines.pop()) : (this.ybase++, this.ydisp++) : this.ybase < Math.min(this.lines.maxLength, this.lines.length + o10) - t5 && (this.ybase === this.ydisp && this.ydisp++, this.ybase++);
              this.savedY = Math.min(this.savedY + d8, this.ybase + t5 - 1);
            }
          }
        }
        if (i9.length > 0) {
          var L2 = [], x6 = [];
          for (v10 = 0; v10 < this.lines.length; v10++)
            x6.push(this.lines.get(v10));
          var A6 = this.lines.length, R6 = A6 - 1, k3 = 0, T9 = i9[k3];
          this.lines.length = Math.min(this.lines.maxLength, this.lines.length + o10);
          var O5 = 0;
          for (v10 = Math.min(this.lines.maxLength - 1, A6 + o10 - 1); v10 >= 0; v10--)
            if (T9 && T9.start > R6 + O5) {
              for (var D7 = T9.newLines.length - 1; D7 >= 0; D7--)
                this.lines.set(v10--, T9.newLines[D7]);
              v10++, L2.push({ index: R6 + 1, amount: T9.newLines.length }), O5 += T9.newLines.length, T9 = i9[++k3];
            } else
              this.lines.set(v10, x6[R6--]);
          var M3 = 0;
          for (v10 = L2.length - 1; v10 >= 0; v10--)
            L2[v10].index += M3, this.lines.onInsertEmitter.fire(L2[v10]), M3 += L2[v10].amount;
          var P4 = Math.max(0, A6 + o10 - this.lines.maxLength);
          P4 > 0 && this.lines.onTrimEmitter.fire(P4);
        }
      }, e7.prototype.stringIndexToBufferIndex = function(e8, t5, r9) {
        for (void 0 === r9 && (r9 = false); t5; ) {
          var i9 = this.lines.get(e8);
          if (!i9)
            return [-1, -1];
          for (var n12 = r9 ? i9.getTrimmedLength() : i9.length, o10 = 0; o10 < n12; ++o10)
            if (i9.get(o10)[s7.CHAR_DATA_WIDTH_INDEX] && (t5 -= i9.get(o10)[s7.CHAR_DATA_CHAR_INDEX].length || 1), t5 < 0)
              return [e8, o10];
          e8++;
        }
        return [e8, 0];
      }, e7.prototype.translateBufferLineToString = function(e8, t5, r9, i9) {
        void 0 === r9 && (r9 = 0);
        var n12 = this.lines.get(e8);
        return n12 ? n12.translateToString(t5, r9, i9) : "";
      }, e7.prototype.getWrappedRangeForLine = function(e8) {
        for (var t5 = e8, r9 = e8; t5 > 0 && this.lines.get(t5).isWrapped; )
          t5--;
        for (; r9 + 1 < this.lines.length && this.lines.get(r9 + 1).isWrapped; )
          r9++;
        return { first: t5, last: r9 };
      }, e7.prototype.setupTabStops = function(e8) {
        for (null != e8 ? this.tabs[e8] || (e8 = this.prevStop(e8)) : (this.tabs = {}, e8 = 0); e8 < this._cols; e8 += this._optionsService.options.tabStopWidth)
          this.tabs[e8] = true;
      }, e7.prototype.prevStop = function(e8) {
        for (null == e8 && (e8 = this.x); !this.tabs[--e8] && e8 > 0; )
          ;
        return e8 >= this._cols ? this._cols - 1 : e8 < 0 ? 0 : e8;
      }, e7.prototype.nextStop = function(e8) {
        for (null == e8 && (e8 = this.x); !this.tabs[++e8] && e8 < this._cols; )
          ;
        return e8 >= this._cols ? this._cols - 1 : e8 < 0 ? 0 : e8;
      }, e7.prototype.addMarker = function(e8) {
        var t5 = this, r9 = new c8.Marker(e8);
        return this.markers.push(r9), r9.register(this.lines.onTrim(function(e9) {
          r9.line -= e9, r9.line < 0 && r9.dispose();
        })), r9.register(this.lines.onInsert(function(e9) {
          r9.line >= e9.index && (r9.line += e9.amount);
        })), r9.register(this.lines.onDelete(function(e9) {
          r9.line >= e9.index && r9.line < e9.index + e9.amount && r9.dispose(), r9.line > e9.index && (r9.line -= e9.amount);
        })), r9.register(r9.onDispose(function() {
          return t5._removeMarker(r9);
        })), r9;
      }, e7.prototype._removeMarker = function(e8) {
        this.markers.splice(this.markers.indexOf(e8), 1);
      }, e7.prototype.iterator = function(e8, t5, r9, i9, n12) {
        return new u8(this, e8, t5, r9, i9, n12);
      }, e7;
    }();
    t4.Buffer = h8;
    var u8 = function() {
      function e7(e8, t5, r9, i9, n12, o10) {
        void 0 === r9 && (r9 = 0), void 0 === i9 && (i9 = e8.lines.length), void 0 === n12 && (n12 = 0), void 0 === o10 && (o10 = 0), this._buffer = e8, this._trimRight = t5, this._startIndex = r9, this._endIndex = i9, this._startOverscan = n12, this._endOverscan = o10, this._startIndex < 0 && (this._startIndex = 0), this._endIndex > this._buffer.lines.length && (this._endIndex = this._buffer.lines.length), this._current = this._startIndex;
      }
      return e7.prototype.hasNext = function() {
        return this._current < this._endIndex;
      }, e7.prototype.next = function() {
        var e8 = this._buffer.getWrappedRangeForLine(this._current);
        e8.first < this._startIndex - this._startOverscan && (e8.first = this._startIndex - this._startOverscan), e8.last > this._endIndex + this._endOverscan && (e8.last = this._endIndex + this._endOverscan), e8.first = Math.max(e8.first, 0), e8.last = Math.min(e8.last, this._buffer.lines.length);
        for (var t5 = "", r9 = e8.first; r9 <= e8.last; ++r9)
          t5 += this._buffer.translateBufferLineToString(r9, this._trimRight);
        return this._current = e8.last + 1, { range: e8, content: t5 };
      }, e7;
    }();
    t4.BufferStringIterator = u8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(0), n11 = function() {
      function e7(e8) {
        this._maxLength = e8, this.onDeleteEmitter = new i8.EventEmitter(), this.onInsertEmitter = new i8.EventEmitter(), this.onTrimEmitter = new i8.EventEmitter(), this._array = new Array(this._maxLength), this._startIndex = 0, this._length = 0;
      }
      return Object.defineProperty(e7.prototype, "onDelete", { get: function() {
        return this.onDeleteEmitter.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onInsert", { get: function() {
        return this.onInsertEmitter.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onTrim", { get: function() {
        return this.onTrimEmitter.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "maxLength", { get: function() {
        return this._maxLength;
      }, set: function(e8) {
        if (this._maxLength !== e8) {
          for (var t5 = new Array(e8), r9 = 0; r9 < Math.min(e8, this.length); r9++)
            t5[r9] = this._array[this._getCyclicIndex(r9)];
          this._array = t5, this._maxLength = e8, this._startIndex = 0;
        }
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "length", { get: function() {
        return this._length;
      }, set: function(e8) {
        if (e8 > this._length)
          for (var t5 = this._length; t5 < e8; t5++)
            this._array[t5] = void 0;
        this._length = e8;
      }, enumerable: true, configurable: true }), e7.prototype.get = function(e8) {
        return this._array[this._getCyclicIndex(e8)];
      }, e7.prototype.set = function(e8, t5) {
        this._array[this._getCyclicIndex(e8)] = t5;
      }, e7.prototype.push = function(e8) {
        this._array[this._getCyclicIndex(this._length)] = e8, this._length === this._maxLength ? (this._startIndex = ++this._startIndex % this._maxLength, this.onTrimEmitter.fire(1)) : this._length++;
      }, e7.prototype.recycle = function() {
        if (this._length !== this._maxLength)
          throw new Error("Can only recycle when the buffer is full");
        return this._startIndex = ++this._startIndex % this._maxLength, this.onTrimEmitter.fire(1), this._array[this._getCyclicIndex(this._length - 1)];
      }, Object.defineProperty(e7.prototype, "isFull", { get: function() {
        return this._length === this._maxLength;
      }, enumerable: true, configurable: true }), e7.prototype.pop = function() {
        return this._array[this._getCyclicIndex(this._length-- - 1)];
      }, e7.prototype.splice = function(e8, t5) {
        for (var r9 = [], i9 = 2; i9 < arguments.length; i9++)
          r9[i9 - 2] = arguments[i9];
        if (t5) {
          for (var n12 = e8; n12 < this._length - t5; n12++)
            this._array[this._getCyclicIndex(n12)] = this._array[this._getCyclicIndex(n12 + t5)];
          this._length -= t5;
        }
        for (n12 = this._length - 1; n12 >= e8; n12--)
          this._array[this._getCyclicIndex(n12 + r9.length)] = this._array[this._getCyclicIndex(n12)];
        for (n12 = 0; n12 < r9.length; n12++)
          this._array[this._getCyclicIndex(e8 + n12)] = r9[n12];
        if (this._length + r9.length > this._maxLength) {
          var o9 = this._length + r9.length - this._maxLength;
          this._startIndex += o9, this._length = this._maxLength, this.onTrimEmitter.fire(o9);
        } else
          this._length += r9.length;
      }, e7.prototype.trimStart = function(e8) {
        e8 > this._length && (e8 = this._length), this._startIndex += e8, this._length -= e8, this.onTrimEmitter.fire(e8);
      }, e7.prototype.shiftElements = function(e8, t5, r9) {
        if (!(t5 <= 0)) {
          if (e8 < 0 || e8 >= this._length)
            throw new Error("start argument out of range");
          if (e8 + r9 < 0)
            throw new Error("Cannot shift elements in list beyond index 0");
          if (r9 > 0) {
            for (var i9 = t5 - 1; i9 >= 0; i9--)
              this.set(e8 + i9 + r9, this.get(e8 + i9));
            var n12 = e8 + t5 + r9 - this._length;
            if (n12 > 0)
              for (this._length += n12; this._length > this._maxLength; )
                this._length--, this._startIndex++, this.onTrimEmitter.fire(1);
          } else
            for (i9 = 0; i9 < t5; i9++)
              this.set(e8 + i9 + r9, this.get(e8 + i9));
        }
      }, e7.prototype._getCyclicIndex = function(e8) {
        return (this._startIndex + e8) % this._maxLength;
      }, e7;
    }();
    t4.CircularList = n11;
  }, function(e6, t4, r8) {
    "use strict";
    function i8(e7, t5, r9) {
      if (t5 === e7.length - 1)
        return e7[t5].getTrimmedLength();
      var i9 = !e7[t5].hasContent(r9 - 1) && 1 === e7[t5].getWidth(r9 - 1), n11 = 2 === e7[t5 + 1].getWidth(0);
      return i9 && n11 ? r9 - 1 : r9;
    }
    Object.defineProperty(t4, "__esModule", { value: true }), t4.reflowLargerGetLinesToRemove = function(e7, t5, r9, n11, o9) {
      for (var s7 = [], a5 = 0; a5 < e7.length - 1; a5++) {
        var c8 = a5, l7 = e7.get(++c8);
        if (l7.isWrapped) {
          for (var h8 = [e7.get(a5)]; c8 < e7.length && l7.isWrapped; )
            h8.push(l7), l7 = e7.get(++c8);
          if (n11 >= a5 && n11 < c8)
            a5 += h8.length - 1;
          else {
            for (var u8 = 0, f6 = i8(h8, u8, t5), _6 = 1, d8 = 0; _6 < h8.length; ) {
              var p10 = i8(h8, _6, t5), v10 = p10 - d8, y6 = r9 - f6, g9 = Math.min(v10, y6);
              h8[u8].copyCellsFrom(h8[_6], d8, f6, g9, false), (f6 += g9) === r9 && (u8++, f6 = 0), (d8 += g9) === p10 && (_6++, d8 = 0), 0 === f6 && 0 !== u8 && 2 === h8[u8 - 1].getWidth(r9 - 1) && (h8[u8].copyCellsFrom(h8[u8 - 1], r9 - 1, f6++, 1, false), h8[u8 - 1].setCell(r9 - 1, o9));
            }
            h8[u8].replaceCells(f6, r9, o9);
            for (var b9 = 0, m10 = h8.length - 1; m10 > 0 && (m10 > u8 || 0 === h8[m10].getTrimmedLength()); m10--)
              b9++;
            b9 > 0 && (s7.push(a5 + h8.length - b9), s7.push(b9)), a5 += h8.length - 1;
          }
        }
      }
      return s7;
    }, t4.reflowLargerCreateNewLayout = function(e7, t5) {
      for (var r9 = [], i9 = 0, n11 = t5[i9], o9 = 0, s7 = 0; s7 < e7.length; s7++)
        if (n11 === s7) {
          var a5 = t5[++i9];
          e7.onDeleteEmitter.fire({ index: s7 - o9, amount: a5 }), s7 += a5 - 1, o9 += a5, n11 = t5[++i9];
        } else
          r9.push(s7);
      return { layout: r9, countRemoved: o9 };
    }, t4.reflowLargerApplyNewLayout = function(e7, t5) {
      for (var r9 = [], i9 = 0; i9 < t5.length; i9++)
        r9.push(e7.get(t5[i9]));
      for (i9 = 0; i9 < r9.length; i9++)
        e7.set(i9, r9[i9]);
      e7.length = t5.length;
    }, t4.reflowSmallerGetNewLineLengths = function(e7, t5, r9) {
      for (var n11 = [], o9 = e7.map(function(r10, n12) {
        return i8(e7, n12, t5);
      }).reduce(function(e8, t6) {
        return e8 + t6;
      }), s7 = 0, a5 = 0, c8 = 0; c8 < o9; ) {
        if (o9 - c8 < r9) {
          n11.push(o9 - c8);
          break;
        }
        s7 += r9;
        var l7 = i8(e7, a5, t5);
        s7 > l7 && (s7 -= l7, a5++);
        var h8 = 2 === e7[a5].getWidth(s7 - 1);
        h8 && s7--;
        var u8 = h8 ? r9 - 1 : r9;
        n11.push(u8), c8 += u8;
      }
      return n11;
    }, t4.getWrappedLineTrimmedLength = i8;
  }, function(e6, t4, r8) {
    "use strict";
    var i8, n11 = this && this.__extends || (i8 = function(e7, t5) {
      return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e8, t6) {
        e8.__proto__ = t6;
      } || function(e8, t6) {
        for (var r9 in t6)
          t6.hasOwnProperty(r9) && (e8[r9] = t6[r9]);
      })(e7, t5);
    }, function(e7, t5) {
      function r9() {
        this.constructor = e7;
      }
      i8(e7, t5), e7.prototype = null === t5 ? Object.create(t5) : (r9.prototype = t5.prototype, new r9());
    });
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(0), s7 = function(e7) {
      function t5(r9) {
        var i9 = e7.call(this) || this;
        return i9.line = r9, i9._id = t5._nextId++, i9.isDisposed = false, i9._onDispose = new o9.EventEmitter(), i9;
      }
      return n11(t5, e7), Object.defineProperty(t5.prototype, "id", { get: function() {
        return this._id;
      }, enumerable: true, configurable: true }), Object.defineProperty(t5.prototype, "onDispose", { get: function() {
        return this._onDispose.event;
      }, enumerable: true, configurable: true }), t5.prototype.dispose = function() {
        this.isDisposed || (this.isDisposed = true, this.line = -1, this._onDispose.fire());
      }, t5._nextId = 1, t5;
    }(r8(2).Disposable);
    t4.Marker = s7;
  }, function(e6, t4, r8) {
    "use strict";
    var i8 = this && this.__decorate || function(e7, t5, r9, i9) {
      var n12, o10 = arguments.length, s8 = o10 < 3 ? t5 : null === i9 ? i9 = Object.getOwnPropertyDescriptor(t5, r9) : i9;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
        s8 = Reflect.decorate(e7, t5, r9, i9);
      else
        for (var a6 = e7.length - 1; a6 >= 0; a6--)
          (n12 = e7[a6]) && (s8 = (o10 < 3 ? n12(s8) : o10 > 3 ? n12(t5, r9, s8) : n12(t5, r9)) || s8);
      return o10 > 3 && s8 && Object.defineProperty(t5, r9, s8), s8;
    }, n11 = this && this.__param || function(e7, t5) {
      return function(r9, i9) {
        t5(r9, i9, e7);
      };
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(4), s7 = r8(28), a5 = function() {
      function e7(e8, t5) {
        this._renderService = e8, this._charSizeService = t5;
      }
      return e7.prototype.getCoords = function(e8, t5, r9, i9, n12) {
        return s7.getCoords(e8, t5, r9, i9, this._charSizeService.hasValidSize, this._renderService.dimensions.actualCellWidth, this._renderService.dimensions.actualCellHeight, n12);
      }, e7.prototype.getRawByteCoords = function(e8, t5, r9, i9) {
        var n12 = this.getCoords(e8, t5, r9, i9);
        return s7.getRawByteCoords(n12);
      }, i8([n11(0, o9.IRenderService), n11(1, o9.ICharSizeService)], e7);
    }();
    t4.MouseService = a5;
  }, function(e6, t4, r8) {
    "use strict";
    var i8 = this && this.__decorate || function(e7, t5, r9, i9) {
      var n12, o10 = arguments.length, s8 = o10 < 3 ? t5 : null === i9 ? i9 = Object.getOwnPropertyDescriptor(t5, r9) : i9;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
        s8 = Reflect.decorate(e7, t5, r9, i9);
      else
        for (var a6 = e7.length - 1; a6 >= 0; a6--)
          (n12 = e7[a6]) && (s8 = (o10 < 3 ? n12(s8) : o10 > 3 ? n12(t5, r9, s8) : n12(t5, r9)) || s8);
      return o10 > 3 && s8 && Object.defineProperty(t5, r9, s8), s8;
    }, n11 = this && this.__param || function(e7, t5) {
      return function(r9, i9) {
        t5(r9, i9, e7);
      };
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(1), s7 = r8(0), a5 = r8(31), c8 = Object.freeze({ applicationCursorKeys: false, applicationKeypad: false, origin: false, wraparound: true }), l7 = function() {
      function e7(e8, t5, r9, i9) {
        this._scrollToBottom = e8, this._bufferService = t5, this._logService = r9, this._optionsService = i9, this.isCursorInitialized = false, this.isCursorHidden = false, this._onData = new s7.EventEmitter(), this._onUserInput = new s7.EventEmitter(), this._onBinary = new s7.EventEmitter(), this.decPrivateModes = a5.clone(c8);
      }
      return Object.defineProperty(e7.prototype, "onData", { get: function() {
        return this._onData.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onUserInput", { get: function() {
        return this._onUserInput.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onBinary", { get: function() {
        return this._onBinary.event;
      }, enumerable: true, configurable: true }), e7.prototype.reset = function() {
        this.decPrivateModes = a5.clone(c8);
      }, e7.prototype.triggerDataEvent = function(e8, t5) {
        if (void 0 === t5 && (t5 = false), !this._optionsService.options.disableStdin) {
          var r9 = this._bufferService.buffer;
          r9.ybase !== r9.ydisp && this._scrollToBottom(), t5 && this._onUserInput.fire(), this._logService.debug('sending data "' + e8 + '"', function() {
            return e8.split("").map(function(e9) {
              return e9.charCodeAt(0);
            });
          }), this._onData.fire(e8);
        }
      }, e7.prototype.triggerBinaryEvent = function(e8) {
        this._optionsService.options.disableStdin || (this._logService.debug('sending binary "' + e8 + '"', function() {
          return e8.split("").map(function(e9) {
            return e9.charCodeAt(0);
          });
        }), this._onBinary.fire(e8));
      }, i8([n11(1, o9.IBufferService), n11(2, o9.ILogService), n11(3, o9.IOptionsService)], e7);
    }();
    t4.CoreService = l7;
  }, function(e6, t4, r8) {
    "use strict";
    var i8 = this && this.__decorate || function(e7, t5, r9, i9) {
      var n12, o10 = arguments.length, s8 = o10 < 3 ? t5 : null === i9 ? i9 = Object.getOwnPropertyDescriptor(t5, r9) : i9;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
        s8 = Reflect.decorate(e7, t5, r9, i9);
      else
        for (var a6 = e7.length - 1; a6 >= 0; a6--)
          (n12 = e7[a6]) && (s8 = (o10 < 3 ? n12(s8) : o10 > 3 ? n12(t5, r9, s8) : n12(t5, r9)) || s8);
      return o10 > 3 && s8 && Object.defineProperty(t5, r9, s8), s8;
    }, n11 = this && this.__param || function(e7, t5) {
      return function(r9, i9) {
        t5(r9, i9, e7);
      };
    }, o9 = this && this.__spreadArrays || function() {
      for (var e7 = 0, t5 = 0, r9 = arguments.length; t5 < r9; t5++)
        e7 += arguments[t5].length;
      var i9 = Array(e7), n12 = 0;
      for (t5 = 0; t5 < r9; t5++)
        for (var o10 = arguments[t5], s8 = 0, a6 = o10.length; s8 < a6; s8++, n12++)
          i9[n12] = o10[s8];
      return i9;
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var s7, a5 = r8(1);
    !function(e7) {
      e7[e7.DEBUG = 0] = "DEBUG", e7[e7.INFO = 1] = "INFO", e7[e7.WARN = 2] = "WARN", e7[e7.ERROR = 3] = "ERROR", e7[e7.OFF = 4] = "OFF";
    }(s7 = t4.LogLevel || (t4.LogLevel = {}));
    var c8 = { debug: s7.DEBUG, info: s7.INFO, warn: s7.WARN, error: s7.ERROR, off: s7.OFF }, l7 = function() {
      function e7(e8) {
        var t5 = this;
        this._optionsService = e8, this._updateLogLevel(), this._optionsService.onOptionChange(function(e9) {
          "logLevel" === e9 && t5._updateLogLevel();
        });
      }
      return e7.prototype._updateLogLevel = function() {
        this._logLevel = c8[this._optionsService.options.logLevel];
      }, e7.prototype._evalLazyOptionalParams = function(e8) {
        for (var t5 = 0; t5 < e8.length; t5++)
          "function" == typeof e8[t5] && (e8[t5] = e8[t5]());
      }, e7.prototype._log = function(e8, t5, r9) {
        this._evalLazyOptionalParams(r9), e8.call.apply(e8, o9([console, "xterm.js: " + t5], r9));
      }, e7.prototype.debug = function(e8) {
        for (var t5 = [], r9 = 1; r9 < arguments.length; r9++)
          t5[r9 - 1] = arguments[r9];
        this._logLevel <= s7.DEBUG && this._log(console.log, e8, t5);
      }, e7.prototype.info = function(e8) {
        for (var t5 = [], r9 = 1; r9 < arguments.length; r9++)
          t5[r9 - 1] = arguments[r9];
        this._logLevel <= s7.INFO && this._log(console.info, e8, t5);
      }, e7.prototype.warn = function(e8) {
        for (var t5 = [], r9 = 1; r9 < arguments.length; r9++)
          t5[r9 - 1] = arguments[r9];
        this._logLevel <= s7.WARN && this._log(console.warn, e8, t5);
      }, e7.prototype.error = function(e8) {
        for (var t5 = [], r9 = 1; r9 < arguments.length; r9++)
          t5[r9 - 1] = arguments[r9];
        this._logLevel <= s7.ERROR && this._log(console.error, e8, t5);
      }, i8([n11(0, a5.IOptionsService)], e7);
    }();
    t4.LogService = l7;
  }, function(e6, t4, r8) {
    "use strict";
    var i8 = this && this.__decorate || function(e7, t5, r9, i9) {
      var n12, o10 = arguments.length, s8 = o10 < 3 ? t5 : null === i9 ? i9 = Object.getOwnPropertyDescriptor(t5, r9) : i9;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
        s8 = Reflect.decorate(e7, t5, r9, i9);
      else
        for (var a5 = e7.length - 1; a5 >= 0; a5--)
          (n12 = e7[a5]) && (s8 = (o10 < 3 ? n12(s8) : o10 > 3 ? n12(t5, r9, s8) : n12(t5, r9)) || s8);
      return o10 > 3 && s8 && Object.defineProperty(t5, r9, s8), s8;
    }, n11 = this && this.__param || function(e7, t5) {
      return function(r9, i9) {
        t5(r9, i9, e7);
      };
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(1), s7 = function() {
      function e7(e8) {
        this._bufferService = e8, this.clearRange();
      }
      return Object.defineProperty(e7.prototype, "start", { get: function() {
        return this._start;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "end", { get: function() {
        return this._end;
      }, enumerable: true, configurable: true }), e7.prototype.clearRange = function() {
        this._start = this._bufferService.buffer.y, this._end = this._bufferService.buffer.y;
      }, e7.prototype.markDirty = function(e8) {
        e8 < this._start ? this._start = e8 : e8 > this._end && (this._end = e8);
      }, e7.prototype.markRangeDirty = function(e8, t5) {
        if (e8 > t5) {
          var r9 = e8;
          e8 = t5, t5 = r9;
        }
        e8 < this._start && (this._start = e8), t5 > this._end && (this._end = t5);
      }, e7.prototype.markAllDirty = function() {
        this.markRangeDirty(0, this._bufferService.rows - 1);
      }, i8([n11(0, o9.IBufferService)], e7);
    }();
    t4.DirtyRowService = s7;
  }, function(e6, t4, r8) {
    "use strict";
    var i8 = this && this.__spreadArrays || function() {
      for (var e7 = 0, t5 = 0, r9 = arguments.length; t5 < r9; t5++)
        e7 += arguments[t5].length;
      var i9 = Array(e7), n12 = 0;
      for (t5 = 0; t5 < r9; t5++)
        for (var o10 = arguments[t5], s8 = 0, a6 = o10.length; s8 < a6; s8++, n12++)
          i9[n12] = o10[s8];
      return i9;
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var n11 = r8(1), o9 = r8(14), s7 = function() {
      function e7() {
        for (var e8 = [], t5 = 0; t5 < arguments.length; t5++)
          e8[t5] = arguments[t5];
        this._entries = /* @__PURE__ */ new Map();
        for (var r9 = 0, i9 = e8; r9 < i9.length; r9++) {
          var n12 = i9[r9], o10 = n12[0], s8 = n12[1];
          this.set(o10, s8);
        }
      }
      return e7.prototype.set = function(e8, t5) {
        var r9 = this._entries.get(e8);
        return this._entries.set(e8, t5), r9;
      }, e7.prototype.forEach = function(e8) {
        this._entries.forEach(function(t5, r9) {
          return e8(r9, t5);
        });
      }, e7.prototype.has = function(e8) {
        return this._entries.has(e8);
      }, e7.prototype.get = function(e8) {
        return this._entries.get(e8);
      }, e7;
    }();
    t4.ServiceCollection = s7;
    var a5 = function() {
      function e7() {
        this._services = new s7(), this._services.set(n11.IInstantiationService, this);
      }
      return e7.prototype.setService = function(e8, t5) {
        this._services.set(e8, t5);
      }, e7.prototype.getService = function(e8) {
        return this._services.get(e8);
      }, e7.prototype.createInstance = function(e8) {
        for (var t5 = [], r9 = 1; r9 < arguments.length; r9++)
          t5[r9 - 1] = arguments[r9];
        for (var n12 = o9.getServiceDependencies(e8).sort(function(e9, t6) {
          return e9.index - t6.index;
        }), s8 = [], a6 = 0, c8 = n12; a6 < c8.length; a6++) {
          var l7 = c8[a6], h8 = this._services.get(l7.id);
          if (!h8)
            throw new Error("[createInstance] " + e8.name + " depends on UNKNOWN service " + l7.id + ".");
          s8.push(h8);
        }
        var u8 = n12.length > 0 ? n12[0].index : t5.length;
        if (t5.length !== u8)
          throw new Error("[createInstance] First service dependency of " + e8.name + " at position " + (u8 + 1) + " conflicts with " + t5.length + " static arguments");
        return new (e8.bind.apply(e8, i8([void 0], i8(t5, s8))))();
      }, e7;
    }();
    t4.InstantiationService = a5;
  }, function(e6, t4, r8) {
    "use strict";
    var i8 = this && this.__decorate || function(e7, t5, r9, i9) {
      var n12, o10 = arguments.length, s8 = o10 < 3 ? t5 : null === i9 ? i9 = Object.getOwnPropertyDescriptor(t5, r9) : i9;
      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
        s8 = Reflect.decorate(e7, t5, r9, i9);
      else
        for (var a6 = e7.length - 1; a6 >= 0; a6--)
          (n12 = e7[a6]) && (s8 = (o10 < 3 ? n12(s8) : o10 > 3 ? n12(t5, r9, s8) : n12(t5, r9)) || s8);
      return o10 > 3 && s8 && Object.defineProperty(t5, r9, s8), s8;
    }, n11 = this && this.__param || function(e7, t5) {
      return function(r9, i9) {
        t5(r9, i9, e7);
      };
    };
    Object.defineProperty(t4, "__esModule", { value: true });
    var o9 = r8(1), s7 = r8(0), a5 = { NONE: { events: 0, restrict: function() {
      return false;
    } }, X10: { events: 1, restrict: function(e7) {
      return 4 !== e7.button && 1 === e7.action && (e7.ctrl = false, e7.alt = false, e7.shift = false, true);
    } }, VT200: { events: 19, restrict: function(e7) {
      return 32 !== e7.action;
    } }, DRAG: { events: 23, restrict: function(e7) {
      return 32 !== e7.action || 3 !== e7.button;
    } }, ANY: { events: 31, restrict: function(e7) {
      return true;
    } } };
    function c8(e7, t5) {
      var r9 = (e7.ctrl ? 16 : 0) | (e7.shift ? 4 : 0) | (e7.alt ? 8 : 0);
      return 4 === e7.button ? (r9 |= 64, r9 |= e7.action) : (r9 |= 3 & e7.button, 4 & e7.button && (r9 |= 64), 8 & e7.button && (r9 |= 128), 32 === e7.action ? r9 |= 32 : 0 !== e7.action || t5 || (r9 |= 3)), r9;
    }
    var l7 = String.fromCharCode, h8 = { DEFAULT: function(e7) {
      var t5 = [c8(e7, false) + 32, e7.col + 32, e7.row + 32];
      return t5[0] > 255 || t5[1] > 255 || t5[2] > 255 ? "" : "\x1B[M" + l7(t5[0]) + l7(t5[1]) + l7(t5[2]);
    }, SGR: function(e7) {
      var t5 = 0 === e7.action && 4 !== e7.button ? "m" : "M";
      return "\x1B[<" + c8(e7, true) + ";" + e7.col + ";" + e7.row + t5;
    } }, u8 = function() {
      function e7(e8, t5) {
        var r9 = this;
        this._bufferService = e8, this._coreService = t5, this._protocols = {}, this._encodings = {}, this._activeProtocol = "", this._activeEncoding = "", this._onProtocolChange = new s7.EventEmitter(), this._lastEvent = null, Object.keys(a5).forEach(function(e9) {
          return r9.addProtocol(e9, a5[e9]);
        }), Object.keys(h8).forEach(function(e9) {
          return r9.addEncoding(e9, h8[e9]);
        }), this.reset();
      }
      return e7.prototype.addProtocol = function(e8, t5) {
        this._protocols[e8] = t5;
      }, e7.prototype.addEncoding = function(e8, t5) {
        this._encodings[e8] = t5;
      }, Object.defineProperty(e7.prototype, "activeProtocol", { get: function() {
        return this._activeProtocol;
      }, set: function(e8) {
        if (!this._protocols[e8])
          throw new Error('unknown protocol "' + e8 + '"');
        this._activeProtocol = e8, this._onProtocolChange.fire(this._protocols[e8].events);
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "activeEncoding", { get: function() {
        return this._activeEncoding;
      }, set: function(e8) {
        if (!this._encodings[e8])
          throw new Error('unknown encoding "' + e8 + '"');
        this._activeEncoding = e8;
      }, enumerable: true, configurable: true }), e7.prototype.reset = function() {
        this.activeProtocol = "NONE", this.activeEncoding = "DEFAULT", this._lastEvent = null;
      }, Object.defineProperty(e7.prototype, "onProtocolChange", { get: function() {
        return this._onProtocolChange.event;
      }, enumerable: true, configurable: true }), e7.prototype.triggerMouseEvent = function(e8) {
        if (e8.col < 0 || e8.col >= this._bufferService.cols || e8.row < 0 || e8.row >= this._bufferService.rows)
          return false;
        if (4 === e8.button && 32 === e8.action)
          return false;
        if (3 === e8.button && 32 !== e8.action)
          return false;
        if (4 !== e8.button && (2 === e8.action || 3 === e8.action))
          return false;
        if (e8.col++, e8.row++, 32 === e8.action && this._lastEvent && this._compareEvents(this._lastEvent, e8))
          return false;
        if (!this._protocols[this._activeProtocol].restrict(e8))
          return false;
        var t5 = this._encodings[this._activeEncoding](e8);
        return t5 && ("DEFAULT" === this._activeEncoding ? this._coreService.triggerBinaryEvent(t5) : this._coreService.triggerDataEvent(t5, true)), this._lastEvent = e8, true;
      }, e7.prototype.explainEvents = function(e8) {
        return { down: !!(1 & e8), up: !!(2 & e8), drag: !!(4 & e8), move: !!(8 & e8), wheel: !!(16 & e8) };
      }, e7.prototype._compareEvents = function(e8, t5) {
        return e8.col === t5.col && e8.row === t5.row && e8.button === t5.button && e8.action === t5.action && e8.ctrl === t5.ctrl && e8.alt === t5.alt && e8.shift === t5.shift;
      }, i8([n11(0, o9.IBufferService), n11(1, o9.ICoreService)], e7);
    }();
    t4.CoreMouseService = u8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = function() {
      function e7(e8) {
        this._action = e8, this._writeBuffer = [], this._callbacks = [], this._pendingData = 0, this._bufferOffset = 0;
      }
      return e7.prototype.writeSync = function(e8) {
        if (this._writeBuffer.length) {
          for (var t5 = this._bufferOffset; t5 < this._writeBuffer.length; ++t5) {
            var r9 = this._writeBuffer[t5], i9 = this._callbacks[t5];
            this._action(r9), i9 && i9();
          }
          this._writeBuffer = [], this._callbacks = [], this._pendingData = 0, this._bufferOffset = 2147483647;
        }
        this._action(e8);
      }, e7.prototype.write = function(e8, t5) {
        var r9 = this;
        if (this._pendingData > 5e7)
          throw new Error("write data discarded, use flow control to avoid losing data");
        this._writeBuffer.length || (this._bufferOffset = 0, setTimeout(function() {
          return r9._innerWrite();
        })), this._pendingData += e8.length, this._writeBuffer.push(e8), this._callbacks.push(t5);
      }, e7.prototype._innerWrite = function() {
        for (var e8 = this, t5 = Date.now(); this._writeBuffer.length > this._bufferOffset; ) {
          var r9 = this._writeBuffer[this._bufferOffset], i9 = this._callbacks[this._bufferOffset];
          if (this._bufferOffset++, this._action(r9), this._pendingData -= r9.length, i9 && i9(), Date.now() - t5 >= 12)
            break;
        }
        this._writeBuffer.length > this._bufferOffset ? (this._bufferOffset > 50 && (this._writeBuffer = this._writeBuffer.slice(this._bufferOffset), this._callbacks = this._callbacks.slice(this._bufferOffset), this._bufferOffset = 0), setTimeout(function() {
          return e8._innerWrite();
        }, 0)) : (this._writeBuffer = [], this._callbacks = [], this._pendingData = 0, this._bufferOffset = 0);
      }, e7;
    }();
    t4.WriteBuffer = i8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(0), n11 = function() {
      function e7(e8) {
        this._bufferService = e8, this._linkProviders = [], this._linkCacheDisposables = [], this._onLinkHover = new i8.EventEmitter(), this._onLinkLeave = new i8.EventEmitter();
      }
      return Object.defineProperty(e7.prototype, "onLinkHover", { get: function() {
        return this._onLinkHover.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "onLinkLeave", { get: function() {
        return this._onLinkLeave.event;
      }, enumerable: true, configurable: true }), e7.prototype.registerLinkProvider = function(e8) {
        var t5 = this;
        return this._linkProviders.push(e8), { dispose: function() {
          var r9 = t5._linkProviders.indexOf(e8);
          -1 !== r9 && t5._linkProviders.splice(r9, 1);
        } };
      }, e7.prototype.attachToDom = function(e8, t5, r9) {
        this._element = e8, this._mouseService = t5, this._renderService = r9, this._element.addEventListener("mousemove", this._onMouseMove.bind(this)), this._element.addEventListener("click", this._onMouseDown.bind(this));
      }, e7.prototype._onMouseMove = function(e8) {
        if (this._lastMouseEvent = e8, this._element && this._mouseService) {
          var t5 = this._positionFromMouseEvent(e8, this._element, this._mouseService);
          t5 && (this._lastBufferCell && t5.x === this._lastBufferCell.x && t5.y === this._lastBufferCell.y || (this._onHover(t5), this._lastBufferCell = t5));
        }
      }, e7.prototype._onHover = function(e8) {
        this._currentLink ? this._linkAtPosition(this._currentLink, e8) || (this._clearCurrentLink(), this._askForLink(e8)) : this._askForLink(e8);
      }, e7.prototype._askForLink = function(e8) {
        var t5 = this, r9 = /* @__PURE__ */ new Map(), i9 = false;
        this._linkProviders.forEach(function(n12, o9) {
          n12.provideLink(e8, function(e9) {
            r9.set(o9, e9);
            for (var n13 = false, s7 = 0; s7 < o9; s7++)
              r9.has(s7) && !r9.get(s7) || (n13 = true);
            if (!n13 && e9 && (i9 = true, t5._handleNewLink(e9)), r9.size === t5._linkProviders.length && !i9)
              for (s7 = 0; s7 < r9.size; s7++) {
                var a5 = r9.get(s7);
                if (a5) {
                  t5._handleNewLink(a5);
                  break;
                }
              }
          });
        });
      }, e7.prototype._onMouseDown = function(e8) {
        if (this._element && this._mouseService && this._currentLink) {
          var t5 = this._positionFromMouseEvent(e8, this._element, this._mouseService);
          t5 && this._linkAtPosition(this._currentLink, t5) && this._currentLink.activate(e8, this._currentLink.text);
        }
      }, e7.prototype._clearCurrentLink = function(e8, t5) {
        this._element && this._currentLink && this._lastMouseEvent && (!e8 || !t5 || this._currentLink.range.start.y >= e8 && this._currentLink.range.end.y <= t5) && (this._linkLeave(this._element, this._currentLink, this._lastMouseEvent), this._currentLink = void 0, this._linkCacheDisposables.forEach(function(e9) {
          return e9.dispose();
        }), this._linkCacheDisposables = []);
      }, e7.prototype._handleNewLink = function(e8) {
        var t5 = this;
        if (this._element && this._lastMouseEvent && this._mouseService) {
          var r9 = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService);
          r9 && this._linkAtPosition(e8, r9) && (this._currentLink = e8, this._linkHover(this._element, e8, this._lastMouseEvent), this._renderService && this._linkCacheDisposables.push(this._renderService.onRender(function(e9) {
            t5._clearCurrentLink(e9.start + 1 + t5._bufferService.buffer.ydisp, e9.end + 1 + t5._bufferService.buffer.ydisp);
          })));
        }
      }, e7.prototype._linkHover = function(e8, t5, r9) {
        var i9 = t5.range, n12 = this._bufferService.buffer.ydisp;
        this._onLinkHover.fire(this._createLinkHoverEvent(i9.start.x - 1, i9.start.y - n12 - 1, i9.end.x, i9.end.y - n12 - 1, void 0)), e8.classList.add("xterm-cursor-pointer"), t5.hover && t5.hover(r9, t5.text);
      }, e7.prototype._linkLeave = function(e8, t5, r9) {
        var i9 = t5.range, n12 = this._bufferService.buffer.ydisp;
        this._onLinkLeave.fire(this._createLinkHoverEvent(i9.start.x - 1, i9.start.y - n12 - 1, i9.end.x, i9.end.y - n12 - 1, void 0)), e8.classList.remove("xterm-cursor-pointer"), t5.leave && t5.leave(r9, t5.text);
      }, e7.prototype._linkAtPosition = function(e8, t5) {
        var r9 = e8.range.start.y === e8.range.end.y, i9 = e8.range.start.y < t5.y, n12 = e8.range.end.y > t5.y;
        return (r9 && e8.range.start.x <= t5.x && e8.range.end.x >= t5.x || i9 && e8.range.end.x >= t5.x || n12 && e8.range.start.x <= t5.x || i9 && n12) && e8.range.start.y <= t5.y && e8.range.end.y >= t5.y;
      }, e7.prototype._positionFromMouseEvent = function(e8, t5, r9) {
        var i9 = r9.getCoords(e8, t5, this._bufferService.cols, this._bufferService.rows);
        if (i9)
          return { x: i9[0], y: i9[1] + this._bufferService.buffer.ydisp };
      }, e7.prototype._createLinkHoverEvent = function(e8, t5, r9, i9, n12) {
        return { x1: e8, y1: t5, x2: r9, y2: i9, cols: this._bufferService.cols, fg: n12 };
      }, e7;
    }();
    t4.Linkifier2 = n11;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = function() {
      function e7(e8) {
        this._textarea = e8;
      }
      return Object.defineProperty(e7.prototype, "isFocused", { get: function() {
        return document.activeElement === this._textarea && document.hasFocus();
      }, enumerable: true, configurable: true }), e7;
    }();
    t4.CoreBrowserService = i8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = r8(0), n11 = r8(79), o9 = function() {
      function e7() {
        this._providers = /* @__PURE__ */ Object.create(null), this._active = "", this._onChange = new i8.EventEmitter();
        var e8 = new n11.UnicodeV6();
        this.register(e8), this._active = e8.version, this._activeProvider = e8;
      }
      return Object.defineProperty(e7.prototype, "onChange", { get: function() {
        return this._onChange.event;
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "versions", { get: function() {
        return Object.keys(this._providers);
      }, enumerable: true, configurable: true }), Object.defineProperty(e7.prototype, "activeVersion", { get: function() {
        return this._active;
      }, set: function(e8) {
        if (!this._providers[e8])
          throw new Error('unknown Unicode version "' + e8 + '"');
        this._active = e8, this._activeProvider = this._providers[e8], this._onChange.fire(e8);
      }, enumerable: true, configurable: true }), e7.prototype.register = function(e8) {
        this._providers[e8.version] = e8;
      }, e7.prototype.wcwidth = function(e8) {
        return this._activeProvider.wcwidth(e8);
      }, e7.prototype.getStringCellWidth = function(e8) {
        for (var t5 = 0, r9 = e8.length, i9 = 0; i9 < r9; ++i9) {
          var n12 = e8.charCodeAt(i9);
          if (55296 <= n12 && n12 <= 56319) {
            if (++i9 >= r9)
              return t5 + this.wcwidth(n12);
            var o10 = e8.charCodeAt(i9);
            56320 <= o10 && o10 <= 57343 ? n12 = 1024 * (n12 - 55296) + o10 - 56320 + 65536 : t5 += this.wcwidth(o10);
          }
          t5 += this.wcwidth(n12);
        }
        return t5;
      }, e7;
    }();
    t4.UnicodeService = o9;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8, n11 = r8(15), o9 = [[768, 879], [1155, 1158], [1160, 1161], [1425, 1469], [1471, 1471], [1473, 1474], [1476, 1477], [1479, 1479], [1536, 1539], [1552, 1557], [1611, 1630], [1648, 1648], [1750, 1764], [1767, 1768], [1770, 1773], [1807, 1807], [1809, 1809], [1840, 1866], [1958, 1968], [2027, 2035], [2305, 2306], [2364, 2364], [2369, 2376], [2381, 2381], [2385, 2388], [2402, 2403], [2433, 2433], [2492, 2492], [2497, 2500], [2509, 2509], [2530, 2531], [2561, 2562], [2620, 2620], [2625, 2626], [2631, 2632], [2635, 2637], [2672, 2673], [2689, 2690], [2748, 2748], [2753, 2757], [2759, 2760], [2765, 2765], [2786, 2787], [2817, 2817], [2876, 2876], [2879, 2879], [2881, 2883], [2893, 2893], [2902, 2902], [2946, 2946], [3008, 3008], [3021, 3021], [3134, 3136], [3142, 3144], [3146, 3149], [3157, 3158], [3260, 3260], [3263, 3263], [3270, 3270], [3276, 3277], [3298, 3299], [3393, 3395], [3405, 3405], [3530, 3530], [3538, 3540], [3542, 3542], [3633, 3633], [3636, 3642], [3655, 3662], [3761, 3761], [3764, 3769], [3771, 3772], [3784, 3789], [3864, 3865], [3893, 3893], [3895, 3895], [3897, 3897], [3953, 3966], [3968, 3972], [3974, 3975], [3984, 3991], [3993, 4028], [4038, 4038], [4141, 4144], [4146, 4146], [4150, 4151], [4153, 4153], [4184, 4185], [4448, 4607], [4959, 4959], [5906, 5908], [5938, 5940], [5970, 5971], [6002, 6003], [6068, 6069], [6071, 6077], [6086, 6086], [6089, 6099], [6109, 6109], [6155, 6157], [6313, 6313], [6432, 6434], [6439, 6440], [6450, 6450], [6457, 6459], [6679, 6680], [6912, 6915], [6964, 6964], [6966, 6970], [6972, 6972], [6978, 6978], [7019, 7027], [7616, 7626], [7678, 7679], [8203, 8207], [8234, 8238], [8288, 8291], [8298, 8303], [8400, 8431], [12330, 12335], [12441, 12442], [43014, 43014], [43019, 43019], [43045, 43046], [64286, 64286], [65024, 65039], [65056, 65059], [65279, 65279], [65529, 65531]], s7 = [[68097, 68099], [68101, 68102], [68108, 68111], [68152, 68154], [68159, 68159], [119143, 119145], [119155, 119170], [119173, 119179], [119210, 119213], [119362, 119364], [917505, 917505], [917536, 917631], [917760, 917999]], a5 = function() {
      function e7() {
        if (this.version = "6", !i8) {
          i8 = new Uint8Array(65536), n11.fill(i8, 1), i8[0] = 0, n11.fill(i8, 0, 1, 32), n11.fill(i8, 0, 127, 160), n11.fill(i8, 2, 4352, 4448), i8[9001] = 2, i8[9002] = 2, n11.fill(i8, 2, 11904, 42192), i8[12351] = 1, n11.fill(i8, 2, 44032, 55204), n11.fill(i8, 2, 63744, 64256), n11.fill(i8, 2, 65040, 65050), n11.fill(i8, 2, 65072, 65136), n11.fill(i8, 2, 65280, 65377), n11.fill(i8, 2, 65504, 65511);
          for (var e8 = 0; e8 < o9.length; ++e8)
            n11.fill(i8, 0, o9[e8][0], o9[e8][1] + 1);
        }
      }
      return e7.prototype.wcwidth = function(e8) {
        return e8 < 32 ? 0 : e8 < 127 ? 1 : e8 < 65536 ? i8[e8] : function(e9, t5) {
          var r9, i9 = 0, n12 = t5.length - 1;
          if (e9 < t5[0][0] || e9 > t5[n12][1])
            return false;
          for (; n12 >= i9; )
            if (e9 > t5[r9 = i9 + n12 >> 1][1])
              i9 = r9 + 1;
            else {
              if (!(e9 < t5[r9][0]))
                return true;
              n12 = r9 - 1;
            }
          return false;
        }(e8, s7) ? 0 : e8 >= 131072 && e8 <= 196605 || e8 >= 196608 && e8 <= 262141 ? 2 : 1;
      }, e7;
    }();
    t4.UnicodeV6 = a5;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = function() {
      function e7() {
        this.charsets = [], this.glevel = 0;
      }
      return e7.prototype.reset = function() {
        this.charset = void 0, this.charsets = [], this.glevel = 0;
      }, e7.prototype.setgLevel = function(e8) {
        this.glevel = e8, this.charset = this.charsets[e8];
      }, e7.prototype.setgCharset = function(e8, t5) {
        this.charsets[e8] = t5, this.glevel === e8 && (this.charset = t5);
      }, e7;
    }();
    t4.CharsetService = i8;
  }, function(e6, t4, r8) {
    "use strict";
    Object.defineProperty(t4, "__esModule", { value: true });
    var i8 = function() {
      function e7() {
        this._addons = [];
      }
      return e7.prototype.dispose = function() {
        for (var e8 = this._addons.length - 1; e8 >= 0; e8--)
          this._addons[e8].instance.dispose();
      }, e7.prototype.loadAddon = function(e8, t5) {
        var r9 = this, i9 = { instance: t5, dispose: t5.dispose, isDisposed: false };
        this._addons.push(i9), t5.dispose = function() {
          return r9._wrappedAddonDispose(i9);
        }, t5.activate(e8);
      }, e7.prototype._wrappedAddonDispose = function(e8) {
        if (!e8.isDisposed) {
          for (var t5 = -1, r9 = 0; r9 < this._addons.length; r9++)
            if (this._addons[r9] === e8) {
              t5 = r9;
              break;
            }
          if (-1 === t5)
            throw new Error("Could not dispose an addon that has not been loaded");
          e8.isDisposed = true, e8.dispose.apply(e8.instance), this._addons.splice(t5, 1);
        }
      }, e7;
    }();
    t4.AddonManager = i8;
  }]);
}, function(e5, t3, r7) {
  "use strict";
  var i8 = r7(30), n11 = r7(26);
  i8({ target: "Array", proto: true, forced: [].forEach != n11 }, { forEach: n11 });
}, function(e5, t3, r7) {
  var i8 = r7(1), n11 = r7(10).f, o9 = r7(6), s7 = r7(34), a5 = r7(9), c8 = r7(39), l7 = r7(49);
  e5.exports = function(e6, t4) {
    var r8, h8, u8, f6, _6, d8 = e6.target, p10 = e6.global, v10 = e6.stat;
    if (r8 = p10 ? i8 : v10 ? i8[d8] || a5(d8, {}) : (i8[d8] || {}).prototype)
      for (h8 in t4) {
        if (f6 = t4[h8], u8 = e6.noTargetGet ? (_6 = n11(r8, h8)) && _6.value : r8[h8], !l7(p10 ? h8 : d8 + (v10 ? "." : "#") + h8, e6.forced) && void 0 !== u8) {
          if (typeof f6 == typeof u8)
            continue;
          c8(f6, u8);
        }
        (e6.sham || u8 && u8.sham) && o9(f6, "sham", true), s7(r8, h8, f6, e6);
      }
  };
}, function(e5, t3) {
  var r7;
  r7 = function() {
    return this;
  }();
  try {
    r7 = r7 || new Function("return this")();
  } catch (e6) {
    "object" == typeof window && (r7 = window);
  }
  e5.exports = r7;
}, function(e5, t3, r7) {
  "use strict";
  var i8 = {}.propertyIsEnumerable, n11 = Object.getOwnPropertyDescriptor, o9 = n11 && !i8.call({ 1: 2 }, 1);
  t3.f = o9 ? function(e6) {
    var t4 = n11(this, e6);
    return !!t4 && t4.enumerable;
  } : i8;
}, function(e5, t3, r7) {
  var i8 = r7(1), n11 = r7(5), o9 = i8.document, s7 = n11(o9) && n11(o9.createElement);
  e5.exports = function(e6) {
    return s7 ? o9.createElement(e6) : {};
  };
}, function(e5, t3, r7) {
  var i8 = r7(1), n11 = r7(6), o9 = r7(3), s7 = r7(9), a5 = r7(19), c8 = r7(35), l7 = c8.get, h8 = c8.enforce, u8 = String(String).split("String");
  (e5.exports = function(e6, t4, r8, a6) {
    var c9 = !!a6 && !!a6.unsafe, l8 = !!a6 && !!a6.enumerable, f6 = !!a6 && !!a6.noTargetGet;
    "function" == typeof r8 && ("string" != typeof t4 || o9(r8, "name") || n11(r8, "name", t4), h8(r8).source = u8.join("string" == typeof t4 ? t4 : "")), e6 !== i8 ? (c9 ? !f6 && e6[t4] && (l8 = true) : delete e6[t4], l8 ? e6[t4] = r8 : n11(e6, t4, r8)) : l8 ? e6[t4] = r8 : s7(t4, r8);
  })(Function.prototype, "toString", function() {
    return "function" == typeof this && l7(this).source || a5(this);
  });
}, function(e5, t3, r7) {
  var i8, n11, o9, s7 = r7(36), a5 = r7(1), c8 = r7(5), l7 = r7(6), h8 = r7(3), u8 = r7(37), f6 = r7(23), _6 = a5.WeakMap;
  if (s7) {
    var d8 = new _6(), p10 = d8.get, v10 = d8.has, y6 = d8.set;
    i8 = function(e6, t4) {
      return y6.call(d8, e6, t4), t4;
    }, n11 = function(e6) {
      return p10.call(d8, e6) || {};
    }, o9 = function(e6) {
      return v10.call(d8, e6);
    };
  } else {
    var g9 = u8("state");
    f6[g9] = true, i8 = function(e6, t4) {
      return l7(e6, g9, t4), t4;
    }, n11 = function(e6) {
      return h8(e6, g9) ? e6[g9] : {};
    }, o9 = function(e6) {
      return h8(e6, g9);
    };
  }
  e5.exports = { set: i8, get: n11, has: o9, enforce: function(e6) {
    return o9(e6) ? n11(e6) : i8(e6, {});
  }, getterFor: function(e6) {
    return function(t4) {
      var r8;
      if (!c8(t4) || (r8 = n11(t4)).type !== e6)
        throw TypeError("Incompatible receiver, " + e6 + " required");
      return r8;
    };
  } };
}, function(e5, t3, r7) {
  var i8 = r7(1), n11 = r7(19), o9 = i8.WeakMap;
  e5.exports = "function" == typeof o9 && /native code/.test(n11(o9));
}, function(e5, t3, r7) {
  var i8 = r7(21), n11 = r7(22), o9 = i8("keys");
  e5.exports = function(e6) {
    return o9[e6] || (o9[e6] = n11(e6));
  };
}, function(e5, t3) {
  e5.exports = false;
}, function(e5, t3, r7) {
  var i8 = r7(3), n11 = r7(40), o9 = r7(10), s7 = r7(17);
  e5.exports = function(e6, t4) {
    for (var r8 = n11(t4), a5 = s7.f, c8 = o9.f, l7 = 0; l7 < r8.length; l7++) {
      var h8 = r8[l7];
      i8(e6, h8) || a5(e6, h8, c8(t4, h8));
    }
  };
}, function(e5, t3, r7) {
  var i8 = r7(41), n11 = r7(43), o9 = r7(48), s7 = r7(18);
  e5.exports = i8("Reflect", "ownKeys") || function(e6) {
    var t4 = n11.f(s7(e6)), r8 = o9.f;
    return r8 ? t4.concat(r8(e6)) : t4;
  };
}, function(e5, t3, r7) {
  var i8 = r7(42), n11 = r7(1), o9 = function(e6) {
    return "function" == typeof e6 ? e6 : void 0;
  };
  e5.exports = function(e6, t4) {
    return arguments.length < 2 ? o9(i8[e6]) || o9(n11[e6]) : i8[e6] && i8[e6][t4] || n11[e6] && n11[e6][t4];
  };
}, function(e5, t3, r7) {
  var i8 = r7(1);
  e5.exports = i8;
}, function(e5, t3, r7) {
  var i8 = r7(44), n11 = r7(47).concat("length", "prototype");
  t3.f = Object.getOwnPropertyNames || function(e6) {
    return i8(e6, n11);
  };
}, function(e5, t3, r7) {
  var i8 = r7(3), n11 = r7(8), o9 = r7(45).indexOf, s7 = r7(23);
  e5.exports = function(e6, t4) {
    var r8, a5 = n11(e6), c8 = 0, l7 = [];
    for (r8 in a5)
      !i8(s7, r8) && i8(a5, r8) && l7.push(r8);
    for (; t4.length > c8; )
      i8(a5, r8 = t4[c8++]) && (~o9(l7, r8) || l7.push(r8));
    return l7;
  };
}, function(e5, t3, r7) {
  var i8 = r7(8), n11 = r7(24), o9 = r7(46), s7 = function(e6) {
    return function(t4, r8, s8) {
      var a5, c8 = i8(t4), l7 = n11(c8.length), h8 = o9(s8, l7);
      if (e6 && r8 != r8) {
        for (; l7 > h8; )
          if ((a5 = c8[h8++]) != a5)
            return true;
      } else
        for (; l7 > h8; h8++)
          if ((e6 || h8 in c8) && c8[h8] === r8)
            return e6 || h8 || 0;
      return !e6 && -1;
    };
  };
  e5.exports = { includes: s7(true), indexOf: s7(false) };
}, function(e5, t3, r7) {
  var i8 = r7(25), n11 = Math.max, o9 = Math.min;
  e5.exports = function(e6, t4) {
    var r8 = i8(e6);
    return r8 < 0 ? n11(r8 + t4, 0) : o9(r8, t4);
  };
}, function(e5, t3) {
  e5.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
}, function(e5, t3) {
  t3.f = Object.getOwnPropertySymbols;
}, function(e5, t3, r7) {
  var i8 = r7(2), n11 = /#|\.prototype\./, o9 = function(e6, t4) {
    var r8 = a5[s7(e6)];
    return r8 == l7 || r8 != c8 && ("function" == typeof t4 ? i8(t4) : !!t4);
  }, s7 = o9.normalize = function(e6) {
    return String(e6).replace(n11, ".").toLowerCase();
  }, a5 = o9.data = {}, c8 = o9.NATIVE = "N", l7 = o9.POLYFILL = "P";
  e5.exports = o9;
}, function(e5, t3, r7) {
  var i8 = r7(51), n11 = r7(12), o9 = r7(53), s7 = r7(24), a5 = r7(54), c8 = [].push, l7 = function(e6) {
    var t4 = 1 == e6, r8 = 2 == e6, l8 = 3 == e6, h8 = 4 == e6, u8 = 6 == e6, f6 = 5 == e6 || u8;
    return function(_6, d8, p10, v10) {
      for (var y6, g9, b9 = o9(_6), m10 = n11(b9), S6 = i8(d8, p10, 3), C9 = s7(m10.length), w5 = 0, E5 = v10 || a5, L2 = t4 ? E5(_6, C9) : r8 ? E5(_6, 0) : void 0; C9 > w5; w5++)
        if ((f6 || w5 in m10) && (g9 = S6(y6 = m10[w5], w5, b9), e6)) {
          if (t4)
            L2[w5] = g9;
          else if (g9)
            switch (e6) {
              case 3:
                return true;
              case 5:
                return y6;
              case 6:
                return w5;
              case 2:
                c8.call(L2, y6);
            }
          else if (h8)
            return false;
        }
      return u8 ? -1 : l8 || h8 ? h8 : L2;
    };
  };
  e5.exports = { forEach: l7(0), map: l7(1), filter: l7(2), some: l7(3), every: l7(4), find: l7(5), findIndex: l7(6) };
}, function(e5, t3, r7) {
  var i8 = r7(52);
  e5.exports = function(e6, t4, r8) {
    if (i8(e6), void 0 === t4)
      return e6;
    switch (r8) {
      case 0:
        return function() {
          return e6.call(t4);
        };
      case 1:
        return function(r9) {
          return e6.call(t4, r9);
        };
      case 2:
        return function(r9, i9) {
          return e6.call(t4, r9, i9);
        };
      case 3:
        return function(r9, i9, n11) {
          return e6.call(t4, r9, i9, n11);
        };
    }
    return function() {
      return e6.apply(t4, arguments);
    };
  };
}, function(e5, t3) {
  e5.exports = function(e6) {
    if ("function" != typeof e6)
      throw TypeError(String(e6) + " is not a function");
    return e6;
  };
}, function(e5, t3, r7) {
  var i8 = r7(14);
  e5.exports = function(e6) {
    return Object(i8(e6));
  };
}, function(e5, t3, r7) {
  var i8 = r7(5), n11 = r7(55), o9 = r7(56)("species");
  e5.exports = function(e6, t4) {
    var r8;
    return n11(e6) && ("function" != typeof (r8 = e6.constructor) || r8 !== Array && !n11(r8.prototype) ? i8(r8) && null === (r8 = r8[o9]) && (r8 = void 0) : r8 = void 0), new (void 0 === r8 ? Array : r8)(0 === t4 ? 0 : t4);
  };
}, function(e5, t3, r7) {
  var i8 = r7(13);
  e5.exports = Array.isArray || function(e6) {
    return "Array" == i8(e6);
  };
}, function(e5, t3, r7) {
  var i8 = r7(1), n11 = r7(21), o9 = r7(3), s7 = r7(22), a5 = r7(27), c8 = r7(57), l7 = n11("wks"), h8 = i8.Symbol, u8 = c8 ? h8 : h8 && h8.withoutSetter || s7;
  e5.exports = function(e6) {
    return o9(l7, e6) || (a5 && o9(h8, e6) ? l7[e6] = h8[e6] : l7[e6] = u8("Symbol." + e6)), l7[e6];
  };
}, function(e5, t3, r7) {
  var i8 = r7(27);
  e5.exports = i8 && !Symbol.sham && "symbol" == typeof Symbol.iterator;
}, function(e5, t3, r7) {
  "use strict";
  var i8 = r7(2);
  e5.exports = function(e6, t4) {
    var r8 = [][e6];
    return !!r8 && i8(function() {
      r8.call(null, t4 || function() {
        throw 1;
      }, 1);
    });
  };
}, function(e5, t3, r7) {
  var i8 = r7(4), n11 = r7(2), o9 = r7(3), s7 = Object.defineProperty, a5 = {}, c8 = function(e6) {
    throw e6;
  };
  e5.exports = function(e6, t4) {
    if (o9(a5, e6))
      return a5[e6];
    t4 || (t4 = {});
    var r8 = [][e6], l7 = !!o9(t4, "ACCESSORS") && t4.ACCESSORS, h8 = o9(t4, 0) ? t4[0] : c8, u8 = o9(t4, 1) ? t4[1] : void 0;
    return a5[e6] = !!r8 && !n11(function() {
      if (l7 && !i8)
        return true;
      var e7 = { length: -1 };
      l7 ? s7(e7, 1, { enumerable: true, get: c8 }) : e7[1] = 1, r8.call(e7, h8, u8);
    });
  };
}, function(e5, t3, r7) {
  var i8 = r7(1), n11 = r7(61), o9 = r7(26), s7 = r7(6);
  for (var a5 in n11) {
    var c8 = i8[a5], l7 = c8 && c8.prototype;
    if (l7 && l7.forEach !== o9)
      try {
        s7(l7, "forEach", o9);
      } catch (e6) {
        l7.forEach = o9;
      }
  }
}, function(e5, t3) {
  e5.exports = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 };
}, function(e5, t3, r7) {
  "use strict";
  var i8 = r7(63), n11 = "function" == typeof Symbol && Symbol.for, o9 = n11 ? Symbol.for("react.element") : 60103, s7 = n11 ? Symbol.for("react.portal") : 60106, a5 = n11 ? Symbol.for("react.fragment") : 60107, c8 = n11 ? Symbol.for("react.strict_mode") : 60108, l7 = n11 ? Symbol.for("react.profiler") : 60114, h8 = n11 ? Symbol.for("react.provider") : 60109, u8 = n11 ? Symbol.for("react.context") : 60110, f6 = n11 ? Symbol.for("react.forward_ref") : 60112, _6 = n11 ? Symbol.for("react.suspense") : 60113, d8 = n11 ? Symbol.for("react.memo") : 60115, p10 = n11 ? Symbol.for("react.lazy") : 60116, v10 = "function" == typeof Symbol && Symbol.iterator;
  function y6(e6) {
    for (var t4 = "https://reactjs.org/docs/error-decoder.html?invariant=" + e6, r8 = 1; r8 < arguments.length; r8++)
      t4 += "&args[]=" + encodeURIComponent(arguments[r8]);
    return "Minified React error #" + e6 + "; visit " + t4 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  var g9 = { isMounted: function() {
    return false;
  }, enqueueForceUpdate: function() {
  }, enqueueReplaceState: function() {
  }, enqueueSetState: function() {
  } }, b9 = {};
  function m10(e6, t4, r8) {
    this.props = e6, this.context = t4, this.refs = b9, this.updater = r8 || g9;
  }
  function S6() {
  }
  function C9(e6, t4, r8) {
    this.props = e6, this.context = t4, this.refs = b9, this.updater = r8 || g9;
  }
  m10.prototype.isReactComponent = {}, m10.prototype.setState = function(e6, t4) {
    if ("object" != typeof e6 && "function" != typeof e6 && null != e6)
      throw Error(y6(85));
    this.updater.enqueueSetState(this, e6, t4, "setState");
  }, m10.prototype.forceUpdate = function(e6) {
    this.updater.enqueueForceUpdate(this, e6, "forceUpdate");
  }, S6.prototype = m10.prototype;
  var w5 = C9.prototype = new S6();
  w5.constructor = C9, i8(w5, m10.prototype), w5.isPureReactComponent = true;
  var E5 = { current: null }, L2 = Object.prototype.hasOwnProperty, x6 = { key: true, ref: true, __self: true, __source: true };
  function A6(e6, t4, r8) {
    var i9, n12 = {}, s8 = null, a6 = null;
    if (null != t4)
      for (i9 in void 0 !== t4.ref && (a6 = t4.ref), void 0 !== t4.key && (s8 = "" + t4.key), t4)
        L2.call(t4, i9) && !x6.hasOwnProperty(i9) && (n12[i9] = t4[i9]);
    var c9 = arguments.length - 2;
    if (1 === c9)
      n12.children = r8;
    else if (1 < c9) {
      for (var l8 = Array(c9), h9 = 0; h9 < c9; h9++)
        l8[h9] = arguments[h9 + 2];
      n12.children = l8;
    }
    if (e6 && e6.defaultProps)
      for (i9 in c9 = e6.defaultProps)
        void 0 === n12[i9] && (n12[i9] = c9[i9]);
    return { $$typeof: o9, type: e6, key: s8, ref: a6, props: n12, _owner: E5.current };
  }
  function R6(e6) {
    return "object" == typeof e6 && null !== e6 && e6.$$typeof === o9;
  }
  var k3 = /\/+/g, T9 = [];
  function O5(e6, t4, r8, i9) {
    if (T9.length) {
      var n12 = T9.pop();
      return n12.result = e6, n12.keyPrefix = t4, n12.func = r8, n12.context = i9, n12.count = 0, n12;
    }
    return { result: e6, keyPrefix: t4, func: r8, context: i9, count: 0 };
  }
  function D7(e6) {
    e6.result = null, e6.keyPrefix = null, e6.func = null, e6.context = null, e6.count = 0, 10 > T9.length && T9.push(e6);
  }
  function M3(e6, t4, r8) {
    return null == e6 ? 0 : function e7(t5, r9, i9, n12) {
      var a6 = typeof t5;
      "undefined" !== a6 && "boolean" !== a6 || (t5 = null);
      var c9 = false;
      if (null === t5)
        c9 = true;
      else
        switch (a6) {
          case "string":
          case "number":
            c9 = true;
            break;
          case "object":
            switch (t5.$$typeof) {
              case o9:
              case s7:
                c9 = true;
            }
        }
      if (c9)
        return i9(n12, t5, "" === r9 ? "." + P4(t5, 0) : r9), 1;
      if (c9 = 0, r9 = "" === r9 ? "." : r9 + ":", Array.isArray(t5))
        for (var l8 = 0; l8 < t5.length; l8++) {
          var h9 = r9 + P4(a6 = t5[l8], l8);
          c9 += e7(a6, h9, i9, n12);
        }
      else if (null === t5 || "object" != typeof t5 ? h9 = null : h9 = "function" == typeof (h9 = v10 && t5[v10] || t5["@@iterator"]) ? h9 : null, "function" == typeof h9)
        for (t5 = h9.call(t5), l8 = 0; !(a6 = t5.next()).done; )
          c9 += e7(a6 = a6.value, h9 = r9 + P4(a6, l8++), i9, n12);
      else if ("object" === a6)
        throw i9 = "" + t5, Error(y6(31, "[object Object]" === i9 ? "object with keys {" + Object.keys(t5).join(", ") + "}" : i9, ""));
      return c9;
    }(e6, "", t4, r8);
  }
  function P4(e6, t4) {
    return "object" == typeof e6 && null !== e6 && null != e6.key ? function(e7) {
      var t5 = { "=": "=0", ":": "=2" };
      return "$" + ("" + e7).replace(/[=:]/g, function(e8) {
        return t5[e8];
      });
    }(e6.key) : t4.toString(36);
  }
  function H5(e6, t4) {
    e6.func.call(e6.context, t4, e6.count++);
  }
  function I5(e6, t4, r8) {
    var i9 = e6.result, n12 = e6.keyPrefix;
    e6 = e6.func.call(e6.context, t4, e6.count++), Array.isArray(e6) ? B7(e6, i9, r8, function(e7) {
      return e7;
    }) : null != e6 && (R6(e6) && (e6 = function(e7, t5) {
      return { $$typeof: o9, type: e7.type, key: t5, ref: e7.ref, props: e7.props, _owner: e7._owner };
    }(e6, n12 + (!e6.key || t4 && t4.key === e6.key ? "" : ("" + e6.key).replace(k3, "$&/") + "/") + r8)), i9.push(e6));
  }
  function B7(e6, t4, r8, i9, n12) {
    var o10 = "";
    null != r8 && (o10 = ("" + r8).replace(k3, "$&/") + "/"), M3(e6, I5, t4 = O5(t4, o10, i9, n12)), D7(t4);
  }
  var F5 = { current: null };
  function j5() {
    var e6 = F5.current;
    if (null === e6)
      throw Error(y6(321));
    return e6;
  }
  var W4 = { ReactCurrentDispatcher: F5, ReactCurrentBatchConfig: { suspense: null }, ReactCurrentOwner: E5, IsSomeRendererActing: { current: false }, assign: i8 };
  t3.Children = { map: function(e6, t4, r8) {
    if (null == e6)
      return e6;
    var i9 = [];
    return B7(e6, i9, null, t4, r8), i9;
  }, forEach: function(e6, t4, r8) {
    if (null == e6)
      return e6;
    M3(e6, H5, t4 = O5(null, null, t4, r8)), D7(t4);
  }, count: function(e6) {
    return M3(e6, function() {
      return null;
    }, null);
  }, toArray: function(e6) {
    var t4 = [];
    return B7(e6, t4, null, function(e7) {
      return e7;
    }), t4;
  }, only: function(e6) {
    if (!R6(e6))
      throw Error(y6(143));
    return e6;
  } }, t3.Component = m10, t3.Fragment = a5, t3.Profiler = l7, t3.PureComponent = C9, t3.StrictMode = c8, t3.Suspense = _6, t3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W4, t3.cloneElement = function(e6, t4, r8) {
    if (null == e6)
      throw Error(y6(267, e6));
    var n12 = i8({}, e6.props), s8 = e6.key, a6 = e6.ref, c9 = e6._owner;
    if (null != t4) {
      if (void 0 !== t4.ref && (a6 = t4.ref, c9 = E5.current), void 0 !== t4.key && (s8 = "" + t4.key), e6.type && e6.type.defaultProps)
        var l8 = e6.type.defaultProps;
      for (h9 in t4)
        L2.call(t4, h9) && !x6.hasOwnProperty(h9) && (n12[h9] = void 0 === t4[h9] && void 0 !== l8 ? l8[h9] : t4[h9]);
    }
    var h9 = arguments.length - 2;
    if (1 === h9)
      n12.children = r8;
    else if (1 < h9) {
      l8 = Array(h9);
      for (var u9 = 0; u9 < h9; u9++)
        l8[u9] = arguments[u9 + 2];
      n12.children = l8;
    }
    return { $$typeof: o9, type: e6.type, key: s8, ref: a6, props: n12, _owner: c9 };
  }, t3.createContext = function(e6, t4) {
    return void 0 === t4 && (t4 = null), (e6 = { $$typeof: u8, _calculateChangedBits: t4, _currentValue: e6, _currentValue2: e6, _threadCount: 0, Provider: null, Consumer: null }).Provider = { $$typeof: h8, _context: e6 }, e6.Consumer = e6;
  }, t3.createElement = A6, t3.createFactory = function(e6) {
    var t4 = A6.bind(null, e6);
    return t4.type = e6, t4;
  }, t3.createRef = function() {
    return { current: null };
  }, t3.forwardRef = function(e6) {
    return { $$typeof: f6, render: e6 };
  }, t3.isValidElement = R6, t3.lazy = function(e6) {
    return { $$typeof: p10, _ctor: e6, _status: -1, _result: null };
  }, t3.memo = function(e6, t4) {
    return { $$typeof: d8, type: e6, compare: void 0 === t4 ? null : t4 };
  }, t3.useCallback = function(e6, t4) {
    return j5().useCallback(e6, t4);
  }, t3.useContext = function(e6, t4) {
    return j5().useContext(e6, t4);
  }, t3.useDebugValue = function() {
  }, t3.useEffect = function(e6, t4) {
    return j5().useEffect(e6, t4);
  }, t3.useImperativeHandle = function(e6, t4, r8) {
    return j5().useImperativeHandle(e6, t4, r8);
  }, t3.useLayoutEffect = function(e6, t4) {
    return j5().useLayoutEffect(e6, t4);
  }, t3.useMemo = function(e6, t4) {
    return j5().useMemo(e6, t4);
  }, t3.useReducer = function(e6, t4, r8) {
    return j5().useReducer(e6, t4, r8);
  }, t3.useRef = function(e6) {
    return j5().useRef(e6);
  }, t3.useState = function(e6) {
    return j5().useState(e6);
  }, t3.version = "16.13.1";
}, function(e5, t3, r7) {
  "use strict";
  var i8 = Object.getOwnPropertySymbols, n11 = Object.prototype.hasOwnProperty, o9 = Object.prototype.propertyIsEnumerable;
  function s7(e6) {
    if (null == e6)
      throw new TypeError("Object.assign cannot be called with null or undefined");
    return Object(e6);
  }
  e5.exports = function() {
    try {
      if (!Object.assign)
        return false;
      var e6 = new String("abc");
      if (e6[5] = "de", "5" === Object.getOwnPropertyNames(e6)[0])
        return false;
      for (var t4 = {}, r8 = 0; r8 < 10; r8++)
        t4["_" + String.fromCharCode(r8)] = r8;
      if ("0123456789" !== Object.getOwnPropertyNames(t4).map(function(e7) {
        return t4[e7];
      }).join(""))
        return false;
      var i9 = {};
      return "abcdefghijklmnopqrst".split("").forEach(function(e7) {
        i9[e7] = e7;
      }), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, i9)).join("");
    } catch (e7) {
      return false;
    }
  }() ? Object.assign : function(e6, t4) {
    for (var r8, a5, c8 = s7(e6), l7 = 1; l7 < arguments.length; l7++) {
      for (var h8 in r8 = Object(arguments[l7]))
        n11.call(r8, h8) && (c8[h8] = r8[h8]);
      if (i8) {
        a5 = i8(r8);
        for (var u8 = 0; u8 < a5.length; u8++)
          o9.call(r8, a5[u8]) && (c8[a5[u8]] = r8[a5[u8]]);
      }
    }
    return c8;
  };
}, function(e5, t3, r7) {
  "use strict";
  var i8 = r7(65);
  function n11() {
  }
  function o9() {
  }
  o9.resetWarningCache = n11, e5.exports = function() {
    function e6(e7, t5, r9, n12, o10, s7) {
      if (s7 !== i8) {
        var a5 = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
        throw a5.name = "Invariant Violation", a5;
      }
    }
    function t4() {
      return e6;
    }
    e6.isRequired = e6;
    var r8 = { array: e6, bool: e6, func: e6, number: e6, object: e6, string: e6, symbol: e6, any: e6, arrayOf: t4, element: e6, elementType: e6, instanceOf: t4, node: e6, objectOf: t4, oneOf: t4, oneOfType: t4, shape: t4, exact: t4, checkPropTypes: o9, resetWarningCache: n11 };
    return r8.PropTypes = r8, r8;
  };
}, function(e5, t3, r7) {
  "use strict";
  e5.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
}, function(e5, t3, r7) {
  var i8 = r7(67), n11 = r7(68);
  "string" == typeof (n11 = n11.__esModule ? n11.default : n11) && (n11 = [[e5.i, n11, ""]]);
  var o9 = { insert: "head", singleton: false };
  i8(n11, o9);
  e5.exports = n11.locals || {};
}, function(e5, t3, r7) {
  "use strict";
  var i8, n11 = function() {
    return void 0 === i8 && (i8 = Boolean(window && document && document.all && !window.atob)), i8;
  }, o9 = function() {
    var e6 = {};
    return function(t4) {
      if (void 0 === e6[t4]) {
        var r8 = document.querySelector(t4);
        if (window.HTMLIFrameElement && r8 instanceof window.HTMLIFrameElement)
          try {
            r8 = r8.contentDocument.head;
          } catch (e7) {
            r8 = null;
          }
        e6[t4] = r8;
      }
      return e6[t4];
    };
  }(), s7 = [];
  function a5(e6) {
    for (var t4 = -1, r8 = 0; r8 < s7.length; r8++)
      if (s7[r8].identifier === e6) {
        t4 = r8;
        break;
      }
    return t4;
  }
  function c8(e6, t4) {
    for (var r8 = {}, i9 = [], n12 = 0; n12 < e6.length; n12++) {
      var o10 = e6[n12], c9 = t4.base ? o10[0] + t4.base : o10[0], l8 = r8[c9] || 0, h9 = "".concat(c9, " ").concat(l8);
      r8[c9] = l8 + 1;
      var u9 = a5(h9), f7 = { css: o10[1], media: o10[2], sourceMap: o10[3] };
      -1 !== u9 ? (s7[u9].references++, s7[u9].updater(f7)) : s7.push({ identifier: h9, updater: v10(f7, t4), references: 1 }), i9.push(h9);
    }
    return i9;
  }
  function l7(e6) {
    var t4 = document.createElement("style"), i9 = e6.attributes || {};
    if (void 0 === i9.nonce) {
      var n12 = r7.nc;
      n12 && (i9.nonce = n12);
    }
    if (Object.keys(i9).forEach(function(e7) {
      t4.setAttribute(e7, i9[e7]);
    }), "function" == typeof e6.insert)
      e6.insert(t4);
    else {
      var s8 = o9(e6.insert || "head");
      if (!s8)
        throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
      s8.appendChild(t4);
    }
    return t4;
  }
  var h8, u8 = (h8 = [], function(e6, t4) {
    return h8[e6] = t4, h8.filter(Boolean).join("\n");
  });
  function f6(e6, t4, r8, i9) {
    var n12 = r8 ? "" : i9.media ? "@media ".concat(i9.media, " {").concat(i9.css, "}") : i9.css;
    if (e6.styleSheet)
      e6.styleSheet.cssText = u8(t4, n12);
    else {
      var o10 = document.createTextNode(n12), s8 = e6.childNodes;
      s8[t4] && e6.removeChild(s8[t4]), s8.length ? e6.insertBefore(o10, s8[t4]) : e6.appendChild(o10);
    }
  }
  function _6(e6, t4, r8) {
    var i9 = r8.css, n12 = r8.media, o10 = r8.sourceMap;
    if (n12 ? e6.setAttribute("media", n12) : e6.removeAttribute("media"), o10 && btoa && (i9 += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o10)))), " */")), e6.styleSheet)
      e6.styleSheet.cssText = i9;
    else {
      for (; e6.firstChild; )
        e6.removeChild(e6.firstChild);
      e6.appendChild(document.createTextNode(i9));
    }
  }
  var d8 = null, p10 = 0;
  function v10(e6, t4) {
    var r8, i9, n12;
    if (t4.singleton) {
      var o10 = p10++;
      r8 = d8 || (d8 = l7(t4)), i9 = f6.bind(null, r8, o10, false), n12 = f6.bind(null, r8, o10, true);
    } else
      r8 = l7(t4), i9 = _6.bind(null, r8, t4), n12 = function() {
        !function(e7) {
          if (null === e7.parentNode)
            return false;
          e7.parentNode.removeChild(e7);
        }(r8);
      };
    return i9(e6), function(t5) {
      if (t5) {
        if (t5.css === e6.css && t5.media === e6.media && t5.sourceMap === e6.sourceMap)
          return;
        i9(e6 = t5);
      } else
        n12();
    };
  }
  e5.exports = function(e6, t4) {
    (t4 = t4 || {}).singleton || "boolean" == typeof t4.singleton || (t4.singleton = n11());
    var r8 = c8(e6 = e6 || [], t4);
    return function(e7) {
      if (e7 = e7 || [], "[object Array]" === Object.prototype.toString.call(e7)) {
        for (var i9 = 0; i9 < r8.length; i9++) {
          var n12 = a5(r8[i9]);
          s7[n12].references--;
        }
        for (var o10 = c8(e7, t4), l8 = 0; l8 < r8.length; l8++) {
          var h9 = a5(r8[l8]);
          0 === s7[h9].references && (s7[h9].updater(), s7.splice(h9, 1));
        }
        r8 = o10;
      }
    };
  };
}, function(e5, t3, r7) {
  (t3 = r7(69)(false)).push([e5.i, `/**
 * Copyright (c) 2014 The xterm.js authors. All rights reserved.
 * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)
 * https://github.com/chjj/term.js
 * @license MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Originally forked from (with the author's permission):
 *   Fabrice Bellard's javascript vt100 for jslinux:
 *   http://bellard.org/jslinux/
 *   Copyright (c) 2011 Fabrice Bellard
 *   The original design remains. The terminal itself
 *   has been extended to include xterm CSI codes, among
 *   other features.
 */

/**
 *  Default styles for xterm.js
 */

.xterm {
    font-feature-settings: "liga" 0;
    position: relative;
    user-select: none;
    -ms-user-select: none;
    -webkit-user-select: none;
}

.xterm.focus,
.xterm:focus {
    outline: none;
}

.xterm .xterm-helpers {
    position: absolute;
    top: 0;
    /**
     * The z-index of the helpers must be higher than the canvases in order for
     * IMEs to appear on top.
     */
    z-index: 5;
}

.xterm .xterm-helper-textarea {
    /*
     * HACK: to fix IE's blinking cursor
     * Move textarea out of the screen to the far left, so that the cursor is not visible.
     */
    position: absolute;
    opacity: 0;
    left: -9999em;
    top: 0;
    width: 0;
    height: 0;
    z-index: -5;
    /** Prevent wrapping so the IME appears against the textarea at the correct position */
    white-space: nowrap;
    overflow: hidden;
    resize: none;
}

.xterm .composition-view {
    /* TODO: Composition position got messed up somewhere */
    background: #000;
    color: #FFF;
    display: none;
    position: absolute;
    white-space: nowrap;
    z-index: 1;
}

.xterm .composition-view.active {
    display: block;
}

.xterm .xterm-viewport {
    /* On OS X this is required in order for the scroll bar to appear fully opaque */
    background-color: #000;
    overflow-y: scroll;
    cursor: default;
    position: absolute;
    right: 0;
    left: 0;
    top: 0;
    bottom: 0;
}

.xterm .xterm-screen {
    position: relative;
}

.xterm .xterm-screen canvas {
    position: absolute;
    left: 0;
    top: 0;
}

.xterm .xterm-scroll-area {
    visibility: hidden;
}

.xterm-char-measure-element {
    display: inline-block;
    visibility: hidden;
    position: absolute;
    top: 0;
    left: -9999em;
    line-height: normal;
}

.xterm {
    cursor: text;
}

.xterm.enable-mouse-events {
    /* When mouse events are enabled (eg. tmux), revert to the standard pointer cursor */
    cursor: default;
}

.xterm.xterm-cursor-pointer {
    cursor: pointer;
}

.xterm.column-select.focus {
    /* Column selection mode */
    cursor: crosshair;
}

.xterm .xterm-accessibility,
.xterm .xterm-message {
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    right: 0;
    z-index: 10;
    color: transparent;
}

.xterm .live-region {
    position: absolute;
    left: -9999px;
    width: 1px;
    height: 1px;
    overflow: hidden;
}

.xterm-dim {
    opacity: 0.5;
}

.xterm-underline {
    text-decoration: underline;
}
`, ""]), e5.exports = t3;
}, function(e5, t3, r7) {
  "use strict";
  e5.exports = function(e6) {
    var t4 = [];
    return t4.toString = function() {
      return this.map(function(t5) {
        var r8 = function(e7, t6) {
          var r9 = e7[1] || "", i8 = e7[3];
          if (!i8)
            return r9;
          if (t6 && "function" == typeof btoa) {
            var n11 = (s7 = i8, a5 = btoa(unescape(encodeURIComponent(JSON.stringify(s7)))), c8 = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a5), "/*# ".concat(c8, " */")), o9 = i8.sources.map(function(e8) {
              return "/*# sourceURL=".concat(i8.sourceRoot || "").concat(e8, " */");
            });
            return [r9].concat(o9).concat([n11]).join("\n");
          }
          var s7, a5, c8;
          return [r9].join("\n");
        }(t5, e6);
        return t5[2] ? "@media ".concat(t5[2], " {").concat(r8, "}") : r8;
      }).join("");
    }, t4.i = function(e7, r8, i8) {
      "string" == typeof e7 && (e7 = [[null, e7, ""]]);
      var n11 = {};
      if (i8)
        for (var o9 = 0; o9 < this.length; o9++) {
          var s7 = this[o9][0];
          null != s7 && (n11[s7] = true);
        }
      for (var a5 = 0; a5 < e7.length; a5++) {
        var c8 = [].concat(e7[a5]);
        i8 && n11[c8[0]] || (r8 && (c8[2] ? c8[2] = "".concat(r8, " and ").concat(c8[2]) : c8[2] = r8), t4.push(c8));
      }
    }, t4;
  };
}, function(e5, t3, r7) {
  "use strict";
  r7.r(t3), r7.d(t3, "XTerm", function() {
    return l7;
  });
  r7(29), r7(60);
  var i8, n11 = r7(7), o9 = r7(0), s7 = r7.n(o9), a5 = (r7(66), r7(28)), c8 = (i8 = function(e6, t4) {
    return (i8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e7, t5) {
      e7.__proto__ = t5;
    } || function(e7, t5) {
      for (var r8 in t5)
        t5.hasOwnProperty(r8) && (e7[r8] = t5[r8]);
    })(e6, t4);
  }, function(e6, t4) {
    function r8() {
      this.constructor = e6;
    }
    i8(e6, t4), e6.prototype = null === t4 ? Object.create(t4) : (r8.prototype = t4.prototype, new r8());
  }), l7 = function(e6) {
    function t4(t5) {
      var r8 = e6.call(this, t5) || this;
      return r8.terminalRef = n11.createRef(), r8.onData = r8.onData.bind(r8), r8.onCursorMove = r8.onCursorMove.bind(r8), r8.onKey = r8.onKey.bind(r8), r8.onBinary = r8.onBinary.bind(r8), r8.onLineFeed = r8.onLineFeed.bind(r8), r8.onScroll = r8.onScroll.bind(r8), r8.onSelectionChange = r8.onSelectionChange.bind(r8), r8.onRender = r8.onRender.bind(r8), r8.onResize = r8.onResize.bind(r8), r8.onTitleChange = r8.onTitleChange.bind(r8), r8.setupTerminal(), r8;
    }
    return c8(t4, e6), t4.prototype.setupTerminal = function() {
      var e7 = this;
      this.terminal = new a5.Terminal(this.props.options), this.props.addons && this.props.addons.forEach(function(t5) {
        e7.terminal.loadAddon(t5);
      }), this.terminal.onBinary(this.onBinary), this.terminal.onCursorMove(this.onCursorMove), this.terminal.onData(this.onData), this.terminal.onKey(this.onKey), this.terminal.onLineFeed(this.onLineFeed), this.terminal.onScroll(this.onScroll), this.terminal.onSelectionChange(this.onSelectionChange), this.terminal.onRender(this.onRender), this.terminal.onResize(this.onResize), this.terminal.onTitleChange(this.onTitleChange), this.props.customKeyEventHandler && this.terminal.attachCustomKeyEventHandler(this.props.customKeyEventHandler);
    }, t4.prototype.componentDidMount = function() {
      this.terminalRef.current && this.terminal.open(this.terminalRef.current);
    }, t4.prototype.componentWillUnmount = function() {
      this.terminal.dispose();
    }, t4.prototype.onBinary = function(e7) {
      this.props.onBinary && this.props.onBinary(e7);
    }, t4.prototype.onCursorMove = function() {
      this.props.onCursorMove && this.props.onCursorMove();
    }, t4.prototype.onData = function(e7) {
      this.props.onData && this.props.onData(e7);
    }, t4.prototype.onKey = function(e7) {
      this.props.onKey && this.props.onKey(e7);
    }, t4.prototype.onLineFeed = function() {
      this.props.onLineFeed && this.props.onLineFeed();
    }, t4.prototype.onScroll = function(e7) {
      this.props.onScroll && this.props.onScroll(e7);
    }, t4.prototype.onSelectionChange = function() {
      this.props.onSelectionChange && this.props.onSelectionChange();
    }, t4.prototype.onRender = function(e7) {
      this.props.onRender && this.props.onRender(e7);
    }, t4.prototype.onResize = function(e7) {
      this.props.onResize && this.props.onResize(e7);
    }, t4.prototype.onTitleChange = function(e7) {
      this.props.onTitleChange && this.props.onTitleChange(e7);
    }, t4.prototype.render = function() {
      return n11.createElement("div", { className: this.props.className, ref: this.terminalRef });
    }, t4.propTypes = { className: s7.a.string, options: s7.a.object, addons: s7.a.array, onBinary: s7.a.func, onCursorMove: s7.a.func, onData: s7.a.func, onKey: s7.a.func, onLineFeed: s7.a.func, onScroll: s7.a.func, onSelectionChange: s7.a.func, onRender: s7.a.func, onResize: s7.a.func, onTitleChange: s7.a.func, customKeyEventHandler: s7.a.func }, t4;
  }(n11.Component);
}]);
var _LIB$XTerm = LIB.XTerm;

// src/toolbar/tabs/XTermTab.tsx
function XTermTab() {
  return /* @__PURE__ */ import_react8.default.createElement(_LIB$XTerm, null);
}

// src/toolbar/tabs.tsx
var tabs = {};
function TabItem(label, name, element, handleClick, active) {
  let click = (e5) => {
    handleClick(e5, name);
  };
  tabs[name] = element;
  if (active == name) {
    return /* @__PURE__ */ import_react9.default.createElement("li", { className: "Toolbar-tab-item Toolbar-tab-item-active", onClick: click }, label);
  } else {
    return /* @__PURE__ */ import_react9.default.createElement("li", { className: "Toolbar-tab-item", onClick: click }, label);
  }
}
function ToolbarTabs() {
  const [active, setActive] = (0, import_react9.useState)("db");
  function handleClick(_6, name) {
    setActive(name);
  }
  return /* @__PURE__ */ import_react9.default.createElement("div", { className: "Toolbar-tabs" }, /* @__PURE__ */ import_react9.default.createElement("ul", { className: "Toolbar-tab-items" }, TabItem("Local DB", "db", LocalDBTab, handleClick, active), TabItem("SQL", "sql", XTermTab, handleClick, active), TabItem("Shapes", "shapes", ShapesTab, handleClick, active), TabItem("DDLX", "ddlx", DDLXTab, handleClick, active)), /* @__PURE__ */ import_react9.default.createElement("div", { className: "Toolbar-tab-content" }, tabs[active]()));
}

// src/toolbar/index.tsx
function Index2() {
  const [hidden, setHidden] = (0, import_react11.useState)(true);
  function handleClick() {
    setHidden(!hidden);
  }
  if (hidden) {
    return /* @__PURE__ */ import_react10.default.createElement("div", { className: "Toolbar" }, /* @__PURE__ */ import_react10.default.createElement("header", { className: "Toolbar-header Toolbar-header-hidden" }, /* @__PURE__ */ import_react10.default.createElement("img", { src: logo_default2, className: "Toolbar-logo", alt: "logo" }), /* @__PURE__ */ import_react10.default.createElement("span", { className: "nav-text text-3xl" }, "Electric Tools"), /* @__PURE__ */ import_react10.default.createElement("button", { onClick: handleClick }, "SHOW")));
  } else {
    return /* @__PURE__ */ import_react10.default.createElement("div", { className: "Toolbar" }, /* @__PURE__ */ import_react10.default.createElement("header", { className: "Toolbar-header" }, /* @__PURE__ */ import_react10.default.createElement("img", { src: logo_default2, className: "Toolbar-logo", alt: "logo" }), /* @__PURE__ */ import_react10.default.createElement("span", { className: "nav-text" }, "Electric Tools"), /* @__PURE__ */ import_react10.default.createElement("button", { onClick: handleClick }, "HIDE")), /* @__PURE__ */ import_react10.default.createElement(ToolbarTabs, null));
  }
}
function AddToolbar() {
  console.log("AddToolbar");
  const toolbar_div = document.createElement("div");
  toolbar_div.setAttribute("id", "electric-toolbar");
  document.body.appendChild(toolbar_div);
  const toolbar_root = import_client5.default.createRoot(document.getElementById("electric-toolbar"));
  toolbar_root.render(/* @__PURE__ */ import_react10.default.createElement(Index2, null));
}

// src/Example.tsx
var { ElectricProvider, useElectric } = s();
var Example = () => {
  const [electric, setElectric] = (0, import_react12.useState)();
  (0, import_react12.useEffect)(() => {
    let isMounted = true;
    const init = () => __async(void 0, null, function* () {
      const config = {
        auth: {
          token: authToken()
        },
        debug: DEBUG_MODE,
        url: ELECTRIC_URL
      };
      const { tabId } = E2();
      const tabScopedDbName = `electric-${tabId}.db`;
      const conn = yield o3.init(tabScopedDbName, "");
      const electric2 = yield S5(conn, schema, config);
      if (!isMounted) {
        return;
      }
      AddToolbar();
      setElectric(electric2);
    });
    init();
    return () => {
      isMounted = false;
    };
  }, []);
  if (electric === void 0) {
    return null;
  }
  return /* @__PURE__ */ import_react12.default.createElement(ElectricProvider, { db: electric }, /* @__PURE__ */ import_react12.default.createElement(ExampleComponent, null));
};
var ExampleComponent = () => {
  const { db } = useElectric();
  const { results } = q(
    db.items.liveMany()
  );
  (0, import_react12.useEffect)(() => {
    const syncItems = () => __async(void 0, null, function* () {
      const shape = yield db.items.sync();
      yield shape.synced;
    });
    syncItems();
  }, []);
  const addItem = () => __async(void 0, null, function* () {
    yield db.items.create({
      data: {
        value: i2()
      }
    });
  });
  const clearItems = () => __async(void 0, null, function* () {
    yield db.items.deleteMany();
  });
  const items = results != null ? results : [];
  return /* @__PURE__ */ import_react12.default.createElement("div", null, /* @__PURE__ */ import_react12.default.createElement("div", { className: "controls" }, /* @__PURE__ */ import_react12.default.createElement("button", { className: "button", onClick: addItem }, "Add"), /* @__PURE__ */ import_react12.default.createElement("button", { className: "button", onClick: clearItems }, "Clear")), items.map((item, index) => /* @__PURE__ */ import_react12.default.createElement("p", { key: index, className: "item" }, /* @__PURE__ */ import_react12.default.createElement("code", null, item.value))));
};

// src/App.tsx
function App() {
  return /* @__PURE__ */ import_react14.default.createElement("div", { className: "App" }, /* @__PURE__ */ import_react14.default.createElement("header", { className: "App-header" }, "TOOLBAR DEV PAGE", /* @__PURE__ */ import_react14.default.createElement("img", { src: logo_default, className: "App-logo", alt: "logo" }), /* @__PURE__ */ import_react14.default.createElement(Example, null)));
}

// src/index.tsx
var root = import_client7.default.createRoot(document.getElementById("root"));
root.render(/* @__PURE__ */ import_react15.default.createElement(App, null));
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

base-64/base64.js:
  (*! https://mths.be/base64 v1.0.0 by @mathias | MIT license *)

sqlite-parser/dist/sqlite-parser.js:
  (*!
   * sqlite-parser - v1.0.1
   * @copyright 2015-2017 Code School (http://codeschool.com)
   * @author Nick Wronski <nick@javascript.com>
   *)

long/index.js:
  (**
   * @license
   * Copyright 2009 The Closure Library Authors
   * Copyright 2020 Daniel Wirtz / The long.js Authors.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * SPDX-License-Identifier: Apache-2.0
   *)

xterm-for-react/dist/bundle.js:
  (** @license React v16.13.1
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=index.js.map
